
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000470c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004844  08004844  00014844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004928  08004928  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08004928  08004928  00014928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004930  08004930  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004930  08004930  00014930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08004938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000044  0800497c  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  0800497c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb72  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002292  00000000  00000000  0002fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00031e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00032e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4f4  00000000  00000000  00033cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eaa6  00000000  00000000  0004f1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acd65  00000000  00000000  0005dc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a9ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000407c  00000000  00000000  0010aa40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000044 	.word	0x20000044
 8000154:	00000000 	.word	0x00000000
 8000158:	0800482c 	.word	0x0800482c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000048 	.word	0x20000048
 8000174:	0800482c 	.word	0x0800482c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000498:	f023 0218 	bic.w	r2, r3, #24
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(UartHandle, (uint8_t*)rxBuffer, RXBUFFERSIZE, 100)!= HAL_OK)
 80004fc:	2364      	movs	r3, #100	; 0x64
 80004fe:	2220      	movs	r2, #32
 8000500:	490b      	ldr	r1, [pc, #44]	; (8000530 <HAL_UART_RxCpltCallback+0x3c>)
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f002 f931 	bl	800276a <HAL_UART_Transmit>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <HAL_UART_RxCpltCallback+0x1e>
	  {
		/* Transfer error in transmission process */
		Error_Handler();
 800050e:	f000 f8f2 	bl	80006f6 <Error_Handler>
	  }

	if(HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, RXBUFFERSIZE)== HAL_ERROR)
 8000512:	2220      	movs	r2, #32
 8000514:	4906      	ldr	r1, [pc, #24]	; (8000530 <HAL_UART_RxCpltCallback+0x3c>)
 8000516:	4807      	ldr	r0, [pc, #28]	; (8000534 <HAL_UART_RxCpltCallback+0x40>)
 8000518:	f002 f9ae 	bl	8002878 <HAL_UART_Receive_IT>
 800051c:	4603      	mov	r3, r0
 800051e:	2b01      	cmp	r3, #1
 8000520:	d101      	bne.n	8000526 <HAL_UART_RxCpltCallback+0x32>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 8000522:	f000 f8e8 	bl	80006f6 <Error_Handler>
	}
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000f4 	.word	0x200000f4
 8000534:	20000060 	.word	0x20000060

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f000 f9c0 	bl	80008c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f824 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 f8ca 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000548:	f000 f87a 	bl	8000640 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_UART_Transmit(&huart2, (uint8_t*)HelloWorldMessage, HELLOMESSAGESIZE, 1000)!= HAL_OK)
 800054c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000550:	2236      	movs	r2, #54	; 0x36
 8000552:	490b      	ldr	r1, [pc, #44]	; (8000580 <main+0x48>)
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <main+0x4c>)
 8000556:	f002 f908 	bl	800276a <HAL_UART_Transmit>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <main+0x2c>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 8000560:	f000 f8c9 	bl	80006f6 <Error_Handler>
	}

  if(HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, RXBUFFERSIZE)== HAL_ERROR)
 8000564:	2220      	movs	r2, #32
 8000566:	4908      	ldr	r1, [pc, #32]	; (8000588 <main+0x50>)
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0x4c>)
 800056a:	f002 f985 	bl	8002878 <HAL_UART_Receive_IT>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	d101      	bne.n	8000578 <main+0x40>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 8000574:	f000 f8bf 	bl	80006f6 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fd67 	bl	800104c <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057e:	e7fe      	b.n	800057e <main+0x46>
 8000580:	20000004 	.word	0x20000004
 8000584:	20000060 	.word	0x20000060
 8000588:	200000f4 	.word	0x200000f4

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b09a      	sub	sp, #104	; 0x68
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2248      	movs	r2, #72	; 0x48
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 f93e 	bl	800481c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b2:	f000 fd23 	bl	8000ffc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f7ff ff66 	bl	8000488 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xb0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005c4:	4a1d      	ldr	r2, [pc, #116]	; (800063c <SystemClock_Config+0xb0>)
 80005c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <SystemClock_Config+0xb0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005d8:	2324      	movs	r3, #36	; 0x24
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005dc:	2381      	movs	r3, #129	; 0x81
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e8:	2360      	movs	r3, #96	; 0x60
 80005ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 ffeb 	bl	80015d0 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000600:	f000 f879 	bl	80006f6 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000604:	236f      	movs	r3, #111	; 0x6f
 8000606:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fb55 	bl	8001cd4 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000630:	f000 f861 	bl	80006f6 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3768      	adds	r7, #104	; 0x68
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	58000400 	.word	0x58000400

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000646:	4a24      	ldr	r2, [pc, #144]	; (80006d8 <MX_USART2_UART_Init+0x98>)
 8000648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800064c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000660:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000664:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000668:	220c      	movs	r2, #12
 800066a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 8000686:	2200      	movs	r2, #0
 8000688:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	4812      	ldr	r0, [pc, #72]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800068c:	f002 f81d 	bl	80026ca <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000696:	f000 f82e 	bl	80006f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 800069e:	f003 ffd0 	bl	8004642 <HAL_UARTEx_SetTxFifoThreshold>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80006a8:	f000 f825 	bl	80006f6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 80006b0:	f004 f805 	bl	80046be <HAL_UARTEx_SetRxFifoThreshold>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80006ba:	f000 f81c 	bl	80006f6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART2_UART_Init+0x94>)
 80006c0:	f003 ff87 	bl	80045d2 <HAL_UARTEx_DisableFifoMode>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80006ca:	f000 f814 	bl	80006f6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000060 	.word	0x20000060
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff fee6 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e6:	2004      	movs	r0, #4
 80006e8:	f7ff fee3 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	2002      	movs	r0, #2
 80006ee:	f7ff fee0 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fa:	b672      	cpsid	i
}
 80006fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fe:	e7fe      	b.n	80006fe <Error_Handler+0x8>

08000700 <LL_AHB2_GRP1_EnableClock>:
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800070c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800070e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4313      	orrs	r3, r2
 8000716:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800071c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4013      	ands	r3, r2
 8000722:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000724:	68fb      	ldr	r3, [r7, #12]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800073e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4313      	orrs	r3, r2
 8000746:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4013      	ands	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000754:	68fb      	ldr	r3, [r7, #12]
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	; 0x58
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2238      	movs	r2, #56	; 0x38
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f004 f845 	bl	800481c <memset>
  if(huart->Instance==USART2)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <HAL_UART_MspInit+0x98>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d12e      	bne.n	80007fa <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800079c:	2302      	movs	r3, #2
 800079e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80007a4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fe52 	bl	8002454 <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007b6:	f7ff ff9e 	bl	80006f6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007be:	f7ff ffb7 	bl	8000730 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff ff9c 	bl	8000700 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80007c8:	230c      	movs	r3, #12
 80007ca:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d8:	2307      	movs	r3, #7
 80007da:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 faa9 	bl	8000d3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2025      	movs	r0, #37	; 0x25
 80007f0:	f000 f9b3 	bl	8000b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007f4:	2025      	movs	r0, #37	; 0x25
 80007f6:	f000 f9ca 	bl	8000b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3758      	adds	r7, #88	; 0x58
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40004400 	.word	0x40004400

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler+0x4>

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000812:	e7fe      	b.n	8000812 <HardFault_Handler+0x4>

08000814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <MemManage_Handler+0x4>

0800081a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <BusFault_Handler+0x4>

08000820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <UsageFault_Handler+0x4>

08000826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084e:	f000 f891 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800085c:	4802      	ldr	r0, [pc, #8]	; (8000868 <USART2_IRQHandler+0x10>)
 800085e:	f002 f857 	bl	8002910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000060 	.word	0x20000060

0800086c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800086e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000870:	f7ff fe04 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000876:	490d      	ldr	r1, [pc, #52]	; (80008ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000878:	4a0d      	ldr	r2, [pc, #52]	; (80008b0 <LoopForever+0xe>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800088c:	4c0a      	ldr	r4, [pc, #40]	; (80008b8 <LoopForever+0x16>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800089a:	f003 ff9b 	bl	80047d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089e:	f7ff fe4b 	bl	8000538 <main>

080008a2 <LoopForever>:

LoopForever:
    b LoopForever
 80008a2:	e7fe      	b.n	80008a2 <LoopForever>
  ldr   r0, =_estack
 80008a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80008a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008ac:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80008b0:	08004938 	.word	0x08004938
  ldr r2, =_sbss
 80008b4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80008b8:	20000118 	.word	0x20000118

080008bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008bc:	e7fe      	b.n	80008bc <ADC_IRQHandler>
	...

080008c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ca:	2003      	movs	r0, #3
 80008cc:	f000 f93a 	bl	8000b44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80008d0:	f001 fbe2 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a09      	ldr	r2, [pc, #36]	; (80008fc <HAL_Init+0x3c>)
 80008d8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 f810 	bl	8000900 <HAL_InitTick>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	e001      	b.n	80008f0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008ec:	f7ff ff38 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f0:	79fb      	ldrb	r3, [r7, #7]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000000 	.word	0x20000000

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_InitTick+0x6c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d024      	beq.n	800095e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000914:	f001 fbc0 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 8000918:	4602      	mov	r2, r0
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_InitTick+0x6c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4619      	mov	r1, r3
 8000920:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000924:	fbb3 f3f1 	udiv	r3, r3, r1
 8000928:	fbb2 f3f3 	udiv	r3, r2, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f000 f93c 	bl	8000baa <HAL_SYSTICK_Config>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d10f      	bne.n	8000958 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b0f      	cmp	r3, #15
 800093c:	d809      	bhi.n	8000952 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093e:	2200      	movs	r2, #0
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000946:	f000 f908 	bl	8000b5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800094a:	4a09      	ldr	r2, [pc, #36]	; (8000970 <HAL_InitTick+0x70>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6013      	str	r3, [r2, #0]
 8000950:	e007      	b.n	8000962 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	73fb      	strb	r3, [r7, #15]
 8000956:	e004      	b.n	8000962 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e001      	b.n	8000962 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000040 	.word	0x20000040
 8000970:	2000003c 	.word	0x2000003c

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <HAL_IncTick+0x1c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	; (8000994 <HAL_IncTick+0x20>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a03      	ldr	r2, [pc, #12]	; (8000994 <HAL_IncTick+0x20>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000040 	.word	0x20000040
 8000994:	20000114 	.word	0x20000114

08000998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b02      	ldr	r3, [pc, #8]	; (80009a8 <HAL_GetTick+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	20000114 	.word	0x20000114

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4906      	ldr	r1, [pc, #24]	; (8000a44 <__NVIC_EnableIRQ+0x34>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100

08000a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	db0a      	blt.n	8000a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <__NVIC_SetPriority+0x4c>)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	0112      	lsls	r2, r2, #4
 8000a68:	b2d2      	uxtb	r2, r2
 8000a6a:	440b      	add	r3, r1
 8000a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a70:	e00a      	b.n	8000a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	4908      	ldr	r1, [pc, #32]	; (8000a98 <__NVIC_SetPriority+0x50>)
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	f003 030f 	and.w	r3, r3, #15
 8000a7e:	3b04      	subs	r3, #4
 8000a80:	0112      	lsls	r2, r2, #4
 8000a82:	b2d2      	uxtb	r2, r2
 8000a84:	440b      	add	r3, r1
 8000a86:	761a      	strb	r2, [r3, #24]
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bc80      	pop	{r7}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f1c3 0307 	rsb	r3, r3, #7
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	bf28      	it	cs
 8000aba:	2304      	movcs	r3, #4
 8000abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	2b06      	cmp	r3, #6
 8000ac4:	d902      	bls.n	8000acc <NVIC_EncodePriority+0x30>
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3b03      	subs	r3, #3
 8000aca:	e000      	b.n	8000ace <NVIC_EncodePriority+0x32>
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43da      	mvns	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa01 f303 	lsl.w	r3, r1, r3
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	4313      	orrs	r3, r2
         );
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3724      	adds	r7, #36	; 0x24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b10:	d301      	bcc.n	8000b16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b12:	2301      	movs	r3, #1
 8000b14:	e00f      	b.n	8000b36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <SysTick_Config+0x40>)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1e:	210f      	movs	r1, #15
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	f7ff ff90 	bl	8000a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <SysTick_Config+0x40>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <SysTick_Config+0x40>)
 8000b30:	2207      	movs	r2, #7
 8000b32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2d 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
 8000b66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff44 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff92 	bl	8000a9c <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff61 	bl	8000a48 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff37 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffa4 	bl	8000b00 <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e04f      	b.n	8000c74 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d008      	beq.n	8000bf2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2204      	movs	r2, #4
 8000be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e040      	b.n	8000c74 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 020e 	bic.w	r2, r2, #14
 8000c00:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f022 0201 	bic.w	r2, r2, #1
 8000c20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f003 021c 	and.w	r2, r3, #28
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	2101      	movs	r1, #1
 8000c30:	fa01 f202 	lsl.w	r2, r1, r2
 8000c34:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00c      	beq.n	8000c62 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c60:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2201      	movs	r2, #1
 8000c66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d005      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e047      	b.n	8000d32 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 020e 	bic.w	r2, r2, #14
 8000cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0201 	bic.w	r2, r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f003 021c 	and.w	r2, r3, #28
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000cee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00c      	beq.n	8000d12 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d10:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	4798      	blx	r3
    }
  }
  return status;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e140      	b.n	8000fce <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8132 	beq.w	8000fc8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <HAL_GPIO_Init+0x40>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 0201 	and.w	r2, r3, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d017      	beq.n	8000e1a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d123      	bne.n	8000e6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	08da      	lsrs	r2, r3, #3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	f003 0307 	and.w	r3, r3, #7
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	6939      	ldr	r1, [r7, #16]
 8000e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0203 	and.w	r2, r3, #3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 808c 	beq.w	8000fc8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000eb0:	4a4e      	ldr	r2, [pc, #312]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	f003 0303 	and.w	r3, r3, #3
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eda:	d00d      	beq.n	8000ef8 <HAL_GPIO_Init+0x1bc>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a44      	ldr	r2, [pc, #272]	; (8000ff0 <HAL_GPIO_Init+0x2b4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d007      	beq.n	8000ef4 <HAL_GPIO_Init+0x1b8>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a43      	ldr	r2, [pc, #268]	; (8000ff4 <HAL_GPIO_Init+0x2b8>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_GPIO_Init+0x1b4>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e004      	b.n	8000efa <HAL_GPIO_Init+0x1be>
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0x1be>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <HAL_GPIO_Init+0x1be>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	f002 0203 	and.w	r2, r2, #3
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	4093      	lsls	r3, r2
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f0a:	4938      	ldr	r1, [pc, #224]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f18:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f3c:	4a2e      	ldr	r2, [pc, #184]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f66:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f72:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fa0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_GPIO_Init+0x2bc>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f47f aeb7 	bne.w	8000d4c <HAL_GPIO_Init+0x10>
  }
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	371c      	adds	r7, #28
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40010000 	.word	0x40010000
 8000ff0:	48000400 	.word	0x48000400
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	58000800 	.word	0x58000800

08000ffc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a03      	ldr	r2, [pc, #12]	; (8001014 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	58000400 	.word	0x58000400

08001018 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <LL_PWR_EnableBootC2+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a03      	ldr	r2, [pc, #12]	; (8001030 <LL_PWR_EnableBootC2+0x18>)
 8001022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	58000400 	.word	0x58000400

08001034 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_PWREx_GetVoltageRange+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	58000400 	.word	0x58000400

0800104c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001054:	f7ff ffe0 	bl	8001018 <LL_PWR_EnableBootC2>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001070:	d101      	bne.n	8001076 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	58000400 	.word	0x58000400

08001084 <LL_RCC_HSE_EnableTcxo>:
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001092:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <LL_RCC_HSE_DisableTcxo>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80010a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80010c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010ce:	d101      	bne.n	80010d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <LL_RCC_HSE_Enable>:
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <LL_RCC_HSE_Disable>:
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80010fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <LL_RCC_HSE_IsReady>:
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800111a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001128:	d101      	bne.n	800112e <LL_RCC_HSE_IsReady+0x18>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <LL_RCC_HSE_IsReady+0x1a>
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <LL_RCC_HSI_Enable>:
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800113c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <LL_RCC_HSI_Disable>:
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001162:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <LL_RCC_HSI_IsReady>:
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001182:	d101      	bne.n	8001188 <LL_RCC_HSI_IsReady+0x18>
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <LL_RCC_HSI_IsReady+0x1a>
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800119a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	061b      	lsls	r3, r3, #24
 80011a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80011be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d101      	bne.n	80011d2 <LL_RCC_LSE_IsReady+0x18>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <LL_RCC_LSE_IsReady+0x1a>
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80011e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b02      	cmp	r3, #2
 800122e:	d101      	bne.n	8001234 <LL_RCC_LSI_IsReady+0x18>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <LL_RCC_LSI_IsReady+0x1a>
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6013      	str	r3, [r2, #0]
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6013      	str	r3, [r2, #0]
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b02      	cmp	r3, #2
 8001286:	d101      	bne.n	800128c <LL_RCC_MSI_IsReady+0x16>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <LL_RCC_MSI_IsReady+0x18>
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d101      	bne.n	80012ac <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80012ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80012ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f023 0203 	bic.w	r2, r3, #3
 800131e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4313      	orrs	r3, r2
 8001326:	608b      	str	r3, [r1, #8]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr

08001332 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f003 030c 	and.w	r3, r3, #12
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800137e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4313      	orrs	r3, r2
 800138a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013a8:	f023 020f 	bic.w	r2, r3, #15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013b4:	4313      	orrs	r3, r2
 80013b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4313      	orrs	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001438:	4618      	mov	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800147a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800148c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800149a:	6013      	str	r3, [r2, #0]
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80014a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014b6:	d101      	bne.n	80014bc <LL_RCC_PLL_IsReady+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_RCC_PLL_IsReady+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80014e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800150e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	f003 0303 	and.w	r3, r3, #3
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001532:	d101      	bne.n	8001538 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001556:	d101      	bne.n	800155c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001558:	2301      	movs	r3, #1
 800155a:	e000      	b.n	800155e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157a:	d101      	bne.n	8001580 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800157c:	2301      	movs	r3, #1
 800157e:	e000      	b.n	8001582 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr

0800158a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800159c:	d101      	bne.n	80015a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015be:	d101      	bne.n	80015c4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e36f      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e2:	f7ff fea6 	bl	8001332 <LL_RCC_GetSysClkSource>
 80015e6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e8:	f7ff ff8f 	bl	800150a <LL_RCC_PLL_GetMainSource>
 80015ec:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80c4 	beq.w	8001784 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x3e>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	2b0c      	cmp	r3, #12
 8001606:	d176      	bne.n	80016f6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d173      	bne.n	80016f6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e353      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0308 	and.w	r3, r3, #8
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x68>
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001636:	e006      	b.n	8001646 <HAL_RCC_OscConfig+0x76>
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001646:	4293      	cmp	r3, r2
 8001648:	d222      	bcs.n	8001690 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fd5a 	bl	8002108 <RCC_SetFlashLatencyFromMSIRange>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e331      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fe2b 	bl	80012e4 <LL_RCC_MSI_SetCalibTrimming>
 800168e:	e021      	b.n	80016d4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe12 	bl	80012e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 fd1f 	bl	8002108 <RCC_SetFlashLatencyFromMSIRange>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e2f6      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80016d4:	f000 fce0 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80016d8:	4603      	mov	r3, r0
 80016da:	4aa7      	ldr	r2, [pc, #668]	; (8001978 <HAL_RCC_OscConfig+0x3a8>)
 80016dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80016de:	4ba7      	ldr	r3, [pc, #668]	; (800197c <HAL_RCC_OscConfig+0x3ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f90c 	bl	8000900 <HAL_InitTick>
 80016e8:	4603      	mov	r3, r0
 80016ea:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d047      	beq.n	8001782 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80016f2:	7cfb      	ldrb	r3, [r7, #19]
 80016f4:	e2e5      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d02c      	beq.n	8001758 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016fe:	f7ff fd9e 	bl	800123e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001702:	f7ff f949 	bl	8000998 <HAL_GetTick>
 8001706:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170a:	f7ff f945 	bl	8000998 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e2d2      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800171c:	f7ff fdab 	bl	8001276 <LL_RCC_MSI_IsReady>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f1      	beq.n	800170a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fdc7 	bl	80012e4 <LL_RCC_MSI_SetCalibTrimming>
 8001756:	e015      	b.n	8001784 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001758:	f7ff fd7f 	bl	800125a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800175c:	f7ff f91c 	bl	8000998 <HAL_GetTick>
 8001760:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001764:	f7ff f918 	bl	8000998 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e2a5      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001776:	f7ff fd7e 	bl	8001276 <LL_RCC_MSI_IsReady>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f1      	bne.n	8001764 <HAL_RCC_OscConfig+0x194>
 8001780:	e000      	b.n	8001784 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001782:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d058      	beq.n	8001842 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	2b08      	cmp	r3, #8
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1d2>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d108      	bne.n	80017ae <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d105      	bne.n	80017ae <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d14b      	bne.n	8001842 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e289      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017c0:	4313      	orrs	r3, r2
 80017c2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017cc:	d102      	bne.n	80017d4 <HAL_RCC_OscConfig+0x204>
 80017ce:	f7ff fc86 	bl	80010de <LL_RCC_HSE_Enable>
 80017d2:	e00d      	b.n	80017f0 <HAL_RCC_OscConfig+0x220>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80017dc:	d104      	bne.n	80017e8 <HAL_RCC_OscConfig+0x218>
 80017de:	f7ff fc51 	bl	8001084 <LL_RCC_HSE_EnableTcxo>
 80017e2:	f7ff fc7c 	bl	80010de <LL_RCC_HSE_Enable>
 80017e6:	e003      	b.n	80017f0 <HAL_RCC_OscConfig+0x220>
 80017e8:	f7ff fc87 	bl	80010fa <LL_RCC_HSE_Disable>
 80017ec:	f7ff fc58 	bl	80010a0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d012      	beq.n	800181e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff f8ce 	bl	8000998 <HAL_GetTick>
 80017fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f8ca 	bl	8000998 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e257      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001812:	f7ff fc80 	bl	8001116 <LL_RCC_HSE_IsReady>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f1      	beq.n	8001800 <HAL_RCC_OscConfig+0x230>
 800181c:	e011      	b.n	8001842 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff f8bb 	bl	8000998 <HAL_GetTick>
 8001822:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001826:	f7ff f8b7 	bl	8000998 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b64      	cmp	r3, #100	; 0x64
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e244      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001838:	f7ff fc6d 	bl	8001116 <LL_RCC_HSE_IsReady>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f1      	bne.n	8001826 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d046      	beq.n	80018dc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x290>
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0c      	cmp	r3, #12
 8001858:	d10e      	bne.n	8001878 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e22a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fc8e 	bl	8001192 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001876:	e031      	b.n	80018dc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d019      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	f7ff fc5a 	bl	8001138 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff f888 	bl	8000998 <HAL_GetTick>
 8001888:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff f884 	bl	8000998 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e211      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800189e:	f7ff fc67 	bl	8001170 <LL_RCC_HSI_IsReady>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f1      	beq.n	800188c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fc70 	bl	8001192 <LL_RCC_HSI_SetCalibTrimming>
 80018b2:	e013      	b.n	80018dc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b4:	f7ff fc4e 	bl	8001154 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f86e 	bl	8000998 <HAL_GetTick>
 80018bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff f86a 	bl	8000998 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1f7      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80018d2:	f7ff fc4d 	bl	8001170 <LL_RCC_HSI_IsReady>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f1      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d06e      	beq.n	80019c6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d056      	beq.n	800199e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	429a      	cmp	r2, r3
 8001906:	d031      	beq.n	800196c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d006      	beq.n	8001920 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e1d0      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d013      	beq.n	8001952 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800192a:	f7ff fc67 	bl	80011fc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800192e:	f7ff f833 	bl	8000998 <HAL_GetTick>
 8001932:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff f82f 	bl	8000998 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b11      	cmp	r3, #17
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1bc      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001948:	f7ff fc68 	bl	800121c <LL_RCC_LSI_IsReady>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f1      	bne.n	8001936 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195a:	f023 0210 	bic.w	r2, r3, #16
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196c:	f7ff fc36 	bl	80011dc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001970:	f7ff f812 	bl	8000998 <HAL_GetTick>
 8001974:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001976:	e00c      	b.n	8001992 <HAL_RCC_OscConfig+0x3c2>
 8001978:	20000000 	.word	0x20000000
 800197c:	2000003c 	.word	0x2000003c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001980:	f7ff f80a 	bl	8000998 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b11      	cmp	r3, #17
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e197      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001992:	f7ff fc43 	bl	800121c <LL_RCC_LSI_IsReady>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f1      	beq.n	8001980 <HAL_RCC_OscConfig+0x3b0>
 800199c:	e013      	b.n	80019c6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199e:	f7ff fc2d 	bl	80011fc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a2:	f7fe fff9 	bl	8000998 <HAL_GetTick>
 80019a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019aa:	f7fe fff5 	bl	8000998 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b11      	cmp	r3, #17
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e182      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80019bc:	f7ff fc2e 	bl	800121c <LL_RCC_LSI_IsReady>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f1      	bne.n	80019aa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 80d8 	beq.w	8001b84 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80019d4:	f7ff fb44 	bl	8001060 <LL_PWR_IsEnabledBkUpAccess>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d113      	bne.n	8001a06 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80019de:	f7ff fb0d 	bl	8000ffc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e2:	f7fe ffd9 	bl	8000998 <HAL_GetTick>
 80019e6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ea:	f7fe ffd5 	bl	8000998 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e162      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80019fc:	f7ff fb30 	bl	8001060 <LL_PWR_IsEnabledBkUpAccess>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f1      	beq.n	80019ea <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d07b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b85      	cmp	r3, #133	; 0x85
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d109      	bne.n	8001a32 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7fe ffb1 	bl	8000998 <HAL_GetTick>
 8001a36:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a4c:	e00a      	b.n	8001a64 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4e:	f7fe ffa3 	bl	8000998 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e12e      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001a64:	f7ff fba9 	bl	80011ba <LL_RCC_LSE_IsReady>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0ef      	beq.n	8001a4e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b81      	cmp	r3, #129	; 0x81
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b85      	cmp	r3, #133	; 0x85
 8001a7c:	d121      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7fe ff8b 	bl	8000998 <HAL_GetTick>
 8001a82:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7fe ff7d 	bl	8000998 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e108      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ec      	beq.n	8001a9a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001ac0:	e060      	b.n	8001b84 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7fe ff69 	bl	8000998 <HAL_GetTick>
 8001ac6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7fe ff5b 	bl	8000998 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0e6      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1ec      	bne.n	8001ade <HAL_RCC_OscConfig+0x50e>
 8001b04:	e03e      	b.n	8001b84 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7fe ff47 	bl	8000998 <HAL_GetTick>
 8001b0a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b20:	e00a      	b.n	8001b38 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b22:	f7fe ff39 	bl	8000998 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0c4      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ec      	bne.n	8001b22 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7fe ff26 	bl	8000998 <HAL_GetTick>
 8001b4c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7fe ff18 	bl	8000998 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0a3      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001b7a:	f7ff fb1e 	bl	80011ba <LL_RCC_LSE_IsReady>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ef      	bne.n	8001b64 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8099 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d06c      	beq.n	8001c6e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d14b      	bne.n	8001c34 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	f7ff fc74 	bl	8001488 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7fe fefa 	bl	8000998 <HAL_GetTick>
 8001ba4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7fe fef6 	bl	8000998 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b0a      	cmp	r3, #10
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e083      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001bba:	f7ff fc73 	bl	80014a4 <LL_RCC_PLL_IsReady>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f1      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	4b40      	ldr	r3, [pc, #256]	; (8001ccc <HAL_RCC_OscConfig+0x6fc>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd6:	4311      	orrs	r1, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bdc:	0212      	lsls	r2, r2, #8
 8001bde:	4311      	orrs	r1, r2
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfa:	f7ff fc37 	bl	800146c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0e:	f7fe fec3 	bl	8000998 <HAL_GetTick>
 8001c12:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c16:	f7fe febf 	bl	8000998 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b0a      	cmp	r3, #10
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e04c      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001c28:	f7ff fc3c 	bl	80014a4 <LL_RCC_PLL_IsReady>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f1      	beq.n	8001c16 <HAL_RCC_OscConfig+0x646>
 8001c32:	e045      	b.n	8001cc0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	f7ff fc28 	bl	8001488 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe feae 	bl	8000998 <HAL_GetTick>
 8001c3c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe feaa 	bl	8000998 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b0a      	cmp	r3, #10
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e037      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c52:	f7ff fc27 	bl	80014a4 <LL_RCC_PLL_IsReady>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f1      	bne.n	8001c40 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c66:	4b1a      	ldr	r3, [pc, #104]	; (8001cd0 <HAL_RCC_OscConfig+0x700>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60cb      	str	r3, [r1, #12]
 8001c6c:	e028      	b.n	8001cc0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e023      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d115      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d10e      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d106      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3720      	adds	r7, #32
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	11c1808c 	.word	0x11c1808c
 8001cd0:	eefefffc 	.word	0xeefefffc

08001cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e12c      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b98      	ldr	r3, [pc, #608]	; (8001f4c <HAL_RCC_ClockConfig+0x278>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d91b      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b95      	ldr	r3, [pc, #596]	; (8001f4c <HAL_RCC_ClockConfig+0x278>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0207 	bic.w	r2, r3, #7
 8001cfe:	4993      	ldr	r1, [pc, #588]	; (8001f4c <HAL_RCC_ClockConfig+0x278>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d06:	f7fe fe47 	bl	8000998 <HAL_GetTick>
 8001d0a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d0e:	f7fe fe43 	bl	8000998 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e110      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d20:	4b8a      	ldr	r3, [pc, #552]	; (8001f4c <HAL_RCC_ClockConfig+0x278>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d1ef      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d016      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fb02 	bl	8001348 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d44:	f7fe fe28 	bl	8000998 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d4c:	f7fe fe24 	bl	8000998 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0f1      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001d5e:	f7ff fbdf 	bl	8001520 <LL_RCC_IsActiveFlag_HPRE>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f1      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0320 	and.w	r3, r3, #32
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d016      	beq.n	8001da2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff faf8 	bl	800136e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d7e:	f7fe fe0b 	bl	8000998 <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d86:	f7fe fe07 	bl	8000998 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e0d4      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001d98:	f7ff fbd3 	bl	8001542 <LL_RCC_IsActiveFlag_C2HPRE>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f1      	beq.n	8001d86 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d016      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff faf0 	bl	8001398 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001db8:	f7fe fdee 	bl	8000998 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dc0:	f7fe fdea 	bl	8000998 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0b7      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001dd2:	f7ff fbc8 	bl	8001566 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f1      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d016      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fae9 	bl	80013c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001df2:	f7fe fdd1 	bl	8000998 <HAL_GetTick>
 8001df6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001dfa:	f7fe fdcd 	bl	8000998 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e09a      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e0c:	f7ff fbbd 	bl	800158a <LL_RCC_IsActiveFlag_PPRE1>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f1      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d017      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fade 	bl	80013ea <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e2e:	f7fe fdb3 	bl	8000998 <HAL_GetTick>
 8001e32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e36:	f7fe fdaf 	bl	8000998 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e07c      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001e48:	f7ff fbb0 	bl	80015ac <LL_RCC_IsActiveFlag_PPRE2>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f1      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d043      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001e66:	f7ff f956 	bl	8001116 <LL_RCC_HSE_IsReady>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d11e      	bne.n	8001eae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e066      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001e7c:	f7ff fb12 	bl	80014a4 <LL_RCC_PLL_IsReady>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d113      	bne.n	8001eae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e05b      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001e92:	f7ff f9f0 	bl	8001276 <LL_RCC_MSI_IsReady>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d108      	bne.n	8001eae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e050      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001ea0:	f7ff f966 	bl	8001170 <LL_RCC_HSI_IsReady>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e049      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fa2a 	bl	800130c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fd6e 	bl	8000998 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7fe fd6a 	bl	8000998 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e035      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	f7ff fa2c 	bl	8001332 <LL_RCC_GetSysClkSource>
 8001eda:	4602      	mov	r2, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d1ec      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCC_ClockConfig+0x278>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d21b      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef4:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <HAL_RCC_ClockConfig+0x278>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 0207 	bic.w	r2, r3, #7
 8001efc:	4913      	ldr	r1, [pc, #76]	; (8001f4c <HAL_RCC_ClockConfig+0x278>)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f04:	f7fe fd48 	bl	8000998 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f0c:	f7fe fd44 	bl	8000998 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e011      	b.n	8001f42 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x278>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1ef      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f2c:	f000 f8b4 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_RCC_ClockConfig+0x27c>)
 8001f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <HAL_RCC_ClockConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fce0 	bl	8000900 <HAL_InitTick>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	58004000 	.word	0x58004000
 8001f50:	20000000 	.word	0x20000000
 8001f54:	2000003c 	.word	0x2000003c

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	f7ff f9e4 	bl	8001332 <LL_RCC_GetSysClkSource>
 8001f6a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f6c:	f7ff facd 	bl	800150a <LL_RCC_PLL_GetMainSource>
 8001f70:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x2c>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d139      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d136      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001f84:	f7ff f987 	bl	8001296 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x62>
 8001f8e:	f7ff f982 	bl	8001296 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x4e>
 8001f98:	f7ff f98d 	bl	80012b6 <LL_RCC_MSI_GetRange>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	e005      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x5a>
 8001fa6:	f7ff f991 	bl	80012cc <LL_RCC_MSI_GetRangeAfterStandby>
 8001faa:	4603      	mov	r3, r0
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	4a36      	ldr	r2, [pc, #216]	; (800208c <HAL_RCC_GetSysClockFreq+0x134>)
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x8c>
 8001fba:	f7ff f96c 	bl	8001296 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x7a>
 8001fc4:	f7ff f977 	bl	80012b6 <LL_RCC_MSI_GetRange>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	e005      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x86>
 8001fd2:	f7ff f97b 	bl	80012cc <LL_RCC_MSI_GetRangeAfterStandby>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	4a2b      	ldr	r2, [pc, #172]	; (800208c <HAL_RCC_GetSysClockFreq+0x134>)
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d115      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ff0:	e012      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d102      	bne.n	8001ffe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e00c      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b08      	cmp	r3, #8
 8002002:	d109      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002004:	f7ff f85a 	bl	80010bc <LL_RCC_HSE_IsEnabledDiv2>
 8002008:	4603      	mov	r3, r0
 800200a:	2b01      	cmp	r3, #1
 800200c:	d102      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e001      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002016:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002018:	f7ff f98b 	bl	8001332 <LL_RCC_GetSysClkSource>
 800201c:	4603      	mov	r3, r0
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d12f      	bne.n	8002082 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002022:	f7ff fa72 	bl	800150a <LL_RCC_PLL_GetMainSource>
 8002026:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_RCC_GetSysClockFreq+0xde>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0xe4>
 8002034:	e00d      	b.n	8002052 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002036:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 8002038:	60fb      	str	r3, [r7, #12]
        break;
 800203a:	e00d      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800203c:	f7ff f83e 	bl	80010bc <LL_RCC_HSE_IsEnabledDiv2>
 8002040:	4603      	mov	r3, r0
 8002042:	2b01      	cmp	r3, #1
 8002044:	d102      	bne.n	800204c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <HAL_RCC_GetSysClockFreq+0x138>)
 8002048:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800204a:	e005      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_GetSysClockFreq+0x13c>)
 800204e:	60fb      	str	r3, [r7, #12]
        break;
 8002050:	e002      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	60fb      	str	r3, [r7, #12]
        break;
 8002056:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002058:	f7ff fa35 	bl	80014c6 <LL_RCC_PLL_GetN>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	fb03 f402 	mul.w	r4, r3, r2
 8002064:	f7ff fa46 	bl	80014f4 <LL_RCC_PLL_GetDivider>
 8002068:	4603      	mov	r3, r0
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	3301      	adds	r3, #1
 800206e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002072:	f7ff fa34 	bl	80014de <LL_RCC_PLL_GetR>
 8002076:	4603      	mov	r3, r0
 8002078:	0f5b      	lsrs	r3, r3, #29
 800207a:	3301      	adds	r3, #1
 800207c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002080:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002082:	697b      	ldr	r3, [r7, #20]
}
 8002084:	4618      	mov	r0, r3
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	080048c0 	.word	0x080048c0
 8002090:	00f42400 	.word	0x00f42400
 8002094:	01e84800 	.word	0x01e84800

08002098 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b598      	push	{r3, r4, r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800209c:	f7ff ff5c 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80020a0:	4604      	mov	r4, r0
 80020a2:	f7ff f9b5 	bl	8001410 <LL_RCC_GetAHBPrescaler>
 80020a6:	4603      	mov	r3, r0
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	4a03      	ldr	r2, [pc, #12]	; (80020bc <HAL_RCC_GetHCLKFreq+0x24>)
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd98      	pop	{r3, r4, r7, pc}
 80020bc:	08004860 	.word	0x08004860

080020c0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020c0:	b598      	push	{r3, r4, r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020c4:	f7ff ffe8 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020c8:	4604      	mov	r4, r0
 80020ca:	f7ff f9b9 	bl	8001440 <LL_RCC_GetAPB1Prescaler>
 80020ce:	4603      	mov	r3, r0
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	4a03      	ldr	r2, [pc, #12]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80020dc:	4618      	mov	r0, r3
 80020de:	bd98      	pop	{r3, r4, r7, pc}
 80020e0:	080048a0 	.word	0x080048a0

080020e4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020e4:	b598      	push	{r3, r4, r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80020e8:	f7ff ffd6 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020ec:	4604      	mov	r4, r0
 80020ee:	f7ff f9b2 	bl	8001456 <LL_RCC_GetAPB2Prescaler>
 80020f2:	4603      	mov	r3, r0
 80020f4:	0adb      	lsrs	r3, r3, #11
 80020f6:	4a03      	ldr	r2, [pc, #12]	; (8002104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	bd98      	pop	{r3, r4, r7, pc}
 8002104:	080048a0 	.word	0x080048a0

08002108 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	f003 030f 	and.w	r3, r3, #15
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002120:	f7ff f981 	bl	8001426 <LL_RCC_GetAHB3Prescaler>
 8002124:	4603      	mov	r3, r0
 8002126:	091b      	lsrs	r3, r3, #4
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	4a0c      	ldr	r2, [pc, #48]	; (8002160 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	4a09      	ldr	r2, [pc, #36]	; (8002164 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0c9c      	lsrs	r4, r3, #18
 8002144:	f7fe ff76 	bl	8001034 <HAL_PWREx_GetVoltageRange>
 8002148:	4603      	mov	r3, r0
 800214a:	4619      	mov	r1, r3
 800214c:	4620      	mov	r0, r4
 800214e:	f000 f80b 	bl	8002168 <RCC_SetFlashLatency>
 8002152:	4603      	mov	r3, r0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bd90      	pop	{r4, r7, pc}
 800215c:	080048c0 	.word	0x080048c0
 8002160:	08004860 	.word	0x08004860
 8002164:	431bde83 	.word	0x431bde83

08002168 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	; 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <RCC_SetFlashLatency+0xf4>)
 8002174:	f107 0320 	add.w	r3, r7, #32
 8002178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800217c:	6018      	str	r0, [r3, #0]
 800217e:	3304      	adds	r3, #4
 8002180:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002182:	4a37      	ldr	r2, [pc, #220]	; (8002260 <RCC_SetFlashLatency+0xf8>)
 8002184:	f107 0318 	add.w	r3, r7, #24
 8002188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800218c:	6018      	str	r0, [r3, #0]
 800218e:	3304      	adds	r3, #4
 8002190:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002192:	4a34      	ldr	r2, [pc, #208]	; (8002264 <RCC_SetFlashLatency+0xfc>)
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	ca07      	ldmia	r2, {r0, r1, r2}
 800219a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800219e:	2300      	movs	r3, #0
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a8:	d11b      	bne.n	80021e2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	633b      	str	r3, [r7, #48]	; 0x30
 80021ae:	e014      	b.n	80021da <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	3338      	adds	r3, #56	; 0x38
 80021b6:	443b      	add	r3, r7
 80021b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80021bc:	461a      	mov	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d807      	bhi.n	80021d4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80021c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	3338      	adds	r3, #56	; 0x38
 80021ca:	443b      	add	r3, r7
 80021cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80021d2:	e021      	b.n	8002218 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80021d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d6:	3301      	adds	r3, #1
 80021d8:	633b      	str	r3, [r7, #48]	; 0x30
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d9e7      	bls.n	80021b0 <RCC_SetFlashLatency+0x48>
 80021e0:	e01a      	b.n	8002218 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e6:	e014      	b.n	8002212 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	3338      	adds	r3, #56	; 0x38
 80021ee:	443b      	add	r3, r7
 80021f0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80021f4:	461a      	mov	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d807      	bhi.n	800220c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80021fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	3338      	adds	r3, #56	; 0x38
 8002202:	443b      	add	r3, r7
 8002204:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800220a:	e005      	b.n	8002218 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	3301      	adds	r3, #1
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	2b02      	cmp	r3, #2
 8002216:	d9e7      	bls.n	80021e8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <RCC_SetFlashLatency+0x100>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f023 0207 	bic.w	r2, r3, #7
 8002220:	4911      	ldr	r1, [pc, #68]	; (8002268 <RCC_SetFlashLatency+0x100>)
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002228:	f7fe fbb6 	bl	8000998 <HAL_GetTick>
 800222c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800222e:	e008      	b.n	8002242 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002230:	f7fe fbb2 	bl	8000998 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e007      	b.n	8002252 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <RCC_SetFlashLatency+0x100>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800224c:	429a      	cmp	r2, r3
 800224e:	d1ef      	bne.n	8002230 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3738      	adds	r7, #56	; 0x38
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	08004844 	.word	0x08004844
 8002260:	0800484c 	.word	0x0800484c
 8002264:	08004854 	.word	0x08004854
 8002268:	58004000 	.word	0x58004000

0800226c <LL_RCC_LSE_IsReady>:
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b02      	cmp	r3, #2
 800227e:	d101      	bne.n	8002284 <LL_RCC_LSE_IsReady+0x18>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <LL_RCC_LSE_IsReady+0x1a>
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <LL_RCC_SetUSARTClockSource>:
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	43db      	mvns	r3, r3
 80022a4:	401a      	ands	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <LL_RCC_SetI2SClockSource>:
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80022c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <LL_RCC_SetLPUARTClockSource>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80022f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	bc80      	pop	{r7}
 8002310:	4770      	bx	lr

08002312 <LL_RCC_SetI2CClockSource>:
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800231a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800232a:	43db      	mvns	r3, r3
 800232c:	401a      	ands	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <LL_RCC_SetLPTIMClockSource>:
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	041b      	lsls	r3, r3, #16
 8002368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <LL_RCC_SetRNGClockSource>:
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr

080023a6 <LL_RCC_SetADCClockSource>:
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_RCC_SetRTCClockSource>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <LL_RCC_GetRTCClockSource>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80023fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <LL_RCC_ForceBackupDomainReset>:
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
	...

08002454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002460:	2300      	movs	r3, #0
 8002462:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002464:	2300      	movs	r3, #0
 8002466:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d058      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002474:	f7fe fdc2 	bl	8000ffc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002478:	f7fe fa8e 	bl	8000998 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800247e:	e009      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7fe fa8a 	bl	8000998 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d902      	bls.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	74fb      	strb	r3, [r7, #19]
        break;
 8002492:	e006      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002494:	4b7b      	ldr	r3, [pc, #492]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a0:	d1ee      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d13c      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80024a8:	f7ff ffa7 	bl	80023fa <LL_RCC_GetRTCClockSource>
 80024ac:	4602      	mov	r2, r0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d00f      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c4:	f7ff ffa5 	bl	8002412 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024c8:	f7ff ffb3 	bl	8002432 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d014      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fa5a 	bl	8000998 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80024e6:	e00b      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe fa56 	bl	8000998 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d902      	bls.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	74fb      	strb	r3, [r7, #19]
            break;
 80024fe:	e004      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002500:	f7ff feb4 	bl	800226c <LL_RCC_LSE_IsReady>
 8002504:	4603      	mov	r3, r0
 8002506:	2b01      	cmp	r3, #1
 8002508:	d1ee      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff5b 	bl	80023d0 <LL_RCC_SetRTCClockSource>
 800251a:	e004      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
 8002520:	e001      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002522:	7cfb      	ldrb	r3, [r7, #19]
 8002524:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fea9 	bl	800228e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fe9e 	bl	800228e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d004      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fec0 	bl	80022e8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff fee6 	bl	800234a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fedb 	bl	800234a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff fed0 	bl	800234a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fea9 	bl	8002312 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff fe9e 	bl	8002312 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fe93 	bl	8002312 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d011      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe5e 	bl	80022be <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260a:	d107      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fea5 	bl	800237c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	2b00      	cmp	r3, #0
 8002638:	d107      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800263a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002648:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d011      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fea3 	bl	80023a6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002668:	d107      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800267a:	7cbb      	ldrb	r3, [r7, #18]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	58000400 	.word	0x58000400

08002688 <LL_RCC_GetUSARTClockSource>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	041b      	lsls	r3, r3, #16
 80026a0:	4313      	orrs	r3, r2
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bc80      	pop	{r7}
 80026aa:	4770      	bx	lr

080026ac <LL_RCC_GetLPUARTClockSource>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4013      	ands	r3, r2
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e042      	b.n	8002762 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe f83c 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2224      	movs	r2, #36	; 0x24
 80026f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fc37 	bl	8002f80 <UART_SetConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e022      	b.n	8002762 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fe9f 	bl	8003468 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002738:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002748:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 ff25 	bl	80035aa <UART_CheckIdleState>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b08a      	sub	sp, #40	; 0x28
 800276e:	af02      	add	r7, sp, #8
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	2b20      	cmp	r3, #32
 8002782:	d173      	bne.n	800286c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_UART_Transmit+0x26>
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e06c      	b.n	800286e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2221      	movs	r2, #33	; 0x21
 80027a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027a4:	f7fe f8f8 	bl	8000998 <HAL_GetTick>
 80027a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	88fa      	ldrh	r2, [r7, #6]
 80027b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	d108      	bne.n	80027d6 <HAL_UART_Transmit+0x6c>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	e003      	b.n	80027de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027de:	e02c      	b.n	800283a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 ff2b 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e039      	b.n	800286e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3302      	adds	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e007      	b.n	8002828 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1cc      	bne.n	80027e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2200      	movs	r2, #0
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fef8 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e006      	b.n	800286e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2220      	movs	r2, #32
 8002864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800286c:	2302      	movs	r3, #2
  }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288c:	2b20      	cmp	r3, #32
 800288e:	d137      	bne.n	8002900 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_UART_Receive_IT+0x24>
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e030      	b.n	8002902 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_UART_Receive_IT+0x94>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d01f      	beq.n	80028f0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d018      	beq.n	80028f0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	613b      	str	r3, [r7, #16]
   return(result);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	623b      	str	r3, [r7, #32]
 80028de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e0:	69f9      	ldr	r1, [r7, #28]
 80028e2:	6a3a      	ldr	r2, [r7, #32]
 80028e4:	e841 2300 	strex	r3, r2, [r1]
 80028e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e6      	bne.n	80028be <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 ff6e 	bl	80037d8 <UART_Start_Receive_IT>
 80028fc:	4603      	mov	r3, r0
 80028fe:	e000      	b.n	8002902 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
  }
}
 8002902:	4618      	mov	r0, r3
 8002904:	3728      	adds	r7, #40	; 0x28
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40008000 	.word	0x40008000

08002910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0ba      	sub	sp, #232	; 0xe8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800293a:	f640 030f 	movw	r3, #2063	; 0x80f
 800293e:	4013      	ands	r3, r2
 8002940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d11b      	bne.n	8002984 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 82e3 	beq.w	8002f40 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	4798      	blx	r3
      }
      return;
 8002982:	e2dd      	b.n	8002f40 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 8123 	beq.w	8002bd4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800298e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002992:	4b8d      	ldr	r3, [pc, #564]	; (8002bc8 <HAL_UART_IRQHandler+0x2b8>)
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800299a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800299e:	4b8b      	ldr	r3, [pc, #556]	; (8002bcc <HAL_UART_IRQHandler+0x2bc>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8116 	beq.w	8002bd4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d011      	beq.n	80029d8 <HAL_UART_IRQHandler+0xc8>
 80029b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2201      	movs	r2, #1
 80029c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f043 0201 	orr.w	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d011      	beq.n	8002a08 <HAL_UART_IRQHandler+0xf8>
 80029e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2202      	movs	r2, #2
 80029f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f043 0204 	orr.w	r2, r3, #4
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d011      	beq.n	8002a38 <HAL_UART_IRQHandler+0x128>
 8002a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2204      	movs	r2, #4
 8002a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d017      	beq.n	8002a74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002a54:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_UART_IRQHandler+0x2b8>)
 8002a56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2208      	movs	r2, #8
 8002a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f043 0208 	orr.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x196>
 8002a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f043 0220 	orr.w	r2, r3, #32
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f000 8249 	beq.w	8002f44 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d013      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d005      	beq.n	8002b0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d054      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 ff84 	bl	8003a18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d146      	bne.n	8002bac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3308      	adds	r3, #8
 8002b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b2c:	e853 3f00 	ldrex	r3, [r3]
 8002b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3308      	adds	r3, #8
 8002b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b5a:	e841 2300 	strex	r3, r2, [r1]
 8002b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1d9      	bne.n	8002b1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d017      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7a:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <HAL_UART_IRQHandler+0x2c0>)
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f87a 	bl	8000c7e <HAL_DMA_Abort_IT>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d019      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba2:	e00f      	b.n	8002bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f9d7 	bl	8002f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002baa:	e00b      	b.n	8002bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f9d3 	bl	8002f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb2:	e007      	b.n	8002bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f9cf 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002bc2:	e1bf      	b.n	8002f44 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	bf00      	nop
    return;
 8002bc6:	e1bd      	b.n	8002f44 <HAL_UART_IRQHandler+0x634>
 8002bc8:	10000001 	.word	0x10000001
 8002bcc:	04000120 	.word	0x04000120
 8002bd0:	08003ae3 	.word	0x08003ae3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 8153 	bne.w	8002e84 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 814c 	beq.w	8002e84 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8145 	beq.w	8002e84 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2210      	movs	r2, #16
 8002c00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	f040 80bb 	bne.w	8002d88 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 818f 	beq.w	8002f48 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c34:	429a      	cmp	r2, r3
 8002c36:	f080 8187 	bcs.w	8002f48 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 8087 	bne.w	8002d66 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c64:	e853 3f00 	ldrex	r3, [r3]
 8002c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1da      	bne.n	8002c58 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3308      	adds	r3, #8
 8002cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ccc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e1      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1e3      	bne.n	8002cde <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d34:	f023 0310 	bic.w	r3, r3, #16
 8002d38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d46:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d4e:	e841 2300 	strex	r3, r2, [r1]
 8002d52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1e4      	bne.n	8002d24 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fd ff2e 	bl	8000bc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f8f2 	bl	8002f6a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d86:	e0df      	b.n	8002f48 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80d1 	beq.w	8002f4c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002daa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80cc 	beq.w	8002f4c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e4      	bne.n	8002db4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3308      	adds	r3, #8
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	623b      	str	r3, [r7, #32]
   return(result);
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e12:	633a      	str	r2, [r7, #48]	; 0x30
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	e841 2300 	strex	r3, r2, [r1]
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1e1      	bne.n	8002dea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0310 	bic.w	r3, r3, #16
 8002e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	69b9      	ldr	r1, [r7, #24]
 8002e62:	69fa      	ldr	r2, [r7, #28]
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	617b      	str	r3, [r7, #20]
   return(result);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e4      	bne.n	8002e3a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f874 	bl	8002f6a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e82:	e063      	b.n	8002f4c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <HAL_UART_IRQHandler+0x59e>
 8002e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ea4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f001 fb78 	bl	800459c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eac:	e051      	b.n	8002f52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d014      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d105      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d03a      	beq.n	8002f50 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
    }
    return;
 8002ee2:	e035      	b.n	8002f50 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d009      	beq.n	8002f04 <HAL_UART_IRQHandler+0x5f4>
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fe06 	bl	8003b0e <UART_EndTransmit_IT>
    return;
 8002f02:	e026      	b.n	8002f52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d009      	beq.n	8002f24 <HAL_UART_IRQHandler+0x614>
 8002f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f001 fb4f 	bl	80045c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f22:	e016      	b.n	8002f52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d010      	beq.n	8002f52 <HAL_UART_IRQHandler+0x642>
 8002f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	da0c      	bge.n	8002f52 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 fb38 	bl	80045ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f3e:	e008      	b.n	8002f52 <HAL_UART_IRQHandler+0x642>
      return;
 8002f40:	bf00      	nop
 8002f42:	e006      	b.n	8002f52 <HAL_UART_IRQHandler+0x642>
    return;
 8002f44:	bf00      	nop
 8002f46:	e004      	b.n	8002f52 <HAL_UART_IRQHandler+0x642>
      return;
 8002f48:	bf00      	nop
 8002f4a:	e002      	b.n	8002f52 <HAL_UART_IRQHandler+0x642>
      return;
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <HAL_UART_IRQHandler+0x642>
    return;
 8002f50:	bf00      	nop
  }
}
 8002f52:	37e8      	adds	r7, #232	; 0xe8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr

08002f6a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr

08002f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b08c      	sub	sp, #48	; 0x30
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	4b94      	ldr	r3, [pc, #592]	; (8003200 <UART_SetConfig+0x280>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fb8:	430b      	orrs	r3, r1
 8002fba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a89      	ldr	r2, [pc, #548]	; (8003204 <UART_SetConfig+0x284>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002ff6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003000:	430b      	orrs	r3, r1
 8003002:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f023 010f 	bic.w	r1, r3, #15
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7a      	ldr	r2, [pc, #488]	; (8003208 <UART_SetConfig+0x288>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d127      	bne.n	8003074 <UART_SetConfig+0xf4>
 8003024:	2003      	movs	r0, #3
 8003026:	f7ff fb2f 	bl	8002688 <LL_RCC_GetUSARTClockSource>
 800302a:	4603      	mov	r3, r0
 800302c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003030:	2b03      	cmp	r3, #3
 8003032:	d81b      	bhi.n	800306c <UART_SetConfig+0xec>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <UART_SetConfig+0xbc>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	0800304d 	.word	0x0800304d
 8003040:	0800305d 	.word	0x0800305d
 8003044:	08003055 	.word	0x08003055
 8003048:	08003065 	.word	0x08003065
 800304c:	2301      	movs	r3, #1
 800304e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003052:	e080      	b.n	8003156 <UART_SetConfig+0x1d6>
 8003054:	2302      	movs	r3, #2
 8003056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305a:	e07c      	b.n	8003156 <UART_SetConfig+0x1d6>
 800305c:	2304      	movs	r3, #4
 800305e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003062:	e078      	b.n	8003156 <UART_SetConfig+0x1d6>
 8003064:	2308      	movs	r3, #8
 8003066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800306a:	e074      	b.n	8003156 <UART_SetConfig+0x1d6>
 800306c:	2310      	movs	r3, #16
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003072:	e070      	b.n	8003156 <UART_SetConfig+0x1d6>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a64      	ldr	r2, [pc, #400]	; (800320c <UART_SetConfig+0x28c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d138      	bne.n	80030f0 <UART_SetConfig+0x170>
 800307e:	200c      	movs	r0, #12
 8003080:	f7ff fb02 	bl	8002688 <LL_RCC_GetUSARTClockSource>
 8003084:	4603      	mov	r3, r0
 8003086:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d82c      	bhi.n	80030e8 <UART_SetConfig+0x168>
 800308e:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <UART_SetConfig+0x114>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030c9 	.word	0x080030c9
 8003098:	080030e9 	.word	0x080030e9
 800309c:	080030e9 	.word	0x080030e9
 80030a0:	080030e9 	.word	0x080030e9
 80030a4:	080030d9 	.word	0x080030d9
 80030a8:	080030e9 	.word	0x080030e9
 80030ac:	080030e9 	.word	0x080030e9
 80030b0:	080030e9 	.word	0x080030e9
 80030b4:	080030d1 	.word	0x080030d1
 80030b8:	080030e9 	.word	0x080030e9
 80030bc:	080030e9 	.word	0x080030e9
 80030c0:	080030e9 	.word	0x080030e9
 80030c4:	080030e1 	.word	0x080030e1
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ce:	e042      	b.n	8003156 <UART_SetConfig+0x1d6>
 80030d0:	2302      	movs	r3, #2
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d6:	e03e      	b.n	8003156 <UART_SetConfig+0x1d6>
 80030d8:	2304      	movs	r3, #4
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030de:	e03a      	b.n	8003156 <UART_SetConfig+0x1d6>
 80030e0:	2308      	movs	r3, #8
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e6:	e036      	b.n	8003156 <UART_SetConfig+0x1d6>
 80030e8:	2310      	movs	r3, #16
 80030ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ee:	e032      	b.n	8003156 <UART_SetConfig+0x1d6>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a43      	ldr	r2, [pc, #268]	; (8003204 <UART_SetConfig+0x284>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d12a      	bne.n	8003150 <UART_SetConfig+0x1d0>
 80030fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80030fe:	f7ff fad5 	bl	80026ac <LL_RCC_GetLPUARTClockSource>
 8003102:	4603      	mov	r3, r0
 8003104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003108:	d01a      	beq.n	8003140 <UART_SetConfig+0x1c0>
 800310a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800310e:	d81b      	bhi.n	8003148 <UART_SetConfig+0x1c8>
 8003110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003114:	d00c      	beq.n	8003130 <UART_SetConfig+0x1b0>
 8003116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800311a:	d815      	bhi.n	8003148 <UART_SetConfig+0x1c8>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <UART_SetConfig+0x1a8>
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003124:	d008      	beq.n	8003138 <UART_SetConfig+0x1b8>
 8003126:	e00f      	b.n	8003148 <UART_SetConfig+0x1c8>
 8003128:	2300      	movs	r3, #0
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800312e:	e012      	b.n	8003156 <UART_SetConfig+0x1d6>
 8003130:	2302      	movs	r3, #2
 8003132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003136:	e00e      	b.n	8003156 <UART_SetConfig+0x1d6>
 8003138:	2304      	movs	r3, #4
 800313a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313e:	e00a      	b.n	8003156 <UART_SetConfig+0x1d6>
 8003140:	2308      	movs	r3, #8
 8003142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003146:	e006      	b.n	8003156 <UART_SetConfig+0x1d6>
 8003148:	2310      	movs	r3, #16
 800314a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314e:	e002      	b.n	8003156 <UART_SetConfig+0x1d6>
 8003150:	2310      	movs	r3, #16
 8003152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <UART_SetConfig+0x284>)
 800315c:	4293      	cmp	r3, r2
 800315e:	f040 80a4 	bne.w	80032aa <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003162:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003166:	2b08      	cmp	r3, #8
 8003168:	d823      	bhi.n	80031b2 <UART_SetConfig+0x232>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <UART_SetConfig+0x1f0>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003195 	.word	0x08003195
 8003174:	080031b3 	.word	0x080031b3
 8003178:	0800319d 	.word	0x0800319d
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031a3 	.word	0x080031a3
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031b3 	.word	0x080031b3
 800318c:	080031b3 	.word	0x080031b3
 8003190:	080031ab 	.word	0x080031ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003194:	f7fe ff94 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 8003198:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800319a:	e010      	b.n	80031be <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <UART_SetConfig+0x290>)
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031a0:	e00d      	b.n	80031be <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7fe fed9 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80031a8:	e009      	b.n	80031be <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80031b0:	e005      	b.n	80031be <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80031bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8137 	beq.w	8003434 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <UART_SetConfig+0x294>)
 80031cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031d0:	461a      	mov	r2, r3
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d305      	bcc.n	80031f6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031fc:	e11a      	b.n	8003434 <UART_SetConfig+0x4b4>
 80031fe:	bf00      	nop
 8003200:	cfff69f3 	.word	0xcfff69f3
 8003204:	40008000 	.word	0x40008000
 8003208:	40013800 	.word	0x40013800
 800320c:	40004400 	.word	0x40004400
 8003210:	00f42400 	.word	0x00f42400
 8003214:	08004900 	.word	0x08004900
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	2200      	movs	r2, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	60fa      	str	r2, [r7, #12]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	4a8e      	ldr	r2, [pc, #568]	; (8003460 <UART_SetConfig+0x4e0>)
 8003226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800322a:	b29b      	uxth	r3, r3
 800322c:	2200      	movs	r2, #0
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800323a:	f7fc ff9d 	bl	8000178 <__aeabi_uldivmod>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	020b      	lsls	r3, r1, #8
 8003250:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003254:	0202      	lsls	r2, r0, #8
 8003256:	6979      	ldr	r1, [r7, #20]
 8003258:	6849      	ldr	r1, [r1, #4]
 800325a:	0849      	lsrs	r1, r1, #1
 800325c:	2000      	movs	r0, #0
 800325e:	460c      	mov	r4, r1
 8003260:	4605      	mov	r5, r0
 8003262:	eb12 0804 	adds.w	r8, r2, r4
 8003266:	eb43 0905 	adc.w	r9, r3, r5
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	469a      	mov	sl, r3
 8003272:	4693      	mov	fp, r2
 8003274:	4652      	mov	r2, sl
 8003276:	465b      	mov	r3, fp
 8003278:	4640      	mov	r0, r8
 800327a:	4649      	mov	r1, r9
 800327c:	f7fc ff7c 	bl	8000178 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4613      	mov	r3, r2
 8003286:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800328e:	d308      	bcc.n	80032a2 <UART_SetConfig+0x322>
 8003290:	6a3b      	ldr	r3, [r7, #32]
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003296:	d204      	bcs.n	80032a2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6a3a      	ldr	r2, [r7, #32]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	e0c8      	b.n	8003434 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032a8:	e0c4      	b.n	8003434 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b2:	d167      	bne.n	8003384 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80032b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d828      	bhi.n	800330e <UART_SetConfig+0x38e>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0x344>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032e9 	.word	0x080032e9
 80032c8:	080032f1 	.word	0x080032f1
 80032cc:	080032f9 	.word	0x080032f9
 80032d0:	0800330f 	.word	0x0800330f
 80032d4:	080032ff 	.word	0x080032ff
 80032d8:	0800330f 	.word	0x0800330f
 80032dc:	0800330f 	.word	0x0800330f
 80032e0:	0800330f 	.word	0x0800330f
 80032e4:	08003307 	.word	0x08003307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e8:	f7fe feea 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ee:	e014      	b.n	800331a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7fe fef8 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 80032f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032f6:	e010      	b.n	800331a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f8:	4b5a      	ldr	r3, [pc, #360]	; (8003464 <UART_SetConfig+0x4e4>)
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032fc:	e00d      	b.n	800331a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fe:	f7fe fe2b 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003304:	e009      	b.n	800331a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800330c:	e005      	b.n	800331a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8089 	beq.w	8003434 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	4a4e      	ldr	r2, [pc, #312]	; (8003460 <UART_SetConfig+0x4e0>)
 8003328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800332c:	461a      	mov	r2, r3
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	fbb3 f3f2 	udiv	r3, r3, r2
 8003334:	005a      	lsls	r2, r3, #1
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	441a      	add	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	2b0f      	cmp	r3, #15
 800334c:	d916      	bls.n	800337c <UART_SetConfig+0x3fc>
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003354:	d212      	bcs.n	800337c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	b29b      	uxth	r3, r3
 800335a:	f023 030f 	bic.w	r3, r3, #15
 800335e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	b29b      	uxth	r3, r3
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	b29a      	uxth	r2, r3
 800336c:	8bfb      	ldrh	r3, [r7, #30]
 800336e:	4313      	orrs	r3, r2
 8003370:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	8bfa      	ldrh	r2, [r7, #30]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	e05b      	b.n	8003434 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003382:	e057      	b.n	8003434 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003384:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003388:	2b08      	cmp	r3, #8
 800338a:	d828      	bhi.n	80033de <UART_SetConfig+0x45e>
 800338c:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <UART_SetConfig+0x414>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033c1 	.word	0x080033c1
 800339c:	080033c9 	.word	0x080033c9
 80033a0:	080033df 	.word	0x080033df
 80033a4:	080033cf 	.word	0x080033cf
 80033a8:	080033df 	.word	0x080033df
 80033ac:	080033df 	.word	0x080033df
 80033b0:	080033df 	.word	0x080033df
 80033b4:	080033d7 	.word	0x080033d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7fe fe82 	bl	80020c0 <HAL_RCC_GetPCLK1Freq>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033be:	e014      	b.n	80033ea <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7fe fe90 	bl	80020e4 <HAL_RCC_GetPCLK2Freq>
 80033c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033c6:	e010      	b.n	80033ea <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <UART_SetConfig+0x4e4>)
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033cc:	e00d      	b.n	80033ea <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ce:	f7fe fdc3 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 80033d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033d4:	e009      	b.n	80033ea <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033dc:	e005      	b.n	80033ea <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033e8:	bf00      	nop
    }

    if (pclk != 0U)
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d021      	beq.n	8003434 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	4a1a      	ldr	r2, [pc, #104]	; (8003460 <UART_SetConfig+0x4e0>)
 80033f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033fa:	461a      	mov	r2, r3
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	441a      	add	r2, r3
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003412:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d909      	bls.n	800342e <UART_SetConfig+0x4ae>
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d205      	bcs.n	800342e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	b29a      	uxth	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60da      	str	r2, [r3, #12]
 800342c:	e002      	b.n	8003434 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2201      	movs	r2, #1
 8003438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2201      	movs	r2, #1
 8003440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2200      	movs	r2, #0
 800344e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003450:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003454:	4618      	mov	r0, r3
 8003456:	3730      	adds	r7, #48	; 0x30
 8003458:	46bd      	mov	sp, r7
 800345a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345e:	bf00      	nop
 8003460:	08004900 	.word	0x08004900
 8003464:	00f42400 	.word	0x00f42400

08003468 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01a      	beq.n	800357e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003566:	d10a      	bne.n	800357e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  }
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af02      	add	r7, sp, #8
 80035b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035ba:	f7fd f9ed 	bl	8000998 <HAL_GetTick>
 80035be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d10e      	bne.n	80035ec <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f832 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e028      	b.n	800363e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d10e      	bne.n	8003618 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f81c 	bl	8003646 <UART_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e012      	b.n	800363e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b09c      	sub	sp, #112	; 0x70
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	e0a9      	b.n	80037ac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800365e:	f000 80a5 	beq.w	80037ac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fd f999 	bl	8000998 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <UART_WaitOnFlagUntilTimeout+0x32>
 8003672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003674:	2b00      	cmp	r3, #0
 8003676:	d140      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003688:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800368c:	667b      	str	r3, [r7, #100]	; 0x64
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003698:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800369c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e6      	bne.n	8003678 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	663b      	str	r3, [r7, #96]	; 0x60
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	3308      	adds	r3, #8
 80036c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80036ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80036d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80036d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e5      	bne.n	80036aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e069      	b.n	80037ce <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d051      	beq.n	80037ac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003716:	d149      	bne.n	80037ac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003720:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003736:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
 8003742:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e6      	bne.n	8003722 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	e853 3f00 	ldrex	r3, [r3]
 8003762:	613b      	str	r3, [r7, #16]
   return(result);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	66bb      	str	r3, [r7, #104]	; 0x68
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3308      	adds	r3, #8
 8003772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003774:	623a      	str	r2, [r7, #32]
 8003776:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003778:	69f9      	ldr	r1, [r7, #28]
 800377a:	6a3a      	ldr	r2, [r7, #32]
 800377c:	e841 2300 	strex	r3, r2, [r1]
 8003780:	61bb      	str	r3, [r7, #24]
   return(result);
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1e5      	bne.n	8003754 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e010      	b.n	80037ce <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	f43f af46 	beq.w	8003658 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3770      	adds	r7, #112	; 0x70
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d8:	b480      	push	{r7}
 80037da:	b0a3      	sub	sp, #140	; 0x8c
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	88fa      	ldrh	r2, [r7, #6]
 80037f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380a:	d10e      	bne.n	800382a <UART_Start_Receive_IT+0x52>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d105      	bne.n	8003820 <UART_Start_Receive_IT+0x48>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f240 12ff 	movw	r2, #511	; 0x1ff
 800381a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800381e:	e02d      	b.n	800387c <UART_Start_Receive_IT+0xa4>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	22ff      	movs	r2, #255	; 0xff
 8003824:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003828:	e028      	b.n	800387c <UART_Start_Receive_IT+0xa4>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10d      	bne.n	800384e <UART_Start_Receive_IT+0x76>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <UART_Start_Receive_IT+0x6c>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	22ff      	movs	r2, #255	; 0xff
 800383e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003842:	e01b      	b.n	800387c <UART_Start_Receive_IT+0xa4>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	227f      	movs	r2, #127	; 0x7f
 8003848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800384c:	e016      	b.n	800387c <UART_Start_Receive_IT+0xa4>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003856:	d10d      	bne.n	8003874 <UART_Start_Receive_IT+0x9c>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d104      	bne.n	800386a <UART_Start_Receive_IT+0x92>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	227f      	movs	r2, #127	; 0x7f
 8003864:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003868:	e008      	b.n	800387c <UART_Start_Receive_IT+0xa4>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	223f      	movs	r2, #63	; 0x3f
 800386e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003872:	e003      	b.n	800387c <UART_Start_Receive_IT+0xa4>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2222      	movs	r2, #34	; 0x22
 8003888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3308      	adds	r3, #8
 8003892:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003896:	e853 3f00 	ldrex	r3, [r3]
 800389a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800389c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80038b0:	673a      	str	r2, [r7, #112]	; 0x70
 80038b2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80038b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80038be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e3      	bne.n	800388c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038cc:	d14f      	bne.n	800396e <UART_Start_Receive_IT+0x196>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d349      	bcc.n	800396e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e2:	d107      	bne.n	80038f4 <UART_Start_Receive_IT+0x11c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d103      	bne.n	80038f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4a46      	ldr	r2, [pc, #280]	; (8003a08 <UART_Start_Receive_IT+0x230>)
 80038f0:	675a      	str	r2, [r3, #116]	; 0x74
 80038f2:	e002      	b.n	80038fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a45      	ldr	r2, [pc, #276]	; (8003a0c <UART_Start_Receive_IT+0x234>)
 80038f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01a      	beq.n	8003938 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003926:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800392a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e4      	bne.n	8003902 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003958:	64ba      	str	r2, [r7, #72]	; 0x48
 800395a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800395e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_Start_Receive_IT+0x160>
 800396c:	e046      	b.n	80039fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d107      	bne.n	8003988 <UART_Start_Receive_IT+0x1b0>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <UART_Start_Receive_IT+0x238>)
 8003984:	675a      	str	r2, [r3, #116]	; 0x74
 8003986:	e002      	b.n	800398e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <UART_Start_Receive_IT+0x23c>)
 800398c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d019      	beq.n	80039ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80039aa:	677b      	str	r3, [r7, #116]	; 0x74
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b4:	637b      	str	r3, [r7, #52]	; 0x34
 80039b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e6      	bne.n	8003996 <UART_Start_Receive_IT+0x1be>
 80039c8:	e018      	b.n	80039fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	e853 3f00 	ldrex	r3, [r3]
 80039d6:	613b      	str	r3, [r7, #16]
   return(result);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f043 0320 	orr.w	r3, r3, #32
 80039de:	67bb      	str	r3, [r7, #120]	; 0x78
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e8:	623b      	str	r3, [r7, #32]
 80039ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	6a3a      	ldr	r2, [r7, #32]
 80039f0:	e841 2300 	strex	r3, r2, [r1]
 80039f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1e6      	bne.n	80039ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	378c      	adds	r7, #140	; 0x8c
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	08004235 	.word	0x08004235
 8003a0c:	08003ed5 	.word	0x08003ed5
 8003a10:	08003d1d 	.word	0x08003d1d
 8003a14:	08003b65 	.word	0x08003b65

08003a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b095      	sub	sp, #84	; 0x54
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8003a40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e6      	bne.n	8003a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3308      	adds	r3, #8
 8003a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d118      	bne.n	8003ac4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f023 0310 	bic.w	r3, r3, #16
 8003aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6979      	ldr	r1, [r7, #20]
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	613b      	str	r3, [r7, #16]
   return(result);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e6      	bne.n	8003a92 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003ad8:	bf00      	nop
 8003ada:	3754      	adds	r7, #84	; 0x54
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff fa29 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b06:	bf00      	nop
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b088      	sub	sp, #32
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2a:	61fb      	str	r3, [r7, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6979      	ldr	r1, [r7, #20]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	613b      	str	r3, [r7, #16]
   return(result);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e6      	bne.n	8003b16 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fc fcc3 	bl	80004e2 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b5c:	bf00      	nop
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b09c      	sub	sp, #112	; 0x70
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003b72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7c:	2b22      	cmp	r3, #34	; 0x22
 8003b7e:	f040 80be 	bne.w	8003cfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003b90:	b2d9      	uxtb	r1, r3
 8003b92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f040 80a1 	bne.w	8003d0e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bea:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e6      	bne.n	8003bcc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3308      	adds	r3, #8
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	667b      	str	r3, [r7, #100]	; 0x64
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003c1e:	647a      	str	r2, [r7, #68]	; 0x44
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e5      	bne.n	8003bfe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a33      	ldr	r2, [pc, #204]	; (8003d18 <UART_RxISR_8BIT+0x1b4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01f      	beq.n	8003c90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d018      	beq.n	8003c90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c72:	663b      	str	r3, [r7, #96]	; 0x60
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e6      	bne.n	8003c5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d12e      	bne.n	8003cf6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0310 	bic.w	r3, r3, #16
 8003cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e6      	bne.n	8003c9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	d103      	bne.n	8003ce6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cec:	4619      	mov	r1, r3
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff f93b 	bl	8002f6a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cf4:	e00b      	b.n	8003d0e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fc fbfc 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 8003cfc:	e007      	b.n	8003d0e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699a      	ldr	r2, [r3, #24]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0208 	orr.w	r2, r2, #8
 8003d0c:	619a      	str	r2, [r3, #24]
}
 8003d0e:	bf00      	nop
 8003d10:	3770      	adds	r7, #112	; 0x70
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40008000 	.word	0x40008000

08003d1c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b09c      	sub	sp, #112	; 0x70
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003d2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d34:	2b22      	cmp	r3, #34	; 0x22
 8003d36:	f040 80be 	bne.w	8003eb6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d4a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003d4e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003d52:	4013      	ands	r3, r2
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d58:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	1c9a      	adds	r2, r3, #2
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 80a1 	bne.w	8003ec6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d98:	667b      	str	r3, [r7, #100]	; 0x64
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003da2:	657b      	str	r3, [r7, #84]	; 0x54
 8003da4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003da8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e6      	bne.n	8003d84 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dd6:	643a      	str	r2, [r7, #64]	; 0x40
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ddc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <UART_RxISR_16BIT+0x1b4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d01f      	beq.n	8003e48 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d018      	beq.n	8003e48 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	e853 3f00 	ldrex	r3, [r3]
 8003e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3c:	e841 2300 	strex	r3, r2, [r1]
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1e6      	bne.n	8003e16 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d12e      	bne.n	8003eae <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f023 0310 	bic.w	r3, r3, #16
 8003e6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6979      	ldr	r1, [r7, #20]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	613b      	str	r3, [r7, #16]
   return(result);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e6      	bne.n	8003e56 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d103      	bne.n	8003e9e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff f85f 	bl	8002f6a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003eac:	e00b      	b.n	8003ec6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fb20 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 8003eb4:	e007      	b.n	8003ec6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699a      	ldr	r2, [r3, #24]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0208 	orr.w	r2, r2, #8
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	3770      	adds	r7, #112	; 0x70
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40008000 	.word	0x40008000

08003ed4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b0ac      	sub	sp, #176	; 0xb0
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ee2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0a:	2b22      	cmp	r3, #34	; 0x22
 8003f0c:	f040 8182 	bne.w	8004214 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f16:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f1a:	e125      	b.n	8004168 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f26:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8003f2a:	b2d9      	uxtb	r1, r3
 8003f2c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	400a      	ands	r2, r1
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d053      	beq.n	8004016 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d011      	beq.n	8003f9e <UART_RxISR_8BIT_FIFOEN+0xca>
 8003f7a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00b      	beq.n	8003fce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f043 0204 	orr.w	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2204      	movs	r2, #4
 8003fec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff4:	f043 0202 	orr.w	r2, r3, #2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7fe ffa5 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 80a2 	bne.w	8004168 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004046:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004048:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800404c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e4      	bne.n	8004024 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800406a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004082:	66ba      	str	r2, [r7, #104]	; 0x68
 8004084:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004088:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e1      	bne.n	800405a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a5f      	ldr	r2, [pc, #380]	; (800422c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d021      	beq.n	80040f8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01a      	beq.n	80040f8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80040d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040e4:	657b      	str	r3, [r7, #84]	; 0x54
 80040e6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80040ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e4      	bne.n	80040c2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d130      	bne.n	8004162 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	f023 0310 	bic.w	r3, r3, #16
 800411a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	461a      	mov	r2, r3
 8004124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004128:	643b      	str	r3, [r7, #64]	; 0x40
 800412a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800412e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004130:	e841 2300 	strex	r3, r2, [r1]
 8004134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e4      	bne.n	8004106 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b10      	cmp	r3, #16
 8004148:	d103      	bne.n	8004152 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2210      	movs	r2, #16
 8004150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fe ff05 	bl	8002f6a <HAL_UARTEx_RxEventCallback>
 8004160:	e002      	b.n	8004168 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fc f9c6 	bl	80004f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004168:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800416c:	2b00      	cmp	r3, #0
 800416e:	d006      	beq.n	800417e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004170:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f aecf 	bne.w	8003f1c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004184:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004188:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800418c:	2b00      	cmp	r3, #0
 800418e:	d049      	beq.n	8004224 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004196:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800419a:	429a      	cmp	r2, r3
 800419c:	d242      	bcs.n	8004224 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80041c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e3      	bne.n	800419e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a15      	ldr	r2, [pc, #84]	; (8004230 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80041da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f043 0320 	orr.w	r3, r3, #32
 80041f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	613b      	str	r3, [r7, #16]
   return(result);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e4      	bne.n	80041dc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004212:	e007      	b.n	8004224 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0208 	orr.w	r2, r2, #8
 8004222:	619a      	str	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	37b0      	adds	r7, #176	; 0xb0
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40008000 	.word	0x40008000
 8004230:	08003b65 	.word	0x08003b65

08004234 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b0ae      	sub	sp, #184	; 0xb8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004242:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426a:	2b22      	cmp	r3, #34	; 0x22
 800426c:	f040 8186 	bne.w	800457c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004276:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800427a:	e129      	b.n	80044d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800428e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004292:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004296:	4013      	ands	r3, r2
 8004298:	b29a      	uxth	r2, r3
 800429a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800429e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a4:	1c9a      	adds	r2, r3, #2
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80042c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d053      	beq.n	800437a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d011      	beq.n	8004302 <UART_RxISR_16BIT_FIFOEN+0xce>
 80042de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004302:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d011      	beq.n	8004332 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800430e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00b      	beq.n	8004332 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2202      	movs	r2, #2
 8004320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	f043 0204 	orr.w	r2, r3, #4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004332:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d011      	beq.n	8004362 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800433e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2204      	movs	r2, #4
 8004350:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f043 0202 	orr.w	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004368:	2b00      	cmp	r3, #0
 800436a:	d006      	beq.n	800437a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7fe fdf3 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	f040 80a4 	bne.w	80044d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800439c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043ae:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e2      	bne.n	8004388 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3308      	adds	r3, #8
 80043c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d8:	f023 0301 	bic.w	r3, r3, #1
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3308      	adds	r3, #8
 80043e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80043ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e1      	bne.n	80043c2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a5f      	ldr	r2, [pc, #380]	; (8004594 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d021      	beq.n	8004460 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01a      	beq.n	8004460 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800443e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800444c:	65bb      	str	r3, [r7, #88]	; 0x58
 800444e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800445a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e4      	bne.n	800442a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004464:	2b01      	cmp	r3, #1
 8004466:	d130      	bne.n	80044ca <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	f023 0310 	bic.w	r3, r3, #16
 8004482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
 8004492:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e4      	bne.n	800446e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d103      	bne.n	80044ba <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2210      	movs	r2, #16
 80044b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044c0:	4619      	mov	r1, r3
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fe fd51 	bl	8002f6a <HAL_UARTEx_RxEventCallback>
 80044c8:	e002      	b.n	80044d0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc f812 	bl	80004f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d006      	beq.n	80044e6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80044d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f aecb 	bne.w	800427c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044ec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80044f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d049      	beq.n	800458c <UART_RxISR_16BIT_FIFOEN+0x358>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80044fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004502:	429a      	cmp	r2, r3
 8004504:	d242      	bcs.n	800458c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	623b      	str	r3, [r7, #32]
   return(result);
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3308      	adds	r3, #8
 8004526:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800452a:	633a      	str	r2, [r7, #48]	; 0x30
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e3      	bne.n	8004506 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a15      	ldr	r2, [pc, #84]	; (8004598 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004542:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	60fb      	str	r3, [r7, #12]
   return(result);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f043 0320 	orr.w	r3, r3, #32
 8004558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004566:	61fb      	str	r3, [r7, #28]
 8004568:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	69fa      	ldr	r2, [r7, #28]
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	617b      	str	r3, [r7, #20]
   return(result);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e4      	bne.n	8004544 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800457a:	e007      	b.n	800458c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0208 	orr.w	r2, r2, #8
 800458a:	619a      	str	r2, [r3, #24]
}
 800458c:	bf00      	nop
 800458e:	37b8      	adds	r7, #184	; 0xb8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40008000 	.word	0x40008000
 8004598:	08003d1d 	.word	0x08003d1d

0800459c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr

080045d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e027      	b.n	8004638 <HAL_UARTEx_DisableFifoMode+0x66>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004616:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004656:	2302      	movs	r3, #2
 8004658:	e02d      	b.n	80046b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2224      	movs	r2, #36	; 0x24
 8004666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f850 	bl	800473c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80046d2:	2302      	movs	r3, #2
 80046d4:	e02d      	b.n	8004732 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2224      	movs	r2, #36	; 0x24
 80046e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f812 	bl	800473c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
	...

0800473c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800475c:	e031      	b.n	80047c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800475e:	2308      	movs	r3, #8
 8004760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004762:	2308      	movs	r3, #8
 8004764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	0e5b      	lsrs	r3, r3, #25
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	0f5b      	lsrs	r3, r3, #29
 800477e:	b2db      	uxtb	r3, r3
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004786:	7bbb      	ldrb	r3, [r7, #14]
 8004788:	7b3a      	ldrb	r2, [r7, #12]
 800478a:	4910      	ldr	r1, [pc, #64]	; (80047cc <UARTEx_SetNbDataToProcess+0x90>)
 800478c:	5c8a      	ldrb	r2, [r1, r2]
 800478e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004792:	7b3a      	ldrb	r2, [r7, #12]
 8004794:	490e      	ldr	r1, [pc, #56]	; (80047d0 <UARTEx_SetNbDataToProcess+0x94>)
 8004796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004798:	fb93 f3f2 	sdiv	r3, r3, r2
 800479c:	b29a      	uxth	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	7b7a      	ldrb	r2, [r7, #13]
 80047a8:	4908      	ldr	r1, [pc, #32]	; (80047cc <UARTEx_SetNbDataToProcess+0x90>)
 80047aa:	5c8a      	ldrb	r2, [r1, r2]
 80047ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047b0:	7b7a      	ldrb	r2, [r7, #13]
 80047b2:	4907      	ldr	r1, [pc, #28]	; (80047d0 <UARTEx_SetNbDataToProcess+0x94>)
 80047b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr
 80047cc:	08004918 	.word	0x08004918
 80047d0:	08004920 	.word	0x08004920

080047d4 <__libc_init_array>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4d0d      	ldr	r5, [pc, #52]	; (800480c <__libc_init_array+0x38>)
 80047d8:	4c0d      	ldr	r4, [pc, #52]	; (8004810 <__libc_init_array+0x3c>)
 80047da:	1b64      	subs	r4, r4, r5
 80047dc:	10a4      	asrs	r4, r4, #2
 80047de:	2600      	movs	r6, #0
 80047e0:	42a6      	cmp	r6, r4
 80047e2:	d109      	bne.n	80047f8 <__libc_init_array+0x24>
 80047e4:	4d0b      	ldr	r5, [pc, #44]	; (8004814 <__libc_init_array+0x40>)
 80047e6:	4c0c      	ldr	r4, [pc, #48]	; (8004818 <__libc_init_array+0x44>)
 80047e8:	f000 f820 	bl	800482c <_init>
 80047ec:	1b64      	subs	r4, r4, r5
 80047ee:	10a4      	asrs	r4, r4, #2
 80047f0:	2600      	movs	r6, #0
 80047f2:	42a6      	cmp	r6, r4
 80047f4:	d105      	bne.n	8004802 <__libc_init_array+0x2e>
 80047f6:	bd70      	pop	{r4, r5, r6, pc}
 80047f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fc:	4798      	blx	r3
 80047fe:	3601      	adds	r6, #1
 8004800:	e7ee      	b.n	80047e0 <__libc_init_array+0xc>
 8004802:	f855 3b04 	ldr.w	r3, [r5], #4
 8004806:	4798      	blx	r3
 8004808:	3601      	adds	r6, #1
 800480a:	e7f2      	b.n	80047f2 <__libc_init_array+0x1e>
 800480c:	08004930 	.word	0x08004930
 8004810:	08004930 	.word	0x08004930
 8004814:	08004930 	.word	0x08004930
 8004818:	08004934 	.word	0x08004934

0800481c <memset>:
 800481c:	4402      	add	r2, r0
 800481e:	4603      	mov	r3, r0
 8004820:	4293      	cmp	r3, r2
 8004822:	d100      	bne.n	8004826 <memset+0xa>
 8004824:	4770      	bx	lr
 8004826:	f803 1b01 	strb.w	r1, [r3], #1
 800482a:	e7f9      	b.n	8004820 <memset+0x4>

0800482c <_init>:
 800482c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482e:	bf00      	nop
 8004830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004832:	bc08      	pop	{r3}
 8004834:	469e      	mov	lr, r3
 8004836:	4770      	bx	lr

08004838 <_fini>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	bf00      	nop
 800483c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483e:	bc08      	pop	{r3}
 8004840:	469e      	mov	lr, r3
 8004842:	4770      	bx	lr

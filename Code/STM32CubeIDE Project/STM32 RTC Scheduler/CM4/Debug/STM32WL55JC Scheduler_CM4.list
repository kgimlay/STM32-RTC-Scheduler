
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005124  08005124  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800512c  0800512c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08005140  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08005140  00020220  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d23  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002698  00000000  00000000  00030d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  000333f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c138  00000000  00000000  00035400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcb8  00000000  00000000  00051538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000affa9  00000000  00000000  000611f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  001111ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08005018 	.word	0x08005018

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08005018 	.word	0x08005018

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <initDesktopCommunication>:


/*
 *
 */
void initDesktopCommunication(UART_HandleTypeDef* uartHandle) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <initDesktopCommunication+0x28>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6013      	str	r3, [r2, #0]
	uartQueue_init(&(_process_queue));
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <initDesktopCommunication+0x2c>)
 8000498:	f000 fb01 	bl	8000a9e <uartQueue_init>
	uartQueue_init(&(_report_queue));
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <initDesktopCommunication+0x30>)
 800049e:	f000 fafe 	bl	8000a9e <uartQueue_init>

	// set isInit flag
	_isInit = true;
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <initDesktopCommunication+0x34>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	20000030 	.word	0x20000030
 80004b8:	200000bc 	.word	0x200000bc
 80004bc:	20000028 	.word	0x20000028

080004c0 <checkRxTxError>:


/*
 *
 */
bool checkRxTxError(void) {
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	return (_rxError || _txError);
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <checkRxTxError+0x2c>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d104      	bne.n	80004d8 <checkRxTxError+0x18>
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <checkRxTxError+0x30>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <checkRxTxError+0x1c>
 80004d8:	2301      	movs	r3, #1
 80004da:	e000      	b.n	80004de <checkRxTxError+0x1e>
 80004dc:	2300      	movs	r3, #0
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	2000002a 	.word	0x2000002a
 80004f0:	20000029 	.word	0x20000029

080004f4 <flushReportQueue>:


/*
 *
 */
void flushReportQueue(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	// while the report queue is not empty
	while (!uartQueue_isEmpty(&_report_queue))
 80004f8:	e005      	b.n	8000506 <flushReportQueue+0x12>
	{
		// pop message from report queue and place in tx buffer
		uartQueue_dequeue(&_report_queue, _txBuffer);
 80004fa:	4909      	ldr	r1, [pc, #36]	; (8000520 <flushReportQueue+0x2c>)
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <flushReportQueue+0x30>)
 80004fe:	f000 fb21 	bl	8000b44 <uartQueue_dequeue>

		// send message to computer
		_txMessage_Poll();
 8000502:	f000 f86b 	bl	80005dc <_txMessage_Poll>
	while (!uartQueue_isEmpty(&_report_queue))
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <flushReportQueue+0x30>)
 8000508:	f000 fb31 	bl	8000b6e <uartQueue_isEmpty>
 800050c:	4603      	mov	r3, r0
 800050e:	f083 0301 	eor.w	r3, r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f0      	bne.n	80004fa <flushReportQueue+0x6>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	20000148 	.word	0x20000148
 8000524:	200000bc 	.word	0x200000bc

08000528 <startDesktopAppCommunication>:


/*
 *
 */
void startDesktopAppCommunication(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	_rxMessage_IT();
 800052c:	f000 f83e 	bl	80005ac <_rxMessage_IT>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}

08000534 <deskAppRxCompleteISR>:


/*
 *
 */
void deskAppRxCompleteISR(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	// check if queue is not full
	if (!uartQueue_isFull(&_process_queue))
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <deskAppRxCompleteISR+0x38>)
 800053a:	f000 fb24 	bl	8000b86 <uartQueue_isFull>
 800053e:	4603      	mov	r3, r0
 8000540:	f083 0301 	eor.w	r3, r3, #1
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d004      	beq.n	8000554 <deskAppRxCompleteISR+0x20>
	{
		// add message to process queue
		uartQueue_enqueue(&_process_queue, _rxBuffer);
 800054a:	4909      	ldr	r1, [pc, #36]	; (8000570 <deskAppRxCompleteISR+0x3c>)
 800054c:	4807      	ldr	r0, [pc, #28]	; (800056c <deskAppRxCompleteISR+0x38>)
 800054e:	f000 fad4 	bl	8000afa <uartQueue_enqueue>
 8000552:	e006      	b.n	8000562 <deskAppRxCompleteISR+0x2e>

	// queue is full, report to desktop application to pause transmissions
	else
	{
		// todo: replace with something better
		strncpy(_txBuffer, "\nBUFFER FULL!\n\n", UART_MESSAGE_SIZE);
 8000554:	2220      	movs	r2, #32
 8000556:	4907      	ldr	r1, [pc, #28]	; (8000574 <deskAppRxCompleteISR+0x40>)
 8000558:	4807      	ldr	r0, [pc, #28]	; (8000578 <deskAppRxCompleteISR+0x44>)
 800055a:	f004 fd49 	bl	8004ff0 <strncpy>
		_txMessage_IT();
 800055e:	f000 f80d 	bl	800057c <_txMessage_IT>
	}

	// begin receiving again
	_rxMessage_IT();
 8000562:	f000 f823 	bl	80005ac <_rxMessage_IT>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	20000030 	.word	0x20000030
 8000570:	20000168 	.word	0x20000168
 8000574:	08005030 	.word	0x08005030
 8000578:	20000148 	.word	0x20000148

0800057c <_txMessage_IT>:


/*
 *
 */
void _txMessage_IT(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <_txMessage_IT+0x24>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2220      	movs	r2, #32
 8000586:	4907      	ldr	r1, [pc, #28]	; (80005a4 <_txMessage_IT+0x28>)
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fb1f 	bl	8002bcc <HAL_UART_Transmit_IT>
 800058e:	4603      	mov	r3, r0
 8000590:	2b01      	cmp	r3, #1
 8000592:	d102      	bne.n	800059a <_txMessage_IT+0x1e>
		_txError = true;
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <_txMessage_IT+0x2c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	20000148 	.word	0x20000148
 80005a8:	20000029 	.word	0x20000029

080005ac <_rxMessage_IT>:


/*
 *
 */
void _rxMessage_IT(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80005b0:	4b07      	ldr	r3, [pc, #28]	; (80005d0 <_rxMessage_IT+0x24>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2220      	movs	r2, #32
 80005b6:	4907      	ldr	r1, [pc, #28]	; (80005d4 <_rxMessage_IT+0x28>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f002 fb9b 	bl	8002cf4 <HAL_UART_Receive_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d102      	bne.n	80005ca <_rxMessage_IT+0x1e>
		_rxError = true;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <_rxMessage_IT+0x2c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	20000168 	.word	0x20000168
 80005d8:	2000002a 	.word	0x2000002a

080005dc <_txMessage_Poll>:


/*
 *
 */
void _txMessage_Poll(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <_txMessage_Poll+0x24>)
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	23fa      	movs	r3, #250	; 0xfa
 80005e6:	2220      	movs	r2, #32
 80005e8:	4906      	ldr	r1, [pc, #24]	; (8000604 <_txMessage_Poll+0x28>)
 80005ea:	f002 fa68 	bl	8002abe <HAL_UART_Transmit>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d102      	bne.n	80005fa <_txMessage_Poll+0x1e>
		_txError = true;
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <_txMessage_Poll+0x2c>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000002c 	.word	0x2000002c
 8000604:	20000148 	.word	0x20000148
 8000608:	20000029 	.word	0x20000029

0800060c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800061c:	f023 0218 	bic.w	r2, r3, #24
 8000620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4313      	orrs	r3, r2
 8000628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000636:	b480      	push	{r7}
 8000638:	b085      	sub	sp, #20
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800063e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4313      	orrs	r3, r2
 800064c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800064e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4013      	ands	r3, r2
 8000658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
	...

0800068c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	// if UART rx on UART2 (for desktop app communication)
	if (UartHandle->Instance == USART1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a06      	ldr	r2, [pc, #24]	; (80006b4 <HAL_UART_RxCpltCallback+0x28>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d006      	beq.n	80006ac <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation
	else if (UartHandle->Instance == USART2)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <HAL_UART_RxCpltCallback+0x2c>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d101      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x20>
		deskAppRxCompleteISR();
 80006a8:	f7ff ff44 	bl	8000534 <deskAppRxCompleteISR>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40013800 	.word	0x40013800
 80006b8:	40004400 	.word	0x40004400

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c0:	f000 faa8 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c4:	f000 f818 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c8:	f000 f8c6 	bl	8000858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006cc:	f000 f86e 	bl	80007ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 fe65 	bl	80013a0 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  initDesktopCommunication(&huart2);
 80006d6:	4807      	ldr	r0, [pc, #28]	; (80006f4 <main+0x38>)
 80006d8:	f7ff fed6 	bl	8000488 <initDesktopCommunication>

  // begin listening for messages from desktop
  startDesktopAppCommunication();
 80006dc:	f7ff ff24 	bl	8000528 <startDesktopAppCommunication>

  while (1)
  {
	  // check if there was an error in rx or tx
	  if (checkRxTxError())
 80006e0:	f7ff feee 	bl	80004c0 <checkRxTxError>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d000      	beq.n	80006ec <main+0x30>
		  while (1) {}
 80006ea:	e7fe      	b.n	80006ea <main+0x2e>

	  // flush the report queue
	  flushReportQueue();
 80006ec:	f7ff ff02 	bl	80004f4 <flushReportQueue>
	  if (checkRxTxError())
 80006f0:	e7f6      	b.n	80006e0 <main+0x24>
 80006f2:	bf00      	nop
 80006f4:	20000188 	.word	0x20000188

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09a      	sub	sp, #104	; 0x68
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2248      	movs	r2, #72	; 0x48
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fc6a 	bl	8004fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]
 800071a:	615a      	str	r2, [r3, #20]
 800071c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800071e:	f000 fe17 	bl	8001350 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ff72 	bl	800060c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xb0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000730:	4a1d      	ldr	r2, [pc, #116]	; (80007a8 <SystemClock_Config+0xb0>)
 8000732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <SystemClock_Config+0xb0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000744:	2324      	movs	r3, #36	; 0x24
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000748:	2381      	movs	r3, #129	; 0x81
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000750:	2300      	movs	r3, #0
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000754:	2360      	movs	r3, #96	; 0x60
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f8df 	bl	8001924 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800076c:	f000 f881 	bl	8000872 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000770:	236f      	movs	r3, #111	; 0x6f
 8000772:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f001 fc49 	bl	8002028 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800079c:	f000 f869 	bl	8000872 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3768      	adds	r7, #104	; 0x68
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58000400 	.word	0x58000400

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b27      	ldr	r3, [pc, #156]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007b2:	4a28      	ldr	r2, [pc, #160]	; (8000854 <MX_USART2_UART_Init+0xa8>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80007d0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007d4:	220c      	movs	r2, #12
 80007d6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007f2:	2230      	movs	r2, #48	; 0x30
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 80007f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 8000800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000804:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 8000808:	f002 f909 	bl	8002a1e <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f82e 	bl	8000872 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 800081a:	f004 fae6 	bl	8004dea <HAL_UARTEx_SetTxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f825 	bl	8000872 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000828:	2100      	movs	r1, #0
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 800082c:	f004 fb1b 	bl	8004e66 <HAL_UARTEx_SetRxFifoThreshold>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000836:	f000 f81c 	bl	8000872 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_USART2_UART_Init+0xa4>)
 800083c:	f004 fa9d 	bl	8004d7a <HAL_UARTEx_DisableFifoMode>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000846:	f000 f814 	bl	8000872 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000188 	.word	0x20000188
 8000854:	40004400 	.word	0x40004400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff feea 	bl	8000636 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2004      	movs	r0, #4
 8000864:	f7ff fee7 	bl	8000636 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000868:	2002      	movs	r0, #2
 800086a:	f7ff fee4 	bl	8000636 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000876:	b672      	cpsid	i
}
 8000878:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087a:	e7fe      	b.n	800087a <Error_Handler+0x8>

0800087c <LL_AHB2_GRP1_EnableClock>:
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000888:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800088a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4313      	orrs	r3, r2
 8000892:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4013      	ands	r3, r2
 800089e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a0:	68fb      	ldr	r3, [r7, #12]
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr

080008ac <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4313      	orrs	r3, r2
 80008c2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4013      	ands	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d0:	68fb      	ldr	r3, [r7, #12]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b096      	sub	sp, #88	; 0x58
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	2238      	movs	r2, #56	; 0x38
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f004 fb69 	bl	8004fe0 <memset>
  if(huart->Instance==USART2)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <HAL_UART_MspInit+0x98>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d12e      	bne.n	8000976 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000918:	2302      	movs	r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800091c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000920:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4618      	mov	r0, r3
 8000928:	f001 ff3e 	bl	80027a8 <HAL_RCCEx_PeriphCLKConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000932:	f7ff ff9e 	bl	8000872 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000936:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800093a:	f7ff ffb7 	bl	80008ac <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2001      	movs	r0, #1
 8000940:	f7ff ff9c 	bl	800087c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000944:	230c      	movs	r3, #12
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000954:	2307      	movs	r3, #7
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800095c:	4619      	mov	r1, r3
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f000 fb95 	bl	8001090 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2025      	movs	r0, #37	; 0x25
 800096c:	f000 fa9f 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000970:	2025      	movs	r0, #37	; 0x25
 8000972:	f000 fab6 	bl	8000ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000976:	bf00      	nop
 8000978:	3758      	adds	r7, #88	; 0x58
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40004400 	.word	0x40004400

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 f97d 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <USART2_IRQHandler+0x10>)
 80009da:	f002 f9d7 	bl	8002d8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000188 	.word	0x20000188

080009e8 <nextIdx>:


/*
 * Private helper to calculate next index in circular queue.
 */
uint8_t nextIdx(uint8_t index) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
	return (index + 1) % QUEUE_SIZE;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	3301      	adds	r3, #1
 80009f6:	425a      	negs	r2, r3
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	f002 0203 	and.w	r2, r2, #3
 8000a00:	bf58      	it	pl
 8000a02:	4253      	negpl	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <_enqueue>:

/*
 * Private helper to enqueue a message to the queue.
 */
void _enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	// copy the message to the queue and increment the rear pointer
	memcpy(queue->_queue[queue->_rear], message, QUEUE_BUFFER_SIZE*sizeof(char));
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689b      	ldr	r3, [r3, #8]
 8000a1e:	015b      	lsls	r3, r3, #5
 8000a20:	3308      	adds	r3, #8
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	3304      	adds	r3, #4
 8000a28:	2220      	movs	r2, #32
 8000a2a:	6839      	ldr	r1, [r7, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fac9 	bl	8004fc4 <memcpy>
	queue->_rear = nextIdx(queue->_rear);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ffd5 	bl	80009e8 <nextIdx>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	609a      	str	r2, [r3, #8]
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_dequeue>:

/*
 * Private helper to dequeue a message from the queue.
 */
void _dequeue(UART_Queue* queue, char messageBuffer[QUEUE_BUFFER_SIZE]) {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b082      	sub	sp, #8
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	6039      	str	r1, [r7, #0]
	// copy message from  the queue and increment the front pointer
	strncpy(messageBuffer, queue->_queue[queue->_front], QUEUE_BUFFER_SIZE);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	015b      	lsls	r3, r3, #5
 8000a5e:	3308      	adds	r3, #8
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4413      	add	r3, r2
 8000a64:	3304      	adds	r3, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6838      	ldr	r0, [r7, #0]
 8000a6c:	f004 fac0 	bl	8004ff0 <strncpy>
	queue->_front = nextIdx(queue->_front);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffb6 	bl	80009e8 <nextIdx>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	605a      	str	r2, [r3, #4]

	// set isEmpty flag if necessary
	if (queue->_front == queue->_rear)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d102      	bne.n	8000a96 <_dequeue+0x48>
		queue->_isEmpty = true;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <uartQueue_init>:

/*
 * Initializes a UART_Queue structure.
 * Call before attempting to operate on the queue.
 */
void uartQueue_init(UART_Queue* queue) {
 8000a9e:	b480      	push	{r7}
 8000aa0:	b085      	sub	sp, #20
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	// operation variables
	int row, col;

	// reset all operation variables
	queue->_isEmpty = true;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
	queue->_front = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
	queue->_rear = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]

	// ensure that the queue messages are empty
	for (row = 0; row < QUEUE_SIZE; row++)
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	e014      	b.n	8000ae8 <uartQueue_init+0x4a>
		for (col = 0; col < QUEUE_BUFFER_SIZE; col++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	e00b      	b.n	8000adc <uartQueue_init+0x3e>
			queue->_queue[row][col] = '\0';
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	015b      	lsls	r3, r3, #5
 8000aca:	441a      	add	r2, r3
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4413      	add	r3, r2
 8000ad0:	330c      	adds	r3, #12
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
		for (col = 0; col < QUEUE_BUFFER_SIZE; col++)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	2b1f      	cmp	r3, #31
 8000ae0:	ddf0      	ble.n	8000ac4 <uartQueue_init+0x26>
	for (row = 0; row < QUEUE_SIZE; row++)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	dde7      	ble.n	8000abe <uartQueue_init+0x20>
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <uartQueue_enqueue>:

/*
 * Enqueue a message.
 * Return success if enqueueing successful, or full if the queue is full.
 */
UART_QUEUE_STATUS uartQueue_enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (uartQueue_isEmpty(queue)) {
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 f832 	bl	8000b6e <uartQueue_isEmpty>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d008      	beq.n	8000b22 <uartQueue_enqueue+0x28>
		// set not empty
		queue->_isEmpty = false;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]

		// enqueue
		_enqueue(queue, message);
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff79 	bl	8000a10 <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e00c      	b.n	8000b3c <uartQueue_enqueue+0x42>
	}

	// case that queue is full
	else if (uartQueue_isFull(queue)) {
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 f82f 	bl	8000b86 <uartQueue_isFull>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <uartQueue_enqueue+0x38>
		// report
		return UART_QUEUE_FULL;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e004      	b.n	8000b3c <uartQueue_enqueue+0x42>
	}

	// queue is not full, enqueue
	else {
		// enqueue
		_enqueue(queue, message);
 8000b32:	6839      	ldr	r1, [r7, #0]
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff6b 	bl	8000a10 <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000b3a:	2300      	movs	r3, #0
	}
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <uartQueue_dequeue>:
/*
 * Dequeue a message.
 * Return success and message if message present, or empty and null if queue
 * is empty.
 */
UART_QUEUE_STATUS uartQueue_dequeue(UART_Queue* queue, char messageBuffer[QUEUE_BUFFER_SIZE]) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (queue->_isEmpty) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <uartQueue_dequeue+0x18>
		return UART_QUEUE_EMPTY;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e004      	b.n	8000b66 <uartQueue_dequeue+0x22>
	}

	// case that queue is not empty
	else {
		_dequeue(queue, messageBuffer);
 8000b5c:	6839      	ldr	r1, [r7, #0]
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ff75 	bl	8000a4e <_dequeue>
		return UART_QUEUE_OKAY;
 8000b64:	2300      	movs	r3, #0
	}
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <uartQueue_isEmpty>:

/*
 *
 */
bool uartQueue_isEmpty(UART_Queue* queue) {
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
	return (queue->_isEmpty);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b2db      	uxtb	r3, r3
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <uartQueue_isFull>:

/*
 * Helper to check if a queue is empty.
 */
bool uartQueue_isFull(UART_Queue* queue) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
	return (!uartQueue_isEmpty(queue) && queue->_front == queue->_rear);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffed 	bl	8000b6e <uartQueue_isEmpty>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f083 0301 	eor.w	r3, r3, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d007      	beq.n	8000bb0 <uartQueue_isFull+0x2a>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d101      	bne.n	8000bb0 <uartQueue_isFull+0x2a>
 8000bac:	2301      	movs	r3, #1
 8000bae:	e000      	b.n	8000bb2 <uartQueue_isFull+0x2c>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc4:	f7ff fc5a 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bee:	f004 f9c5 	bl	8004f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf2:	f7ff fd63 	bl	80006bc <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   r0, =_estack
 8000bf8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c04:	08005134 	.word	0x08005134
  ldr r2, =_sbss
 8000c08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c0c:	20000220 	.word	0x20000220

08000c10 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 f93a 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c24:	f001 fbe2 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <HAL_Init+0x3c>)
 8000c2c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 f810 	bl	8000c54 <HAL_InitTick>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	71fb      	strb	r3, [r7, #7]
 8000c3e:	e001      	b.n	8000c44 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c40:	f7ff fe4c 	bl	80008dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000000 	.word	0x20000000

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d024      	beq.n	8000cb2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c68:	f001 fbc0 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_InitTick+0x6c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c78:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f93c 	bl	8000efe <HAL_SYSTICK_Config>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10f      	bne.n	8000cac <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b0f      	cmp	r3, #15
 8000c90:	d809      	bhi.n	8000ca6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c92:	2200      	movs	r2, #0
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9a:	f000 f908 	bl	8000eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9e:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <HAL_InitTick+0x70>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e007      	b.n	8000cb6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e004      	b.n	8000cb6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cac:	2301      	movs	r3, #1
 8000cae:	73fb      	strb	r3, [r7, #15]
 8000cb0:	e001      	b.n	8000cb6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x1c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a03      	ldr	r2, [pc, #12]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	2000021c 	.word	0x2000021c

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b02      	ldr	r3, [pc, #8]	; (8000cfc <HAL_GetTick+0x10>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	2000021c 	.word	0x2000021c

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4906      	ldr	r1, [pc, #24]	; (8000d98 <__NVIC_EnableIRQ+0x34>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f7ff ff90 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff2d 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebc:	f7ff ff44 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff ff92 	bl	8000df0 <NVIC_EncodePriority>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ff61 	bl	8000d9c <__NVIC_SetPriority>
}
 8000eda:	bf00      	nop
 8000edc:	3718      	adds	r7, #24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	4603      	mov	r3, r0
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff37 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffa4 	bl	8000e54 <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e04f      	b.n	8000fc8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d008      	beq.n	8000f46 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2204      	movs	r2, #4
 8000f38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e040      	b.n	8000fc8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020e 	bic.w	r2, r2, #14
 8000f54:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f003 021c 	and.w	r2, r3, #28
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f92:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d00c      	beq.n	8000fb6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000faa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000fb4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d005      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2204      	movs	r2, #4
 8000fee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e047      	b.n	8001086 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020e 	bic.w	r2, r2, #14
 8001004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f003 021c 	and.w	r2, r3, #28
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001042:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800105a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001064:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	4798      	blx	r3
    }
  }
  return status;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b480      	push	{r7}
 8001092:	b087      	sub	sp, #28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	e140      	b.n	8001322 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8132 	beq.w	800131c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d005      	beq.n	80010d0 <HAL_GPIO_Init+0x40>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f003 0201 	and.w	r2, r3, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	2b03      	cmp	r3, #3
 800113c:	d017      	beq.n	800116e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	6939      	ldr	r1, [r7, #16]
 80011be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0203 	and.w	r2, r3, #3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 808c 	beq.w	800131c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001204:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_GPIO_Init+0x2b0>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	2207      	movs	r2, #7
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800122e:	d00d      	beq.n	800124c <HAL_GPIO_Init+0x1bc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a44      	ldr	r2, [pc, #272]	; (8001344 <HAL_GPIO_Init+0x2b4>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0x1b8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a43      	ldr	r2, [pc, #268]	; (8001348 <HAL_GPIO_Init+0x2b8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d101      	bne.n	8001244 <HAL_GPIO_Init+0x1b4>
 8001240:	2302      	movs	r3, #2
 8001242:	e004      	b.n	800124e <HAL_GPIO_Init+0x1be>
 8001244:	2307      	movs	r3, #7
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0x1be>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_GPIO_Init+0x1be>
 800124c:	2300      	movs	r3, #0
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	f002 0203 	and.w	r2, r2, #3
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	4093      	lsls	r3, r2
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800125e:	4938      	ldr	r1, [pc, #224]	; (8001340 <HAL_GPIO_Init+0x2b0>)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800126c:	4b37      	ldr	r3, [pc, #220]	; (800134c <HAL_GPIO_Init+0x2bc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001290:	4a2e      	ldr	r2, [pc, #184]	; (800134c <HAL_GPIO_Init+0x2bc>)
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_GPIO_Init+0x2bc>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ba:	4a24      	ldr	r2, [pc, #144]	; (800134c <HAL_GPIO_Init+0x2bc>)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <HAL_GPIO_Init+0x2bc>)
 80012c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012c6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_GPIO_Init+0x2bc>)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_GPIO_Init+0x2bc>)
 80012f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012f4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <HAL_GPIO_Init+0x2bc>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	f47f aeb7 	bne.w	80010a0 <HAL_GPIO_Init+0x10>
  }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000
 8001344:	48000400 	.word	0x48000400
 8001348:	48000800 	.word	0x48000800
 800134c:	58000800 	.word	0x58000800

08001350 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a03      	ldr	r2, [pc, #12]	; (8001368 <HAL_PWR_EnableBkUpAccess+0x18>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	58000400 	.word	0x58000400

0800136c <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <LL_PWR_EnableBootC2+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <LL_PWR_EnableBootC2+0x18>)
 8001376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	58000400 	.word	0x58000400

08001388 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_PWREx_GetVoltageRange+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	58000400 	.word	0x58000400

080013a0 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80013a8:	f7ff ffe0 	bl	800136c <LL_PWR_EnableBootC2>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013c4:	d101      	bne.n	80013ca <LL_PWR_IsEnabledBkUpAccess+0x16>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	58000400 	.word	0x58000400

080013d8 <LL_RCC_HSE_EnableTcxo>:
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <LL_RCC_HSE_DisableTcxo>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001422:	d101      	bne.n	8001428 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <LL_RCC_HSE_Enable>:
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <LL_RCC_HSE_Disable>:
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800145c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <LL_RCC_HSE_IsReady>:
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800147c:	d101      	bne.n	8001482 <LL_RCC_HSE_IsReady+0x18>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_RCC_HSE_IsReady+0x1a>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <LL_RCC_HSI_Enable>:
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <LL_RCC_HSI_Disable>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <LL_RCC_HSI_IsReady>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d6:	d101      	bne.n	80014dc <LL_RCC_HSI_IsReady+0x18>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_RCC_HSI_IsReady+0x1a>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80014ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	061b      	lsls	r3, r3, #24
 80014fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b02      	cmp	r3, #2
 8001520:	d101      	bne.n	8001526 <LL_RCC_LSE_IsReady+0x18>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <LL_RCC_LSE_IsReady+0x1a>
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b02      	cmp	r3, #2
 8001582:	d101      	bne.n	8001588 <LL_RCC_LSI_IsReady+0x18>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <LL_RCC_LSI_IsReady+0x1a>
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6013      	str	r3, [r2, #0]
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80015b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6013      	str	r3, [r2, #0]
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d101      	bne.n	80015e0 <LL_RCC_MSI_IsReady+0x16>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_RCC_MSI_IsReady+0x18>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80015ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d101      	bne.n	8001600 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 0203 	bic.w	r2, r3, #3
 8001672:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 030c 	and.w	r3, r3, #12
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4313      	orrs	r3, r2
 80016de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016fc:	f023 020f 	bic.w	r2, r3, #15
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001708:	4313      	orrs	r3, r2
 800170a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800172a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4313      	orrs	r3, r2
 8001732:	608b      	str	r3, [r1, #8]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001782:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800180a:	d101      	bne.n	8001810 <LL_RCC_PLL_IsReady+0x18>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <LL_RCC_PLL_IsReady+0x1a>
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr

0800181a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800184c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0303 	and.w	r3, r3, #3
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001886:	d101      	bne.n	800188c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018aa:	d101      	bne.n	80018b0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d101      	bne.n	80018d4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80018e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018f0:	d101      	bne.n	80018f6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001912:	d101      	bne.n	8001918 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
	...

08001924 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e36f      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001936:	f7ff fea6 	bl	8001686 <LL_RCC_GetSysClkSource>
 800193a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193c:	f7ff ff8f 	bl	800185e <LL_RCC_PLL_GetMainSource>
 8001940:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0320 	and.w	r3, r3, #32
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80c4 	beq.w	8001ad8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x3e>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b0c      	cmp	r3, #12
 800195a:	d176      	bne.n	8001a4a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d173      	bne.n	8001a4a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e353      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_OscConfig+0x68>
 8001980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800198a:	e006      	b.n	800199a <HAL_RCC_OscConfig+0x76>
 800198c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199a:	4293      	cmp	r3, r2
 800199c:	d222      	bcs.n	80019e4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd5a 	bl	800245c <RCC_SetFlashLatencyFromMSIRange>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e331      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fe2b 	bl	8001638 <LL_RCC_MSI_SetCalibTrimming>
 80019e2:	e021      	b.n	8001a28 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ee:	f043 0308 	orr.w	r3, r3, #8
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe12 	bl	8001638 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fd1f 	bl	800245c <RCC_SetFlashLatencyFromMSIRange>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e2f6      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a28:	f000 fce0 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4aa7      	ldr	r2, [pc, #668]	; (8001ccc <HAL_RCC_OscConfig+0x3a8>)
 8001a30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001a32:	4ba7      	ldr	r3, [pc, #668]	; (8001cd0 <HAL_RCC_OscConfig+0x3ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f90c 	bl	8000c54 <HAL_InitTick>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d047      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001a46:	7cfb      	ldrb	r3, [r7, #19]
 8001a48:	e2e5      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d02c      	beq.n	8001aac <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a52:	f7ff fd9e 	bl	8001592 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a56:	f7ff f949 	bl	8000cec <HAL_GetTick>
 8001a5a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f945 	bl	8000cec <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e2d2      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001a70:	f7ff fdab 	bl	80015ca <LL_RCC_MSI_IsReady>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f1      	beq.n	8001a5e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fdc7 	bl	8001638 <LL_RCC_MSI_SetCalibTrimming>
 8001aaa:	e015      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aac:	f7ff fd7f 	bl	80015ae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f91c 	bl	8000cec <HAL_GetTick>
 8001ab4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab8:	f7ff f918 	bl	8000cec <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e2a5      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001aca:	f7ff fd7e 	bl	80015ca <LL_RCC_MSI_IsReady>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f1      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x194>
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ad6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d058      	beq.n	8001b96 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1d2>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d108      	bne.n	8001b02 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d105      	bne.n	8001b02 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d14b      	bne.n	8001b96 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e289      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b20:	d102      	bne.n	8001b28 <HAL_RCC_OscConfig+0x204>
 8001b22:	f7ff fc86 	bl	8001432 <LL_RCC_HSE_Enable>
 8001b26:	e00d      	b.n	8001b44 <HAL_RCC_OscConfig+0x220>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001b30:	d104      	bne.n	8001b3c <HAL_RCC_OscConfig+0x218>
 8001b32:	f7ff fc51 	bl	80013d8 <LL_RCC_HSE_EnableTcxo>
 8001b36:	f7ff fc7c 	bl	8001432 <LL_RCC_HSE_Enable>
 8001b3a:	e003      	b.n	8001b44 <HAL_RCC_OscConfig+0x220>
 8001b3c:	f7ff fc87 	bl	800144e <LL_RCC_HSE_Disable>
 8001b40:	f7ff fc58 	bl	80013f4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d012      	beq.n	8001b72 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f8ce 	bl	8000cec <HAL_GetTick>
 8001b50:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff f8ca 	bl	8000cec <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e257      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001b66:	f7ff fc80 	bl	800146a <LL_RCC_HSE_IsReady>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f1      	beq.n	8001b54 <HAL_RCC_OscConfig+0x230>
 8001b70:	e011      	b.n	8001b96 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b72:	f7ff f8bb 	bl	8000cec <HAL_GetTick>
 8001b76:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7a:	f7ff f8b7 	bl	8000cec <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b64      	cmp	r3, #100	; 0x64
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e244      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001b8c:	f7ff fc6d 	bl	800146a <LL_RCC_HSE_IsReady>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f1      	bne.n	8001b7a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d046      	beq.n	8001c30 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x290>
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b0c      	cmp	r3, #12
 8001bac:	d10e      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d10b      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e22a      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fc8e 	bl	80014e6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001bca:	e031      	b.n	8001c30 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d019      	beq.n	8001c08 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd4:	f7ff fc5a 	bl	800148c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f888 	bl	8000cec <HAL_GetTick>
 8001bdc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff f884 	bl	8000cec <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e211      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001bf2:	f7ff fc67 	bl	80014c4 <LL_RCC_HSI_IsReady>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f1      	beq.n	8001be0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fc70 	bl	80014e6 <LL_RCC_HSI_SetCalibTrimming>
 8001c06:	e013      	b.n	8001c30 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c08:	f7ff fc4e 	bl	80014a8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f86e 	bl	8000cec <HAL_GetTick>
 8001c10:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff f86a 	bl	8000cec <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1f7      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001c26:	f7ff fc4d 	bl	80014c4 <LL_RCC_HSI_IsReady>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f1      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d06e      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d056      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d031      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d006      	beq.n	8001c74 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e1d0      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d013      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001c7e:	f7ff fc67 	bl	8001550 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c82:	f7ff f833 	bl	8000cec <HAL_GetTick>
 8001c86:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f82f 	bl	8000cec <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b11      	cmp	r3, #17
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1bc      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001c9c:	f7ff fc68 	bl	8001570 <LL_RCC_LSI_IsReady>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f1      	bne.n	8001c8a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cae:	f023 0210 	bic.w	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc0:	f7ff fc36 	bl	8001530 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc4:	f7ff f812 	bl	8000cec <HAL_GetTick>
 8001cc8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001cca:	e00c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3c2>
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd4:	f7ff f80a 	bl	8000cec <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b11      	cmp	r3, #17
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e197      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001ce6:	f7ff fc43 	bl	8001570 <LL_RCC_LSI_IsReady>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f1      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x3b0>
 8001cf0:	e013      	b.n	8001d1a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf2:	f7ff fc2d 	bl	8001550 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7fe fff9 	bl	8000cec <HAL_GetTick>
 8001cfa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7fe fff5 	bl	8000cec <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b11      	cmp	r3, #17
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e182      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001d10:	f7ff fc2e 	bl	8001570 <LL_RCC_LSI_IsReady>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f1      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80d8 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001d28:	f7ff fb44 	bl	80013b4 <LL_PWR_IsEnabledBkUpAccess>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d113      	bne.n	8001d5a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001d32:	f7ff fb0d 	bl	8001350 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d36:	f7fe ffd9 	bl	8000cec <HAL_GetTick>
 8001d3a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3e:	f7fe ffd5 	bl	8000cec <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e162      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001d50:	f7ff fb30 	bl	80013b4 <LL_PWR_IsEnabledBkUpAccess>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f1      	beq.n	8001d3e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d07b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b85      	cmp	r3, #133	; 0x85
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ffb1 	bl	8000cec <HAL_GetTick>
 8001d8a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7fe ffa3 	bl	8000cec <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e12e      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001db8:	f7ff fba9 	bl	800150e <LL_RCC_LSE_IsReady>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ef      	beq.n	8001da2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b81      	cmp	r3, #129	; 0x81
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b85      	cmp	r3, #133	; 0x85
 8001dd0:	d121      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe ff8b 	bl	8000cec <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7fe ff7d 	bl	8000cec <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e108      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0ec      	beq.n	8001dee <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001e14:	e060      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7fe ff69 	bl	8000cec <HAL_GetTick>
 8001e1a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe ff5b 	bl	8000cec <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0e6      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ec      	bne.n	8001e32 <HAL_RCC_OscConfig+0x50e>
 8001e58:	e03e      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7fe ff47 	bl	8000cec <HAL_GetTick>
 8001e5e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7fe ff39 	bl	8000cec <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0c4      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1ec      	bne.n	8001e76 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe ff26 	bl	8000cec <HAL_GetTick>
 8001ea0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7fe ff18 	bl	8000cec <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e0a3      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ece:	f7ff fb1e 	bl	800150e <LL_RCC_LSE_IsReady>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ef      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8099 	beq.w	8002014 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d06c      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d14b      	bne.n	8001f88 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef0:	f7ff fc74 	bl	80017dc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7fe fefa 	bl	8000cec <HAL_GetTick>
 8001ef8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7fe fef6 	bl	8000cec <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b0a      	cmp	r3, #10
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e083      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f0e:	f7ff fc73 	bl	80017f8 <LL_RCC_PLL_IsReady>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f1      	bne.n	8001efc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b40      	ldr	r3, [pc, #256]	; (8002020 <HAL_RCC_OscConfig+0x6fc>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f2a:	4311      	orrs	r1, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f30:	0212      	lsls	r2, r2, #8
 8001f32:	4311      	orrs	r1, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f38:	4311      	orrs	r1, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f44:	430a      	orrs	r2, r1
 8001f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4e:	f7ff fc37 	bl	80017c0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fec3 	bl	8000cec <HAL_GetTick>
 8001f66:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7fe febf 	bl	8000cec <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b0a      	cmp	r3, #10
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e04c      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001f7c:	f7ff fc3c 	bl	80017f8 <LL_RCC_PLL_IsReady>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f1      	beq.n	8001f6a <HAL_RCC_OscConfig+0x646>
 8001f86:	e045      	b.n	8002014 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f88:	f7ff fc28 	bl	80017dc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe feae 	bl	8000cec <HAL_GetTick>
 8001f90:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe feaa 	bl	8000cec <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b0a      	cmp	r3, #10
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e037      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001fa6:	f7ff fc27 	bl	80017f8 <LL_RCC_PLL_IsReady>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f1      	bne.n	8001f94 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HAL_RCC_OscConfig+0x700>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
 8001fc0:	e028      	b.n	8002014 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e023      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f003 0203 	and.w	r2, r3, #3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d115      	bne.n	8002010 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d10e      	bne.n	8002010 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3720      	adds	r7, #32
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	11c1808c 	.word	0x11c1808c
 8002024:	eefefffc 	.word	0xeefefffc

08002028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e12c      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b98      	ldr	r3, [pc, #608]	; (80022a0 <HAL_RCC_ClockConfig+0x278>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d91b      	bls.n	8002082 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b95      	ldr	r3, [pc, #596]	; (80022a0 <HAL_RCC_ClockConfig+0x278>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4993      	ldr	r1, [pc, #588]	; (80022a0 <HAL_RCC_ClockConfig+0x278>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205a:	f7fe fe47 	bl	8000cec <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002060:	e008      	b.n	8002074 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002062:	f7fe fe43 	bl	8000cec <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e110      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002074:	4b8a      	ldr	r3, [pc, #552]	; (80022a0 <HAL_RCC_ClockConfig+0x278>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d1ef      	bne.n	8002062 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fb02 	bl	800169c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002098:	f7fe fe28 	bl	8000cec <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020a0:	f7fe fe24 	bl	8000cec <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0f1      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80020b2:	f7ff fbdf 	bl	8001874 <LL_RCC_IsActiveFlag_HPRE>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f1      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff faf8 	bl	80016c2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80020d2:	f7fe fe0b 	bl	8000cec <HAL_GetTick>
 80020d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80020da:	f7fe fe07 	bl	8000cec <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0d4      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80020ec:	f7ff fbd3 	bl	8001896 <LL_RCC_IsActiveFlag_C2HPRE>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f1      	beq.n	80020da <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d016      	beq.n	8002130 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff faf0 	bl	80016ec <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800210c:	f7fe fdee 	bl	8000cec <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002114:	f7fe fdea 	bl	8000cec <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0b7      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002126:	f7ff fbc8 	bl	80018ba <LL_RCC_IsActiveFlag_SHDHPRE>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f1      	beq.n	8002114 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b00      	cmp	r3, #0
 800213a:	d016      	beq.n	800216a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fae9 	bl	8001718 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002146:	f7fe fdd1 	bl	8000cec <HAL_GetTick>
 800214a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800214c:	e008      	b.n	8002160 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800214e:	f7fe fdcd 	bl	8000cec <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e09a      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002160:	f7ff fbbd 	bl	80018de <LL_RCC_IsActiveFlag_PPRE1>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f1      	beq.n	800214e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d017      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fade 	bl	800173e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002182:	f7fe fdb3 	bl	8000cec <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800218a:	f7fe fdaf 	bl	8000cec <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e07c      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800219c:	f7ff fbb0 	bl	8001900 <LL_RCC_IsActiveFlag_PPRE2>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f1      	beq.n	800218a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d043      	beq.n	800223a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d106      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80021ba:	f7ff f956 	bl	800146a <LL_RCC_HSE_IsReady>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11e      	bne.n	8002202 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e066      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d106      	bne.n	80021de <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80021d0:	f7ff fb12 	bl	80017f8 <LL_RCC_PLL_IsReady>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d113      	bne.n	8002202 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e05b      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80021e6:	f7ff f9f0 	bl	80015ca <LL_RCC_MSI_IsReady>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d108      	bne.n	8002202 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e050      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80021f4:	f7ff f966 	bl	80014c4 <LL_RCC_HSI_IsReady>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e049      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fa2a 	bl	8001660 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800220c:	f7fe fd6e 	bl	8000cec <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	e00a      	b.n	800222a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002214:	f7fe fd6a 	bl	8000cec <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e035      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	f7ff fa2c 	bl	8001686 <LL_RCC_GetSysClkSource>
 800222e:	4602      	mov	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	429a      	cmp	r2, r3
 8002238:	d1ec      	bne.n	8002214 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_ClockConfig+0x278>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d21b      	bcs.n	8002280 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <HAL_RCC_ClockConfig+0x278>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 0207 	bic.w	r2, r3, #7
 8002250:	4913      	ldr	r1, [pc, #76]	; (80022a0 <HAL_RCC_ClockConfig+0x278>)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002258:	f7fe fd48 	bl	8000cec <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	e008      	b.n	8002272 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002260:	f7fe fd44 	bl	8000cec <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e011      	b.n	8002296 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x278>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d1ef      	bne.n	8002260 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002280:	f000 f8b4 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002284:	4603      	mov	r3, r0
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_RCC_ClockConfig+0x27c>)
 8002288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <HAL_RCC_ClockConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fce0 	bl	8000c54 <HAL_InitTick>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	58004000 	.word	0x58004000
 80022a4:	20000000 	.word	0x20000000
 80022a8:	20000004 	.word	0x20000004

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	f7ff f9e4 	bl	8001686 <LL_RCC_GetSysClkSource>
 80022be:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c0:	f7ff facd 	bl	800185e <LL_RCC_PLL_GetMainSource>
 80022c4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_GetSysClockFreq+0x2c>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d139      	bne.n	8002346 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d136      	bne.n	8002346 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80022d8:	f7ff f987 	bl	80015ea <LL_RCC_MSI_IsEnabledRangeSelect>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d115      	bne.n	800230e <HAL_RCC_GetSysClockFreq+0x62>
 80022e2:	f7ff f982 	bl	80015ea <LL_RCC_MSI_IsEnabledRangeSelect>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d106      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x4e>
 80022ec:	f7ff f98d 	bl	800160a <LL_RCC_MSI_GetRange>
 80022f0:	4603      	mov	r3, r0
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	e005      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x5a>
 80022fa:	f7ff f991 	bl	8001620 <LL_RCC_MSI_GetRangeAfterStandby>
 80022fe:	4603      	mov	r3, r0
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	4a36      	ldr	r2, [pc, #216]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	e014      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x8c>
 800230e:	f7ff f96c 	bl	80015ea <LL_RCC_MSI_IsEnabledRangeSelect>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d106      	bne.n	8002326 <HAL_RCC_GetSysClockFreq+0x7a>
 8002318:	f7ff f977 	bl	800160a <LL_RCC_MSI_GetRange>
 800231c:	4603      	mov	r3, r0
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	e005      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x86>
 8002326:	f7ff f97b 	bl	8001620 <LL_RCC_MSI_GetRangeAfterStandby>
 800232a:	4603      	mov	r3, r0
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	4a2b      	ldr	r2, [pc, #172]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002338:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d115      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002344:	e012      	b.n	800236c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d102      	bne.n	8002352 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e00c      	b.n	800236c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b08      	cmp	r3, #8
 8002356:	d109      	bne.n	800236c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002358:	f7ff f85a 	bl	8001410 <LL_RCC_HSE_IsEnabledDiv2>
 800235c:	4603      	mov	r3, r0
 800235e:	2b01      	cmp	r3, #1
 8002360:	d102      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002364:	617b      	str	r3, [r7, #20]
 8002366:	e001      	b.n	800236c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002368:	4b1f      	ldr	r3, [pc, #124]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800236a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236c:	f7ff f98b 	bl	8001686 <LL_RCC_GetSysClkSource>
 8002370:	4603      	mov	r3, r0
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d12f      	bne.n	80023d6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002376:	f7ff fa72 	bl	800185e <LL_RCC_PLL_GetMainSource>
 800237a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d003      	beq.n	800238a <HAL_RCC_GetSysClockFreq+0xde>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d003      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0xe4>
 8002388:	e00d      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800238c:	60fb      	str	r3, [r7, #12]
        break;
 800238e:	e00d      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002390:	f7ff f83e 	bl	8001410 <LL_RCC_HSE_IsEnabledDiv2>
 8002394:	4603      	mov	r3, r0
 8002396:	2b01      	cmp	r3, #1
 8002398:	d102      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x138>)
 800239c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800239e:	e005      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023a2:	60fb      	str	r3, [r7, #12]
        break;
 80023a4:	e002      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	60fb      	str	r3, [r7, #12]
        break;
 80023aa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80023ac:	f7ff fa35 	bl	800181a <LL_RCC_PLL_GetN>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	fb03 f402 	mul.w	r4, r3, r2
 80023b8:	f7ff fa46 	bl	8001848 <LL_RCC_PLL_GetDivider>
 80023bc:	4603      	mov	r3, r0
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	3301      	adds	r3, #1
 80023c2:	fbb4 f4f3 	udiv	r4, r4, r3
 80023c6:	f7ff fa34 	bl	8001832 <LL_RCC_PLL_GetR>
 80023ca:	4603      	mov	r3, r0
 80023cc:	0f5b      	lsrs	r3, r3, #29
 80023ce:	3301      	adds	r3, #1
 80023d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80023d4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80023d6:	697b      	ldr	r3, [r7, #20]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd90      	pop	{r4, r7, pc}
 80023e0:	080050bc 	.word	0x080050bc
 80023e4:	00f42400 	.word	0x00f42400
 80023e8:	01e84800 	.word	0x01e84800

080023ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ec:	b598      	push	{r3, r4, r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80023f0:	f7ff ff5c 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 80023f4:	4604      	mov	r4, r0
 80023f6:	f7ff f9b5 	bl	8001764 <LL_RCC_GetAHBPrescaler>
 80023fa:	4603      	mov	r3, r0
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a03      	ldr	r2, [pc, #12]	; (8002410 <HAL_RCC_GetHCLKFreq+0x24>)
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd98      	pop	{r3, r4, r7, pc}
 8002410:	0800505c 	.word	0x0800505c

08002414 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002414:	b598      	push	{r3, r4, r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002418:	f7ff ffe8 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 800241c:	4604      	mov	r4, r0
 800241e:	f7ff f9b9 	bl	8001794 <LL_RCC_GetAPB1Prescaler>
 8002422:	4603      	mov	r3, r0
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	4a03      	ldr	r2, [pc, #12]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd98      	pop	{r3, r4, r7, pc}
 8002434:	0800509c 	.word	0x0800509c

08002438 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b598      	push	{r3, r4, r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800243c:	f7ff ffd6 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002440:	4604      	mov	r4, r0
 8002442:	f7ff f9b2 	bl	80017aa <LL_RCC_GetAPB2Prescaler>
 8002446:	4603      	mov	r3, r0
 8002448:	0adb      	lsrs	r3, r3, #11
 800244a:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x20>)
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd98      	pop	{r3, r4, r7, pc}
 8002458:	0800509c 	.word	0x0800509c

0800245c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002474:	f7ff f981 	bl	800177a <LL_RCC_GetAHB3Prescaler>
 8002478:	4603      	mov	r3, r0
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0c9c      	lsrs	r4, r3, #18
 8002498:	f7fe ff76 	bl	8001388 <HAL_PWREx_GetVoltageRange>
 800249c:	4603      	mov	r3, r0
 800249e:	4619      	mov	r1, r3
 80024a0:	4620      	mov	r0, r4
 80024a2:	f000 f80b 	bl	80024bc <RCC_SetFlashLatency>
 80024a6:	4603      	mov	r3, r0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	080050bc 	.word	0x080050bc
 80024b4:	0800505c 	.word	0x0800505c
 80024b8:	431bde83 	.word	0x431bde83

080024bc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08e      	sub	sp, #56	; 0x38
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80024c6:	4a3a      	ldr	r2, [pc, #232]	; (80025b0 <RCC_SetFlashLatency+0xf4>)
 80024c8:	f107 0320 	add.w	r3, r7, #32
 80024cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d0:	6018      	str	r0, [r3, #0]
 80024d2:	3304      	adds	r3, #4
 80024d4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80024d6:	4a37      	ldr	r2, [pc, #220]	; (80025b4 <RCC_SetFlashLatency+0xf8>)
 80024d8:	f107 0318 	add.w	r3, r7, #24
 80024dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e0:	6018      	str	r0, [r3, #0]
 80024e2:	3304      	adds	r3, #4
 80024e4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80024e6:	4a34      	ldr	r2, [pc, #208]	; (80025b8 <RCC_SetFlashLatency+0xfc>)
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80024f2:	2300      	movs	r3, #0
 80024f4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024fc:	d11b      	bne.n	8002536 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80024fe:	2300      	movs	r3, #0
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
 8002502:	e014      	b.n	800252e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	3338      	adds	r3, #56	; 0x38
 800250a:	443b      	add	r3, r7
 800250c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002510:	461a      	mov	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4293      	cmp	r3, r2
 8002516:	d807      	bhi.n	8002528 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	3338      	adds	r3, #56	; 0x38
 800251e:	443b      	add	r3, r7
 8002520:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002526:	e021      	b.n	800256c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	3301      	adds	r3, #1
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	2b02      	cmp	r3, #2
 8002532:	d9e7      	bls.n	8002504 <RCC_SetFlashLatency+0x48>
 8002534:	e01a      	b.n	800256c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002536:	2300      	movs	r3, #0
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800253a:	e014      	b.n	8002566 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	3338      	adds	r3, #56	; 0x38
 8002542:	443b      	add	r3, r7
 8002544:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4293      	cmp	r3, r2
 800254e:	d807      	bhi.n	8002560 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	3338      	adds	r3, #56	; 0x38
 8002556:	443b      	add	r3, r7
 8002558:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800255e:	e005      	b.n	800256c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002562:	3301      	adds	r3, #1
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	2b02      	cmp	r3, #2
 800256a:	d9e7      	bls.n	800253c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <RCC_SetFlashLatency+0x100>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 0207 	bic.w	r2, r3, #7
 8002574:	4911      	ldr	r1, [pc, #68]	; (80025bc <RCC_SetFlashLatency+0x100>)
 8002576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800257c:	f7fe fbb6 	bl	8000cec <HAL_GetTick>
 8002580:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002582:	e008      	b.n	8002596 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002584:	f7fe fbb2 	bl	8000cec <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e007      	b.n	80025a6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <RCC_SetFlashLatency+0x100>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1ef      	bne.n	8002584 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3738      	adds	r7, #56	; 0x38
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	08005040 	.word	0x08005040
 80025b4:	08005048 	.word	0x08005048
 80025b8:	08005050 	.word	0x08005050
 80025bc:	58004000 	.word	0x58004000

080025c0 <LL_RCC_LSE_IsReady>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80025c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d101      	bne.n	80025d8 <LL_RCC_LSE_IsReady+0x18>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <LL_RCC_LSE_IsReady+0x1a>
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <LL_RCC_SetUSARTClockSource>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	0c1b      	lsrs	r3, r3, #16
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <LL_RCC_SetI2SClockSource>:
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr

0800263c <LL_RCC_SetLPUARTClockSource>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002650:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <LL_RCC_SetI2CClockSource>:
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002672:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800267e:	43db      	mvns	r3, r3
 8002680:	401a      	ands	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800268a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <LL_RCC_SetLPTIMClockSource>:
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	43db      	mvns	r3, r3
 80026b6:	401a      	ands	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	041b      	lsls	r3, r3, #16
 80026bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <LL_RCC_SetRNGClockSource>:
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80026e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr

080026fa <LL_RCC_SetADCClockSource>:
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800270e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <LL_RCC_SetRTCClockSource>:
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800272c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <LL_RCC_GetRTCClockSource>:
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <LL_RCC_ForceBackupDomainReset>:
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800276a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800278a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80027b4:	2300      	movs	r3, #0
 80027b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80027b8:	2300      	movs	r3, #0
 80027ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d058      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80027c8:	f7fe fdc2 	bl	8001350 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027cc:	f7fe fa8e 	bl	8000cec <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80027d2:	e009      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d4:	f7fe fa8a 	bl	8000cec <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d902      	bls.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	74fb      	strb	r3, [r7, #19]
        break;
 80027e6:	e006      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80027e8:	4b7b      	ldr	r3, [pc, #492]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d1ee      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d13c      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80027fc:	f7ff ffa7 	bl	800274e <LL_RCC_GetRTCClockSource>
 8002800:	4602      	mov	r2, r0
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002806:	429a      	cmp	r2, r3
 8002808:	d00f      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002816:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002818:	f7ff ffa5 	bl	8002766 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800281c:	f7ff ffb3 	bl	8002786 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d014      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fa5a 	bl	8000cec <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800283a:	e00b      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7fe fa56 	bl	8000cec <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d902      	bls.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	74fb      	strb	r3, [r7, #19]
            break;
 8002852:	e004      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002854:	f7ff feb4 	bl	80025c0 <LL_RCC_LSE_IsReady>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d1ee      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d105      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5b 	bl	8002724 <LL_RCC_SetRTCClockSource>
 800286e:	e004      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
 8002874:	e001      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d004      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fea9 	bl	80025e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d004      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fe9e 	bl	80025e2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fec0 	bl	800263c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fee6 	bl	800269e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fedb 	bl	800269e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fed0 	bl	800269e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fea9 	bl	8002666 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fe9e 	bl	8002666 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fe93 	bl	8002666 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d011      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fe5e 	bl	8002612 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295e:	d107      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fea5 	bl	80026d0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	2b00      	cmp	r3, #0
 800298c:	d107      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d011      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fea3 	bl	80026fa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029bc:	d107      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80029ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	58000400 	.word	0x58000400

080029dc <LL_RCC_GetUSARTClockSource>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80029e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	401a      	ands	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	041b      	lsls	r3, r3, #16
 80029f4:	4313      	orrs	r3, r2
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <LL_RCC_GetLPUARTClockSource>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4013      	ands	r3, r2
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e042      	b.n	8002ab6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd ff50 	bl	80008e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2224      	movs	r2, #36	; 0x24
 8002a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fcc3 	bl	80033ec <UART_SetConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e022      	b.n	8002ab6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 ff2b 	bl	80038d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 ffb1 	bl	8003a16 <UART_CheckIdleState>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b08a      	sub	sp, #40	; 0x28
 8002ac2:	af02      	add	r7, sp, #8
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d173      	bne.n	8002bc0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_UART_Transmit+0x26>
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e06c      	b.n	8002bc2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2221      	movs	r2, #33	; 0x21
 8002af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002af8:	f7fe f8f8 	bl	8000cec <HAL_GetTick>
 8002afc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	88fa      	ldrh	r2, [r7, #6]
 8002b02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	d108      	bne.n	8002b2a <HAL_UART_Transmit+0x6c>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d104      	bne.n	8002b2a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	e003      	b.n	8002b32 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b32:	e02c      	b.n	8002b8e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 ffb7 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e039      	b.n	8002bc2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10b      	bne.n	8002b6c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	3302      	adds	r3, #2
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	e007      	b.n	8002b7c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	781a      	ldrb	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1cc      	bne.n	8002b34 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 ff84 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e006      	b.n	8002bc2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b091      	sub	sp, #68	; 0x44
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d178      	bne.n	8002cd6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_UART_Transmit_IT+0x24>
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e071      	b.n	8002cd8 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	88fa      	ldrh	r2, [r7, #6]
 8002bfe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	88fa      	ldrh	r2, [r7, #6]
 8002c06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2221      	movs	r2, #33	; 0x21
 8002c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c28:	d12a      	bne.n	8002c80 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c32:	d107      	bne.n	8002c44 <HAL_UART_Transmit_IT+0x78>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d103      	bne.n	8002c44 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a29      	ldr	r2, [pc, #164]	; (8002ce4 <HAL_UART_Transmit_IT+0x118>)
 8002c40:	679a      	str	r2, [r3, #120]	; 0x78
 8002c42:	e002      	b.n	8002c4a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a28      	ldr	r2, [pc, #160]	; (8002ce8 <HAL_UART_Transmit_IT+0x11c>)
 8002c48:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3308      	adds	r3, #8
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3308      	adds	r3, #8
 8002c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c6a:	637a      	str	r2, [r7, #52]	; 0x34
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e5      	bne.n	8002c4a <HAL_UART_Transmit_IT+0x7e>
 8002c7e:	e028      	b.n	8002cd2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c88:	d107      	bne.n	8002c9a <HAL_UART_Transmit_IT+0xce>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a15      	ldr	r2, [pc, #84]	; (8002cec <HAL_UART_Transmit_IT+0x120>)
 8002c96:	679a      	str	r2, [r3, #120]	; 0x78
 8002c98:	e002      	b.n	8002ca0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <HAL_UART_Transmit_IT+0x124>)
 8002c9e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	613b      	str	r3, [r7, #16]
   return(result);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cbe:	623b      	str	r3, [r7, #32]
 8002cc0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	69f9      	ldr	r1, [r7, #28]
 8002cc4:	6a3a      	ldr	r2, [r7, #32]
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e6      	bne.n	8002ca0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e000      	b.n	8002cd8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002cd6:	2302      	movs	r3, #2
  }
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3744      	adds	r7, #68	; 0x44
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	080041cf 	.word	0x080041cf
 8002ce8:	080040f1 	.word	0x080040f1
 8002cec:	08004031 	.word	0x08004031
 8002cf0:	08003f7b 	.word	0x08003f7b

08002cf4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d137      	bne.n	8002d7c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_UART_Receive_IT+0x24>
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e030      	b.n	8002d7e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <HAL_UART_Receive_IT+0x94>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d01f      	beq.n	8002d6c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d018      	beq.n	8002d6c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	613b      	str	r3, [r7, #16]
   return(result);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	69f9      	ldr	r1, [r7, #28]
 8002d5e:	6a3a      	ldr	r2, [r7, #32]
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e6      	bne.n	8002d3a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 ff66 	bl	8003c44 <UART_Start_Receive_IT>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	e000      	b.n	8002d7e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40008000 	.word	0x40008000

08002d8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b0ba      	sub	sp, #232	; 0xe8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002db2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002db6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002dba:	4013      	ands	r3, r2
 8002dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002dc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11b      	bne.n	8002e00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d015      	beq.n	8002e00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dd8:	f003 0320 	and.w	r3, r3, #32
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 82e3 	beq.w	80033bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
      }
      return;
 8002dfe:	e2dd      	b.n	80033bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 8123 	beq.w	8003050 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002e0e:	4b8d      	ldr	r3, [pc, #564]	; (8003044 <HAL_UART_IRQHandler+0x2b8>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e1a:	4b8b      	ldr	r3, [pc, #556]	; (8003048 <HAL_UART_IRQHandler+0x2bc>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8116 	beq.w	8003050 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d011      	beq.n	8002e54 <HAL_UART_IRQHandler+0xc8>
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2201      	movs	r2, #1
 8002e42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f043 0201 	orr.w	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d011      	beq.n	8002e84 <HAL_UART_IRQHandler+0xf8>
 8002e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00b      	beq.n	8002e84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2202      	movs	r2, #2
 8002e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f043 0204 	orr.w	r2, r3, #4
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d011      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x128>
 8002e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eaa:	f043 0202 	orr.w	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d017      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002ecc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002ed0:	4b5c      	ldr	r3, [pc, #368]	; (8003044 <HAL_UART_IRQHandler+0x2b8>)
 8002ed2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2208      	movs	r2, #8
 8002ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f043 0208 	orr.w	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d012      	beq.n	8002f22 <HAL_UART_IRQHandler+0x196>
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00c      	beq.n	8002f22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8249 	beq.w	80033c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d013      	beq.n	8002f62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d005      	beq.n	8002f86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d054      	beq.n	8003030 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 ff7c 	bl	8003e84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d146      	bne.n	8003028 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1d9      	bne.n	8002f9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d017      	beq.n	8003020 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff6:	4a15      	ldr	r2, [pc, #84]	; (800304c <HAL_UART_IRQHandler+0x2c0>)
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd ffe6 	bl	8000fd2 <HAL_DMA_Abort_IT>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d019      	beq.n	8003040 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800301a:	4610      	mov	r0, r2
 800301c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301e:	e00f      	b.n	8003040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7fd fb20 	bl	8000666 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003026:	e00b      	b.n	8003040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7fd fb1c 	bl	8000666 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800302e:	e007      	b.n	8003040 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7fd fb18 	bl	8000666 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800303e:	e1bf      	b.n	80033c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003040:	bf00      	nop
    return;
 8003042:	e1bd      	b.n	80033c0 <HAL_UART_IRQHandler+0x634>
 8003044:	10000001 	.word	0x10000001
 8003048:	04000120 	.word	0x04000120
 800304c:	08003f4f 	.word	0x08003f4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003054:	2b01      	cmp	r3, #1
 8003056:	f040 8153 	bne.w	8003300 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800305a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 814c 	beq.w	8003300 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8145 	beq.w	8003300 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2210      	movs	r2, #16
 800307c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003088:	2b40      	cmp	r3, #64	; 0x40
 800308a:	f040 80bb 	bne.w	8003204 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800309c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 818f 	beq.w	80033c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80030ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f080 8187 	bcs.w	80033c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 8087 	bne.w	80031e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030e0:	e853 3f00 	ldrex	r3, [r3]
 80030e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003102:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800310a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1da      	bne.n	80030d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3308      	adds	r3, #8
 8003124:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800312e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3308      	adds	r3, #8
 800313e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003142:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003146:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003148:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800314a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e1      	bne.n	800311e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3308      	adds	r3, #8
 8003160:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800316a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800316c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800317e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003180:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800318c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e3      	bne.n	800315a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2220      	movs	r2, #32
 8003196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031b0:	f023 0310 	bic.w	r3, r3, #16
 80031b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80031c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031ca:	e841 2300 	strex	r3, r2, [r1]
 80031ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e4      	bne.n	80031a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd fe9a 	bl	8000f16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2202      	movs	r2, #2
 80031e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8e9 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003202:	e0df      	b.n	80033c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003210:	b29b      	uxth	r3, r3
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80d1 	beq.w	80033c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80cc 	beq.w	80033c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003244:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003252:	647b      	str	r3, [r7, #68]	; 0x44
 8003254:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003258:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e4      	bne.n	8003230 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3308      	adds	r3, #8
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	623b      	str	r3, [r7, #32]
   return(result);
 8003276:	6a3b      	ldr	r3, [r7, #32]
 8003278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3308      	adds	r3, #8
 800328a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800328e:	633a      	str	r2, [r7, #48]	; 0x30
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003296:	e841 2300 	strex	r3, r2, [r1]
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1e1      	bne.n	8003266 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0310 	bic.w	r3, r3, #16
 80032ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	69b9      	ldr	r1, [r7, #24]
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	617b      	str	r3, [r7, #20]
   return(result);
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e4      	bne.n	80032b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f86b 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032fe:	e063      	b.n	80033c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00e      	beq.n	800332a <HAL_UART_IRQHandler+0x59e>
 800330c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003320:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f001 fd0e 	bl	8004d44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003328:	e051      	b.n	80033ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003332:	2b00      	cmp	r3, #0
 8003334:	d014      	beq.n	8003360 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003346:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003352:	2b00      	cmp	r3, #0
 8003354:	d03a      	beq.n	80033cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
    }
    return;
 800335e:	e035      	b.n	80033cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_UART_IRQHandler+0x5f4>
 800336c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 ff9c 	bl	80042b6 <UART_EndTransmit_IT>
    return;
 800337e:	e026      	b.n	80033ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_UART_IRQHandler+0x614>
 800338c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003390:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f001 fce5 	bl	8004d68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800339e:	e016      	b.n	80033ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80033a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d010      	beq.n	80033ce <HAL_UART_IRQHandler+0x642>
 80033ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	da0c      	bge.n	80033ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f001 fcce 	bl	8004d56 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033ba:	e008      	b.n	80033ce <HAL_UART_IRQHandler+0x642>
      return;
 80033bc:	bf00      	nop
 80033be:	e006      	b.n	80033ce <HAL_UART_IRQHandler+0x642>
    return;
 80033c0:	bf00      	nop
 80033c2:	e004      	b.n	80033ce <HAL_UART_IRQHandler+0x642>
      return;
 80033c4:	bf00      	nop
 80033c6:	e002      	b.n	80033ce <HAL_UART_IRQHandler+0x642>
      return;
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <HAL_UART_IRQHandler+0x642>
    return;
 80033cc:	bf00      	nop
  }
}
 80033ce:	37e8      	adds	r7, #232	; 0xe8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr
	...

080033ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f0:	b08c      	sub	sp, #48	; 0x30
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	431a      	orrs	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4313      	orrs	r3, r2
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b94      	ldr	r3, [pc, #592]	; (800366c <UART_SetConfig+0x280>)
 800341c:	4013      	ands	r3, r2
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003424:	430b      	orrs	r3, r1
 8003426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a89      	ldr	r2, [pc, #548]	; (8003670 <UART_SetConfig+0x284>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003454:	4313      	orrs	r3, r2
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003462:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800346c:	430b      	orrs	r3, r1
 800346e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f023 010f 	bic.w	r1, r3, #15
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a7a      	ldr	r2, [pc, #488]	; (8003674 <UART_SetConfig+0x288>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d127      	bne.n	80034e0 <UART_SetConfig+0xf4>
 8003490:	2003      	movs	r0, #3
 8003492:	f7ff faa3 	bl	80029dc <LL_RCC_GetUSARTClockSource>
 8003496:	4603      	mov	r3, r0
 8003498:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800349c:	2b03      	cmp	r3, #3
 800349e:	d81b      	bhi.n	80034d8 <UART_SetConfig+0xec>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0xbc>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034b9 	.word	0x080034b9
 80034ac:	080034c9 	.word	0x080034c9
 80034b0:	080034c1 	.word	0x080034c1
 80034b4:	080034d1 	.word	0x080034d1
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034be:	e080      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80034c0:	2302      	movs	r3, #2
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c6:	e07c      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80034c8:	2304      	movs	r3, #4
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ce:	e078      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80034d0:	2308      	movs	r3, #8
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d6:	e074      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80034d8:	2310      	movs	r3, #16
 80034da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034de:	e070      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a64      	ldr	r2, [pc, #400]	; (8003678 <UART_SetConfig+0x28c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d138      	bne.n	800355c <UART_SetConfig+0x170>
 80034ea:	200c      	movs	r0, #12
 80034ec:	f7ff fa76 	bl	80029dc <LL_RCC_GetUSARTClockSource>
 80034f0:	4603      	mov	r3, r0
 80034f2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d82c      	bhi.n	8003554 <UART_SetConfig+0x168>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <UART_SetConfig+0x114>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003535 	.word	0x08003535
 8003504:	08003555 	.word	0x08003555
 8003508:	08003555 	.word	0x08003555
 800350c:	08003555 	.word	0x08003555
 8003510:	08003545 	.word	0x08003545
 8003514:	08003555 	.word	0x08003555
 8003518:	08003555 	.word	0x08003555
 800351c:	08003555 	.word	0x08003555
 8003520:	0800353d 	.word	0x0800353d
 8003524:	08003555 	.word	0x08003555
 8003528:	08003555 	.word	0x08003555
 800352c:	08003555 	.word	0x08003555
 8003530:	0800354d 	.word	0x0800354d
 8003534:	2300      	movs	r3, #0
 8003536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800353a:	e042      	b.n	80035c2 <UART_SetConfig+0x1d6>
 800353c:	2302      	movs	r3, #2
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003542:	e03e      	b.n	80035c2 <UART_SetConfig+0x1d6>
 8003544:	2304      	movs	r3, #4
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354a:	e03a      	b.n	80035c2 <UART_SetConfig+0x1d6>
 800354c:	2308      	movs	r3, #8
 800354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003552:	e036      	b.n	80035c2 <UART_SetConfig+0x1d6>
 8003554:	2310      	movs	r3, #16
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355a:	e032      	b.n	80035c2 <UART_SetConfig+0x1d6>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a43      	ldr	r2, [pc, #268]	; (8003670 <UART_SetConfig+0x284>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12a      	bne.n	80035bc <UART_SetConfig+0x1d0>
 8003566:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800356a:	f7ff fa49 	bl	8002a00 <LL_RCC_GetLPUARTClockSource>
 800356e:	4603      	mov	r3, r0
 8003570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003574:	d01a      	beq.n	80035ac <UART_SetConfig+0x1c0>
 8003576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800357a:	d81b      	bhi.n	80035b4 <UART_SetConfig+0x1c8>
 800357c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003580:	d00c      	beq.n	800359c <UART_SetConfig+0x1b0>
 8003582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003586:	d815      	bhi.n	80035b4 <UART_SetConfig+0x1c8>
 8003588:	2b00      	cmp	r3, #0
 800358a:	d003      	beq.n	8003594 <UART_SetConfig+0x1a8>
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d008      	beq.n	80035a4 <UART_SetConfig+0x1b8>
 8003592:	e00f      	b.n	80035b4 <UART_SetConfig+0x1c8>
 8003594:	2300      	movs	r3, #0
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359a:	e012      	b.n	80035c2 <UART_SetConfig+0x1d6>
 800359c:	2302      	movs	r3, #2
 800359e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a2:	e00e      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80035a4:	2304      	movs	r3, #4
 80035a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035aa:	e00a      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80035ac:	2308      	movs	r3, #8
 80035ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b2:	e006      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80035b4:	2310      	movs	r3, #16
 80035b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ba:	e002      	b.n	80035c2 <UART_SetConfig+0x1d6>
 80035bc:	2310      	movs	r3, #16
 80035be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2a      	ldr	r2, [pc, #168]	; (8003670 <UART_SetConfig+0x284>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	f040 80a4 	bne.w	8003716 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d823      	bhi.n	800361e <UART_SetConfig+0x232>
 80035d6:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <UART_SetConfig+0x1f0>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	08003601 	.word	0x08003601
 80035e0:	0800361f 	.word	0x0800361f
 80035e4:	08003609 	.word	0x08003609
 80035e8:	0800361f 	.word	0x0800361f
 80035ec:	0800360f 	.word	0x0800360f
 80035f0:	0800361f 	.word	0x0800361f
 80035f4:	0800361f 	.word	0x0800361f
 80035f8:	0800361f 	.word	0x0800361f
 80035fc:	08003617 	.word	0x08003617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003600:	f7fe ff08 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003606:	e010      	b.n	800362a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <UART_SetConfig+0x290>)
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800360c:	e00d      	b.n	800362a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360e:	f7fe fe4d 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 8003612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003614:	e009      	b.n	800362a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800361c:	e005      	b.n	800362a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8137 	beq.w	80038a0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	4a12      	ldr	r2, [pc, #72]	; (8003680 <UART_SetConfig+0x294>)
 8003638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800363c:	461a      	mov	r2, r3
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	fbb3 f3f2 	udiv	r3, r3, r2
 8003644:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	4413      	add	r3, r2
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	429a      	cmp	r2, r3
 8003654:	d305      	bcc.n	8003662 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003668:	e11a      	b.n	80038a0 <UART_SetConfig+0x4b4>
 800366a:	bf00      	nop
 800366c:	cfff69f3 	.word	0xcfff69f3
 8003670:	40008000 	.word	0x40008000
 8003674:	40013800 	.word	0x40013800
 8003678:	40004400 	.word	0x40004400
 800367c:	00f42400 	.word	0x00f42400
 8003680:	080050fc 	.word	0x080050fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	2200      	movs	r2, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	60fa      	str	r2, [r7, #12]
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	4a8e      	ldr	r2, [pc, #568]	; (80038cc <UART_SetConfig+0x4e0>)
 8003692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003696:	b29b      	uxth	r3, r3
 8003698:	2200      	movs	r2, #0
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036a6:	f7fc fd67 	bl	8000178 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	020b      	lsls	r3, r1, #8
 80036bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036c0:	0202      	lsls	r2, r0, #8
 80036c2:	6979      	ldr	r1, [r7, #20]
 80036c4:	6849      	ldr	r1, [r1, #4]
 80036c6:	0849      	lsrs	r1, r1, #1
 80036c8:	2000      	movs	r0, #0
 80036ca:	460c      	mov	r4, r1
 80036cc:	4605      	mov	r5, r0
 80036ce:	eb12 0804 	adds.w	r8, r2, r4
 80036d2:	eb43 0905 	adc.w	r9, r3, r5
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	469a      	mov	sl, r3
 80036de:	4693      	mov	fp, r2
 80036e0:	4652      	mov	r2, sl
 80036e2:	465b      	mov	r3, fp
 80036e4:	4640      	mov	r0, r8
 80036e6:	4649      	mov	r1, r9
 80036e8:	f7fc fd46 	bl	8000178 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4613      	mov	r3, r2
 80036f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fa:	d308      	bcc.n	800370e <UART_SetConfig+0x322>
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003702:	d204      	bcs.n	800370e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a3a      	ldr	r2, [r7, #32]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	e0c8      	b.n	80038a0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003714:	e0c4      	b.n	80038a0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371e:	d167      	bne.n	80037f0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003720:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003724:	2b08      	cmp	r3, #8
 8003726:	d828      	bhi.n	800377a <UART_SetConfig+0x38e>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <UART_SetConfig+0x344>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003755 	.word	0x08003755
 8003734:	0800375d 	.word	0x0800375d
 8003738:	08003765 	.word	0x08003765
 800373c:	0800377b 	.word	0x0800377b
 8003740:	0800376b 	.word	0x0800376b
 8003744:	0800377b 	.word	0x0800377b
 8003748:	0800377b 	.word	0x0800377b
 800374c:	0800377b 	.word	0x0800377b
 8003750:	08003773 	.word	0x08003773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003754:	f7fe fe5e 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003758:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800375a:	e014      	b.n	8003786 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800375c:	f7fe fe6c 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8003760:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003762:	e010      	b.n	8003786 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003764:	4b5a      	ldr	r3, [pc, #360]	; (80038d0 <UART_SetConfig+0x4e4>)
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003768:	e00d      	b.n	8003786 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376a:	f7fe fd9f 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800376e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003770:	e009      	b.n	8003786 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003778:	e005      	b.n	8003786 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 8089 	beq.w	80038a0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	4a4e      	ldr	r2, [pc, #312]	; (80038cc <UART_SetConfig+0x4e0>)
 8003794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003798:	461a      	mov	r2, r3
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	fbb3 f3f2 	udiv	r3, r3, r2
 80037a0:	005a      	lsls	r2, r3, #1
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	441a      	add	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b0f      	cmp	r3, #15
 80037b8:	d916      	bls.n	80037e8 <UART_SetConfig+0x3fc>
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d212      	bcs.n	80037e8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f023 030f 	bic.w	r3, r3, #15
 80037ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	8bfb      	ldrh	r3, [r7, #30]
 80037da:	4313      	orrs	r3, r2
 80037dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	8bfa      	ldrh	r2, [r7, #30]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	e05b      	b.n	80038a0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037ee:	e057      	b.n	80038a0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d828      	bhi.n	800384a <UART_SetConfig+0x45e>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <UART_SetConfig+0x414>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003825 	.word	0x08003825
 8003804:	0800382d 	.word	0x0800382d
 8003808:	08003835 	.word	0x08003835
 800380c:	0800384b 	.word	0x0800384b
 8003810:	0800383b 	.word	0x0800383b
 8003814:	0800384b 	.word	0x0800384b
 8003818:	0800384b 	.word	0x0800384b
 800381c:	0800384b 	.word	0x0800384b
 8003820:	08003843 	.word	0x08003843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003824:	f7fe fdf6 	bl	8002414 <HAL_RCC_GetPCLK1Freq>
 8003828:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800382a:	e014      	b.n	8003856 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800382c:	f7fe fe04 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8003830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003832:	e010      	b.n	8003856 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <UART_SetConfig+0x4e4>)
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003838:	e00d      	b.n	8003856 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800383a:	f7fe fd37 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800383e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003840:	e009      	b.n	8003856 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003848:	e005      	b.n	8003856 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003854:	bf00      	nop
    }

    if (pclk != 0U)
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d021      	beq.n	80038a0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	4a1a      	ldr	r2, [pc, #104]	; (80038cc <UART_SetConfig+0x4e0>)
 8003862:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003866:	461a      	mov	r2, r3
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	fbb3 f2f2 	udiv	r2, r3, r2
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	085b      	lsrs	r3, r3, #1
 8003874:	441a      	add	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	fbb2 f3f3 	udiv	r3, r2, r3
 800387e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	d909      	bls.n	800389a <UART_SetConfig+0x4ae>
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388c:	d205      	bcs.n	800389a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	b29a      	uxth	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	e002      	b.n	80038a0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2200      	movs	r2, #0
 80038ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80038bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3730      	adds	r7, #48	; 0x30
 80038c4:	46bd      	mov	sp, r7
 80038c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ca:	bf00      	nop
 80038cc:	080050fc 	.word	0x080050fc
 80038d0:	00f42400 	.word	0x00f42400

080038d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00a      	beq.n	80039a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01a      	beq.n	80039ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d2:	d10a      	bne.n	80039ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bc80      	pop	{r7}
 8003a14:	4770      	bx	lr

08003a16 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af02      	add	r7, sp, #8
 8003a1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a26:	f7fd f961 	bl	8000cec <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d10e      	bne.n	8003a58 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f832 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e028      	b.n	8003aaa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d10e      	bne.n	8003a84 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f81c 	bl	8003ab2 <UART_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e012      	b.n	8003aaa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b09c      	sub	sp, #112	; 0x70
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac2:	e0a9      	b.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aca:	f000 80a5 	beq.w	8003c18 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fd f90d 	bl	8000cec <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d140      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003af8:	667b      	str	r3, [r7, #100]	; 0x64
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b04:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e6      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b20:	e853 3f00 	ldrex	r3, [r3]
 8003b24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	f023 0301 	bic.w	r3, r3, #1
 8003b2c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3308      	adds	r3, #8
 8003b34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b36:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e5      	bne.n	8003b16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e069      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d051      	beq.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b82:	d149      	bne.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
 8003bae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e6      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f023 0301 	bic.w	r3, r3, #1
 8003bd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003be0:	623a      	str	r2, [r7, #32]
 8003be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	69f9      	ldr	r1, [r7, #28]
 8003be6:	6a3a      	ldr	r2, [r7, #32]
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e010      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4013      	ands	r3, r2
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	461a      	mov	r2, r3
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	f43f af46 	beq.w	8003ac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3770      	adds	r7, #112	; 0x70
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b0a3      	sub	sp, #140	; 0x8c
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	d10e      	bne.n	8003c96 <UART_Start_Receive_IT+0x52>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d105      	bne.n	8003c8c <UART_Start_Receive_IT+0x48>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003c86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c8a:	e02d      	b.n	8003ce8 <UART_Start_Receive_IT+0xa4>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	22ff      	movs	r2, #255	; 0xff
 8003c90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c94:	e028      	b.n	8003ce8 <UART_Start_Receive_IT+0xa4>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10d      	bne.n	8003cba <UART_Start_Receive_IT+0x76>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <UART_Start_Receive_IT+0x6c>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cae:	e01b      	b.n	8003ce8 <UART_Start_Receive_IT+0xa4>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	227f      	movs	r2, #127	; 0x7f
 8003cb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cb8:	e016      	b.n	8003ce8 <UART_Start_Receive_IT+0xa4>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc2:	d10d      	bne.n	8003ce0 <UART_Start_Receive_IT+0x9c>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d104      	bne.n	8003cd6 <UART_Start_Receive_IT+0x92>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	227f      	movs	r2, #127	; 0x7f
 8003cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cd4:	e008      	b.n	8003ce8 <UART_Start_Receive_IT+0xa4>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	223f      	movs	r2, #63	; 0x3f
 8003cda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003cde:	e003      	b.n	8003ce8 <UART_Start_Receive_IT+0xa4>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2222      	movs	r2, #34	; 0x22
 8003cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3308      	adds	r3, #8
 8003d18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003d1c:	673a      	str	r2, [r7, #112]	; 0x70
 8003d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003d22:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e3      	bne.n	8003cf8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d38:	d14f      	bne.n	8003dda <UART_Start_Receive_IT+0x196>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003d40:	88fa      	ldrh	r2, [r7, #6]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d349      	bcc.n	8003dda <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	d107      	bne.n	8003d60 <UART_Start_Receive_IT+0x11c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a46      	ldr	r2, [pc, #280]	; (8003e74 <UART_Start_Receive_IT+0x230>)
 8003d5c:	675a      	str	r2, [r3, #116]	; 0x74
 8003d5e:	e002      	b.n	8003d66 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a45      	ldr	r2, [pc, #276]	; (8003e78 <UART_Start_Receive_IT+0x234>)
 8003d64:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01a      	beq.n	8003da4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d92:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e4      	bne.n	8003d6e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3308      	adds	r3, #8
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003dc4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dc6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e5      	bne.n	8003da4 <UART_Start_Receive_IT+0x160>
 8003dd8:	e046      	b.n	8003e68 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	d107      	bne.n	8003df4 <UART_Start_Receive_IT+0x1b0>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d103      	bne.n	8003df4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <UART_Start_Receive_IT+0x238>)
 8003df0:	675a      	str	r2, [r3, #116]	; 0x74
 8003df2:	e002      	b.n	8003dfa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <UART_Start_Receive_IT+0x23c>)
 8003df8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d019      	beq.n	8003e36 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003e16:	677b      	str	r3, [r7, #116]	; 0x74
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e6      	bne.n	8003e02 <UART_Start_Receive_IT+0x1be>
 8003e34:	e018      	b.n	8003e68 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	613b      	str	r3, [r7, #16]
   return(result);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f043 0320 	orr.w	r3, r3, #32
 8003e4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e54:	623b      	str	r3, [r7, #32]
 8003e56:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e6      	bne.n	8003e36 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	378c      	adds	r7, #140	; 0x8c
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	080049dd 	.word	0x080049dd
 8003e78:	0800467d 	.word	0x0800467d
 8003e7c:	080044c5 	.word	0x080044c5
 8003e80:	0800430d 	.word	0x0800430d

08003e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b095      	sub	sp, #84	; 0x54
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8003eac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003eb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e6      	bne.n	8003e8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e3      	bne.n	8003ebe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d118      	bne.n	8003f30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f023 0310 	bic.w	r3, r3, #16
 8003f12:	647b      	str	r3, [r7, #68]	; 0x44
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6979      	ldr	r1, [r7, #20]
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	613b      	str	r3, [r7, #16]
   return(result);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e6      	bne.n	8003efe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003f44:	bf00      	nop
 8003f46:	3754      	adds	r7, #84	; 0x54
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr

08003f4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7fc fb7a 	bl	8000666 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b08f      	sub	sp, #60	; 0x3c
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f88:	2b21      	cmp	r3, #33	; 0x21
 8003f8a:	d14c      	bne.n	8004026 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d132      	bne.n	8003ffe <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e6      	bne.n	8003f98 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	e853 3f00 	ldrex	r3, [r3]
 8003fd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6979      	ldr	r1, [r7, #20]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e6      	bne.n	8003fca <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003ffc:	e013      	b.n	8004026 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800401a:	b29b      	uxth	r3, r3
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004026:	bf00      	nop
 8004028:	373c      	adds	r7, #60	; 0x3c
 800402a:	46bd      	mov	sp, r7
 800402c:	bc80      	pop	{r7}
 800402e:	4770      	bx	lr

08004030 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b091      	sub	sp, #68	; 0x44
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	2b21      	cmp	r3, #33	; 0x21
 8004040:	d151      	bne.n	80040e6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d132      	bne.n	80040b4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	623b      	str	r3, [r7, #32]
   return(result);
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004062:	63bb      	str	r3, [r7, #56]	; 0x38
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
 800406e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e6      	bne.n	800404e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	60fb      	str	r3, [r7, #12]
   return(result);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	69b9      	ldr	r1, [r7, #24]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	617b      	str	r3, [r7, #20]
   return(result);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e6      	bne.n	8004080 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80040b2:	e018      	b.n	80040e6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80040ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ce:	1c9a      	adds	r2, r3, #2
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80040e6:	bf00      	nop
 80040e8:	3744      	adds	r7, #68	; 0x44
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b091      	sub	sp, #68	; 0x44
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	2b21      	cmp	r3, #33	; 0x21
 8004100:	d160      	bne.n	80041c4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004108:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800410a:	e057      	b.n	80041bc <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004112:	b29b      	uxth	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d133      	bne.n	8004180 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3308      	adds	r3, #8
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	e853 3f00 	ldrex	r3, [r3]
 8004126:	623b      	str	r3, [r7, #32]
   return(result);
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3308      	adds	r3, #8
 8004136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004138:	633a      	str	r2, [r7, #48]	; 0x30
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800413e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e5      	bne.n	8004118 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	60fb      	str	r3, [r7, #12]
   return(result);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416a:	61fb      	str	r3, [r7, #28]
 800416c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	69b9      	ldr	r1, [r7, #24]
 8004170:	69fa      	ldr	r2, [r7, #28]
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	617b      	str	r3, [r7, #20]
   return(result);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e6      	bne.n	800414c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800417e:	e021      	b.n	80041c4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d013      	beq.n	80041b6 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80041b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80041b8:	3b01      	subs	r3, #1
 80041ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80041bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1a4      	bne.n	800410c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80041c2:	e7ff      	b.n	80041c4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80041c4:	bf00      	nop
 80041c6:	3744      	adds	r7, #68	; 0x44
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b091      	sub	sp, #68	; 0x44
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	2b21      	cmp	r3, #33	; 0x21
 80041de:	d165      	bne.n	80042ac <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80041e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80041e8:	e05c      	b.n	80042a4 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d133      	bne.n	800425e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	61fb      	str	r3, [r7, #28]
   return(result);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3308      	adds	r3, #8
 8004214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e5      	bne.n	80041f6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	60bb      	str	r3, [r7, #8]
   return(result);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423e:	633b      	str	r3, [r7, #48]	; 0x30
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6979      	ldr	r1, [r7, #20]
 800424e:	69ba      	ldr	r2, [r7, #24]
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	613b      	str	r3, [r7, #16]
   return(result);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e6      	bne.n	800422a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800425c:	e026      	b.n	80042ac <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b00      	cmp	r3, #0
 800426a:	d018      	beq.n	800429e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004286:	1c9a      	adds	r2, r3, #2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800429e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80042a0:	3b01      	subs	r3, #1
 80042a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80042a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d19f      	bne.n	80041ea <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80042aa:	e7ff      	b.n	80042ac <UART_TxISR_16BIT_FIFOEN+0xde>
 80042ac:	bf00      	nop
 80042ae:	3744      	adds	r7, #68	; 0x44
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b088      	sub	sp, #32
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e6      	bne.n	80042be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7fc f9ba 	bl	8000678 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004304:	bf00      	nop
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b09c      	sub	sp, #112	; 0x70
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800431a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004324:	2b22      	cmp	r3, #34	; 0x22
 8004326:	f040 80be 	bne.w	80044a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004334:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004338:	b2d9      	uxtb	r1, r3
 800433a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800433e:	b2da      	uxtb	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004344:	400a      	ands	r2, r1
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	f040 80a1 	bne.w	80044b6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004388:	66bb      	str	r3, [r7, #104]	; 0x68
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004392:	65bb      	str	r3, [r7, #88]	; 0x58
 8004394:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e6      	bne.n	8004374 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3308      	adds	r3, #8
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	667b      	str	r3, [r7, #100]	; 0x64
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3308      	adds	r3, #8
 80043c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80043c6:	647a      	str	r2, [r7, #68]	; 0x44
 80043c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e5      	bne.n	80043a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2220      	movs	r2, #32
 80043de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a33      	ldr	r2, [pc, #204]	; (80044c0 <UART_RxISR_8BIT+0x1b4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d01f      	beq.n	8004438 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d018      	beq.n	8004438 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	623b      	str	r3, [r7, #32]
   return(result);
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800441a:	663b      	str	r3, [r7, #96]	; 0x60
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
 8004426:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d12e      	bne.n	800449e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60fb      	str	r3, [r7, #12]
   return(result);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	69b9      	ldr	r1, [r7, #24]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	617b      	str	r3, [r7, #20]
   return(result);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e6      	bne.n	8004446 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b10      	cmp	r3, #16
 8004484:	d103      	bne.n	800448e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2210      	movs	r2, #16
 800448c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fe ff9c 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800449c:	e00b      	b.n	80044b6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc f8f4 	bl	800068c <HAL_UART_RxCpltCallback>
}
 80044a4:	e007      	b.n	80044b6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0208 	orr.w	r2, r2, #8
 80044b4:	619a      	str	r2, [r3, #24]
}
 80044b6:	bf00      	nop
 80044b8:	3770      	adds	r7, #112	; 0x70
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40008000 	.word	0x40008000

080044c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b09c      	sub	sp, #112	; 0x70
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80044d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044dc:	2b22      	cmp	r3, #34	; 0x22
 80044de:	f040 80be 	bne.w	800465e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80044f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80044f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80044fa:	4013      	ands	r3, r2
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004500:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	1c9a      	adds	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 80a1 	bne.w	800466e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800453a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004540:	667b      	str	r3, [r7, #100]	; 0x64
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
 800454c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e6      	bne.n	800452c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3308      	adds	r3, #8
 8004564:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	663b      	str	r3, [r7, #96]	; 0x60
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3308      	adds	r3, #8
 800457c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800457e:	643a      	str	r2, [r7, #64]	; 0x40
 8004580:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e5      	bne.n	800455e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a33      	ldr	r2, [pc, #204]	; (8004678 <UART_RxISR_16BIT+0x1b4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d01f      	beq.n	80045f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d018      	beq.n	80045f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e6      	bne.n	80045be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d12e      	bne.n	8004656 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	60bb      	str	r3, [r7, #8]
   return(result);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f023 0310 	bic.w	r3, r3, #16
 8004612:	65bb      	str	r3, [r7, #88]	; 0x58
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6979      	ldr	r1, [r7, #20]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	613b      	str	r3, [r7, #16]
   return(result);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b10      	cmp	r3, #16
 800463c:	d103      	bne.n	8004646 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2210      	movs	r2, #16
 8004644:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fe fec0 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004654:	e00b      	b.n	800466e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc f818 	bl	800068c <HAL_UART_RxCpltCallback>
}
 800465c:	e007      	b.n	800466e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0208 	orr.w	r2, r2, #8
 800466c:	619a      	str	r2, [r3, #24]
}
 800466e:	bf00      	nop
 8004670:	3770      	adds	r7, #112	; 0x70
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40008000 	.word	0x40008000

0800467c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b0ac      	sub	sp, #176	; 0xb0
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800468a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b2:	2b22      	cmp	r3, #34	; 0x22
 80046b4:	f040 8182 	bne.w	80049bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80046be:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80046c2:	e125      	b.n	8004910 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80046d2:	b2d9      	uxtb	r1, r3
 80046d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046de:	400a      	ands	r2, r1
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800470a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	2b00      	cmp	r3, #0
 8004714:	d053      	beq.n	80047be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004716:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d011      	beq.n	8004746 <UART_RxISR_8BIT_FIFOEN+0xca>
 8004722:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2201      	movs	r2, #1
 8004734:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d011      	beq.n	8004776 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2202      	movs	r2, #2
 8004764:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f043 0204 	orr.w	r2, r3, #4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d011      	beq.n	80047a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00b      	beq.n	80047a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2204      	movs	r2, #4
 8004794:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f043 0202 	orr.w	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d006      	beq.n	80047be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7fb ff58 	bl	8000666 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 80a2 	bne.w	8004910 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80047da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	461a      	mov	r2, r3
 80047ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047f0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80047f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80047fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e4      	bne.n	80047cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3308      	adds	r3, #8
 8004808:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004818:	f023 0301 	bic.w	r3, r3, #1
 800481c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3308      	adds	r3, #8
 8004826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800482a:	66ba      	str	r2, [r7, #104]	; 0x68
 800482c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004830:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004832:	e841 2300 	strex	r3, r2, [r1]
 8004836:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1e1      	bne.n	8004802 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2220      	movs	r2, #32
 8004842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5f      	ldr	r2, [pc, #380]	; (80049d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d021      	beq.n	80048a0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d01a      	beq.n	80048a0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004872:	e853 3f00 	ldrex	r3, [r3]
 8004876:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800487a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800487e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800488c:	657b      	str	r3, [r7, #84]	; 0x54
 800488e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004892:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e4      	bne.n	800486a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d130      	bne.n	800490a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	f023 0310 	bic.w	r3, r3, #16
 80048c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048d0:	643b      	str	r3, [r7, #64]	; 0x40
 80048d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e4      	bne.n	80048ae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d103      	bne.n	80048fa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2210      	movs	r2, #16
 80048f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fe fd66 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
 8004908:	e002      	b.n	8004910 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fb febe 	bl	800068c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004910:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004914:	2b00      	cmp	r3, #0
 8004916:	d006      	beq.n	8004926 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004918:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f aecf 	bne.w	80046c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800492c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004930:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004934:	2b00      	cmp	r3, #0
 8004936:	d049      	beq.n	80049cc <UART_RxISR_8BIT_FIFOEN+0x350>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800493e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004942:	429a      	cmp	r2, r3
 8004944:	d242      	bcs.n	80049cc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3308      	adds	r3, #8
 800494c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	61fb      	str	r3, [r7, #28]
   return(result);
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3308      	adds	r3, #8
 8004966:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800496a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e3      	bne.n	8004946 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004982:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	e853 3f00 	ldrex	r3, [r3]
 8004990:	60bb      	str	r3, [r7, #8]
   return(result);
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f043 0320 	orr.w	r3, r3, #32
 8004998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6979      	ldr	r1, [r7, #20]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	613b      	str	r3, [r7, #16]
   return(result);
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e4      	bne.n	8004984 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049ba:	e007      	b.n	80049cc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0208 	orr.w	r2, r2, #8
 80049ca:	619a      	str	r2, [r3, #24]
}
 80049cc:	bf00      	nop
 80049ce:	37b0      	adds	r7, #176	; 0xb0
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40008000 	.word	0x40008000
 80049d8:	0800430d 	.word	0x0800430d

080049dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b0ae      	sub	sp, #184	; 0xb8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80049ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a12:	2b22      	cmp	r3, #34	; 0x22
 8004a14:	f040 8186 	bne.w	8004d24 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a1e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a22:	e129      	b.n	8004c78 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004a36:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004a3a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	1c9a      	adds	r2, r3, #2
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004a6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d053      	beq.n	8004b22 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d011      	beq.n	8004aaa <UART_RxISR_16BIT_FIFOEN+0xce>
 8004a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2201      	movs	r2, #1
 8004a98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	f043 0201 	orr.w	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d011      	beq.n	8004ada <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f043 0204 	orr.w	r2, r3, #4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d011      	beq.n	8004b0a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2204      	movs	r2, #4
 8004af8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f043 0202 	orr.w	r2, r3, #2
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d006      	beq.n	8004b22 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fb fda6 	bl	8000666 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 80a4 	bne.w	8004c78 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b56:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e2      	bne.n	8004b30 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004b92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1e1      	bne.n	8004b6a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a5f      	ldr	r2, [pc, #380]	; (8004d3c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d021      	beq.n	8004c08 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d01a      	beq.n	8004c08 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004be6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004bf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bf6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bfa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bfc:	e841 2300 	strex	r3, r2, [r1]
 8004c00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1e4      	bne.n	8004bd2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d130      	bne.n	8004c72 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	f023 0310 	bic.w	r3, r3, #16
 8004c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e4      	bne.n	8004c16 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d103      	bne.n	8004c62 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2210      	movs	r2, #16
 8004c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c68:	4619      	mov	r1, r3
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fe fbb2 	bl	80033d4 <HAL_UARTEx_RxEventCallback>
 8004c70:	e002      	b.n	8004c78 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fb fd0a 	bl	800068c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c78:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004c80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f aecb 	bne.w	8004a24 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c94:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004c98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d049      	beq.n	8004d34 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ca6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d242      	bcs.n	8004d34 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	623b      	str	r3, [r7, #32]
   return(result);
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004cd2:	633a      	str	r2, [r7, #48]	; 0x30
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e3      	bne.n	8004cae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a15      	ldr	r2, [pc, #84]	; (8004d40 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004cea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f043 0320 	orr.w	r3, r3, #32
 8004d00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	69b9      	ldr	r1, [r7, #24]
 8004d14:	69fa      	ldr	r2, [r7, #28]
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e4      	bne.n	8004cec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d22:	e007      	b.n	8004d34 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0208 	orr.w	r2, r2, #8
 8004d32:	619a      	str	r2, [r3, #24]
}
 8004d34:	bf00      	nop
 8004d36:	37b8      	adds	r7, #184	; 0xb8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40008000 	.word	0x40008000
 8004d40:	080044c5 	.word	0x080044c5

08004d44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bc80      	pop	{r7}
 8004d54:	4770      	bx	lr

08004d56 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e027      	b.n	8004de0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004dbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr

08004dea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
 8004df2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e02d      	b.n	8004e5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2224      	movs	r2, #36	; 0x24
 8004e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f850 	bl	8004ee4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d101      	bne.n	8004e7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e02d      	b.n	8004eda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2224      	movs	r2, #36	; 0x24
 8004e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f812 	bl	8004ee4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d108      	bne.n	8004f06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f04:	e031      	b.n	8004f6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f06:	2308      	movs	r3, #8
 8004f08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	0e5b      	lsrs	r3, r3, #25
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	0f5b      	lsrs	r3, r3, #29
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f2e:	7bbb      	ldrb	r3, [r7, #14]
 8004f30:	7b3a      	ldrb	r2, [r7, #12]
 8004f32:	4910      	ldr	r1, [pc, #64]	; (8004f74 <UARTEx_SetNbDataToProcess+0x90>)
 8004f34:	5c8a      	ldrb	r2, [r1, r2]
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f3a:	7b3a      	ldrb	r2, [r7, #12]
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <UARTEx_SetNbDataToProcess+0x94>)
 8004f3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f40:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	7b7a      	ldrb	r2, [r7, #13]
 8004f50:	4908      	ldr	r1, [pc, #32]	; (8004f74 <UARTEx_SetNbDataToProcess+0x90>)
 8004f52:	5c8a      	ldrb	r2, [r1, r2]
 8004f54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f58:	7b7a      	ldrb	r2, [r7, #13]
 8004f5a:	4907      	ldr	r1, [pc, #28]	; (8004f78 <UARTEx_SetNbDataToProcess+0x94>)
 8004f5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	08005114 	.word	0x08005114
 8004f78:	0800511c 	.word	0x0800511c

08004f7c <__libc_init_array>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	4d0d      	ldr	r5, [pc, #52]	; (8004fb4 <__libc_init_array+0x38>)
 8004f80:	4c0d      	ldr	r4, [pc, #52]	; (8004fb8 <__libc_init_array+0x3c>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	2600      	movs	r6, #0
 8004f88:	42a6      	cmp	r6, r4
 8004f8a:	d109      	bne.n	8004fa0 <__libc_init_array+0x24>
 8004f8c:	4d0b      	ldr	r5, [pc, #44]	; (8004fbc <__libc_init_array+0x40>)
 8004f8e:	4c0c      	ldr	r4, [pc, #48]	; (8004fc0 <__libc_init_array+0x44>)
 8004f90:	f000 f842 	bl	8005018 <_init>
 8004f94:	1b64      	subs	r4, r4, r5
 8004f96:	10a4      	asrs	r4, r4, #2
 8004f98:	2600      	movs	r6, #0
 8004f9a:	42a6      	cmp	r6, r4
 8004f9c:	d105      	bne.n	8004faa <__libc_init_array+0x2e>
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa4:	4798      	blx	r3
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	e7ee      	b.n	8004f88 <__libc_init_array+0xc>
 8004faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fae:	4798      	blx	r3
 8004fb0:	3601      	adds	r6, #1
 8004fb2:	e7f2      	b.n	8004f9a <__libc_init_array+0x1e>
 8004fb4:	0800512c 	.word	0x0800512c
 8004fb8:	0800512c 	.word	0x0800512c
 8004fbc:	0800512c 	.word	0x0800512c
 8004fc0:	08005130 	.word	0x08005130

08004fc4 <memcpy>:
 8004fc4:	440a      	add	r2, r1
 8004fc6:	4291      	cmp	r1, r2
 8004fc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004fcc:	d100      	bne.n	8004fd0 <memcpy+0xc>
 8004fce:	4770      	bx	lr
 8004fd0:	b510      	push	{r4, lr}
 8004fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fda:	4291      	cmp	r1, r2
 8004fdc:	d1f9      	bne.n	8004fd2 <memcpy+0xe>
 8004fde:	bd10      	pop	{r4, pc}

08004fe0 <memset>:
 8004fe0:	4402      	add	r2, r0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d100      	bne.n	8004fea <memset+0xa>
 8004fe8:	4770      	bx	lr
 8004fea:	f803 1b01 	strb.w	r1, [r3], #1
 8004fee:	e7f9      	b.n	8004fe4 <memset+0x4>

08004ff0 <strncpy>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	3901      	subs	r1, #1
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	b132      	cbz	r2, 8005006 <strncpy+0x16>
 8004ff8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004ffc:	f803 4b01 	strb.w	r4, [r3], #1
 8005000:	3a01      	subs	r2, #1
 8005002:	2c00      	cmp	r4, #0
 8005004:	d1f7      	bne.n	8004ff6 <strncpy+0x6>
 8005006:	441a      	add	r2, r3
 8005008:	2100      	movs	r1, #0
 800500a:	4293      	cmp	r3, r2
 800500c:	d100      	bne.n	8005010 <strncpy+0x20>
 800500e:	bd10      	pop	{r4, pc}
 8005010:	f803 1b01 	strb.w	r1, [r3], #1
 8005014:	e7f9      	b.n	800500a <strncpy+0x1a>
	...

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr

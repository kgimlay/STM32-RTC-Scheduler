
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000317c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080032b4  080032b4  000132b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a0  080033a0  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000044  080033ec  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080033ec  00020118  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e839  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f63  00000000  00000000  0002e8a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00030810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000316f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b2ef  00000000  00000000  00032528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da9c  00000000  00000000  0004d817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aca2e  00000000  00000000  0005b2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d7c  00000000  00000000  00107d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000044 	.word	0x20000044
 8000154:	00000000 	.word	0x00000000
 8000158:	0800329c 	.word	0x0800329c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000048 	.word	0x20000048
 8000174:	0800329c 	.word	0x0800329c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000498:	f023 0218 	bic.w	r2, r3, #24
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
	...

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 f9c5 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f83b 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f2:	f000 f8e1 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f6:	f000 f891 	bl	800061c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_UART_Transmit(&huart2, (uint8_t*)HelloWorldMessage, HELLOMESSAGESIZE, 1000)!= HAL_OK)
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	2236      	movs	r2, #54	; 0x36
 8000500:	4916      	ldr	r1, [pc, #88]	; (800055c <main+0x78>)
 8000502:	4817      	ldr	r0, [pc, #92]	; (8000560 <main+0x7c>)
 8000504:	f002 f827 	bl	8002556 <HAL_UART_Transmit>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <main+0x2e>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 800050e:	f000 f8e0 	bl	80006d2 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000512:	2001      	movs	r0, #1
 8000514:	f000 fc90 	bl	8000e38 <HAL_PWREx_ReleaseCore>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_StatusTypeDef receiveStatus = HAL_UART_Receive(&huart2, (uint8_t *)rxBuffer, RXBUFFERSIZE, 10000);
 8000518:	f242 7310 	movw	r3, #10000	; 0x2710
 800051c:	2220      	movs	r2, #32
 800051e:	4911      	ldr	r1, [pc, #68]	; (8000564 <main+0x80>)
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x7c>)
 8000522:	f002 f89e 	bl	8002662 <HAL_UART_Receive>
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	  if (receiveStatus == HAL_ERROR)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d102      	bne.n	8000536 <main+0x52>
	    {
	      /* Transfer error in reception process */
	      Error_Handler();
 8000530:	f000 f8cf 	bl	80006d2 <Error_Handler>
 8000534:	e7f0      	b.n	8000518 <main+0x34>
	    }
	  else if (receiveStatus != HAL_TIMEOUT && receiveStatus != HAL_BUSY)
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b03      	cmp	r3, #3
 800053a:	d0ed      	beq.n	8000518 <main+0x34>
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d0ea      	beq.n	8000518 <main+0x34>
	  {
		  if(HAL_UART_Transmit(&huart2, (uint8_t*)rxBuffer, RXBUFFERSIZE, 100)!= HAL_OK)
 8000542:	2364      	movs	r3, #100	; 0x64
 8000544:	2220      	movs	r2, #32
 8000546:	4907      	ldr	r1, [pc, #28]	; (8000564 <main+0x80>)
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <main+0x7c>)
 800054a:	f002 f804 	bl	8002556 <HAL_UART_Transmit>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0e1      	beq.n	8000518 <main+0x34>
			{
			  /* Transfer error in transmission process */
			  Error_Handler();
 8000554:	f000 f8bd 	bl	80006d2 <Error_Handler>
  {
 8000558:	e7de      	b.n	8000518 <main+0x34>
 800055a:	bf00      	nop
 800055c:	20000004 	.word	0x20000004
 8000560:	20000060 	.word	0x20000060
 8000564:	200000f4 	.word	0x200000f4

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09a      	sub	sp, #104	; 0x68
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2248      	movs	r2, #72	; 0x48
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f002 fe88 	bl	800328c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]
 800058a:	615a      	str	r2, [r3, #20]
 800058c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800058e:	f000 fc2b 	bl	8000de8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff ff78 	bl	8000488 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xb0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005a0:	4a1d      	ldr	r2, [pc, #116]	; (8000618 <SystemClock_Config+0xb0>)
 80005a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <SystemClock_Config+0xb0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005b0:	603b      	str	r3, [r7, #0]
 80005b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b4:	2324      	movs	r3, #36	; 0x24
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005b8:	2381      	movs	r3, #129	; 0x81
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005c4:	2360      	movs	r3, #96	; 0x60
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005cc:	f107 0320 	add.w	r3, r7, #32
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 fef3 	bl	80013bc <HAL_RCC_OscConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005dc:	f000 f879 	bl	80006d2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80005e0:	236f      	movs	r3, #111	; 0x6f
 80005e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fa5d 	bl	8001ac0 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800060c:	f000 f861 	bl	80006d2 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3768      	adds	r7, #104	; 0x68
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	58000400 	.word	0x58000400

0800061c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000622:	4a24      	ldr	r2, [pc, #144]	; (80006b4 <MX_USART2_UART_Init+0x98>)
 8000624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800062c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 800063a:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 800063c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000640:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000644:	220c      	movs	r2, #12
 8000646:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000662:	2200      	movs	r2, #0
 8000664:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000666:	4812      	ldr	r0, [pc, #72]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 8000668:	f001 ff25 	bl	80024b6 <HAL_UART_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000672:	f000 f82e 	bl	80006d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000676:	2100      	movs	r1, #0
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 800067a:	f002 fd1a 	bl	80030b2 <HAL_UARTEx_SetTxFifoThreshold>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000684:	f000 f825 	bl	80006d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 800068c:	f002 fd4f 	bl	800312e <HAL_UARTEx_SetRxFifoThreshold>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000696:	f000 f81c 	bl	80006d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x94>)
 800069c:	f002 fcd1 	bl	8003042 <HAL_UARTEx_DisableFifoMode>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80006a6:	f000 f814 	bl	80006d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000060 	.word	0x20000060
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff fef8 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2004      	movs	r0, #4
 80006c4:	f7ff fef5 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	2002      	movs	r0, #2
 80006ca:	f7ff fef2 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d6:	b672      	cpsid	i
}
 80006d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006da:	e7fe      	b.n	80006da <Error_Handler+0x8>

080006dc <LL_AHB2_GRP1_EnableClock>:
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4013      	ands	r3, r2
 80006fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000700:	68fb      	ldr	r3, [r7, #12]
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800071a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4313      	orrs	r3, r2
 8000722:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000728:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000730:	68fb      	ldr	r3, [r7, #12]
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	; 0x58
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2238      	movs	r2, #56	; 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fd8f 	bl	800328c <memset>
  if(huart->Instance==USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a17      	ldr	r2, [pc, #92]	; (80007d0 <HAL_UART_MspInit+0x88>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d126      	bne.n	80007c6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000778:	2302      	movs	r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000780:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fd5a 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000792:	f7ff ff9e 	bl	80006d2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000796:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800079a:	f7ff ffb7 	bl	800070c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff ff9c 	bl	80006dc <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80007a4:	230c      	movs	r3, #12
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b4:	2307      	movs	r3, #7
 80007b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007bc:	4619      	mov	r1, r3
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f000 f9b1 	bl	8000b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3758      	adds	r7, #88	; 0x58
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40004400 	.word	0x40004400

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 f887 	bl	800092c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000828:	f7ff fe28 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000852:	f002 fcf7 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000856:	f7ff fe45 	bl	80004e4 <main>

0800085a <LoopForever>:

LoopForever:
    b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   r0, =_estack
 800085c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000868:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 800086c:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000870:	20000118 	.word	0x20000118

08000874 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800087e:	2300      	movs	r3, #0
 8000880:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000882:	2003      	movs	r0, #3
 8000884:	f000 f91e 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000888:	f001 fafc 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 800088c:	4603      	mov	r3, r0
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_Init+0x3c>)
 8000890:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f810 	bl	80008b8 <HAL_InitTick>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d002      	beq.n	80008a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	e001      	b.n	80008a8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008a4:	f7ff ff4a 	bl	800073c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008a8:	79fb      	ldrb	r3, [r7, #7]
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000000 	.word	0x20000000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <HAL_InitTick+0x6c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d024      	beq.n	8000916 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008cc:	f001 fada 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 80008d0:	4602      	mov	r2, r0
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <HAL_InitTick+0x6c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f912 	bl	8000b0e <HAL_SYSTICK_Config>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d10f      	bne.n	8000910 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b0f      	cmp	r3, #15
 80008f4:	d809      	bhi.n	800090a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f6:	2200      	movs	r2, #0
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008fe:	f000 f8ec 	bl	8000ada <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000902:	4a09      	ldr	r2, [pc, #36]	; (8000928 <HAL_InitTick+0x70>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	e007      	b.n	800091a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]
 800090e:	e004      	b.n	800091a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000910:	2301      	movs	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e001      	b.n	800091a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000040 	.word	0x20000040
 8000928:	2000003c 	.word	0x2000003c

0800092c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x1c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x20>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4413      	add	r3, r2
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_IncTick+0x20>)
 800093e:	6013      	str	r3, [r2, #0]
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr
 8000948:	20000040 	.word	0x20000040
 800094c:	20000114 	.word	0x20000114

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b02      	ldr	r3, [pc, #8]	; (8000960 <HAL_GetTick+0x10>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	20000114 	.word	0x20000114

08000964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000980:	4013      	ands	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800098c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	60d3      	str	r3, [r2, #12]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <__NVIC_GetPriorityGrouping+0x18>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	f003 0307 	and.w	r3, r3, #7
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	6039      	str	r1, [r7, #0]
 80009d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	db0a      	blt.n	80009f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	b2da      	uxtb	r2, r3
 80009e0:	490c      	ldr	r1, [pc, #48]	; (8000a14 <__NVIC_SetPriority+0x4c>)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	b2d2      	uxtb	r2, r2
 80009ea:	440b      	add	r3, r1
 80009ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f0:	e00a      	b.n	8000a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	4908      	ldr	r1, [pc, #32]	; (8000a18 <__NVIC_SetPriority+0x50>)
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	3b04      	subs	r3, #4
 8000a00:	0112      	lsls	r2, r2, #4
 8000a02:	b2d2      	uxtb	r2, r2
 8000a04:	440b      	add	r3, r1
 8000a06:	761a      	strb	r2, [r3, #24]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000e100 	.word	0xe000e100
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	f1c3 0307 	rsb	r3, r3, #7
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	bf28      	it	cs
 8000a3a:	2304      	movcs	r3, #4
 8000a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3304      	adds	r3, #4
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d902      	bls.n	8000a4c <NVIC_EncodePriority+0x30>
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	e000      	b.n	8000a4e <NVIC_EncodePriority+0x32>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43da      	mvns	r2, r3
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	401a      	ands	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6e:	43d9      	mvns	r1, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	4313      	orrs	r3, r2
         );
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3724      	adds	r7, #36	; 0x24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa4:	f7ff ff90 	bl	80009c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff49 	bl	8000964 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae8:	f7ff ff60 	bl	80009ac <__NVIC_GetPriorityGrouping>
 8000aec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	6978      	ldr	r0, [r7, #20]
 8000af4:	f7ff ff92 	bl	8000a1c <NVIC_EncodePriority>
 8000af8:	4602      	mov	r2, r0
 8000afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afe:	4611      	mov	r1, r2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff61 	bl	80009c8 <__NVIC_SetPriority>
}
 8000b06:	bf00      	nop
 8000b08:	3718      	adds	r7, #24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffb2 	bl	8000a80 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e140      	b.n	8000dba <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 8132 	beq.w	8000db4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d005      	beq.n	8000b68 <HAL_GPIO_Init+0x40>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d130      	bne.n	8000bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	2203      	movs	r2, #3
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	091b      	lsrs	r3, r3, #4
 8000bb4:	f003 0201 	and.w	r2, r3, #1
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	2b03      	cmp	r3, #3
 8000bd4:	d017      	beq.n	8000c06 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d123      	bne.n	8000c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	6939      	ldr	r1, [r7, #16]
 8000c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0203 	and.w	r2, r3, #3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 808c 	beq.w	8000db4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c9c:	4a4e      	ldr	r2, [pc, #312]	; (8000dd8 <HAL_GPIO_Init+0x2b0>)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cc6:	d00d      	beq.n	8000ce4 <HAL_GPIO_Init+0x1bc>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a44      	ldr	r2, [pc, #272]	; (8000ddc <HAL_GPIO_Init+0x2b4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d007      	beq.n	8000ce0 <HAL_GPIO_Init+0x1b8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a43      	ldr	r2, [pc, #268]	; (8000de0 <HAL_GPIO_Init+0x2b8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d101      	bne.n	8000cdc <HAL_GPIO_Init+0x1b4>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e004      	b.n	8000ce6 <HAL_GPIO_Init+0x1be>
 8000cdc:	2307      	movs	r3, #7
 8000cde:	e002      	b.n	8000ce6 <HAL_GPIO_Init+0x1be>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e000      	b.n	8000ce6 <HAL_GPIO_Init+0x1be>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	f002 0203 	and.w	r2, r2, #3
 8000cec:	0092      	lsls	r2, r2, #2
 8000cee:	4093      	lsls	r3, r2
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf6:	4938      	ldr	r1, [pc, #224]	; (8000dd8 <HAL_GPIO_Init+0x2b0>)
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	089b      	lsrs	r3, r3, #2
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d04:	4b37      	ldr	r3, [pc, #220]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4013      	ands	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d28:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d52:	4a24      	ldr	r2, [pc, #144]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d5e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000d7e:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d8c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_GPIO_Init+0x2bc>)
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3301      	adds	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f47f aeb7 	bne.w	8000b38 <HAL_GPIO_Init+0x10>
  }
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	371c      	adds	r7, #28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40010000 	.word	0x40010000
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	48000800 	.word	0x48000800
 8000de4:	58000800 	.word	0x58000800

08000de8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr
 8000e00:	58000400 	.word	0x58000400

08000e04 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <LL_PWR_EnableBootC2+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <LL_PWR_EnableBootC2+0x18>)
 8000e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	58000400 	.word	0x58000400

08000e20 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_PWREx_GetVoltageRange+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	58000400 	.word	0x58000400

08000e38 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8000e40:	f7ff ffe0 	bl	8000e04 <LL_PWR_EnableBootC2>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <LL_PWR_IsEnabledBkUpAccess>:
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e5c:	d101      	bne.n	8000e62 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e000      	b.n	8000e64 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	58000400 	.word	0x58000400

08000e70 <LL_RCC_HSE_EnableTcxo>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <LL_RCC_HSE_DisableTcxo>:
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr

08000ea8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000eba:	d101      	bne.n	8000ec0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr

08000eca <LL_RCC_HSE_Enable>:
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr

08000ee6 <LL_RCC_HSE_Disable>:
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <LL_RCC_HSE_IsReady>:
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f14:	d101      	bne.n	8000f1a <LL_RCC_HSE_IsReady+0x18>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <LL_RCC_HSE_IsReady+0x1a>
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <LL_RCC_HSI_Enable>:
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <LL_RCC_HSI_Disable>:
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <LL_RCC_HSI_IsReady>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f6e:	d101      	bne.n	8000f74 <LL_RCC_HSI_IsReady+0x18>
 8000f70:	2301      	movs	r3, #1
 8000f72:	e000      	b.n	8000f76 <LL_RCC_HSI_IsReady+0x1a>
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <LL_RCC_HSI_SetCalibTrimming>:
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	061b      	lsls	r3, r3, #24
 8000f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d101      	bne.n	8000fbe <LL_RCC_LSE_IsReady+0x18>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_RCC_LSE_IsReady+0x1a>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8000fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b02      	cmp	r3, #2
 800101a:	d101      	bne.n	8001020 <LL_RCC_LSI_IsReady+0x18>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <LL_RCC_LSI_IsReady+0x1a>
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800102e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800104a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6013      	str	r3, [r2, #0]
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b02      	cmp	r3, #2
 8001072:	d101      	bne.n	8001078 <LL_RCC_MSI_IsReady+0x16>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <LL_RCC_MSI_IsReady+0x18>
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	2b08      	cmp	r3, #8
 8001092:	d101      	bne.n	8001098 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr

080010a2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80010a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	021b      	lsls	r3, r3, #8
 80010e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f023 0203 	bic.w	r2, r3, #3
 800110a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 030c 	and.w	r3, r3, #12
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800113c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001146:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	608b      	str	r3, [r1, #8]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800116a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800116e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800118c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001190:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001194:	f023 020f 	bic.w	r2, r3, #15
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a0:	4313      	orrs	r3, r2
 80011a2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	608b      	str	r3, [r1, #8]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr

08001242 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800125c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012a2:	d101      	bne.n	80012a8 <LL_RCC_PLL_IsReady+0x18>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <LL_RCC_PLL_IsReady+0x1a>
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80012b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80012ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80012fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	f003 0303 	and.w	r3, r3, #3
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131e:	d101      	bne.n	8001324 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001336:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001342:	d101      	bne.n	8001348 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr

08001352 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001366:	d101      	bne.n	800136c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001388:	d101      	bne.n	800138e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800139c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013aa:	d101      	bne.n	80013b0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
	...

080013bc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e36f      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013ce:	f7ff fea6 	bl	800111e <LL_RCC_GetSysClkSource>
 80013d2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d4:	f7ff ff8f 	bl	80012f6 <LL_RCC_PLL_GetMainSource>
 80013d8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80c4 	beq.w	8001570 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x3e>
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	2b0c      	cmp	r3, #12
 80013f2:	d176      	bne.n	80014e2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d173      	bne.n	80014e2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e353      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800140a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_OscConfig+0x68>
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001422:	e006      	b.n	8001432 <HAL_RCC_OscConfig+0x76>
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001432:	4293      	cmp	r3, r2
 8001434:	d222      	bcs.n	800147c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fd5a 	bl	8001ef4 <RCC_SetFlashLatencyFromMSIRange>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e331      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fe2b 	bl	80010d0 <LL_RCC_MSI_SetCalibTrimming>
 800147a:	e021      	b.n	80014c0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe12 	bl	80010d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd1f 	bl	8001ef4 <RCC_SetFlashLatencyFromMSIRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e2f6      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014c0:	f000 fce0 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4aa7      	ldr	r2, [pc, #668]	; (8001764 <HAL_RCC_OscConfig+0x3a8>)
 80014c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80014ca:	4ba7      	ldr	r3, [pc, #668]	; (8001768 <HAL_RCC_OscConfig+0x3ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f9f2 	bl	80008b8 <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80014d8:	7cfb      	ldrb	r3, [r7, #19]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d047      	beq.n	800156e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80014de:	7cfb      	ldrb	r3, [r7, #19]
 80014e0:	e2e5      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d02c      	beq.n	8001544 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014ea:	f7ff fd9e 	bl	800102a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014ee:	f7ff fa2f 	bl	8000950 <HAL_GetTick>
 80014f2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f6:	f7ff fa2b 	bl	8000950 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e2d2      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001508:	f7ff fdab 	bl	8001062 <LL_RCC_MSI_IsReady>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f1      	beq.n	80014f6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fdc7 	bl	80010d0 <LL_RCC_MSI_SetCalibTrimming>
 8001542:	e015      	b.n	8001570 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001544:	f7ff fd7f 	bl	8001046 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001548:	f7ff fa02 	bl	8000950 <HAL_GetTick>
 800154c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001550:	f7ff f9fe 	bl	8000950 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e2a5      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001562:	f7ff fd7e 	bl	8001062 <LL_RCC_MSI_IsReady>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f1      	bne.n	8001550 <HAL_RCC_OscConfig+0x194>
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800156e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d058      	beq.n	800162e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	2b08      	cmp	r3, #8
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x1d2>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	2b0c      	cmp	r3, #12
 8001586:	d108      	bne.n	800159a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d105      	bne.n	800159a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d14b      	bne.n	800162e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e289      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b8:	d102      	bne.n	80015c0 <HAL_RCC_OscConfig+0x204>
 80015ba:	f7ff fc86 	bl	8000eca <LL_RCC_HSE_Enable>
 80015be:	e00d      	b.n	80015dc <HAL_RCC_OscConfig+0x220>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80015c8:	d104      	bne.n	80015d4 <HAL_RCC_OscConfig+0x218>
 80015ca:	f7ff fc51 	bl	8000e70 <LL_RCC_HSE_EnableTcxo>
 80015ce:	f7ff fc7c 	bl	8000eca <LL_RCC_HSE_Enable>
 80015d2:	e003      	b.n	80015dc <HAL_RCC_OscConfig+0x220>
 80015d4:	f7ff fc87 	bl	8000ee6 <LL_RCC_HSE_Disable>
 80015d8:	f7ff fc58 	bl	8000e8c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d012      	beq.n	800160a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff f9b4 	bl	8000950 <HAL_GetTick>
 80015e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff f9b0 	bl	8000950 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e257      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80015fe:	f7ff fc80 	bl	8000f02 <LL_RCC_HSE_IsReady>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f1      	beq.n	80015ec <HAL_RCC_OscConfig+0x230>
 8001608:	e011      	b.n	800162e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff f9a1 	bl	8000950 <HAL_GetTick>
 800160e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001612:	f7ff f99d 	bl	8000950 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e244      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001624:	f7ff fc6d 	bl	8000f02 <LL_RCC_HSE_IsReady>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f1      	bne.n	8001612 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d046      	beq.n	80016c8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x290>
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d10e      	bne.n	8001664 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d10b      	bne.n	8001664 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e22a      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fc8e 	bl	8000f7e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001662:	e031      	b.n	80016c8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d019      	beq.n	80016a0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166c:	f7ff fc5a 	bl	8000f24 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff f96e 	bl	8000950 <HAL_GetTick>
 8001674:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff f96a 	bl	8000950 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e211      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800168a:	f7ff fc67 	bl	8000f5c <LL_RCC_HSI_IsReady>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f1      	beq.n	8001678 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fc70 	bl	8000f7e <LL_RCC_HSI_SetCalibTrimming>
 800169e:	e013      	b.n	80016c8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016a0:	f7ff fc4e 	bl	8000f40 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff f954 	bl	8000950 <HAL_GetTick>
 80016a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff f950 	bl	8000950 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1f7      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80016be:	f7ff fc4d 	bl	8000f5c <LL_RCC_HSI_IsReady>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f1      	bne.n	80016ac <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d06e      	beq.n	80017b2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d056      	beq.n	800178a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d031      	beq.n	8001758 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e1d0      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d013      	beq.n	800173e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001716:	f7ff fc67 	bl	8000fe8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800171a:	f7ff f919 	bl	8000950 <HAL_GetTick>
 800171e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001722:	f7ff f915 	bl	8000950 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b11      	cmp	r3, #17
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e1bc      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001734:	f7ff fc68 	bl	8001008 <LL_RCC_LSI_IsReady>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f1      	bne.n	8001722 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	f023 0210 	bic.w	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001752:	4313      	orrs	r3, r2
 8001754:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001758:	f7ff fc36 	bl	8000fc8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff f8f8 	bl	8000950 <HAL_GetTick>
 8001760:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001762:	e00c      	b.n	800177e <HAL_RCC_OscConfig+0x3c2>
 8001764:	20000000 	.word	0x20000000
 8001768:	2000003c 	.word	0x2000003c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176c:	f7ff f8f0 	bl	8000950 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b11      	cmp	r3, #17
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e197      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800177e:	f7ff fc43 	bl	8001008 <LL_RCC_LSI_IsReady>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f1      	beq.n	800176c <HAL_RCC_OscConfig+0x3b0>
 8001788:	e013      	b.n	80017b2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	f7ff fc2d 	bl	8000fe8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff f8df 	bl	8000950 <HAL_GetTick>
 8001792:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001796:	f7ff f8db 	bl	8000950 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b11      	cmp	r3, #17
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e182      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80017a8:	f7ff fc2e 	bl	8001008 <LL_RCC_LSI_IsReady>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f1      	bne.n	8001796 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80d8 	beq.w	8001970 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80017c0:	f7ff fb44 	bl	8000e4c <LL_PWR_IsEnabledBkUpAccess>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d113      	bne.n	80017f2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80017ca:	f7ff fb0d 	bl	8000de8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ce:	f7ff f8bf 	bl	8000950 <HAL_GetTick>
 80017d2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d6:	f7ff f8bb 	bl	8000950 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e162      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80017e8:	f7ff fb30 	bl	8000e4c <LL_PWR_IsEnabledBkUpAccess>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f1      	beq.n	80017d6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d07b      	beq.n	80018f2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b85      	cmp	r3, #133	; 0x85
 8001800:	d003      	beq.n	800180a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d109      	bne.n	800181e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181e:	f7ff f897 	bl	8000950 <HAL_GetTick>
 8001822:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff f889 	bl	8000950 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	; 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e12e      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001850:	f7ff fba9 	bl	8000fa6 <LL_RCC_LSE_IsReady>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0ef      	beq.n	800183a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b81      	cmp	r3, #129	; 0x81
 8001860:	d003      	beq.n	800186a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b85      	cmp	r3, #133	; 0x85
 8001868:	d121      	bne.n	80018ae <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f871 	bl	8000950 <HAL_GetTick>
 800186e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001884:	e00a      	b.n	800189c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001886:	f7ff f863 	bl	8000950 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e108      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ec      	beq.n	8001886 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80018ac:	e060      	b.n	8001970 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff f84f 	bl	8000950 <HAL_GetTick>
 80018b2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018c8:	e00a      	b.n	80018e0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7ff f841 	bl	8000950 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d8:	4293      	cmp	r3, r2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0e6      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ec      	bne.n	80018ca <HAL_RCC_OscConfig+0x50e>
 80018f0:	e03e      	b.n	8001970 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f82d 	bl	8000950 <HAL_GetTick>
 80018f6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff f81f 	bl	8000950 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0c4      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800192c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1ec      	bne.n	800190e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff f80c 	bl	8000950 <HAL_GetTick>
 8001938:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7fe fffe 	bl	8000950 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0a3      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001966:	f7ff fb1e 	bl	8000fa6 <LL_RCC_LSE_IsReady>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ef      	bne.n	8001950 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8099 	beq.w	8001aac <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b0c      	cmp	r3, #12
 800197e:	d06c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	2b02      	cmp	r3, #2
 8001986:	d14b      	bne.n	8001a20 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	f7ff fc74 	bl	8001274 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7fe ffe0 	bl	8000950 <HAL_GetTick>
 8001990:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7fe ffdc 	bl	8000950 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b0a      	cmp	r3, #10
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e083      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80019a6:	f7ff fc73 	bl	8001290 <LL_RCC_PLL_IsReady>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f1      	bne.n	8001994 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <HAL_RCC_OscConfig+0x6fc>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019c8:	0212      	lsls	r2, r2, #8
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019dc:	430a      	orrs	r2, r1
 80019de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e6:	f7ff fc37 	bl	8001258 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7fe ffa9 	bl	8000950 <HAL_GetTick>
 80019fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7fe ffa5 	bl	8000950 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b0a      	cmp	r3, #10
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e04c      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001a14:	f7ff fc3c 	bl	8001290 <LL_RCC_PLL_IsReady>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f1      	beq.n	8001a02 <HAL_RCC_OscConfig+0x646>
 8001a1e:	e045      	b.n	8001aac <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a20:	f7ff fc28 	bl	8001274 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7fe ff94 	bl	8000950 <HAL_GetTick>
 8001a28:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7fe ff90 	bl	8000950 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b0a      	cmp	r3, #10
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e037      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001a3e:	f7ff fc27 	bl	8001290 <LL_RCC_PLL_IsReady>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f1      	bne.n	8001a2c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_RCC_OscConfig+0x700>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e028      	b.n	8001aac <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e023      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d115      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d10e      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	021b      	lsls	r3, r3, #8
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d106      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	11c1808c 	.word	0x11c1808c
 8001abc:	eefefffc 	.word	0xeefefffc

08001ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e12c      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b98      	ldr	r3, [pc, #608]	; (8001d38 <HAL_RCC_ClockConfig+0x278>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d91b      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b95      	ldr	r3, [pc, #596]	; (8001d38 <HAL_RCC_ClockConfig+0x278>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4993      	ldr	r1, [pc, #588]	; (8001d38 <HAL_RCC_ClockConfig+0x278>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af2:	f7fe ff2d 	bl	8000950 <HAL_GetTick>
 8001af6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001afa:	f7fe ff29 	bl	8000950 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e110      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0c:	4b8a      	ldr	r3, [pc, #552]	; (8001d38 <HAL_RCC_ClockConfig+0x278>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d1ef      	bne.n	8001afa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d016      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fb02 	bl	8001134 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b30:	f7fe ff0e 	bl	8000950 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b38:	f7fe ff0a 	bl	8000950 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0f1      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001b4a:	f7ff fbdf 	bl	800130c <LL_RCC_IsActiveFlag_HPRE>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f1      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d016      	beq.n	8001b8e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff faf8 	bl	800115a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001b6a:	f7fe fef1 	bl	8000950 <HAL_GetTick>
 8001b6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001b72:	f7fe feed 	bl	8000950 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0d4      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001b84:	f7ff fbd3 	bl	800132e <LL_RCC_IsActiveFlag_C2HPRE>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f1      	beq.n	8001b72 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff faf0 	bl	8001184 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ba4:	f7fe fed4 	bl	8000950 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bac:	f7fe fed0 	bl	8000950 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e0b7      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001bbe:	f7ff fbc8 	bl	8001352 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f1      	beq.n	8001bac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d016      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fae9 	bl	80011b0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001bde:	f7fe feb7 	bl	8000950 <HAL_GetTick>
 8001be2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001be6:	f7fe feb3 	bl	8000950 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e09a      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001bf8:	f7ff fbbd 	bl	8001376 <LL_RCC_IsActiveFlag_PPRE1>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f1      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d017      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fade 	bl	80011d6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c1a:	f7fe fe99 	bl	8000950 <HAL_GetTick>
 8001c1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c22:	f7fe fe95 	bl	8000950 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e07c      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001c34:	f7ff fbb0 	bl	8001398 <LL_RCC_IsActiveFlag_PPRE2>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f1      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d043      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d106      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001c52:	f7ff f956 	bl	8000f02 <LL_RCC_HSE_IsReady>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11e      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e066      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001c68:	f7ff fb12 	bl	8001290 <LL_RCC_PLL_IsReady>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d113      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e05b      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001c7e:	f7ff f9f0 	bl	8001062 <LL_RCC_MSI_IsReady>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d108      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e050      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001c8c:	f7ff f966 	bl	8000f5c <LL_RCC_HSI_IsReady>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e049      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fa2a 	bl	80010f8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca4:	f7fe fe54 	bl	8000950 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7fe fe50 	bl	8000950 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e035      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	f7ff fa2c 	bl	800111e <LL_RCC_GetSysClkSource>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d1ec      	bne.n	8001cac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd2:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <HAL_RCC_ClockConfig+0x278>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d21b      	bcs.n	8001d18 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_RCC_ClockConfig+0x278>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 0207 	bic.w	r2, r3, #7
 8001ce8:	4913      	ldr	r1, [pc, #76]	; (8001d38 <HAL_RCC_ClockConfig+0x278>)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7fe fe2e 	bl	8000950 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001cf8:	f7fe fe2a 	bl	8000950 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e011      	b.n	8001d2e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_ClockConfig+0x278>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1ef      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d18:	f000 f8b4 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_RCC_ClockConfig+0x27c>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <HAL_RCC_ClockConfig+0x280>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fdc6 	bl	80008b8 <HAL_InitTick>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	58004000 	.word	0x58004000
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	2000003c 	.word	0x2000003c

08001d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d52:	f7ff f9e4 	bl	800111e <LL_RCC_GetSysClkSource>
 8001d56:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d58:	f7ff facd 	bl	80012f6 <LL_RCC_PLL_GetMainSource>
 8001d5c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x2c>
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d139      	bne.n	8001dde <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d136      	bne.n	8001dde <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001d70:	f7ff f987 	bl	8001082 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_RCC_GetSysClockFreq+0x62>
 8001d7a:	f7ff f982 	bl	8001082 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_GetSysClockFreq+0x4e>
 8001d84:	f7ff f98d 	bl	80010a2 <LL_RCC_MSI_GetRange>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	e005      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x5a>
 8001d92:	f7ff f991 	bl	80010b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001d96:	4603      	mov	r3, r0
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	4a36      	ldr	r2, [pc, #216]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x134>)
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	e014      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x8c>
 8001da6:	f7ff f96c 	bl	8001082 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x7a>
 8001db0:	f7ff f977 	bl	80010a2 <LL_RCC_MSI_GetRange>
 8001db4:	4603      	mov	r3, r0
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	e005      	b.n	8001dca <HAL_RCC_GetSysClockFreq+0x86>
 8001dbe:	f7ff f97b 	bl	80010b8 <LL_RCC_MSI_GetRangeAfterStandby>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x134>)
 8001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d115      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ddc:	e012      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d102      	bne.n	8001dea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	e00c      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d109      	bne.n	8001e04 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001df0:	f7ff f85a 	bl	8000ea8 <LL_RCC_HSE_IsEnabledDiv2>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d102      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	e001      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e02:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e04:	f7ff f98b 	bl	800111e <LL_RCC_GetSysClkSource>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d12f      	bne.n	8001e6e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001e0e:	f7ff fa72 	bl	80012f6 <LL_RCC_PLL_GetMainSource>
 8001e12:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d003      	beq.n	8001e22 <HAL_RCC_GetSysClockFreq+0xde>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b03      	cmp	r3, #3
 8001e1e:	d003      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0xe4>
 8001e20:	e00d      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001e22:	4b16      	ldr	r3, [pc, #88]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e24:	60fb      	str	r3, [r7, #12]
        break;
 8001e26:	e00d      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e28:	f7ff f83e 	bl	8000ea8 <LL_RCC_HSE_IsEnabledDiv2>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d102      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8001e34:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001e36:	e005      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e3a:	60fb      	str	r3, [r7, #12]
        break;
 8001e3c:	e002      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	60fb      	str	r3, [r7, #12]
        break;
 8001e42:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001e44:	f7ff fa35 	bl	80012b2 <LL_RCC_PLL_GetN>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	fb03 f402 	mul.w	r4, r3, r2
 8001e50:	f7ff fa46 	bl	80012e0 <LL_RCC_PLL_GetDivider>
 8001e54:	4603      	mov	r3, r0
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	3301      	adds	r3, #1
 8001e5a:	fbb4 f4f3 	udiv	r4, r4, r3
 8001e5e:	f7ff fa34 	bl	80012ca <LL_RCC_PLL_GetR>
 8001e62:	4603      	mov	r3, r0
 8001e64:	0f5b      	lsrs	r3, r3, #29
 8001e66:	3301      	adds	r3, #1
 8001e68:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e6c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001e6e:	697b      	ldr	r3, [r7, #20]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	08003330 	.word	0x08003330
 8001e7c:	00f42400 	.word	0x00f42400
 8001e80:	01e84800 	.word	0x01e84800

08001e84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b598      	push	{r3, r4, r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001e88:	f7ff ff5c 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	f7ff f9b5 	bl	80011fc <LL_RCC_GetAHBPrescaler>
 8001e92:	4603      	mov	r3, r0
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd98      	pop	{r3, r4, r7, pc}
 8001ea8:	080032d0 	.word	0x080032d0

08001eac <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b598      	push	{r3, r4, r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001eb0:	f7ff ffe8 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	f7ff f9b9 	bl	800122c <LL_RCC_GetAPB1Prescaler>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd98      	pop	{r3, r4, r7, pc}
 8001ecc:	08003310 	.word	0x08003310

08001ed0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed0:	b598      	push	{r3, r4, r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001ed4:	f7ff ffd6 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4604      	mov	r4, r0
 8001eda:	f7ff f9b2 	bl	8001242 <LL_RCC_GetAPB2Prescaler>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	0adb      	lsrs	r3, r3, #11
 8001ee2:	4a03      	ldr	r2, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd98      	pop	{r3, r4, r7, pc}
 8001ef0:	08003310 	.word	0x08003310

08001ef4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	091b      	lsrs	r3, r3, #4
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001f0c:	f7ff f981 	bl	8001212 <LL_RCC_GetAHB3Prescaler>
 8001f10:	4603      	mov	r3, r0
 8001f12:	091b      	lsrs	r3, r3, #4
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9c      	lsrs	r4, r3, #18
 8001f30:	f7fe ff76 	bl	8000e20 <HAL_PWREx_GetVoltageRange>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f000 f80b 	bl	8001f54 <RCC_SetFlashLatency>
 8001f3e:	4603      	mov	r3, r0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}
 8001f48:	08003330 	.word	0x08003330
 8001f4c:	080032d0 	.word	0x080032d0
 8001f50:	431bde83 	.word	0x431bde83

08001f54 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08e      	sub	sp, #56	; 0x38
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001f5e:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <RCC_SetFlashLatency+0xf4>)
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f68:	6018      	str	r0, [r3, #0]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8001f6e:	4a37      	ldr	r2, [pc, #220]	; (800204c <RCC_SetFlashLatency+0xf8>)
 8001f70:	f107 0318 	add.w	r3, r7, #24
 8001f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f78:	6018      	str	r0, [r3, #0]
 8001f7a:	3304      	adds	r3, #4
 8001f7c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8001f7e:	4a34      	ldr	r2, [pc, #208]	; (8002050 <RCC_SetFlashLatency+0xfc>)
 8001f80:	f107 030c 	add.w	r3, r7, #12
 8001f84:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f86:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f94:	d11b      	bne.n	8001fce <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	; 0x30
 8001f9a:	e014      	b.n	8001fc6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	3338      	adds	r3, #56	; 0x38
 8001fa2:	443b      	add	r3, r7
 8001fa4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d807      	bhi.n	8001fc0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	3338      	adds	r3, #56	; 0x38
 8001fb6:	443b      	add	r3, r7
 8001fb8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001fbe:	e021      	b.n	8002004 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d9e7      	bls.n	8001f9c <RCC_SetFlashLatency+0x48>
 8001fcc:	e01a      	b.n	8002004 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd2:	e014      	b.n	8001ffe <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8001fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	443b      	add	r3, r7
 8001fdc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d807      	bhi.n	8001ff8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3338      	adds	r3, #56	; 0x38
 8001fee:	443b      	add	r3, r7
 8001ff0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ff6:	e005      	b.n	8002004 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	2b02      	cmp	r3, #2
 8002002:	d9e7      	bls.n	8001fd4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <RCC_SetFlashLatency+0x100>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 0207 	bic.w	r2, r3, #7
 800200c:	4911      	ldr	r1, [pc, #68]	; (8002054 <RCC_SetFlashLatency+0x100>)
 800200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002014:	f7fe fc9c 	bl	8000950 <HAL_GetTick>
 8002018:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800201a:	e008      	b.n	800202e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800201c:	f7fe fc98 	bl	8000950 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e007      	b.n	800203e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <RCC_SetFlashLatency+0x100>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002038:	429a      	cmp	r2, r3
 800203a:	d1ef      	bne.n	800201c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3738      	adds	r7, #56	; 0x38
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	080032b4 	.word	0x080032b4
 800204c:	080032bc 	.word	0x080032bc
 8002050:	080032c4 	.word	0x080032c4
 8002054:	58004000 	.word	0x58004000

08002058 <LL_RCC_LSE_IsReady>:
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b02      	cmp	r3, #2
 800206a:	d101      	bne.n	8002070 <LL_RCC_LSE_IsReady+0x18>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <LL_RCC_LSE_IsReady+0x1a>
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <LL_RCC_SetUSARTClockSource>:
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002086:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	43db      	mvns	r3, r3
 8002090:	401a      	ands	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <LL_RCC_SetI2SClockSource>:
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80020b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_SetLPUARTClockSource>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <LL_RCC_SetI2CClockSource>:
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002116:	43db      	mvns	r3, r3
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <LL_RCC_SetLPTIMClockSource>:
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002142:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0c1b      	lsrs	r3, r3, #16
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	43db      	mvns	r3, r3
 800214e:	401a      	ands	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <LL_RCC_SetRNGClockSource>:
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800217c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <LL_RCC_SetADCClockSource>:
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <LL_RCC_SetRTCClockSource>:
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80021c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <LL_RCC_GetRTCClockSource>:
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80021ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <LL_RCC_ForceBackupDomainReset>:
{
 80021fe:	b480      	push	{r7}
 8002200:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002216:	bf00      	nop
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <LL_RCC_ReleaseBackupDomainReset>:
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800222e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
	...

08002240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800224c:	2300      	movs	r3, #0
 800224e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002250:	2300      	movs	r3, #0
 8002252:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d058      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002260:	f7fe fdc2 	bl	8000de8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002264:	f7fe fb74 	bl	8000950 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800226a:	e009      	b.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800226c:	f7fe fb70 	bl	8000950 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d902      	bls.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	74fb      	strb	r3, [r7, #19]
        break;
 800227e:	e006      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002280:	4b7b      	ldr	r3, [pc, #492]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800228c:	d1ee      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d13c      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002294:	f7ff ffa7 	bl	80021e6 <LL_RCC_GetRTCClockSource>
 8002298:	4602      	mov	r2, r0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229e:	429a      	cmp	r2, r3
 80022a0:	d00f      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022b0:	f7ff ffa5 	bl	80021fe <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022b4:	f7ff ffb3 	bl	800221e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d014      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fb40 	bl	8000950 <HAL_GetTick>
 80022d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80022d2:	e00b      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7fe fb3c 	bl	8000950 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d902      	bls.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	74fb      	strb	r3, [r7, #19]
            break;
 80022ea:	e004      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80022ec:	f7ff feb4 	bl	8002058 <LL_RCC_LSE_IsReady>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d1ee      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff5b 	bl	80021bc <LL_RCC_SetRTCClockSource>
 8002306:	e004      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	74bb      	strb	r3, [r7, #18]
 800230c:	e001      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d004      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fea9 	bl	800207a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fe9e 	bl	800207a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fec0 	bl	80020d4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fee6 	bl	8002136 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fedb 	bl	8002136 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002388:	2b00      	cmp	r3, #0
 800238a:	d004      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fed0 	bl	8002136 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fea9 	bl	80020fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fe9e 	bl	80020fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fe93 	bl	80020fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d011      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fe5e 	bl	80020aa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f6:	d107      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002406:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d010      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fea5 	bl	8002168 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002434:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d011      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fea3 	bl	8002192 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002454:	d107      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002466:	7cbb      	ldrb	r3, [r7, #18]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	58000400 	.word	0x58000400

08002474 <LL_RCC_GetUSARTClockSource>:
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	401a      	ands	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	041b      	lsls	r3, r3, #16
 800248c:	4313      	orrs	r3, r2
}
 800248e:	4618      	mov	r0, r3
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <LL_RCC_GetLPUARTClockSource>:
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4013      	ands	r3, r2
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e042      	b.n	800254e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe f934 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f977 	bl	80027ec <UART_SetConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e022      	b.n	800254e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fbdf 	bl	8002cd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002524:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002534:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fc65 	bl	8002e16 <UART_CheckIdleState>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b08a      	sub	sp, #40	; 0x28
 800255a:	af02      	add	r7, sp, #8
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4613      	mov	r3, r2
 8002564:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	2b20      	cmp	r3, #32
 800256e:	d173      	bne.n	8002658 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_UART_Transmit+0x26>
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e06c      	b.n	800265a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2221      	movs	r2, #33	; 0x21
 800258c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002590:	f7fe f9de 	bl	8000950 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	88fa      	ldrh	r2, [r7, #6]
 800259a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	88fa      	ldrh	r2, [r7, #6]
 80025a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d108      	bne.n	80025c2 <HAL_UART_Transmit+0x6c>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d104      	bne.n	80025c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e003      	b.n	80025ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025ca:	e02c      	b.n	8002626 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2200      	movs	r2, #0
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fc6b 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e039      	b.n	800265a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	3302      	adds	r3, #2
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e007      	b.n	8002614 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	781a      	ldrb	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3301      	adds	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1cc      	bne.n	80025cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2200      	movs	r2, #0
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 fc38 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e006      	b.n	800265a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3720      	adds	r7, #32
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b08a      	sub	sp, #40	; 0x28
 8002666:	af02      	add	r7, sp, #8
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002678:	2b20      	cmp	r3, #32
 800267a:	f040 80b1 	bne.w	80027e0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_UART_Receive+0x28>
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0a9      	b.n	80027e2 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2222      	movs	r2, #34	; 0x22
 800269a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026a4:	f7fe f954 	bl	8000950 <HAL_GetTick>
 80026a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	88fa      	ldrh	r2, [r7, #6]
 80026ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	88fa      	ldrh	r2, [r7, #6]
 80026b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c2:	d10e      	bne.n	80026e2 <HAL_UART_Receive+0x80>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d105      	bne.n	80026d8 <HAL_UART_Receive+0x76>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80026d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80026d6:	e02d      	b.n	8002734 <HAL_UART_Receive+0xd2>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	22ff      	movs	r2, #255	; 0xff
 80026dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80026e0:	e028      	b.n	8002734 <HAL_UART_Receive+0xd2>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10d      	bne.n	8002706 <HAL_UART_Receive+0xa4>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_UART_Receive+0x9a>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80026fa:	e01b      	b.n	8002734 <HAL_UART_Receive+0xd2>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	227f      	movs	r2, #127	; 0x7f
 8002700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002704:	e016      	b.n	8002734 <HAL_UART_Receive+0xd2>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800270e:	d10d      	bne.n	800272c <HAL_UART_Receive+0xca>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d104      	bne.n	8002722 <HAL_UART_Receive+0xc0>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	227f      	movs	r2, #127	; 0x7f
 800271c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002720:	e008      	b.n	8002734 <HAL_UART_Receive+0xd2>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	223f      	movs	r2, #63	; 0x3f
 8002726:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800272a:	e003      	b.n	8002734 <HAL_UART_Receive+0xd2>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800273a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002744:	d108      	bne.n	8002758 <HAL_UART_Receive+0xf6>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e003      	b.n	8002760 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002760:	e032      	b.n	80027c8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	2120      	movs	r1, #32
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 fba0 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e032      	b.n	80027e2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10c      	bne.n	800279c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	b29a      	uxth	r2, r3
 800278a:	8a7b      	ldrh	r3, [r7, #18]
 800278c:	4013      	ands	r3, r2
 800278e:	b29a      	uxth	r2, r3
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	3302      	adds	r3, #2
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	e00c      	b.n	80027b6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	8a7b      	ldrh	r3, [r7, #18]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	4013      	ands	r3, r2
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3301      	adds	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1c6      	bne.n	8002762 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	e000      	b.n	80027e2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f0:	b08c      	sub	sp, #48	; 0x30
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	431a      	orrs	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	431a      	orrs	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4313      	orrs	r3, r2
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <UART_SetConfig+0x280>)
 800281c:	4013      	ands	r3, r2
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002824:	430b      	orrs	r3, r1
 8002826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a89      	ldr	r2, [pc, #548]	; (8002a70 <UART_SetConfig+0x284>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002854:	4313      	orrs	r3, r2
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002862:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800286c:	430b      	orrs	r3, r1
 800286e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	f023 010f 	bic.w	r1, r3, #15
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7a      	ldr	r2, [pc, #488]	; (8002a74 <UART_SetConfig+0x288>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d127      	bne.n	80028e0 <UART_SetConfig+0xf4>
 8002890:	2003      	movs	r0, #3
 8002892:	f7ff fdef 	bl	8002474 <LL_RCC_GetUSARTClockSource>
 8002896:	4603      	mov	r3, r0
 8002898:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800289c:	2b03      	cmp	r3, #3
 800289e:	d81b      	bhi.n	80028d8 <UART_SetConfig+0xec>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <UART_SetConfig+0xbc>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028b9 	.word	0x080028b9
 80028ac:	080028c9 	.word	0x080028c9
 80028b0:	080028c1 	.word	0x080028c1
 80028b4:	080028d1 	.word	0x080028d1
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028be:	e080      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80028c0:	2302      	movs	r3, #2
 80028c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028c6:	e07c      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80028c8:	2304      	movs	r3, #4
 80028ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028ce:	e078      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80028d0:	2308      	movs	r3, #8
 80028d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028d6:	e074      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80028d8:	2310      	movs	r3, #16
 80028da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80028de:	e070      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a64      	ldr	r2, [pc, #400]	; (8002a78 <UART_SetConfig+0x28c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d138      	bne.n	800295c <UART_SetConfig+0x170>
 80028ea:	200c      	movs	r0, #12
 80028ec:	f7ff fdc2 	bl	8002474 <LL_RCC_GetUSARTClockSource>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d82c      	bhi.n	8002954 <UART_SetConfig+0x168>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <UART_SetConfig+0x114>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002935 	.word	0x08002935
 8002904:	08002955 	.word	0x08002955
 8002908:	08002955 	.word	0x08002955
 800290c:	08002955 	.word	0x08002955
 8002910:	08002945 	.word	0x08002945
 8002914:	08002955 	.word	0x08002955
 8002918:	08002955 	.word	0x08002955
 800291c:	08002955 	.word	0x08002955
 8002920:	0800293d 	.word	0x0800293d
 8002924:	08002955 	.word	0x08002955
 8002928:	08002955 	.word	0x08002955
 800292c:	08002955 	.word	0x08002955
 8002930:	0800294d 	.word	0x0800294d
 8002934:	2300      	movs	r3, #0
 8002936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800293a:	e042      	b.n	80029c2 <UART_SetConfig+0x1d6>
 800293c:	2302      	movs	r3, #2
 800293e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002942:	e03e      	b.n	80029c2 <UART_SetConfig+0x1d6>
 8002944:	2304      	movs	r3, #4
 8002946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800294a:	e03a      	b.n	80029c2 <UART_SetConfig+0x1d6>
 800294c:	2308      	movs	r3, #8
 800294e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002952:	e036      	b.n	80029c2 <UART_SetConfig+0x1d6>
 8002954:	2310      	movs	r3, #16
 8002956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800295a:	e032      	b.n	80029c2 <UART_SetConfig+0x1d6>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a43      	ldr	r2, [pc, #268]	; (8002a70 <UART_SetConfig+0x284>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d12a      	bne.n	80029bc <UART_SetConfig+0x1d0>
 8002966:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800296a:	f7ff fd95 	bl	8002498 <LL_RCC_GetLPUARTClockSource>
 800296e:	4603      	mov	r3, r0
 8002970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002974:	d01a      	beq.n	80029ac <UART_SetConfig+0x1c0>
 8002976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800297a:	d81b      	bhi.n	80029b4 <UART_SetConfig+0x1c8>
 800297c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002980:	d00c      	beq.n	800299c <UART_SetConfig+0x1b0>
 8002982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002986:	d815      	bhi.n	80029b4 <UART_SetConfig+0x1c8>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <UART_SetConfig+0x1a8>
 800298c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002990:	d008      	beq.n	80029a4 <UART_SetConfig+0x1b8>
 8002992:	e00f      	b.n	80029b4 <UART_SetConfig+0x1c8>
 8002994:	2300      	movs	r3, #0
 8002996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800299a:	e012      	b.n	80029c2 <UART_SetConfig+0x1d6>
 800299c:	2302      	movs	r3, #2
 800299e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029a2:	e00e      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80029a4:	2304      	movs	r3, #4
 80029a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029aa:	e00a      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80029ac:	2308      	movs	r3, #8
 80029ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029b2:	e006      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80029b4:	2310      	movs	r3, #16
 80029b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029ba:	e002      	b.n	80029c2 <UART_SetConfig+0x1d6>
 80029bc:	2310      	movs	r3, #16
 80029be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a2a      	ldr	r2, [pc, #168]	; (8002a70 <UART_SetConfig+0x284>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	f040 80a4 	bne.w	8002b16 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d823      	bhi.n	8002a1e <UART_SetConfig+0x232>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <UART_SetConfig+0x1f0>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	08002a01 	.word	0x08002a01
 80029e0:	08002a1f 	.word	0x08002a1f
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002a1f 	.word	0x08002a1f
 80029ec:	08002a0f 	.word	0x08002a0f
 80029f0:	08002a1f 	.word	0x08002a1f
 80029f4:	08002a1f 	.word	0x08002a1f
 80029f8:	08002a1f 	.word	0x08002a1f
 80029fc:	08002a17 	.word	0x08002a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a00:	f7ff fa54 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8002a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a06:	e010      	b.n	8002a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a08:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <UART_SetConfig+0x290>)
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a0c:	e00d      	b.n	8002a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a0e:	f7ff f999 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8002a12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a14:	e009      	b.n	8002a2a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a1c:	e005      	b.n	8002a2a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002a28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8137 	beq.w	8002ca0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <UART_SetConfig+0x294>)
 8002a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4413      	add	r3, r2
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d305      	bcc.n	8002a62 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d910      	bls.n	8002a84 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002a68:	e11a      	b.n	8002ca0 <UART_SetConfig+0x4b4>
 8002a6a:	bf00      	nop
 8002a6c:	cfff69f3 	.word	0xcfff69f3
 8002a70:	40008000 	.word	0x40008000
 8002a74:	40013800 	.word	0x40013800
 8002a78:	40004400 	.word	0x40004400
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	08003370 	.word	0x08003370
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	2200      	movs	r2, #0
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	60fa      	str	r2, [r7, #12]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	4a8e      	ldr	r2, [pc, #568]	; (8002ccc <UART_SetConfig+0x4e0>)
 8002a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aa6:	f7fd fb67 	bl	8000178 <__aeabi_uldivmod>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	020b      	lsls	r3, r1, #8
 8002abc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002ac0:	0202      	lsls	r2, r0, #8
 8002ac2:	6979      	ldr	r1, [r7, #20]
 8002ac4:	6849      	ldr	r1, [r1, #4]
 8002ac6:	0849      	lsrs	r1, r1, #1
 8002ac8:	2000      	movs	r0, #0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4605      	mov	r5, r0
 8002ace:	eb12 0804 	adds.w	r8, r2, r4
 8002ad2:	eb43 0905 	adc.w	r9, r3, r5
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	469a      	mov	sl, r3
 8002ade:	4693      	mov	fp, r2
 8002ae0:	4652      	mov	r2, sl
 8002ae2:	465b      	mov	r3, fp
 8002ae4:	4640      	mov	r0, r8
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	f7fd fb46 	bl	8000178 <__aeabi_uldivmod>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4613      	mov	r3, r2
 8002af2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002afa:	d308      	bcc.n	8002b0e <UART_SetConfig+0x322>
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b02:	d204      	bcs.n	8002b0e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	60da      	str	r2, [r3, #12]
 8002b0c:	e0c8      	b.n	8002ca0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002b14:	e0c4      	b.n	8002ca0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1e:	d167      	bne.n	8002bf0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002b20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d828      	bhi.n	8002b7a <UART_SetConfig+0x38e>
 8002b28:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <UART_SetConfig+0x344>)
 8002b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2e:	bf00      	nop
 8002b30:	08002b55 	.word	0x08002b55
 8002b34:	08002b5d 	.word	0x08002b5d
 8002b38:	08002b65 	.word	0x08002b65
 8002b3c:	08002b7b 	.word	0x08002b7b
 8002b40:	08002b6b 	.word	0x08002b6b
 8002b44:	08002b7b 	.word	0x08002b7b
 8002b48:	08002b7b 	.word	0x08002b7b
 8002b4c:	08002b7b 	.word	0x08002b7b
 8002b50:	08002b73 	.word	0x08002b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b54:	f7ff f9aa 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b5a:	e014      	b.n	8002b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b5c:	f7ff f9b8 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002b60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b62:	e010      	b.n	8002b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b64:	4b5a      	ldr	r3, [pc, #360]	; (8002cd0 <UART_SetConfig+0x4e4>)
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b68:	e00d      	b.n	8002b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6a:	f7ff f8eb 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b70:	e009      	b.n	8002b86 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b78:	e005      	b.n	8002b86 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8089 	beq.w	8002ca0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	4a4e      	ldr	r2, [pc, #312]	; (8002ccc <UART_SetConfig+0x4e0>)
 8002b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ba0:	005a      	lsls	r2, r3, #1
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	441a      	add	r2, r3
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d916      	bls.n	8002be8 <UART_SetConfig+0x3fc>
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc0:	d212      	bcs.n	8002be8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	f023 030f 	bic.w	r3, r3, #15
 8002bca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	8bfb      	ldrh	r3, [r7, #30]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	8bfa      	ldrh	r2, [r7, #30]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	e05b      	b.n	8002ca0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002bee:	e057      	b.n	8002ca0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d828      	bhi.n	8002c4a <UART_SetConfig+0x45e>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <UART_SetConfig+0x414>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c2d 	.word	0x08002c2d
 8002c08:	08002c35 	.word	0x08002c35
 8002c0c:	08002c4b 	.word	0x08002c4b
 8002c10:	08002c3b 	.word	0x08002c3b
 8002c14:	08002c4b 	.word	0x08002c4b
 8002c18:	08002c4b 	.word	0x08002c4b
 8002c1c:	08002c4b 	.word	0x08002c4b
 8002c20:	08002c43 	.word	0x08002c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7ff f942 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8002c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c2a:	e014      	b.n	8002c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f7ff f950 	bl	8001ed0 <HAL_RCC_GetPCLK2Freq>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c32:	e010      	b.n	8002c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <UART_SetConfig+0x4e4>)
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c38:	e00d      	b.n	8002c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3a:	f7ff f883 	bl	8001d44 <HAL_RCC_GetSysClockFreq>
 8002c3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c40:	e009      	b.n	8002c56 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c48:	e005      	b.n	8002c56 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002c54:	bf00      	nop
    }

    if (pclk != 0U)
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d021      	beq.n	8002ca0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <UART_SetConfig+0x4e0>)
 8002c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c66:	461a      	mov	r2, r3
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	441a      	add	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2b0f      	cmp	r3, #15
 8002c84:	d909      	bls.n	8002c9a <UART_SetConfig+0x4ae>
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d205      	bcs.n	8002c9a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e002      	b.n	8002ca0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002cbc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3730      	adds	r7, #48	; 0x30
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cca:	bf00      	nop
 8002ccc:	08003370 	.word	0x08003370
 8002cd0:	00f42400 	.word	0x00f42400

08002cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01a      	beq.n	8002dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd2:	d10a      	bne.n	8002dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af02      	add	r7, sp, #8
 8002e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e26:	f7fd fd93 	bl	8000950 <HAL_GetTick>
 8002e2a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d10e      	bne.n	8002e58 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f832 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e028      	b.n	8002eaa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d10e      	bne.n	8002e84 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f81c 	bl	8002eb2 <UART_WaitOnFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e012      	b.n	8002eaa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b09c      	sub	sp, #112	; 0x70
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec2:	e0a9      	b.n	8003018 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eca:	f000 80a5 	beq.w	8003018 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ece:	f7fd fd3f 	bl	8000950 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d302      	bcc.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x32>
 8002ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d140      	bne.n	8002f66 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eec:	e853 3f00 	ldrex	r3, [r3]
 8002ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f0a:	e841 2300 	strex	r3, r2, [r1]
 8002f0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1e6      	bne.n	8002ee4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f20:	e853 3f00 	ldrex	r3, [r3]
 8002f24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3308      	adds	r3, #8
 8002f34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f36:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e5      	bne.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e069      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d051      	beq.n	8003018 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f82:	d149      	bne.n	8003018 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	e853 3f00 	ldrex	r3, [r3]
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
 8002fae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb4:	e841 2300 	strex	r3, r2, [r1]
 8002fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1e6      	bne.n	8002f8e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	e853 3f00 	ldrex	r3, [r3]
 8002fce:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3308      	adds	r3, #8
 8002fde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fe0:	623a      	str	r2, [r7, #32]
 8002fe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe4:	69f9      	ldr	r1, [r7, #28]
 8002fe6:	6a3a      	ldr	r2, [r7, #32]
 8002fe8:	e841 2300 	strex	r3, r2, [r1]
 8002fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e5      	bne.n	8002fc0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e010      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	429a      	cmp	r2, r3
 8003034:	f43f af46 	beq.w	8002ec4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3770      	adds	r7, #112	; 0x70
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_UARTEx_DisableFifoMode+0x16>
 8003054:	2302      	movs	r3, #2
 8003056:	e027      	b.n	80030a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	; 0x24
 8003064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003086:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e02d      	b.n	8003126 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2224      	movs	r2, #36	; 0x24
 80030d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f850 	bl	80031ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003142:	2302      	movs	r3, #2
 8003144:	e02d      	b.n	80031a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2224      	movs	r2, #36	; 0x24
 8003152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0201 	bic.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f812 	bl	80031ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d108      	bne.n	80031ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80031cc:	e031      	b.n	8003232 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80031ce:	2308      	movs	r3, #8
 80031d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80031d2:	2308      	movs	r3, #8
 80031d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	0e5b      	lsrs	r3, r3, #25
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	0f5b      	lsrs	r3, r3, #29
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031f6:	7bbb      	ldrb	r3, [r7, #14]
 80031f8:	7b3a      	ldrb	r2, [r7, #12]
 80031fa:	4910      	ldr	r1, [pc, #64]	; (800323c <UARTEx_SetNbDataToProcess+0x90>)
 80031fc:	5c8a      	ldrb	r2, [r1, r2]
 80031fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003202:	7b3a      	ldrb	r2, [r7, #12]
 8003204:	490e      	ldr	r1, [pc, #56]	; (8003240 <UARTEx_SetNbDataToProcess+0x94>)
 8003206:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003208:	fb93 f3f2 	sdiv	r3, r3, r2
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	7b7a      	ldrb	r2, [r7, #13]
 8003218:	4908      	ldr	r1, [pc, #32]	; (800323c <UARTEx_SetNbDataToProcess+0x90>)
 800321a:	5c8a      	ldrb	r2, [r1, r2]
 800321c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003220:	7b7a      	ldrb	r2, [r7, #13]
 8003222:	4907      	ldr	r1, [pc, #28]	; (8003240 <UARTEx_SetNbDataToProcess+0x94>)
 8003224:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003226:	fb93 f3f2 	sdiv	r3, r3, r2
 800322a:	b29a      	uxth	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	08003388 	.word	0x08003388
 8003240:	08003390 	.word	0x08003390

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4d0d      	ldr	r5, [pc, #52]	; (800327c <__libc_init_array+0x38>)
 8003248:	4c0d      	ldr	r4, [pc, #52]	; (8003280 <__libc_init_array+0x3c>)
 800324a:	1b64      	subs	r4, r4, r5
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	2600      	movs	r6, #0
 8003250:	42a6      	cmp	r6, r4
 8003252:	d109      	bne.n	8003268 <__libc_init_array+0x24>
 8003254:	4d0b      	ldr	r5, [pc, #44]	; (8003284 <__libc_init_array+0x40>)
 8003256:	4c0c      	ldr	r4, [pc, #48]	; (8003288 <__libc_init_array+0x44>)
 8003258:	f000 f820 	bl	800329c <_init>
 800325c:	1b64      	subs	r4, r4, r5
 800325e:	10a4      	asrs	r4, r4, #2
 8003260:	2600      	movs	r6, #0
 8003262:	42a6      	cmp	r6, r4
 8003264:	d105      	bne.n	8003272 <__libc_init_array+0x2e>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	f855 3b04 	ldr.w	r3, [r5], #4
 800326c:	4798      	blx	r3
 800326e:	3601      	adds	r6, #1
 8003270:	e7ee      	b.n	8003250 <__libc_init_array+0xc>
 8003272:	f855 3b04 	ldr.w	r3, [r5], #4
 8003276:	4798      	blx	r3
 8003278:	3601      	adds	r6, #1
 800327a:	e7f2      	b.n	8003262 <__libc_init_array+0x1e>
 800327c:	080033a0 	.word	0x080033a0
 8003280:	080033a0 	.word	0x080033a0
 8003284:	080033a0 	.word	0x080033a0
 8003288:	080033a4 	.word	0x080033a4

0800328c <memset>:
 800328c:	4402      	add	r2, r0
 800328e:	4603      	mov	r3, r0
 8003290:	4293      	cmp	r3, r2
 8003292:	d100      	bne.n	8003296 <memset+0xa>
 8003294:	4770      	bx	lr
 8003296:	f803 1b01 	strb.w	r1, [r3], #1
 800329a:	e7f9      	b.n	8003290 <memset+0x4>

0800329c <_init>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	bf00      	nop
 80032a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a2:	bc08      	pop	{r3}
 80032a4:	469e      	mov	lr, r3
 80032a6:	4770      	bx	lr

080032a8 <_fini>:
 80032a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032aa:	bf00      	nop
 80032ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ae:	bc08      	pop	{r3}
 80032b0:	469e      	mov	lr, r3
 80032b2:	4770      	bx	lr

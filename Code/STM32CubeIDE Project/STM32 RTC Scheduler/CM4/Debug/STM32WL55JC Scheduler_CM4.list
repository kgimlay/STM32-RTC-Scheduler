
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004898  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08004ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000048  08004b0c  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08004b0c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffe3  00000000  00000000  00020072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002424  00000000  00000000  00030055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00032480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00033478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b6f4  00000000  00000000  000343a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1ae  00000000  00000000  0004fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afd6f  00000000  00000000  0005ec4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e9b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004208  00000000  00000000  0010ea0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000048 	.word	0x20000048
 8000154:	00000000 	.word	0x00000000
 8000158:	080049b8 	.word	0x080049b8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000004c 	.word	0x2000004c
 8000174:	080049b8 	.word	0x080049b8

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000498:	f023 0218 	bic.w	r2, r3, #24
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
	...

08000508 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	UART_QUEUE_STATUS qStatus;

	// add message to queue
	qStatus = uartQueue_enqueue(&rxQueue, rxBuffer);
 8000510:	4909      	ldr	r1, [pc, #36]	; (8000538 <HAL_UART_RxCpltCallback+0x30>)
 8000512:	480a      	ldr	r0, [pc, #40]	; (800053c <HAL_UART_RxCpltCallback+0x34>)
 8000514:	f000 fa1b 	bl	800094e <uartQueue_enqueue>
 8000518:	4603      	mov	r3, r0
 800051a:	73fb      	strb	r3, [r7, #15]

	// begin receiving again
	if(HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, RXBUFFERSIZE)== HAL_ERROR)
 800051c:	2220      	movs	r2, #32
 800051e:	4906      	ldr	r1, [pc, #24]	; (8000538 <HAL_UART_RxCpltCallback+0x30>)
 8000520:	4807      	ldr	r0, [pc, #28]	; (8000540 <HAL_UART_RxCpltCallback+0x38>)
 8000522:	f002 fa69 	bl	80029f8 <HAL_UART_Receive_IT>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d101      	bne.n	8000530 <HAL_UART_RxCpltCallback+0x28>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 800052c:	f000 f8f3 	bl	8000716 <Error_Handler>
	}
}
 8000530:	bf00      	nop
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000184 	.word	0x20000184
 800053c:	200000f8 	.word	0x200000f8
 8000540:	20000064 	.word	0x20000064

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uartQueue_init(&rxQueue);
 8000548:	4812      	ldr	r0, [pc, #72]	; (8000594 <main+0x50>)
 800054a:	f000 f9d2 	bl	80008f2 <uartQueue_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fa77 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f827 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8d1 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f87d 	bl	8000658 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_UART_Transmit(&huart2, (uint8_t*)HelloWorldMessage, (COUNTOF(HelloWorldMessage) - 1), 1000)!= HAL_OK)
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	223a      	movs	r2, #58	; 0x3a
 8000564:	490c      	ldr	r1, [pc, #48]	; (8000598 <main+0x54>)
 8000566:	480d      	ldr	r0, [pc, #52]	; (800059c <main+0x58>)
 8000568:	f002 f9bf 	bl	80028ea <HAL_UART_Transmit>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <main+0x32>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 8000572:	f000 f8d0 	bl	8000716 <Error_Handler>
	}

  if(HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, RXBUFFERSIZE)== HAL_ERROR)
 8000576:	2220      	movs	r2, #32
 8000578:	4909      	ldr	r1, [pc, #36]	; (80005a0 <main+0x5c>)
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <main+0x58>)
 800057c:	f002 fa3c 	bl	80029f8 <HAL_UART_Receive_IT>
 8000580:	4603      	mov	r3, r0
 8000582:	2b01      	cmp	r3, #1
 8000584:	d101      	bne.n	800058a <main+0x46>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 8000586:	f000 f8c6 	bl	8000716 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fe1e 	bl	80011cc <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x4c>
 8000592:	bf00      	nop
 8000594:	200000f8 	.word	0x200000f8
 8000598:	20000004 	.word	0x20000004
 800059c:	20000064 	.word	0x20000064
 80005a0:	20000184 	.word	0x20000184

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b09a      	sub	sp, #104	; 0x68
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2248      	movs	r2, #72	; 0x48
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 f9f8 	bl	80049a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ca:	f000 fdd7 	bl	800117c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ff5a 	bl	8000488 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xb0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005dc:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <SystemClock_Config+0xb0>)
 80005de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <SystemClock_Config+0xb0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f0:	2324      	movs	r3, #36	; 0x24
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f4:	2381      	movs	r3, #129	; 0x81
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f001 f89f 	bl	8001750 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000618:	f000 f87d 	bl	8000716 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 800061c:	236f      	movs	r3, #111	; 0x6f
 800061e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fc09 	bl	8001e54 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000648:	f000 f865 	bl	8000716 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3768      	adds	r7, #104	; 0x68
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	58000400 	.word	0x58000400

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 800065e:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <MX_USART2_UART_Init+0xa0>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 600;
 8000662:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 8000664:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 8000678:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800067c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 8000680:	220c      	movs	r2, #12
 8000682:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 800069e:	2210      	movs	r2, #16
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 80006a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006aa:	4812      	ldr	r0, [pc, #72]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 80006ac:	f002 f8cd 	bl	800284a <HAL_UART_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 80006b6:	f000 f82e 	bl	8000716 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ba:	2100      	movs	r1, #0
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 80006be:	f004 f878 	bl	80047b2 <HAL_UARTEx_SetTxFifoThreshold>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_USART2_UART_Init+0x74>
  {
    Error_Handler();
 80006c8:	f000 f825 	bl	8000716 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 80006d0:	f004 f8ad 	bl	800482e <HAL_UARTEx_SetRxFifoThreshold>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x86>
  {
    Error_Handler();
 80006da:	f000 f81c 	bl	8000716 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x9c>)
 80006e0:	f004 f82f 	bl	8004742 <HAL_UARTEx_DisableFifoMode>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x96>
  {
    Error_Handler();
 80006ea:	f000 f814 	bl	8000716 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000064 	.word	0x20000064
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000700:	2001      	movs	r0, #1
 8000702:	f7ff fed6 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	2004      	movs	r0, #4
 8000708:	f7ff fed3 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff fed0 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}

08000716 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071a:	b672      	cpsid	i
}
 800071c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071e:	e7fe      	b.n	800071e <Error_Handler+0x8>

08000720 <LL_AHB2_GRP1_EnableClock>:
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800072e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4313      	orrs	r3, r2
 8000736:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4013      	ands	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000744:	68fb      	ldr	r3, [r7, #12]
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800075e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000774:	68fb      	ldr	r3, [r7, #12]
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b096      	sub	sp, #88	; 0x58
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2238      	movs	r2, #56	; 0x38
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 f8fb 	bl	80049a8 <memset>
  if(huart->Instance==USART2)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <HAL_UART_MspInit+0x98>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d12e      	bne.n	800081a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007bc:	2302      	movs	r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007c0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80007c4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 ff02 	bl	80025d4 <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007d6:	f7ff ff9e 	bl	8000716 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007de:	f7ff ffb7 	bl	8000750 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff ff9c 	bl	8000720 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80007e8:	230c      	movs	r3, #12
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007f8:	2307      	movs	r3, #7
 80007fa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000800:	4619      	mov	r1, r3
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f000 fb59 	bl	8000ebc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	2025      	movs	r0, #37	; 0x25
 8000810:	f000 fa63 	bl	8000cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000814:	2025      	movs	r0, #37	; 0x25
 8000816:	f000 fa7a 	bl	8000d0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081a:	bf00      	nop
 800081c:	3758      	adds	r7, #88	; 0x58
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40004400 	.word	0x40004400

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 f941 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <USART2_IRQHandler+0x10>)
 800087e:	f002 f907 	bl	8002a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000064 	.word	0x20000064

0800088c <nextIdx>:


/*
 * Private helper to calculate next index in circular queue.
 */
uint8_t nextIdx(uint8_t index) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	return (index + 1) % QUEUE_SIZE;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	3301      	adds	r3, #1
 800089a:	425a      	negs	r2, r3
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	f002 0203 	and.w	r2, r2, #3
 80008a4:	bf58      	it	pl
 80008a6:	4253      	negpl	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <_enqueue>:

/*
 * Private helper to enqueue a message to the queue.
 */
void _enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	// copy the message to the queue and increment the rear pointer
	memcpy(queue->_queue[queue->_rear], message, QUEUE_BUFFER_SIZE*sizeof(char));
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	689b      	ldr	r3, [r3, #8]
 80008c2:	015b      	lsls	r3, r3, #5
 80008c4:	3308      	adds	r3, #8
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	3304      	adds	r3, #4
 80008cc:	2220      	movs	r2, #32
 80008ce:	6839      	ldr	r1, [r7, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 f85b 	bl	800498c <memcpy>
	queue->_rear = nextIdx(queue->_rear);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ffd5 	bl	800088c <nextIdx>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	609a      	str	r2, [r3, #8]
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <uartQueue_init>:

/*
 * Initializes a UART_Queue structure.
 * Call before attempting to operate on the queue.
 */
void uartQueue_init(UART_Queue* queue) {
 80008f2:	b480      	push	{r7}
 80008f4:	b085      	sub	sp, #20
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
	// operation variables
	int row, col;

	// reset all operation variables
	queue->_isEmpty = true;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
	queue->_front = 0;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
	queue->_rear = 0;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]

	// ensure that the queue messages are empty
	for (row = 0; row < UART_MESSAGE_SIZE; row++)
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e014      	b.n	800093c <uartQueue_init+0x4a>
		for (col = 0; col < UART_MESSAGE_SIZE; col++)
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	e00b      	b.n	8000930 <uartQueue_init+0x3e>
			queue->_queue[row][col] = '\0';
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	015b      	lsls	r3, r3, #5
 800091e:	441a      	add	r2, r3
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	4413      	add	r3, r2
 8000924:	330c      	adds	r3, #12
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
		for (col = 0; col < UART_MESSAGE_SIZE; col++)
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	3301      	adds	r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	2b1f      	cmp	r3, #31
 8000934:	ddf0      	ble.n	8000918 <uartQueue_init+0x26>
	for (row = 0; row < UART_MESSAGE_SIZE; row++)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	3301      	adds	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2b1f      	cmp	r3, #31
 8000940:	dde7      	ble.n	8000912 <uartQueue_init+0x20>
}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <uartQueue_enqueue>:

/*
 * Enqueue a message.
 * Return success if enqueueing successful, or full if the queue is full.
 */
UART_QUEUE_STATUS uartQueue_enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (uartQueue_isEmpty(queue)) {
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 f81d 	bl	8000998 <uartQueue_isEmpty>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <uartQueue_enqueue+0x28>
		// set not empty
		queue->_isEmpty = false;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]

		// enqueue
		_enqueue(queue, message);
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ffa1 	bl	80008b4 <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000972:	2300      	movs	r3, #0
 8000974:	e00c      	b.n	8000990 <uartQueue_enqueue+0x42>
	}

	// case that queue is full
	else if (uartQueue_isFull(queue)) {
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f81a 	bl	80009b0 <uartQueue_isFull>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <uartQueue_enqueue+0x38>
		// report
		return UART_QUEUE_FULL;
 8000982:	2301      	movs	r3, #1
 8000984:	e004      	b.n	8000990 <uartQueue_enqueue+0x42>
	}

	// queue is not full, enqueue
	else {
		// enqueue
		_enqueue(queue, message);
 8000986:	6839      	ldr	r1, [r7, #0]
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff93 	bl	80008b4 <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 800098e:	2300      	movs	r3, #0
	}
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <uartQueue_isEmpty>:
}

/*
 *
 */
bool uartQueue_isEmpty(UART_Queue* queue) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	return (queue->_isEmpty);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr

080009b0 <uartQueue_isFull>:

/*
 * Helper to check if a queue is empty.
 */
bool uartQueue_isFull(UART_Queue* queue) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	return (!uartQueue_isEmpty(queue) && queue->_front == queue->_rear);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ffed 	bl	8000998 <uartQueue_isEmpty>
 80009be:	4603      	mov	r3, r0
 80009c0:	f083 0301 	eor.w	r3, r3, #1
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d007      	beq.n	80009da <uartQueue_isFull+0x2a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d101      	bne.n	80009da <uartQueue_isFull+0x2a>
 80009d6:	2301      	movs	r3, #1
 80009d8:	e000      	b.n	80009dc <uartQueue_isFull+0x2c>
 80009da:	2300      	movs	r3, #0
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	b2db      	uxtb	r3, r3
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009f0:	f7ff fd44 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	; (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	; (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a1a:	f003 ff93 	bl	8004944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a1e:	f7ff fd91 	bl	8000544 <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   r0, =_estack
 8000a24:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000a30:	08004ac4 	.word	0x08004ac4
  ldr r2, =_sbss
 8000a34:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000a38:	200001a8 	.word	0x200001a8

08000a3c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	f000 f93a 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000a50:	f001 fbe2 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <HAL_Init+0x3c>)
 8000a58:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f810 	bl	8000a80 <HAL_InitTick>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d002      	beq.n	8000a6c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	e001      	b.n	8000a70 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a6c:	f7ff fe88 	bl	8000780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a70:	79fb      	ldrb	r3, [r7, #7]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000000 	.word	0x20000000

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_InitTick+0x6c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d024      	beq.n	8000ade <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a94:	f001 fbc0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_InitTick+0x6c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f93c 	bl	8000d2a <HAL_SYSTICK_Config>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10f      	bne.n	8000ad8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b0f      	cmp	r3, #15
 8000abc:	d809      	bhi.n	8000ad2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	6879      	ldr	r1, [r7, #4]
 8000ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac6:	f000 f908 	bl	8000cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aca:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <HAL_InitTick+0x70>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e007      	b.n	8000ae2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	73fb      	strb	r3, [r7, #15]
 8000ad6:	e004      	b.n	8000ae2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e001      	b.n	8000ae2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000044 	.word	0x20000044
 8000af0:	20000040 	.word	0x20000040

08000af4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_IncTick+0x1c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <HAL_IncTick+0x20>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <HAL_IncTick+0x20>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20000044 	.word	0x20000044
 8000b14:	200001a4 	.word	0x200001a4

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <HAL_GetTick+0x10>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	200001a4 	.word	0x200001a4

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <__NVIC_EnableIRQ+0x34>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f7ff ff90 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff2d 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff44 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff92 	bl	8000c1c <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff61 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	4603      	mov	r3, r0
 8000d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff37 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffa4 	bl	8000c80 <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e04f      	b.n	8000df4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d008      	beq.n	8000d72 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2204      	movs	r2, #4
 8000d64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e040      	b.n	8000df4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 020e 	bic.w	r2, r2, #14
 8000d80:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f022 0201 	bic.w	r2, r2, #1
 8000da0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f003 021c 	and.w	r2, r3, #28
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	2101      	movs	r1, #1
 8000db0:	fa01 f202 	lsl.w	r2, r1, r2
 8000db4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000dbe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d00c      	beq.n	8000de2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000de0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr

08000dfe <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d005      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2204      	movs	r2, #4
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e047      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 020e 	bic.w	r2, r2, #14
 8000e30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f003 021c 	and.w	r2, r3, #28
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00c      	beq.n	8000e92 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	4798      	blx	r3
    }
  }
  return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eca:	e140      	b.n	800114e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 8132 	beq.w	8001148 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x40>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	f003 0201 	and.w	r2, r3, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d017      	beq.n	8000f9a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d123      	bne.n	8000fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	6939      	ldr	r1, [r7, #16]
 8000fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0203 	and.w	r2, r3, #3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 808c 	beq.w	8001148 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001030:	4a4e      	ldr	r2, [pc, #312]	; (800116c <HAL_GPIO_Init+0x2b0>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	2207      	movs	r2, #7
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800105a:	d00d      	beq.n	8001078 <HAL_GPIO_Init+0x1bc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a44      	ldr	r2, [pc, #272]	; (8001170 <HAL_GPIO_Init+0x2b4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x1b8>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a43      	ldr	r2, [pc, #268]	; (8001174 <HAL_GPIO_Init+0x2b8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_Init+0x1b4>
 800106c:	2302      	movs	r3, #2
 800106e:	e004      	b.n	800107a <HAL_GPIO_Init+0x1be>
 8001070:	2307      	movs	r3, #7
 8001072:	e002      	b.n	800107a <HAL_GPIO_Init+0x1be>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <HAL_GPIO_Init+0x1be>
 8001078:	2300      	movs	r3, #0
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	f002 0203 	and.w	r2, r2, #3
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	4093      	lsls	r3, r2
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108a:	4938      	ldr	r1, [pc, #224]	; (800116c <HAL_GPIO_Init+0x2b0>)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001098:	4b37      	ldr	r3, [pc, #220]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010bc:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80010c2:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e6:	4a24      	ldr	r2, [pc, #144]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001112:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 800111c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001120:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_GPIO_Init+0x2bc>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	fa22 f303 	lsr.w	r3, r2, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	f47f aeb7 	bne.w	8000ecc <HAL_GPIO_Init+0x10>
  }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	58000800 	.word	0x58000800

0800117c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	58000400 	.word	0x58000400

08001198 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <LL_PWR_EnableBootC2+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <LL_PWR_EnableBootC2+0x18>)
 80011a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	58000400 	.word	0x58000400

080011b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <HAL_PWREx_GetVoltageRange+0x14>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	58000400 	.word	0x58000400

080011cc <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80011d4:	f7ff ffe0 	bl	8001198 <LL_PWR_EnableBootC2>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f0:	d101      	bne.n	80011f6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	58000400 	.word	0x58000400

08001204 <LL_RCC_HSE_EnableTcxo>:
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001212:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <LL_RCC_HSE_DisableTcxo>:
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800124e:	d101      	bne.n	8001254 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <LL_RCC_HSE_Enable>:
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <LL_RCC_HSE_Disable>:
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800127e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <LL_RCC_HSE_IsReady>:
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80012a8:	d101      	bne.n	80012ae <LL_RCC_HSE_IsReady+0x18>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <LL_RCC_HSE_IsReady+0x1a>
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <LL_RCC_HSI_Enable>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80012bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <LL_RCC_HSI_Disable>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <LL_RCC_HSI_IsReady>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001302:	d101      	bne.n	8001308 <LL_RCC_HSI_IsReady+0x18>
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <LL_RCC_HSI_IsReady+0x1a>
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800131a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	061b      	lsls	r3, r3, #24
 8001328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800133e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b02      	cmp	r3, #2
 800134c:	d101      	bne.n	8001352 <LL_RCC_LSE_IsReady+0x18>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <LL_RCC_LSE_IsReady+0x1a>
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr

0800135c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800138c:	f023 0301 	bic.w	r3, r3, #1
 8001390:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d101      	bne.n	80013b4 <LL_RCC_LSI_IsReady+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_RCC_LSI_IsReady+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6013      	str	r3, [r2, #0]
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80013de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e8:	f023 0301 	bic.w	r3, r3, #1
 80013ec:	6013      	str	r3, [r2, #0]
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr

080013f6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b02      	cmp	r3, #2
 8001406:	d101      	bne.n	800140c <LL_RCC_MSI_IsReady+0x16>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_RCC_MSI_IsReady+0x18>
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800141a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b08      	cmp	r3, #8
 8001426:	d101      	bne.n	800142c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001458:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800146c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	021b      	lsls	r3, r3, #8
 800147a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800147e:	4313      	orrs	r3, r2
 8001480:	604b      	str	r3, [r1, #4]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f023 0203 	bic.w	r2, r3, #3
 800149e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 030c 	and.w	r3, r3, #12
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	608b      	str	r3, [r1, #8]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80014f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001502:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4313      	orrs	r3, r2
 800150a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001524:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001528:	f023 020f 	bic.w	r2, r3, #15
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001534:	4313      	orrs	r3, r2
 8001536:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4313      	orrs	r3, r2
 800155e:	608b      	str	r3, [r1, #8]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80015aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr

080015d6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001636:	d101      	bne.n	800163c <LL_RCC_PLL_IsReady+0x18>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <LL_RCC_PLL_IsReady+0x1a>
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800164a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001682:	4618      	mov	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800168e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0303 	and.w	r3, r3, #3
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b2:	d101      	bne.n	80016b8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016d6:	d101      	bne.n	80016dc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fa:	d101      	bne.n	8001700 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800171c:	d101      	bne.n	8001722 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800173e:	d101      	bne.n	8001744 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
	...

08001750 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e36f      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001762:	f7ff fea6 	bl	80014b2 <LL_RCC_GetSysClkSource>
 8001766:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001768:	f7ff ff8f 	bl	800168a <LL_RCC_PLL_GetMainSource>
 800176c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80c4 	beq.w	8001904 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x3e>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d176      	bne.n	8001876 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d173      	bne.n	8001876 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e353      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_OscConfig+0x68>
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b6:	e006      	b.n	80017c6 <HAL_RCC_OscConfig+0x76>
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d222      	bcs.n	8001810 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fd5a 	bl	8002288 <RCC_SetFlashLatencyFromMSIRange>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e331      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001800:	4313      	orrs	r3, r2
 8001802:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fe2b 	bl	8001464 <LL_RCC_MSI_SetCalibTrimming>
 800180e:	e021      	b.n	8001854 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fe12 	bl	8001464 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fd1f 	bl	8002288 <RCC_SetFlashLatencyFromMSIRange>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e2f6      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001854:	f000 fce0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8001858:	4603      	mov	r3, r0
 800185a:	4aa7      	ldr	r2, [pc, #668]	; (8001af8 <HAL_RCC_OscConfig+0x3a8>)
 800185c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800185e:	4ba7      	ldr	r3, [pc, #668]	; (8001afc <HAL_RCC_OscConfig+0x3ac>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f90c 	bl	8000a80 <HAL_InitTick>
 8001868:	4603      	mov	r3, r0
 800186a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d047      	beq.n	8001902 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001872:	7cfb      	ldrb	r3, [r7, #19]
 8001874:	e2e5      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d02c      	beq.n	80018d8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800187e:	f7ff fd9e 	bl	80013be <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001882:	f7ff f949 	bl	8000b18 <HAL_GetTick>
 8001886:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800188a:	f7ff f945 	bl	8000b18 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e2d2      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800189c:	f7ff fdab 	bl	80013f6 <LL_RCC_MSI_IsReady>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f1      	beq.n	800188a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fdc7 	bl	8001464 <LL_RCC_MSI_SetCalibTrimming>
 80018d6:	e015      	b.n	8001904 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018d8:	f7ff fd7f 	bl	80013da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018dc:	f7ff f91c 	bl	8000b18 <HAL_GetTick>
 80018e0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e4:	f7ff f918 	bl	8000b18 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2a5      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80018f6:	f7ff fd7e 	bl	80013f6 <LL_RCC_MSI_IsReady>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1f1      	bne.n	80018e4 <HAL_RCC_OscConfig+0x194>
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001902:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d058      	beq.n	80019c2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	2b08      	cmp	r3, #8
 8001914:	d005      	beq.n	8001922 <HAL_RCC_OscConfig+0x1d2>
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d108      	bne.n	800192e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d105      	bne.n	800192e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d14b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e289      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0x204>
 800194e:	f7ff fc86 	bl	800125e <LL_RCC_HSE_Enable>
 8001952:	e00d      	b.n	8001970 <HAL_RCC_OscConfig+0x220>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800195c:	d104      	bne.n	8001968 <HAL_RCC_OscConfig+0x218>
 800195e:	f7ff fc51 	bl	8001204 <LL_RCC_HSE_EnableTcxo>
 8001962:	f7ff fc7c 	bl	800125e <LL_RCC_HSE_Enable>
 8001966:	e003      	b.n	8001970 <HAL_RCC_OscConfig+0x220>
 8001968:	f7ff fc87 	bl	800127a <LL_RCC_HSE_Disable>
 800196c:	f7ff fc58 	bl	8001220 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f8ce 	bl	8000b18 <HAL_GetTick>
 800197c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f8ca 	bl	8000b18 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e257      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001992:	f7ff fc80 	bl	8001296 <LL_RCC_HSE_IsReady>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f1      	beq.n	8001980 <HAL_RCC_OscConfig+0x230>
 800199c:	e011      	b.n	80019c2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff f8bb 	bl	8000b18 <HAL_GetTick>
 80019a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a6:	f7ff f8b7 	bl	8000b18 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	; 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e244      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80019b8:	f7ff fc6d 	bl	8001296 <LL_RCC_HSE_IsReady>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f1      	bne.n	80019a6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d046      	beq.n	8001a5c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_OscConfig+0x290>
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0c      	cmp	r3, #12
 80019d8:	d10e      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d10b      	bne.n	80019f8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e22a      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fc8e 	bl	8001312 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019f6:	e031      	b.n	8001a5c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d019      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a00:	f7ff fc5a 	bl	80012b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff f888 	bl	8000b18 <HAL_GetTick>
 8001a08:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f884 	bl	8000b18 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e211      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001a1e:	f7ff fc67 	bl	80012f0 <LL_RCC_HSI_IsReady>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f1      	beq.n	8001a0c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fc70 	bl	8001312 <LL_RCC_HSI_SetCalibTrimming>
 8001a32:	e013      	b.n	8001a5c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a34:	f7ff fc4e 	bl	80012d4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f86e 	bl	8000b18 <HAL_GetTick>
 8001a3c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff f86a 	bl	8000b18 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e1f7      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a52:	f7ff fc4d 	bl	80012f0 <LL_RCC_HSI_IsReady>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f1      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d06e      	beq.n	8001b46 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d056      	beq.n	8001b1e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a78:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d031      	beq.n	8001aec <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e1d0      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d013      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001aaa:	f7ff fc67 	bl	800137c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aae:	f7ff f833 	bl	8000b18 <HAL_GetTick>
 8001ab2:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff f82f 	bl	8000b18 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b11      	cmp	r3, #17
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e1bc      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ac8:	f7ff fc68 	bl	800139c <LL_RCC_LSI_IsReady>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f1      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ada:	f023 0210 	bic.w	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aec:	f7ff fc36 	bl	800135c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7ff f812 	bl	8000b18 <HAL_GetTick>
 8001af4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001af6:	e00c      	b.n	8001b12 <HAL_RCC_OscConfig+0x3c2>
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000040 	.word	0x20000040
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f80a 	bl	8000b18 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b11      	cmp	r3, #17
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e197      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b12:	f7ff fc43 	bl	800139c <LL_RCC_LSI_IsReady>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f1      	beq.n	8001b00 <HAL_RCC_OscConfig+0x3b0>
 8001b1c:	e013      	b.n	8001b46 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1e:	f7ff fc2d 	bl	800137c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b22:	f7fe fff9 	bl	8000b18 <HAL_GetTick>
 8001b26:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7fe fff5 	bl	8000b18 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b11      	cmp	r3, #17
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e182      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b3c:	f7ff fc2e 	bl	800139c <LL_RCC_LSI_IsReady>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f1      	bne.n	8001b2a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80d8 	beq.w	8001d04 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b54:	f7ff fb44 	bl	80011e0 <LL_PWR_IsEnabledBkUpAccess>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d113      	bne.n	8001b86 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001b5e:	f7ff fb0d 	bl	800117c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7fe ffd9 	bl	8000b18 <HAL_GetTick>
 8001b66:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7fe ffd5 	bl	8000b18 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e162      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b7c:	f7ff fb30 	bl	80011e0 <LL_PWR_IsEnabledBkUpAccess>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f1      	beq.n	8001b6a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d07b      	beq.n	8001c86 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b85      	cmp	r3, #133	; 0x85
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b05      	cmp	r3, #5
 8001b9c:	d109      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb2:	f7fe ffb1 	bl	8000b18 <HAL_GetTick>
 8001bb6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7fe ffa3 	bl	8000b18 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e12e      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001be4:	f7ff fba9 	bl	800133a <LL_RCC_LSE_IsReady>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ef      	beq.n	8001bce <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b81      	cmp	r3, #129	; 0x81
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b85      	cmp	r3, #133	; 0x85
 8001bfc:	d121      	bne.n	8001c42 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7fe ff8b 	bl	8000b18 <HAL_GetTick>
 8001c02:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7fe ff7d 	bl	8000b18 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e108      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0ec      	beq.n	8001c1a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c40:	e060      	b.n	8001d04 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7fe ff69 	bl	8000b18 <HAL_GetTick>
 8001c46:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7fe ff5b 	bl	8000b18 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0e6      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ec      	bne.n	8001c5e <HAL_RCC_OscConfig+0x50e>
 8001c84:	e03e      	b.n	8001d04 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7fe ff47 	bl	8000b18 <HAL_GetTick>
 8001c8a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7fe ff39 	bl	8000b18 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0c4      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ec      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe ff26 	bl	8000b18 <HAL_GetTick>
 8001ccc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce4:	f7fe ff18 	bl	8000b18 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e0a3      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001cfa:	f7ff fb1e 	bl	800133a <LL_RCC_LSE_IsReady>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ef      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 8099 	beq.w	8001e40 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	d06c      	beq.n	8001dee <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d14b      	bne.n	8001db4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1c:	f7ff fc74 	bl	8001608 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe fefa 	bl	8000b18 <HAL_GetTick>
 8001d24:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe fef6 	bl	8000b18 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b0a      	cmp	r3, #10
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e083      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d3a:	f7ff fc73 	bl	8001624 <LL_RCC_PLL_IsReady>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f1      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	4b40      	ldr	r3, [pc, #256]	; (8001e4c <HAL_RCC_OscConfig+0x6fc>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d56:	4311      	orrs	r1, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d5c:	0212      	lsls	r2, r2, #8
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d64:	4311      	orrs	r1, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d70:	430a      	orrs	r2, r1
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d7a:	f7ff fc37 	bl	80015ec <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7fe fec3 	bl	8000b18 <HAL_GetTick>
 8001d92:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe febf 	bl	8000b18 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b0a      	cmp	r3, #10
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e04c      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001da8:	f7ff fc3c 	bl	8001624 <LL_RCC_PLL_IsReady>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f1      	beq.n	8001d96 <HAL_RCC_OscConfig+0x646>
 8001db2:	e045      	b.n	8001e40 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db4:	f7ff fc28 	bl	8001608 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe feae 	bl	8000b18 <HAL_GetTick>
 8001dbc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe feaa 	bl	8000b18 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b0a      	cmp	r3, #10
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e037      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dd2:	f7ff fc27 	bl	8001624 <LL_RCC_PLL_IsReady>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f1      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_RCC_OscConfig+0x700>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
 8001dec:	e028      	b.n	8001e40 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e023      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	f003 0203 	and.w	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d115      	bne.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d10e      	bne.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d106      	bne.n	8001e3c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	11c1808c 	.word	0x11c1808c
 8001e50:	eefefffc 	.word	0xeefefffc

08001e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e12c      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b98      	ldr	r3, [pc, #608]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d91b      	bls.n	8001eae <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b95      	ldr	r3, [pc, #596]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 0207 	bic.w	r2, r3, #7
 8001e7e:	4993      	ldr	r1, [pc, #588]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e86:	f7fe fe47 	bl	8000b18 <HAL_GetTick>
 8001e8a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e8e:	f7fe fe43 	bl	8000b18 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e110      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea0:	4b8a      	ldr	r3, [pc, #552]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d1ef      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fb02 	bl	80014c8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fe28 	bl	8000b18 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ecc:	f7fe fe24 	bl	8000b18 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e0f1      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ede:	f7ff fbdf 	bl	80016a0 <LL_RCC_IsActiveFlag_HPRE>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f1      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d016      	beq.n	8001f22 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff faf8 	bl	80014ee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001efe:	f7fe fe0b 	bl	8000b18 <HAL_GetTick>
 8001f02:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f06:	f7fe fe07 	bl	8000b18 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0d4      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f18:	f7ff fbd3 	bl	80016c2 <LL_RCC_IsActiveFlag_C2HPRE>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0f1      	beq.n	8001f06 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d016      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff faf0 	bl	8001518 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f38:	f7fe fdee 	bl	8000b18 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f40:	f7fe fdea 	bl	8000b18 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e0b7      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f52:	f7ff fbc8 	bl	80016e6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0f1      	beq.n	8001f40 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d016      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fae9 	bl	8001544 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f72:	f7fe fdd1 	bl	8000b18 <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f7a:	f7fe fdcd 	bl	8000b18 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e09a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f8c:	f7ff fbbd 	bl	800170a <LL_RCC_IsActiveFlag_PPRE1>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f1      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d017      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fade 	bl	800156a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fae:	f7fe fdb3 	bl	8000b18 <HAL_GetTick>
 8001fb2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fb6:	f7fe fdaf 	bl	8000b18 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e07c      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001fc8:	f7ff fbb0 	bl	800172c <LL_RCC_IsActiveFlag_PPRE2>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f1      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d043      	beq.n	8002066 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d106      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001fe6:	f7ff f956 	bl	8001296 <LL_RCC_HSE_IsReady>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d11e      	bne.n	800202e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e066      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001ffc:	f7ff fb12 	bl	8001624 <LL_RCC_PLL_IsReady>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d113      	bne.n	800202e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e05b      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d106      	bne.n	8002020 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002012:	f7ff f9f0 	bl	80013f6 <LL_RCC_MSI_IsReady>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d108      	bne.n	800202e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e050      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002020:	f7ff f966 	bl	80012f0 <LL_RCC_HSI_IsReady>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e049      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fa2a 	bl	800148c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002038:	f7fe fd6e 	bl	8000b18 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7fe fd6a 	bl	8000b18 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e035      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	f7ff fa2c 	bl	80014b2 <LL_RCC_GetSysClkSource>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	429a      	cmp	r2, r3
 8002064:	d1ec      	bne.n	8002040 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d21b      	bcs.n	80020ac <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002074:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 0207 	bic.w	r2, r3, #7
 800207c:	4913      	ldr	r1, [pc, #76]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002084:	f7fe fd48 	bl	8000b18 <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	e008      	b.n	800209e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800208c:	f7fe fd44 	bl	8000b18 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e011      	b.n	80020c2 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_ClockConfig+0x278>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d1ef      	bne.n	800208c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020ac:	f000 f8b4 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 80020b0:	4603      	mov	r3, r0
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_RCC_ClockConfig+0x27c>)
 80020b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_RCC_ClockConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fce0 	bl	8000a80 <HAL_InitTick>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	58004000 	.word	0x58004000
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000040 	.word	0x20000040

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e6:	f7ff f9e4 	bl	80014b2 <LL_RCC_GetSysClkSource>
 80020ea:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ec:	f7ff facd 	bl	800168a <LL_RCC_PLL_GetMainSource>
 80020f0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x2c>
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d139      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d136      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002104:	f7ff f987 	bl	8001416 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d115      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x62>
 800210e:	f7ff f982 	bl	8001416 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002112:	4603      	mov	r3, r0
 8002114:	2b01      	cmp	r3, #1
 8002116:	d106      	bne.n	8002126 <HAL_RCC_GetSysClockFreq+0x4e>
 8002118:	f7ff f98d 	bl	8001436 <LL_RCC_MSI_GetRange>
 800211c:	4603      	mov	r3, r0
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	e005      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x5a>
 8002126:	f7ff f991 	bl	800144c <LL_RCC_MSI_GetRangeAfterStandby>
 800212a:	4603      	mov	r3, r0
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	4a36      	ldr	r2, [pc, #216]	; (800220c <HAL_RCC_GetSysClockFreq+0x134>)
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	e014      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x8c>
 800213a:	f7ff f96c 	bl	8001416 <LL_RCC_MSI_IsEnabledRangeSelect>
 800213e:	4603      	mov	r3, r0
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x7a>
 8002144:	f7ff f977 	bl	8001436 <LL_RCC_MSI_GetRange>
 8002148:	4603      	mov	r3, r0
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	e005      	b.n	800215e <HAL_RCC_GetSysClockFreq+0x86>
 8002152:	f7ff f97b 	bl	800144c <LL_RCC_MSI_GetRangeAfterStandby>
 8002156:	4603      	mov	r3, r0
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a2b      	ldr	r2, [pc, #172]	; (800220c <HAL_RCC_GetSysClockFreq+0x134>)
 8002160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002164:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d115      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002170:	e012      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d102      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_RCC_GetSysClockFreq+0x138>)
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e00c      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d109      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002184:	f7ff f85a 	bl	800123c <LL_RCC_HSE_IsEnabledDiv2>
 8002188:	4603      	mov	r3, r0
 800218a:	2b01      	cmp	r3, #1
 800218c:	d102      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_RCC_GetSysClockFreq+0x138>)
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e001      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002194:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002196:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	f7ff f98b 	bl	80014b2 <LL_RCC_GetSysClkSource>
 800219c:	4603      	mov	r3, r0
 800219e:	2b0c      	cmp	r3, #12
 80021a0:	d12f      	bne.n	8002202 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80021a2:	f7ff fa72 	bl	800168a <LL_RCC_PLL_GetMainSource>
 80021a6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0xde>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d003      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0xe4>
 80021b4:	e00d      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_RCC_GetSysClockFreq+0x138>)
 80021b8:	60fb      	str	r3, [r7, #12]
        break;
 80021ba:	e00d      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021bc:	f7ff f83e 	bl	800123c <LL_RCC_HSE_IsEnabledDiv2>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d102      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80021c6:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_RCC_GetSysClockFreq+0x138>)
 80021c8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80021ca:	e005      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_RCC_GetSysClockFreq+0x13c>)
 80021ce:	60fb      	str	r3, [r7, #12]
        break;
 80021d0:	e002      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	60fb      	str	r3, [r7, #12]
        break;
 80021d6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80021d8:	f7ff fa35 	bl	8001646 <LL_RCC_PLL_GetN>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	fb03 f402 	mul.w	r4, r3, r2
 80021e4:	f7ff fa46 	bl	8001674 <LL_RCC_PLL_GetDivider>
 80021e8:	4603      	mov	r3, r0
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	3301      	adds	r3, #1
 80021ee:	fbb4 f4f3 	udiv	r4, r4, r3
 80021f2:	f7ff fa34 	bl	800165e <LL_RCC_PLL_GetR>
 80021f6:	4603      	mov	r3, r0
 80021f8:	0f5b      	lsrs	r3, r3, #29
 80021fa:	3301      	adds	r3, #1
 80021fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8002200:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002202:	697b      	ldr	r3, [r7, #20]
}
 8002204:	4618      	mov	r0, r3
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd90      	pop	{r4, r7, pc}
 800220c:	08004a4c 	.word	0x08004a4c
 8002210:	00f42400 	.word	0x00f42400
 8002214:	01e84800 	.word	0x01e84800

08002218 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b598      	push	{r3, r4, r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800221c:	f7ff ff5c 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002220:	4604      	mov	r4, r0
 8002222:	f7ff f9b5 	bl	8001590 <LL_RCC_GetAHBPrescaler>
 8002226:	4603      	mov	r3, r0
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	4a03      	ldr	r2, [pc, #12]	; (800223c <HAL_RCC_GetHCLKFreq+0x24>)
 8002230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002234:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd98      	pop	{r3, r4, r7, pc}
 800223c:	080049ec 	.word	0x080049ec

08002240 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002240:	b598      	push	{r3, r4, r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002244:	f7ff ffe8 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002248:	4604      	mov	r4, r0
 800224a:	f7ff f9b9 	bl	80015c0 <LL_RCC_GetAPB1Prescaler>
 800224e:	4603      	mov	r3, r0
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	4a03      	ldr	r2, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	fa24 f303 	lsr.w	r3, r4, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	bd98      	pop	{r3, r4, r7, pc}
 8002260:	08004a2c 	.word	0x08004a2c

08002264 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b598      	push	{r3, r4, r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002268:	f7ff ffd6 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 800226c:	4604      	mov	r4, r0
 800226e:	f7ff f9b2 	bl	80015d6 <LL_RCC_GetAPB2Prescaler>
 8002272:	4603      	mov	r3, r0
 8002274:	0adb      	lsrs	r3, r3, #11
 8002276:	4a03      	ldr	r2, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd98      	pop	{r3, r4, r7, pc}
 8002284:	08004a2c 	.word	0x08004a2c

08002288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	4a10      	ldr	r2, [pc, #64]	; (80022dc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80022a0:	f7ff f981 	bl	80015a6 <LL_RCC_GetAHB3Prescaler>
 80022a4:	4603      	mov	r3, r0
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0c9c      	lsrs	r4, r3, #18
 80022c4:	f7fe ff76 	bl	80011b4 <HAL_PWREx_GetVoltageRange>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4619      	mov	r1, r3
 80022cc:	4620      	mov	r0, r4
 80022ce:	f000 f80b 	bl	80022e8 <RCC_SetFlashLatency>
 80022d2:	4603      	mov	r3, r0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	08004a4c 	.word	0x08004a4c
 80022e0:	080049ec 	.word	0x080049ec
 80022e4:	431bde83 	.word	0x431bde83

080022e8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	; 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80022f2:	4a3a      	ldr	r2, [pc, #232]	; (80023dc <RCC_SetFlashLatency+0xf4>)
 80022f4:	f107 0320 	add.w	r3, r7, #32
 80022f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022fc:	6018      	str	r0, [r3, #0]
 80022fe:	3304      	adds	r3, #4
 8002300:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002302:	4a37      	ldr	r2, [pc, #220]	; (80023e0 <RCC_SetFlashLatency+0xf8>)
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800230c:	6018      	str	r0, [r3, #0]
 800230e:	3304      	adds	r3, #4
 8002310:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002312:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <RCC_SetFlashLatency+0xfc>)
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	ca07      	ldmia	r2, {r0, r1, r2}
 800231a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800231e:	2300      	movs	r3, #0
 8002320:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002328:	d11b      	bne.n	8002362 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800232a:	2300      	movs	r3, #0
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
 800232e:	e014      	b.n	800235a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	3338      	adds	r3, #56	; 0x38
 8002336:	443b      	add	r3, r7
 8002338:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4293      	cmp	r3, r2
 8002342:	d807      	bhi.n	8002354 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	3338      	adds	r3, #56	; 0x38
 800234a:	443b      	add	r3, r7
 800234c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002350:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002352:	e021      	b.n	8002398 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002356:	3301      	adds	r3, #1
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
 800235a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235c:	2b02      	cmp	r3, #2
 800235e:	d9e7      	bls.n	8002330 <RCC_SetFlashLatency+0x48>
 8002360:	e01a      	b.n	8002398 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002362:	2300      	movs	r3, #0
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002366:	e014      	b.n	8002392 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	3338      	adds	r3, #56	; 0x38
 800236e:	443b      	add	r3, r7
 8002370:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002374:	461a      	mov	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4293      	cmp	r3, r2
 800237a:	d807      	bhi.n	800238c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	3338      	adds	r3, #56	; 0x38
 8002382:	443b      	add	r3, r7
 8002384:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800238a:	e005      	b.n	8002398 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238e:	3301      	adds	r3, #1
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	2b02      	cmp	r3, #2
 8002396:	d9e7      	bls.n	8002368 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <RCC_SetFlashLatency+0x100>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 0207 	bic.w	r2, r3, #7
 80023a0:	4911      	ldr	r1, [pc, #68]	; (80023e8 <RCC_SetFlashLatency+0x100>)
 80023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a4:	4313      	orrs	r3, r2
 80023a6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80023a8:	f7fe fbb6 	bl	8000b18 <HAL_GetTick>
 80023ac:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023ae:	e008      	b.n	80023c2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023b0:	f7fe fbb2 	bl	8000b18 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e007      	b.n	80023d2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <RCC_SetFlashLatency+0x100>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1ef      	bne.n	80023b0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3738      	adds	r7, #56	; 0x38
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	080049d0 	.word	0x080049d0
 80023e0:	080049d8 	.word	0x080049d8
 80023e4:	080049e0 	.word	0x080049e0
 80023e8:	58004000 	.word	0x58004000

080023ec <LL_RCC_LSE_IsReady>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d101      	bne.n	8002404 <LL_RCC_LSE_IsReady+0x18>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <LL_RCC_LSE_IsReady+0x1a>
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <LL_RCC_SetUSARTClockSource>:
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	43db      	mvns	r3, r3
 8002424:	401a      	ands	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	b29b      	uxth	r3, r3
 800242a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <LL_RCC_SetI2SClockSource>:
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <LL_RCC_SetLPUARTClockSource>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002478:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800247c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <LL_RCC_SetI2CClockSource>:
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800249a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80024aa:	43db      	mvns	r3, r3
 80024ac:	401a      	ands	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80024b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_SetLPTIMClockSource>:
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	43db      	mvns	r3, r3
 80024e2:	401a      	ands	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	041b      	lsls	r3, r3, #16
 80024e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <LL_RCC_SetRNGClockSource>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <LL_RCC_SetADCClockSource>:
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <LL_RCC_SetRTCClockSource>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <LL_RCC_GetRTCClockSource>:
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <LL_RCC_ForceBackupDomainReset>:
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80025e0:	2300      	movs	r3, #0
 80025e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d058      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80025f4:	f7fe fdc2 	bl	800117c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025f8:	f7fe fa8e 	bl	8000b18 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80025fe:	e009      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002600:	f7fe fa8a 	bl	8000b18 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d902      	bls.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	74fb      	strb	r3, [r7, #19]
        break;
 8002612:	e006      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002620:	d1ee      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d13c      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002628:	f7ff ffa7 	bl	800257a <LL_RCC_GetRTCClockSource>
 800262c:	4602      	mov	r2, r0
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002632:	429a      	cmp	r2, r3
 8002634:	d00f      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002642:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002644:	f7ff ffa5 	bl	8002592 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002648:	f7ff ffb3 	bl	80025b2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800264c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d014      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fa5a 	bl	8000b18 <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002666:	e00b      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002668:	f7fe fa56 	bl	8000b18 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d902      	bls.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	74fb      	strb	r3, [r7, #19]
            break;
 800267e:	e004      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002680:	f7ff feb4 	bl	80023ec <LL_RCC_LSE_IsReady>
 8002684:	4603      	mov	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d1ee      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff5b 	bl	8002550 <LL_RCC_SetRTCClockSource>
 800269a:	e004      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
 80026a0:	e001      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fea9 	bl	800240e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fe9e 	bl	800240e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0320 	and.w	r3, r3, #32
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fec0 	bl	8002468 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fee6 	bl	80024ca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fedb 	bl	80024ca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fed0 	bl	80024ca <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fea9 	bl	8002492 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fe9e 	bl	8002492 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fe93 	bl	8002492 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d011      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fe5e 	bl	800243e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278a:	d107      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800279a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d010      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fea5 	bl	80024fc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d011      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fea3 	bl	8002526 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e8:	d107      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80027fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	58000400 	.word	0x58000400

08002808 <LL_RCC_GetUSARTClockSource>:
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002814:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	401a      	ands	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	041b      	lsls	r3, r3, #16
 8002820:	4313      	orrs	r3, r2
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <LL_RCC_GetLPUARTClockSource>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4013      	ands	r3, r2
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e042      	b.n	80028e2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fd ff8c 	bl	800078c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2224      	movs	r2, #36	; 0x24
 8002878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fc2f 	bl	80030f0 <UART_SetConfig>
 8002892:	4603      	mov	r3, r0
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e022      	b.n	80028e2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fe97 	bl	80035d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0201 	orr.w	r2, r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 ff1d 	bl	800371a <UART_CheckIdleState>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b08a      	sub	sp, #40	; 0x28
 80028ee:	af02      	add	r7, sp, #8
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	2b20      	cmp	r3, #32
 8002902:	d173      	bne.n	80029ec <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_UART_Transmit+0x26>
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e06c      	b.n	80029ee <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2221      	movs	r2, #33	; 0x21
 8002920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002924:	f7fe f8f8 	bl	8000b18 <HAL_GetTick>
 8002928:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002942:	d108      	bne.n	8002956 <HAL_UART_Transmit+0x6c>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	61bb      	str	r3, [r7, #24]
 8002954:	e003      	b.n	800295e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800295e:	e02c      	b.n	80029ba <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2200      	movs	r2, #0
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 ff23 	bl	80037b6 <UART_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e039      	b.n	80029ee <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10b      	bne.n	8002998 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	461a      	mov	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800298e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	3302      	adds	r3, #2
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	e007      	b.n	80029a8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3301      	adds	r3, #1
 80029a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1cc      	bne.n	8002960 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2140      	movs	r1, #64	; 0x40
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fef0 	bl	80037b6 <UART_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e006      	b.n	80029ee <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80029ec:	2302      	movs	r3, #2
  }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d137      	bne.n	8002a80 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_UART_Receive_IT+0x24>
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e030      	b.n	8002a82 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <HAL_UART_Receive_IT+0x94>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d01f      	beq.n	8002a70 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d018      	beq.n	8002a70 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	e853 3f00 	ldrex	r3, [r3]
 8002a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a60:	69f9      	ldr	r1, [r7, #28]
 8002a62:	6a3a      	ldr	r2, [r7, #32]
 8002a64:	e841 2300 	strex	r3, r2, [r1]
 8002a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1e6      	bne.n	8002a3e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 ff66 	bl	8003948 <UART_Start_Receive_IT>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a80:	2302      	movs	r3, #2
  }
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3728      	adds	r7, #40	; 0x28
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40008000 	.word	0x40008000

08002a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0ba      	sub	sp, #232	; 0xe8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ab6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002aba:	f640 030f 	movw	r3, #2063	; 0x80f
 8002abe:	4013      	ands	r3, r2
 8002ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002ac4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11b      	bne.n	8002b04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 82e3 	beq.w	80030c0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
      }
      return;
 8002b02:	e2dd      	b.n	80030c0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002b04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8123 	beq.w	8002d54 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002b0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002b12:	4b8d      	ldr	r3, [pc, #564]	; (8002d48 <HAL_UART_IRQHandler+0x2b8>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002b1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002b1e:	4b8b      	ldr	r3, [pc, #556]	; (8002d4c <HAL_UART_IRQHandler+0x2bc>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8116 	beq.w	8002d54 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d011      	beq.n	8002b58 <HAL_UART_IRQHandler+0xc8>
 8002b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d011      	beq.n	8002b88 <HAL_UART_IRQHandler+0xf8>
 8002b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2202      	movs	r2, #2
 8002b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	f043 0204 	orr.w	r2, r3, #4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d011      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x128>
 8002b94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f043 0202 	orr.w	r2, r3, #2
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d017      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002bd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002bd4:	4b5c      	ldr	r3, [pc, #368]	; (8002d48 <HAL_UART_IRQHandler+0x2b8>)
 8002bd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2208      	movs	r2, #8
 8002be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	f043 0208 	orr.w	r2, r3, #8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <HAL_UART_IRQHandler+0x196>
 8002c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00c      	beq.n	8002c26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8249 	beq.w	80030c4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d013      	beq.n	8002c66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d007      	beq.n	8002c66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d005      	beq.n	8002c8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d054      	beq.n	8002d34 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 ff7c 	bl	8003b88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d146      	bne.n	8002d2c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3308      	adds	r3, #8
 8002ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3308      	adds	r3, #8
 8002cc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002cca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002cd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ce2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1d9      	bne.n	8002c9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d017      	beq.n	8002d24 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfa:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <HAL_UART_IRQHandler+0x2c0>)
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe f87a 	bl	8000dfe <HAL_DMA_Abort_IT>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d019      	beq.n	8002d44 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d22:	e00f      	b.n	8002d44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fd fbdc 	bl	80004e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2a:	e00b      	b.n	8002d44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7fd fbd8 	bl	80004e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d32:	e007      	b.n	8002d44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7fd fbd4 	bl	80004e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002d42:	e1bf      	b.n	80030c4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	bf00      	nop
    return;
 8002d46:	e1bd      	b.n	80030c4 <HAL_UART_IRQHandler+0x634>
 8002d48:	10000001 	.word	0x10000001
 8002d4c:	04000120 	.word	0x04000120
 8002d50:	08003c53 	.word	0x08003c53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	f040 8153 	bne.w	8003004 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 814c 	beq.w	8003004 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8145 	beq.w	8003004 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2210      	movs	r2, #16
 8002d80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	f040 80bb 	bne.w	8002f08 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002da0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 818f 	beq.w	80030c8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002db0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002db4:	429a      	cmp	r2, r3
 8002db6:	f080 8187 	bcs.w	80030c8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0320 	and.w	r3, r3, #32
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 8087 	bne.w	8002ee6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1da      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3308      	adds	r3, #8
 8002e28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e52:	e841 2300 	strex	r3, r2, [r1]
 8002e56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e1      	bne.n	8002e22 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3308      	adds	r3, #8
 8002e64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e68:	e853 3f00 	ldrex	r3, [r3]
 8002e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3308      	adds	r3, #8
 8002e7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e3      	bne.n	8002e5e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb4:	f023 0310 	bic.w	r3, r3, #16
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ec6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ec8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ecc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e4      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd ff2e 	bl	8000d42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f8e9 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f06:	e0df      	b.n	80030c8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80d1 	beq.w	80030cc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80cc 	beq.w	80030cc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f56:	647b      	str	r3, [r7, #68]	; 0x44
 8002f58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e4      	bne.n	8002f34 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3308      	adds	r3, #8
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	623b      	str	r3, [r7, #32]
   return(result);
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f92:	633a      	str	r2, [r7, #48]	; 0x30
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e1      	bne.n	8002f6a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0310 	bic.w	r3, r3, #16
 8002fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe0:	69b9      	ldr	r1, [r7, #24]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	e841 2300 	strex	r3, r2, [r1]
 8002fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1e4      	bne.n	8002fba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ff6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f86b 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003002:	e063      	b.n	80030cc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00e      	beq.n	800302e <HAL_UART_IRQHandler+0x59e>
 8003010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f001 fb70 	bl	800470c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800302c:	e051      	b.n	80030d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d014      	beq.n	8003064 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800303a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003056:	2b00      	cmp	r3, #0
 8003058:	d03a      	beq.n	80030d0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
    }
    return;
 8003062:	e035      	b.n	80030d0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d009      	beq.n	8003084 <HAL_UART_IRQHandler+0x5f4>
 8003070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 fdfe 	bl	8003c7e <UART_EndTransmit_IT>
    return;
 8003082:	e026      	b.n	80030d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_UART_IRQHandler+0x614>
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f001 fb47 	bl	8004730 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030a2:	e016      	b.n	80030d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d010      	beq.n	80030d2 <HAL_UART_IRQHandler+0x642>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da0c      	bge.n	80030d2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f001 fb30 	bl	800471e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030be:	e008      	b.n	80030d2 <HAL_UART_IRQHandler+0x642>
      return;
 80030c0:	bf00      	nop
 80030c2:	e006      	b.n	80030d2 <HAL_UART_IRQHandler+0x642>
    return;
 80030c4:	bf00      	nop
 80030c6:	e004      	b.n	80030d2 <HAL_UART_IRQHandler+0x642>
      return;
 80030c8:	bf00      	nop
 80030ca:	e002      	b.n	80030d2 <HAL_UART_IRQHandler+0x642>
      return;
 80030cc:	bf00      	nop
 80030ce:	e000      	b.n	80030d2 <HAL_UART_IRQHandler+0x642>
    return;
 80030d0:	bf00      	nop
  }
}
 80030d2:	37e8      	adds	r7, #232	; 0xe8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
	...

080030f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b08c      	sub	sp, #48	; 0x30
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	431a      	orrs	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	431a      	orrs	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4313      	orrs	r3, r2
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b94      	ldr	r3, [pc, #592]	; (8003370 <UART_SetConfig+0x280>)
 8003120:	4013      	ands	r3, r2
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003128:	430b      	orrs	r3, r1
 800312a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a89      	ldr	r2, [pc, #548]	; (8003374 <UART_SetConfig+0x284>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003158:	4313      	orrs	r3, r2
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003166:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003170:	430b      	orrs	r3, r1
 8003172:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	f023 010f 	bic.w	r1, r3, #15
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7a      	ldr	r2, [pc, #488]	; (8003378 <UART_SetConfig+0x288>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d127      	bne.n	80031e4 <UART_SetConfig+0xf4>
 8003194:	2003      	movs	r0, #3
 8003196:	f7ff fb37 	bl	8002808 <LL_RCC_GetUSARTClockSource>
 800319a:	4603      	mov	r3, r0
 800319c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d81b      	bhi.n	80031dc <UART_SetConfig+0xec>
 80031a4:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <UART_SetConfig+0xbc>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031bd 	.word	0x080031bd
 80031b0:	080031cd 	.word	0x080031cd
 80031b4:	080031c5 	.word	0x080031c5
 80031b8:	080031d5 	.word	0x080031d5
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c2:	e080      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80031c4:	2302      	movs	r3, #2
 80031c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ca:	e07c      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80031cc:	2304      	movs	r3, #4
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d2:	e078      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80031d4:	2308      	movs	r3, #8
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031da:	e074      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80031dc:	2310      	movs	r3, #16
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e2:	e070      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a64      	ldr	r2, [pc, #400]	; (800337c <UART_SetConfig+0x28c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d138      	bne.n	8003260 <UART_SetConfig+0x170>
 80031ee:	200c      	movs	r0, #12
 80031f0:	f7ff fb0a 	bl	8002808 <LL_RCC_GetUSARTClockSource>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80031fa:	2b0c      	cmp	r3, #12
 80031fc:	d82c      	bhi.n	8003258 <UART_SetConfig+0x168>
 80031fe:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <UART_SetConfig+0x114>)
 8003200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003204:	08003239 	.word	0x08003239
 8003208:	08003259 	.word	0x08003259
 800320c:	08003259 	.word	0x08003259
 8003210:	08003259 	.word	0x08003259
 8003214:	08003249 	.word	0x08003249
 8003218:	08003259 	.word	0x08003259
 800321c:	08003259 	.word	0x08003259
 8003220:	08003259 	.word	0x08003259
 8003224:	08003241 	.word	0x08003241
 8003228:	08003259 	.word	0x08003259
 800322c:	08003259 	.word	0x08003259
 8003230:	08003259 	.word	0x08003259
 8003234:	08003251 	.word	0x08003251
 8003238:	2300      	movs	r3, #0
 800323a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323e:	e042      	b.n	80032c6 <UART_SetConfig+0x1d6>
 8003240:	2302      	movs	r3, #2
 8003242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003246:	e03e      	b.n	80032c6 <UART_SetConfig+0x1d6>
 8003248:	2304      	movs	r3, #4
 800324a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324e:	e03a      	b.n	80032c6 <UART_SetConfig+0x1d6>
 8003250:	2308      	movs	r3, #8
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003256:	e036      	b.n	80032c6 <UART_SetConfig+0x1d6>
 8003258:	2310      	movs	r3, #16
 800325a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800325e:	e032      	b.n	80032c6 <UART_SetConfig+0x1d6>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a43      	ldr	r2, [pc, #268]	; (8003374 <UART_SetConfig+0x284>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d12a      	bne.n	80032c0 <UART_SetConfig+0x1d0>
 800326a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800326e:	f7ff fadd 	bl	800282c <LL_RCC_GetLPUARTClockSource>
 8003272:	4603      	mov	r3, r0
 8003274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003278:	d01a      	beq.n	80032b0 <UART_SetConfig+0x1c0>
 800327a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800327e:	d81b      	bhi.n	80032b8 <UART_SetConfig+0x1c8>
 8003280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003284:	d00c      	beq.n	80032a0 <UART_SetConfig+0x1b0>
 8003286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800328a:	d815      	bhi.n	80032b8 <UART_SetConfig+0x1c8>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <UART_SetConfig+0x1a8>
 8003290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003294:	d008      	beq.n	80032a8 <UART_SetConfig+0x1b8>
 8003296:	e00f      	b.n	80032b8 <UART_SetConfig+0x1c8>
 8003298:	2300      	movs	r3, #0
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800329e:	e012      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80032a0:	2302      	movs	r3, #2
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a6:	e00e      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80032a8:	2304      	movs	r3, #4
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ae:	e00a      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80032b0:	2308      	movs	r3, #8
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e006      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80032b8:	2310      	movs	r3, #16
 80032ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032be:	e002      	b.n	80032c6 <UART_SetConfig+0x1d6>
 80032c0:	2310      	movs	r3, #16
 80032c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <UART_SetConfig+0x284>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	f040 80a4 	bne.w	800341a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d823      	bhi.n	8003322 <UART_SetConfig+0x232>
 80032da:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <UART_SetConfig+0x1f0>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	08003305 	.word	0x08003305
 80032e4:	08003323 	.word	0x08003323
 80032e8:	0800330d 	.word	0x0800330d
 80032ec:	08003323 	.word	0x08003323
 80032f0:	08003313 	.word	0x08003313
 80032f4:	08003323 	.word	0x08003323
 80032f8:	08003323 	.word	0x08003323
 80032fc:	08003323 	.word	0x08003323
 8003300:	0800331b 	.word	0x0800331b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003304:	f7fe ff9c 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800330a:	e010      	b.n	800332e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800330c:	4b1c      	ldr	r3, [pc, #112]	; (8003380 <UART_SetConfig+0x290>)
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003310:	e00d      	b.n	800332e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003312:	f7fe fee1 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003316:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003318:	e009      	b.n	800332e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003320:	e005      	b.n	800332e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800332c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8137 	beq.w	80035a4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <UART_SetConfig+0x294>)
 800333c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003340:	461a      	mov	r2, r3
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	fbb3 f3f2 	udiv	r3, r3, r2
 8003348:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	429a      	cmp	r2, r3
 8003358:	d305      	bcc.n	8003366 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800336c:	e11a      	b.n	80035a4 <UART_SetConfig+0x4b4>
 800336e:	bf00      	nop
 8003370:	cfff69f3 	.word	0xcfff69f3
 8003374:	40008000 	.word	0x40008000
 8003378:	40013800 	.word	0x40013800
 800337c:	40004400 	.word	0x40004400
 8003380:	00f42400 	.word	0x00f42400
 8003384:	08004a8c 	.word	0x08004a8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	2200      	movs	r2, #0
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	60fa      	str	r2, [r7, #12]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	4a8e      	ldr	r2, [pc, #568]	; (80035d0 <UART_SetConfig+0x4e0>)
 8003396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800339a:	b29b      	uxth	r3, r3
 800339c:	2200      	movs	r2, #0
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033aa:	f7fc fee5 	bl	8000178 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	020b      	lsls	r3, r1, #8
 80033c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80033c4:	0202      	lsls	r2, r0, #8
 80033c6:	6979      	ldr	r1, [r7, #20]
 80033c8:	6849      	ldr	r1, [r1, #4]
 80033ca:	0849      	lsrs	r1, r1, #1
 80033cc:	2000      	movs	r0, #0
 80033ce:	460c      	mov	r4, r1
 80033d0:	4605      	mov	r5, r0
 80033d2:	eb12 0804 	adds.w	r8, r2, r4
 80033d6:	eb43 0905 	adc.w	r9, r3, r5
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	469a      	mov	sl, r3
 80033e2:	4693      	mov	fp, r2
 80033e4:	4652      	mov	r2, sl
 80033e6:	465b      	mov	r3, fp
 80033e8:	4640      	mov	r0, r8
 80033ea:	4649      	mov	r1, r9
 80033ec:	f7fc fec4 	bl	8000178 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4613      	mov	r3, r2
 80033f6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fe:	d308      	bcc.n	8003412 <UART_SetConfig+0x322>
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003406:	d204      	bcs.n	8003412 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a3a      	ldr	r2, [r7, #32]
 800340e:	60da      	str	r2, [r3, #12]
 8003410:	e0c8      	b.n	80035a4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003418:	e0c4      	b.n	80035a4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003422:	d167      	bne.n	80034f4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003424:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003428:	2b08      	cmp	r3, #8
 800342a:	d828      	bhi.n	800347e <UART_SetConfig+0x38e>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <UART_SetConfig+0x344>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003459 	.word	0x08003459
 8003438:	08003461 	.word	0x08003461
 800343c:	08003469 	.word	0x08003469
 8003440:	0800347f 	.word	0x0800347f
 8003444:	0800346f 	.word	0x0800346f
 8003448:	0800347f 	.word	0x0800347f
 800344c:	0800347f 	.word	0x0800347f
 8003450:	0800347f 	.word	0x0800347f
 8003454:	08003477 	.word	0x08003477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7fe fef2 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 800345c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800345e:	e014      	b.n	800348a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7fe ff00 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003464:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003466:	e010      	b.n	800348a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003468:	4b5a      	ldr	r3, [pc, #360]	; (80035d4 <UART_SetConfig+0x4e4>)
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800346c:	e00d      	b.n	800348a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346e:	f7fe fe33 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003472:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003474:	e009      	b.n	800348a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800347c:	e005      	b.n	800348a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8089 	beq.w	80035a4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	4a4e      	ldr	r2, [pc, #312]	; (80035d0 <UART_SetConfig+0x4e0>)
 8003498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800349c:	461a      	mov	r2, r3
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80034a4:	005a      	lsls	r2, r3, #1
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	441a      	add	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	d916      	bls.n	80034ec <UART_SetConfig+0x3fc>
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d212      	bcs.n	80034ec <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	f023 030f 	bic.w	r3, r3, #15
 80034ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	085b      	lsrs	r3, r3, #1
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	b29a      	uxth	r2, r3
 80034dc:	8bfb      	ldrh	r3, [r7, #30]
 80034de:	4313      	orrs	r3, r2
 80034e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	8bfa      	ldrh	r2, [r7, #30]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	e05b      	b.n	80035a4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034f2:	e057      	b.n	80035a4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d828      	bhi.n	800354e <UART_SetConfig+0x45e>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <UART_SetConfig+0x414>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003529 	.word	0x08003529
 8003508:	08003531 	.word	0x08003531
 800350c:	08003539 	.word	0x08003539
 8003510:	0800354f 	.word	0x0800354f
 8003514:	0800353f 	.word	0x0800353f
 8003518:	0800354f 	.word	0x0800354f
 800351c:	0800354f 	.word	0x0800354f
 8003520:	0800354f 	.word	0x0800354f
 8003524:	08003547 	.word	0x08003547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003528:	f7fe fe8a 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 800352c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800352e:	e014      	b.n	800355a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003530:	f7fe fe98 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 8003534:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003536:	e010      	b.n	800355a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <UART_SetConfig+0x4e4>)
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800353c:	e00d      	b.n	800355a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800353e:	f7fe fdcb 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003542:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003544:	e009      	b.n	800355a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800354c:	e005      	b.n	800355a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003558:	bf00      	nop
    }

    if (pclk != 0U)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d021      	beq.n	80035a4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <UART_SetConfig+0x4e0>)
 8003566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800356a:	461a      	mov	r2, r3
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	441a      	add	r2, r3
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d909      	bls.n	800359e <UART_SetConfig+0x4ae>
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d205      	bcs.n	800359e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	b29a      	uxth	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e002      	b.n	80035a4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2200      	movs	r2, #0
 80035b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80035c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3730      	adds	r7, #48	; 0x30
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ce:	bf00      	nop
 80035d0:	08004a8c 	.word	0x08004a8c
 80035d4:	00f42400 	.word	0x00f42400

080035d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01a      	beq.n	80036ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d6:	d10a      	bne.n	80036ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af02      	add	r7, sp, #8
 8003720:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800372a:	f7fd f9f5 	bl	8000b18 <HAL_GetTick>
 800372e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	d10e      	bne.n	800375c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f832 	bl	80037b6 <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e028      	b.n	80037ae <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d10e      	bne.n	8003788 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f81c 	bl	80037b6 <UART_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e012      	b.n	80037ae <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b09c      	sub	sp, #112	; 0x70
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	603b      	str	r3, [r7, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c6:	e0a9      	b.n	800391c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ce:	f000 80a5 	beq.w	800391c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d2:	f7fd f9a1 	bl	8000b18 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037de:	429a      	cmp	r2, r3
 80037e0:	d302      	bcc.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80037e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d140      	bne.n	800386a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037fc:	667b      	str	r3, [r7, #100]	; 0x64
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003808:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800380c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e6      	bne.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3308      	adds	r3, #8
 8003820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	663b      	str	r3, [r7, #96]	; 0x60
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3308      	adds	r3, #8
 8003838:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800383a:	64ba      	str	r2, [r7, #72]	; 0x48
 800383c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003840:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e5      	bne.n	800381a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e069      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d051      	beq.n	800391c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003886:	d149      	bne.n	800391c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003890:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b0:	637b      	str	r3, [r7, #52]	; 0x34
 80038b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e6      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	613b      	str	r3, [r7, #16]
   return(result);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	66bb      	str	r3, [r7, #104]	; 0x68
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3308      	adds	r3, #8
 80038e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038e4:	623a      	str	r2, [r7, #32]
 80038e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	69f9      	ldr	r1, [r7, #28]
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e5      	bne.n	80038c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2220      	movs	r2, #32
 800390c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e010      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69da      	ldr	r2, [r3, #28]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	429a      	cmp	r2, r3
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	429a      	cmp	r2, r3
 8003938:	f43f af46 	beq.w	80037c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3770      	adds	r7, #112	; 0x70
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003948:	b480      	push	{r7}
 800394a:	b0a3      	sub	sp, #140	; 0x8c
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	88fa      	ldrh	r2, [r7, #6]
 8003960:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397a:	d10e      	bne.n	800399a <UART_Start_Receive_IT+0x52>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d105      	bne.n	8003990 <UART_Start_Receive_IT+0x48>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f240 12ff 	movw	r2, #511	; 0x1ff
 800398a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800398e:	e02d      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	22ff      	movs	r2, #255	; 0xff
 8003994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003998:	e028      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <UART_Start_Receive_IT+0x76>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d104      	bne.n	80039b4 <UART_Start_Receive_IT+0x6c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	22ff      	movs	r2, #255	; 0xff
 80039ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039b2:	e01b      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	227f      	movs	r2, #127	; 0x7f
 80039b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039bc:	e016      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c6:	d10d      	bne.n	80039e4 <UART_Start_Receive_IT+0x9c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d104      	bne.n	80039da <UART_Start_Receive_IT+0x92>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	227f      	movs	r2, #127	; 0x7f
 80039d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039d8:	e008      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	223f      	movs	r2, #63	; 0x3f
 80039de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039e2:	e003      	b.n	80039ec <UART_Start_Receive_IT+0xa4>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2222      	movs	r2, #34	; 0x22
 80039f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a06:	e853 3f00 	ldrex	r3, [r3]
 8003a0a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a0e:	f043 0301 	orr.w	r3, r3, #1
 8003a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003a20:	673a      	str	r2, [r7, #112]	; 0x70
 8003a22:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003a26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003a2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e3      	bne.n	80039fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a3c:	d14f      	bne.n	8003ade <UART_Start_Receive_IT+0x196>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d349      	bcc.n	8003ade <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a52:	d107      	bne.n	8003a64 <UART_Start_Receive_IT+0x11c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d103      	bne.n	8003a64 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a46      	ldr	r2, [pc, #280]	; (8003b78 <UART_Start_Receive_IT+0x230>)
 8003a60:	675a      	str	r2, [r3, #116]	; 0x74
 8003a62:	e002      	b.n	8003a6a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a45      	ldr	r2, [pc, #276]	; (8003b7c <UART_Start_Receive_IT+0x234>)
 8003a68:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01a      	beq.n	8003aa8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a7a:	e853 3f00 	ldrex	r3, [r3]
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a96:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003aa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e4      	bne.n	8003a72 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ac8:	64ba      	str	r2, [r7, #72]	; 0x48
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <UART_Start_Receive_IT+0x160>
 8003adc:	e046      	b.n	8003b6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae6:	d107      	bne.n	8003af8 <UART_Start_Receive_IT+0x1b0>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d103      	bne.n	8003af8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a23      	ldr	r2, [pc, #140]	; (8003b80 <UART_Start_Receive_IT+0x238>)
 8003af4:	675a      	str	r2, [r3, #116]	; 0x74
 8003af6:	e002      	b.n	8003afe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <UART_Start_Receive_IT+0x23c>)
 8003afc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d019      	beq.n	8003b3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003b1a:	677b      	str	r3, [r7, #116]	; 0x74
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
 8003b26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e6      	bne.n	8003b06 <UART_Start_Receive_IT+0x1be>
 8003b38:	e018      	b.n	8003b6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	613b      	str	r3, [r7, #16]
   return(result);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f043 0320 	orr.w	r3, r3, #32
 8003b4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	69f9      	ldr	r1, [r7, #28]
 8003b5e:	6a3a      	ldr	r2, [r7, #32]
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e6      	bne.n	8003b3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	378c      	adds	r7, #140	; 0x8c
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	080043a5 	.word	0x080043a5
 8003b7c:	08004045 	.word	0x08004045
 8003b80:	08003e8d 	.word	0x08003e8d
 8003b84:	08003cd5 	.word	0x08003cd5

08003b88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b095      	sub	sp, #84	; 0x54
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
 8003bb0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e6      	bne.n	8003b90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3308      	adds	r3, #8
 8003be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bee:	e841 2300 	strex	r3, r2, [r1]
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1e3      	bne.n	8003bc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d118      	bne.n	8003c34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f023 0310 	bic.w	r3, r3, #16
 8003c16:	647b      	str	r3, [r7, #68]	; 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e6      	bne.n	8003c02 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003c48:	bf00      	nop
 8003c4a:	3754      	adds	r7, #84	; 0x54
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7fc fc36 	bl	80004e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b088      	sub	sp, #32
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6979      	ldr	r1, [r7, #20]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e6      	bne.n	8003c86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fc fc14 	bl	80004f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ccc:	bf00      	nop
 8003cce:	3720      	adds	r7, #32
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b09c      	sub	sp, #112	; 0x70
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ce2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cec:	2b22      	cmp	r3, #34	; 0x22
 8003cee:	f040 80be 	bne.w	8003e6e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003d00:	b2d9      	uxtb	r1, r3
 8003d02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 80a1 	bne.w	8003e7e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	667b      	str	r3, [r7, #100]	; 0x64
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8003d90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a33      	ldr	r2, [pc, #204]	; (8003e88 <UART_RxISR_8BIT+0x1b4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d01f      	beq.n	8003e00 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d018      	beq.n	8003e00 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	623b      	str	r3, [r7, #32]
   return(result);
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003de2:	663b      	str	r3, [r7, #96]	; 0x60
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30
 8003dee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e6      	bne.n	8003dce <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d12e      	bne.n	8003e66 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d103      	bne.n	8003e56 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2210      	movs	r2, #16
 8003e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff f93a 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e64:	e00b      	b.n	8003e7e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fc fb4e 	bl	8000508 <HAL_UART_RxCpltCallback>
}
 8003e6c:	e007      	b.n	8003e7e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699a      	ldr	r2, [r3, #24]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0208 	orr.w	r2, r2, #8
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	3770      	adds	r7, #112	; 0x70
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40008000 	.word	0x40008000

08003e8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b09c      	sub	sp, #112	; 0x70
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003e9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea4:	2b22      	cmp	r3, #34	; 0x22
 8003ea6:	f040 80be 	bne.w	8004026 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003eba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003ebe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	1c9a      	adds	r2, r3, #2
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 80a1 	bne.w	8004036 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f08:	667b      	str	r3, [r7, #100]	; 0x64
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f12:	657b      	str	r3, [r7, #84]	; 0x54
 8003f14:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e6      	bne.n	8003ef4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	f023 0301 	bic.w	r3, r3, #1
 8003f3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f46:	643a      	str	r2, [r7, #64]	; 0x40
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f4e:	e841 2300 	strex	r3, r2, [r1]
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e5      	bne.n	8003f26 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a33      	ldr	r2, [pc, #204]	; (8004040 <UART_RxISR_16BIT+0x1b4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01f      	beq.n	8003fb8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e6      	bne.n	8003f86 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d12e      	bne.n	800401e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 0310 	bic.w	r3, r3, #16
 8003fda:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6979      	ldr	r1, [r7, #20]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f003 0310 	and.w	r3, r3, #16
 8004002:	2b10      	cmp	r3, #16
 8004004:	d103      	bne.n	800400e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2210      	movs	r2, #16
 800400c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff f85e 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800401c:	e00b      	b.n	8004036 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc fa72 	bl	8000508 <HAL_UART_RxCpltCallback>
}
 8004024:	e007      	b.n	8004036 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699a      	ldr	r2, [r3, #24]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0208 	orr.w	r2, r2, #8
 8004034:	619a      	str	r2, [r3, #24]
}
 8004036:	bf00      	nop
 8004038:	3770      	adds	r7, #112	; 0x70
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40008000 	.word	0x40008000

08004044 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b0ac      	sub	sp, #176	; 0xb0
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004052:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800407a:	2b22      	cmp	r3, #34	; 0x22
 800407c:	f040 8182 	bne.w	8004384 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004086:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800408a:	e125      	b.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004096:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800409a:	b2d9      	uxtb	r1, r3
 800409c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	400a      	ands	r2, r1
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80040d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d053      	beq.n	8004186 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d011      	beq.n	800410e <UART_RxISR_8BIT_FIFOEN+0xca>
 80040ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f043 0201 	orr.w	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800410e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d011      	beq.n	800413e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800411a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00b      	beq.n	800413e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2202      	movs	r2, #2
 800412c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f043 0204 	orr.w	r2, r3, #4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800413e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d011      	beq.n	800416e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800414a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2204      	movs	r2, #4
 800415c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	f043 0202 	orr.w	r2, r3, #2
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fc f9b2 	bl	80004e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 80a2 	bne.w	80042d8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80041a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041b8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80041bc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80041c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e4      	bne.n	8004194 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80041da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041f2:	66ba      	str	r2, [r7, #104]	; 0x68
 80041f4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80041f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e1      	bne.n	80041ca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a5f      	ldr	r2, [pc, #380]	; (800439c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d021      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01a      	beq.n	8004268 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004242:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004254:	657b      	str	r3, [r7, #84]	; 0x54
 8004256:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800425a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e4      	bne.n	8004232 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d130      	bne.n	80042d2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	f023 0310 	bic.w	r3, r3, #16
 800428a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004298:	643b      	str	r3, [r7, #64]	; 0x40
 800429a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800429e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e4      	bne.n	8004276 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d103      	bne.n	80042c2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2210      	movs	r2, #16
 80042c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fe ff04 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
 80042d0:	e002      	b.n	80042d8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc f918 	bl	8000508 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d006      	beq.n	80042ee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80042e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f47f aecf 	bne.w	800408c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d049      	beq.n	8004394 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004306:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800430a:	429a      	cmp	r2, r3
 800430c:	d242      	bcs.n	8004394 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	61fb      	str	r3, [r7, #28]
   return(result);
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3308      	adds	r3, #8
 800432e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e3      	bne.n	800430e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800434a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	60bb      	str	r3, [r7, #8]
   return(result);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f043 0320 	orr.w	r3, r3, #32
 8004360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6979      	ldr	r1, [r7, #20]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	613b      	str	r3, [r7, #16]
   return(result);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e4      	bne.n	800434c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004382:	e007      	b.n	8004394 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	619a      	str	r2, [r3, #24]
}
 8004394:	bf00      	nop
 8004396:	37b0      	adds	r7, #176	; 0xb0
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40008000 	.word	0x40008000
 80043a0:	08003cd5 	.word	0x08003cd5

080043a4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b0ae      	sub	sp, #184	; 0xb8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80043b2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043da:	2b22      	cmp	r3, #34	; 0x22
 80043dc:	f040 8186 	bne.w	80046ec <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80043e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043ea:	e129      	b.n	8004640 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80043fe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004402:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004406:	4013      	ands	r3, r2
 8004408:	b29a      	uxth	r2, r3
 800440a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800440e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004414:	1c9a      	adds	r2, r3, #2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	2b00      	cmp	r3, #0
 8004440:	d053      	beq.n	80044ea <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d011      	beq.n	8004472 <UART_RxISR_16BIT_FIFOEN+0xce>
 800444e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2201      	movs	r2, #1
 8004460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f043 0201 	orr.w	r2, r3, #1
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d011      	beq.n	80044a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800447e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00b      	beq.n	80044a2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2202      	movs	r2, #2
 8004490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f043 0204 	orr.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d011      	beq.n	80044d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80044ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2204      	movs	r2, #4
 80044c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f043 0202 	orr.w	r2, r3, #2
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7fc f800 	bl	80004e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 80a4 	bne.w	8004640 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800451a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800451e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004522:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800452c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e2      	bne.n	80044f8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3308      	adds	r3, #8
 8004538:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800455a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800455c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004560:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e1      	bne.n	8004532 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a5f      	ldr	r2, [pc, #380]	; (8004704 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d021      	beq.n	80045d0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01a      	beq.n	80045d0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80045be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e4      	bne.n	800459a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d130      	bne.n	800463a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e6:	e853 3f00 	ldrex	r3, [r3]
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ee:	f023 0310 	bic.w	r3, r3, #16
 80045f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004600:	647b      	str	r3, [r7, #68]	; 0x44
 8004602:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800460e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e4      	bne.n	80045de <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b10      	cmp	r3, #16
 8004620:	d103      	bne.n	800462a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2210      	movs	r2, #16
 8004628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fe fd50 	bl	80030d8 <HAL_UARTEx_RxEventCallback>
 8004638:	e002      	b.n	8004640 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fb ff64 	bl	8000508 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004640:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004648:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800464c:	f003 0320 	and.w	r3, r3, #32
 8004650:	2b00      	cmp	r3, #0
 8004652:	f47f aecb 	bne.w	80043ec <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800465c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004660:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004664:	2b00      	cmp	r3, #0
 8004666:	d049      	beq.n	80046fc <UART_RxISR_16BIT_FIFOEN+0x358>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800466e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004672:	429a      	cmp	r2, r3
 8004674:	d242      	bcs.n	80046fc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	623b      	str	r3, [r7, #32]
   return(result);
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3308      	adds	r3, #8
 8004696:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800469a:	633a      	str	r2, [r7, #48]	; 0x30
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e3      	bne.n	8004676 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80046b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f043 0320 	orr.w	r3, r3, #32
 80046c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	69fa      	ldr	r2, [r7, #28]
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	617b      	str	r3, [r7, #20]
   return(result);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e4      	bne.n	80046b4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046ea:	e007      	b.n	80046fc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	619a      	str	r2, [r3, #24]
}
 80046fc:	bf00      	nop
 80046fe:	37b8      	adds	r7, #184	; 0xb8
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40008000 	.word	0x40008000
 8004708:	08003e8d 	.word	0x08003e8d

0800470c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr

0800471e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr

08004730 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_UARTEx_DisableFifoMode+0x16>
 8004754:	2302      	movs	r3, #2
 8004756:	e027      	b.n	80047a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004786:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e02d      	b.n	8004826 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2224      	movs	r2, #36	; 0x24
 80047d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0201 	bic.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f850 	bl	80048ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004842:	2302      	movs	r3, #2
 8004844:	e02d      	b.n	80048a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2224      	movs	r2, #36	; 0x24
 8004852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0201 	bic.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f812 	bl	80048ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048cc:	e031      	b.n	8004932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ce:	2308      	movs	r3, #8
 80048d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048d2:	2308      	movs	r3, #8
 80048d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	0e5b      	lsrs	r3, r3, #25
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	0f5b      	lsrs	r3, r3, #29
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	7b3a      	ldrb	r2, [r7, #12]
 80048fa:	4910      	ldr	r1, [pc, #64]	; (800493c <UARTEx_SetNbDataToProcess+0x90>)
 80048fc:	5c8a      	ldrb	r2, [r1, r2]
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004902:	7b3a      	ldrb	r2, [r7, #12]
 8004904:	490e      	ldr	r1, [pc, #56]	; (8004940 <UARTEx_SetNbDataToProcess+0x94>)
 8004906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004908:	fb93 f3f2 	sdiv	r3, r3, r2
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	7b7a      	ldrb	r2, [r7, #13]
 8004918:	4908      	ldr	r1, [pc, #32]	; (800493c <UARTEx_SetNbDataToProcess+0x90>)
 800491a:	5c8a      	ldrb	r2, [r1, r2]
 800491c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004920:	7b7a      	ldrb	r2, [r7, #13]
 8004922:	4907      	ldr	r1, [pc, #28]	; (8004940 <UARTEx_SetNbDataToProcess+0x94>)
 8004924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004926:	fb93 f3f2 	sdiv	r3, r3, r2
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	08004aa4 	.word	0x08004aa4
 8004940:	08004aac 	.word	0x08004aac

08004944 <__libc_init_array>:
 8004944:	b570      	push	{r4, r5, r6, lr}
 8004946:	4d0d      	ldr	r5, [pc, #52]	; (800497c <__libc_init_array+0x38>)
 8004948:	4c0d      	ldr	r4, [pc, #52]	; (8004980 <__libc_init_array+0x3c>)
 800494a:	1b64      	subs	r4, r4, r5
 800494c:	10a4      	asrs	r4, r4, #2
 800494e:	2600      	movs	r6, #0
 8004950:	42a6      	cmp	r6, r4
 8004952:	d109      	bne.n	8004968 <__libc_init_array+0x24>
 8004954:	4d0b      	ldr	r5, [pc, #44]	; (8004984 <__libc_init_array+0x40>)
 8004956:	4c0c      	ldr	r4, [pc, #48]	; (8004988 <__libc_init_array+0x44>)
 8004958:	f000 f82e 	bl	80049b8 <_init>
 800495c:	1b64      	subs	r4, r4, r5
 800495e:	10a4      	asrs	r4, r4, #2
 8004960:	2600      	movs	r6, #0
 8004962:	42a6      	cmp	r6, r4
 8004964:	d105      	bne.n	8004972 <__libc_init_array+0x2e>
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	f855 3b04 	ldr.w	r3, [r5], #4
 800496c:	4798      	blx	r3
 800496e:	3601      	adds	r6, #1
 8004970:	e7ee      	b.n	8004950 <__libc_init_array+0xc>
 8004972:	f855 3b04 	ldr.w	r3, [r5], #4
 8004976:	4798      	blx	r3
 8004978:	3601      	adds	r6, #1
 800497a:	e7f2      	b.n	8004962 <__libc_init_array+0x1e>
 800497c:	08004abc 	.word	0x08004abc
 8004980:	08004abc 	.word	0x08004abc
 8004984:	08004abc 	.word	0x08004abc
 8004988:	08004ac0 	.word	0x08004ac0

0800498c <memcpy>:
 800498c:	440a      	add	r2, r1
 800498e:	4291      	cmp	r1, r2
 8004990:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004994:	d100      	bne.n	8004998 <memcpy+0xc>
 8004996:	4770      	bx	lr
 8004998:	b510      	push	{r4, lr}
 800499a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800499e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049a2:	4291      	cmp	r1, r2
 80049a4:	d1f9      	bne.n	800499a <memcpy+0xe>
 80049a6:	bd10      	pop	{r4, pc}

080049a8 <memset>:
 80049a8:	4402      	add	r2, r0
 80049aa:	4603      	mov	r3, r0
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d100      	bne.n	80049b2 <memset+0xa>
 80049b0:	4770      	bx	lr
 80049b2:	f803 1b01 	strb.w	r1, [r3], #1
 80049b6:	e7f9      	b.n	80049ac <memset+0x4>

080049b8 <_init>:
 80049b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ba:	bf00      	nop
 80049bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049be:	bc08      	pop	{r3}
 80049c0:	469e      	mov	lr, r3
 80049c2:	4770      	bx	lr

080049c4 <_fini>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr


STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006554  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e0  080067e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080067e0  080067e0  000167e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067e8  080067e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  08006860  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08006860  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014db5  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1c  00000000  00000000  00034e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00037c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  00039028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d9c6  00000000  00000000  0003a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d82  00000000  00000000  00057c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7973  00000000  00000000  0006ba00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00123373  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005550  00000000  00000000  001233c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	0800667c 	.word	0x0800667c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	0800667c 	.word	0x0800667c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <calendar_init+0x18>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	2000008c 	.word	0x2000008c

0800054c <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
 8000552:	463b      	mov	r3, r7
 8000554:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 8000558:	7838      	ldrb	r0, [r7, #0]
 800055a:	7879      	ldrb	r1, [r7, #1]
 800055c:	78bc      	ldrb	r4, [r7, #2]
 800055e:	78fd      	ldrb	r5, [r7, #3]
 8000560:	793b      	ldrb	r3, [r7, #4]
 8000562:	797a      	ldrb	r2, [r7, #5]
 8000564:	9201      	str	r2, [sp, #4]
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	462b      	mov	r3, r5
 800056a:	4622      	mov	r2, r4
 800056c:	f000 fa8c 	bl	8000a88 <setDateTime>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bdb0      	pop	{r4, r5, r7, pc}

08000578 <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
 800057e:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	1c59      	adds	r1, r3, #1
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c9c      	adds	r4, r3, #2
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1cdd      	adds	r5, r3, #3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3304      	adds	r3, #4
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	3205      	adds	r2, #5
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	462b      	mov	r3, r5
 800059c:	4622      	mov	r2, r4
 800059e:	f000 fb3d 	bl	8000c1c <getDateTime>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bdb0      	pop	{r4, r5, r7, pc}

080005aa <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005c6:	f023 0218 	bic.w	r2, r3, #24
 80005ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000604:	68fb      	ldr	r3, [r7, #12]
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a06      	ldr	r2, [pc, #24]	; (8000638 <HAL_UART_ErrorCallback+0x28>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d006      	beq.n	8000630 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <HAL_UART_ErrorCallback+0x2c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d101      	bne.n	8000630 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 800062c:	f000 fd58 	bl	80010e0 <uartBasic_Error_ISR>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40013800 	.word	0x40013800
 800063c:	40004400 	.word	0x40004400

08000640 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_UART_TxCpltCallback+0x28>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d006      	beq.n	8000660 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <HAL_UART_TxCpltCallback+0x2c>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d101      	bne.n	8000660 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 800065c:	f000 fd34 	bl	80010c8 <uartBasic_TX_Complete_ISR>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40013800 	.word	0x40013800
 800066c:	40004400 	.word	0x40004400

08000670 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a06      	ldr	r2, [pc, #24]	; (8000698 <HAL_UART_RxCpltCallback+0x28>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d006      	beq.n	8000690 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a05      	ldr	r2, [pc, #20]	; (800069c <HAL_UART_RxCpltCallback+0x2c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d101      	bne.n	8000690 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 800068c:	f000 fd10 	bl	80010b0 <uartBasic_RX_Complete_ISR>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40013800 	.word	0x40013800
 800069c:	40004400 	.word	0x40004400

080006a0 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 80006a8:	f7ff ff7f 	bl	80005aa <calendar_AlarmA_ISR>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b6:	b095      	sub	sp, #84	; 0x54
 80006b8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fd9b 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f887 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f9cf 	bl	8000a64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c6:	f000 f977 	bl	80009b8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80006ca:	f000 f8df 	bl	800088c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80006ce:	2001      	movs	r0, #1
 80006d0:	f001 f956 	bl	8001980 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 80006d4:	4838      	ldr	r0, [pc, #224]	; (80007b8 <main+0x104>)
 80006d6:	f000 fc7d 	bl	8000fd4 <uartBasic_init>

  // set calendar time
  DateTime now = {
 80006da:	4a38      	ldr	r2, [pc, #224]	; (80007bc <main+0x108>)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e4:	6018      	str	r0, [r3, #0]
 80006e6:	3304      	adds	r3, #4
 80006e8:	8019      	strh	r1, [r3, #0]
		  .day = 31,
		  .hour = 23,
		  .minute = 59,
		  .second = 45
  };
  calendar_setDateTime(now);
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006f2:	f7ff ff2b 	bl	800054c <calendar_setDateTime>

  // initialize calendar
  calendar_init(&hrtc);
 80006f6:	4832      	ldr	r0, [pc, #200]	; (80007c0 <main+0x10c>)
 80006f8:	f7ff ff1a 	bl	8000530 <calendar_init>

  // set some events


  // begin listening for messages from desktop
  uartBasic_RX_IT();
 80006fc:	f000 fc9a 	bl	8001034 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	637b      	str	r3, [r7, #52]	; 0x34
  int timeSeconds = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  int timeMinutes = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 800070c:	463a      	mov	r2, r7
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4611      	mov	r1, r2
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fca1 	bl	800105c <uartBasic_get_RX>
 800071a:	4603      	mov	r3, r0
 800071c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  // if message present, handle message
	  if (messageStatus == true) {
 8000720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00b      	beq.n	8000740 <main+0x8c>
		  // echo back to computer
		  uartBasic_TX_IT(messageHeader, messageBody);
 8000728:	463a      	mov	r2, r7
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4611      	mov	r1, r2
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fc5d 	bl	8000ff0 <uartBasic_TX_IT>
		  messageCount++;
 8000736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000738:	3301      	adds	r3, #1
 800073a:	637b      	str	r3, [r7, #52]	; 0x34
		  uartBasic_RX_IT();
 800073c:	f000 fc7a 	bl	8001034 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff17 	bl	8000578 <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 800074a:	463b      	mov	r3, r7
 800074c:	221c      	movs	r2, #28
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f005 fb19 	bl	8005d88 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000756:	f897 3020 	ldrb.w	r3, [r7, #32]
 800075a:	461e      	mov	r6, r3
 800075c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000760:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000764:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000768:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800076c:	4604      	mov	r4, r0
 800076e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8000772:	4605      	mov	r5, r0
 8000774:	4638      	mov	r0, r7
 8000776:	9504      	str	r5, [sp, #16]
 8000778:	9403      	str	r4, [sp, #12]
 800077a:	9102      	str	r1, [sp, #8]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	4633      	mov	r3, r6
 8000782:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <main+0x110>)
 8000784:	211c      	movs	r1, #28
 8000786:	f005 fb07 	bl	8005d98 <sniprintf>
	  uartBasic_TX_IT("TIME", messageBody);
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <main+0x114>)
 8000790:	f000 fc2e 	bl	8000ff0 <uartBasic_TX_IT>
	  timeSeconds++;
 8000794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000796:	3301      	adds	r3, #1
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
	  timeMinutes++;
 800079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079c:	3301      	adds	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  long int i = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
	  while (i < 65535*2)
 80007a4:	e002      	b.n	80007ac <main+0xf8>
		  i++;
 80007a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a8:	3301      	adds	r3, #1
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
	  while (i < 65535*2)
 80007ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ae:	4a07      	ldr	r2, [pc, #28]	; (80007cc <main+0x118>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	ddf8      	ble.n	80007a6 <main+0xf2>
  {
 80007b4:	e7aa      	b.n	800070c <main+0x58>
 80007b6:	bf00      	nop
 80007b8:	200000c8 	.word	0x200000c8
 80007bc:	080066c0 	.word	0x080066c0
 80007c0:	20000090 	.word	0x20000090
 80007c4:	08006694 	.word	0x08006694
 80007c8:	080066b8 	.word	0x080066b8
 80007cc:	0001fffd 	.word	0x0001fffd

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09a      	sub	sp, #104	; 0x68
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2248      	movs	r2, #72	; 0x48
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 fad2 	bl	8005d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
 80007f2:	615a      	str	r2, [r3, #20]
 80007f4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f6:	f001 f89b 	bl	8001930 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f7ff fedb 	bl	80005b6 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <SystemClock_Config+0xb8>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000808:	4a1f      	ldr	r2, [pc, #124]	; (8000888 <SystemClock_Config+0xb8>)
 800080a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <SystemClock_Config+0xb8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800081c:	232c      	movs	r3, #44	; 0x2c
 800081e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000820:	2381      	movs	r3, #129	; 0x81
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000828:	2300      	movs	r3, #0
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000838:	2300      	movs	r3, #0
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fb5f 	bl	8001f04 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800084c:	f000 f917 	bl	8000a7e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000850:	236f      	movs	r3, #111	; 0x6f
 8000852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fec9 	bl	8002608 <HAL_RCC_ClockConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800087c:	f000 f8ff 	bl	8000a7e <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	3768      	adds	r7, #104	; 0x68
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58000400 	.word	0x58000400

0800088c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b092      	sub	sp, #72	; 0x48
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000892:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	222c      	movs	r2, #44	; 0x2c
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f005 fa6b 	bl	8005d88 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008b2:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <MX_RTC_Init+0x124>)
 80008b4:	4a3f      	ldr	r2, [pc, #252]	; (80009b4 <MX_RTC_Init+0x128>)
 80008b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <MX_RTC_Init+0x124>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008be:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <MX_RTC_Init+0x124>)
 80008c0:	227f      	movs	r2, #127	; 0x7f
 80008c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008c4:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <MX_RTC_Init+0x124>)
 80008c6:	22ff      	movs	r2, #255	; 0xff
 80008c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <MX_RTC_Init+0x124>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008d0:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <MX_RTC_Init+0x124>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008d6:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <MX_RTC_Init+0x124>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008dc:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <MX_RTC_Init+0x124>)
 80008de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008e4:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <MX_RTC_Init+0x124>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <MX_RTC_Init+0x124>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008f0:	482f      	ldr	r0, [pc, #188]	; (80009b0 <MX_RTC_Init+0x124>)
 80008f2:	f002 fb63 	bl	8002fbc <HAL_RTC_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80008fc:	f000 f8bf 	bl	8000a7e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000900:	2300      	movs	r3, #0
 8000902:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000906:	2300      	movs	r3, #0
 8000908:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800090c:	2300      	movs	r3, #0
 800090e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800091a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	4823      	ldr	r0, [pc, #140]	; (80009b0 <MX_RTC_Init+0x124>)
 8000924:	f002 fbcc 	bl	80030c0 <HAL_RTC_SetTime>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800092e:	f000 f8a6 	bl	8000a7e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000932:	2301      	movs	r3, #1
 8000934:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800093e:	2301      	movs	r3, #1
 8000940:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800094a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800094e:	2201      	movs	r2, #1
 8000950:	4619      	mov	r1, r3
 8000952:	4817      	ldr	r0, [pc, #92]	; (80009b0 <MX_RTC_Init+0x124>)
 8000954:	f002 fcb2 	bl	80032bc <HAL_RTC_SetDate>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 800095e:	f000 f88e 	bl	8000a7e <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000962:	2300      	movs	r3, #0
 8000964:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000966:	2300      	movs	r3, #0
 8000968:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800096a:	2300      	movs	r3, #0
 800096c:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000986:	2301      	movs	r3, #1
 8000988:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800098c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2201      	movs	r2, #1
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_RTC_Init+0x124>)
 800099a:	f002 fd63 	bl	8003464 <HAL_RTC_SetAlarm_IT>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80009a4:	f000 f86b 	bl	8000a7e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3748      	adds	r7, #72	; 0x48
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000090 	.word	0x20000090
 80009b4:	40002800 	.word	0x40002800

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009be:	4a28      	ldr	r2, [pc, #160]	; (8000a60 <MX_USART2_UART_Init+0xa8>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009c2:	4b26      	ldr	r3, [pc, #152]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80009d8:	4b20      	ldr	r3, [pc, #128]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b1b      	ldr	r3, [pc, #108]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 8000a00:	2230      	movs	r2, #48	; 0x30
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000a04:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 8000a06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 8000a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a12:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 8000a16:	f002 ff57 	bl	80038c8 <HAL_UART_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a20:	f000 f82d 	bl	8000a7e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a24:	2100      	movs	r1, #0
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 8000a28:	f005 f8ad 	bl	8005b86 <HAL_UARTEx_SetTxFifoThreshold>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a32:	f000 f824 	bl	8000a7e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 8000a3a:	f005 f8e2 	bl	8005c02 <HAL_UARTEx_SetRxFifoThreshold>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000a44:	f000 f81b 	bl	8000a7e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_USART2_UART_Init+0xa4>)
 8000a4a:	f005 f864 	bl	8005b16 <HAL_UARTEx_DisableFifoMode>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8000a54:	f000 f813 	bl	8000a7e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000c8 	.word	0x200000c8
 8000a60:	40004400 	.word	0x40004400

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f7ff fdb9 	bl	80005e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2004      	movs	r0, #4
 8000a70:	f7ff fdb6 	bl	80005e0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a74:	2002      	movs	r0, #2
 8000a76:	f7ff fdb3 	bl	80005e0 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a82:	b672      	cpsid	i
}
 8000a84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <Error_Handler+0x8>

08000a88 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4604      	mov	r4, r0
 8000a90:	4608      	mov	r0, r1
 8000a92:	4611      	mov	r1, r2
 8000a94:	461a      	mov	r2, r3
 8000a96:	4623      	mov	r3, r4
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71bb      	strb	r3, [r7, #6]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	717b      	strb	r3, [r7, #5]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4a5a      	ldr	r2, [pc, #360]	; (8000c14 <setDateTime+0x18c>)
 8000aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	011b      	lsls	r3, r3, #4
 8000ab4:	b258      	sxtb	r0, r3
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	4b56      	ldr	r3, [pc, #344]	; (8000c14 <setDateTime+0x18c>)
 8000aba:	fba3 1302 	umull	r1, r3, r3, r2
 8000abe:	08d9      	lsrs	r1, r3, #3
 8000ac0:	460b      	mov	r3, r1
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	b25b      	sxtb	r3, r3
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	4a4e      	ldr	r2, [pc, #312]	; (8000c14 <setDateTime+0x18c>)
 8000ada:	fba2 2303 	umull	r2, r3, r2, r3
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	b258      	sxtb	r0, r3
 8000ae6:	79ba      	ldrb	r2, [r7, #6]
 8000ae8:	4b4a      	ldr	r3, [pc, #296]	; (8000c14 <setDateTime+0x18c>)
 8000aea:	fba3 1302 	umull	r1, r3, r3, r2
 8000aee:	08d9      	lsrs	r1, r3, #3
 8000af0:	460b      	mov	r3, r1
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	4303      	orrs	r3, r0
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8000b06:	797b      	ldrb	r3, [r7, #5]
 8000b08:	4a42      	ldr	r2, [pc, #264]	; (8000c14 <setDateTime+0x18c>)
 8000b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0e:	08db      	lsrs	r3, r3, #3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	b258      	sxtb	r0, r3
 8000b16:	797a      	ldrb	r2, [r7, #5]
 8000b18:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <setDateTime+0x18c>)
 8000b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b1e:	08d9      	lsrs	r1, r3, #3
 8000b20:	460b      	mov	r3, r1
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	4303      	orrs	r3, r0
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8000b3a:	793b      	ldrb	r3, [r7, #4]
 8000b3c:	4a35      	ldr	r2, [pc, #212]	; (8000c14 <setDateTime+0x18c>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	08db      	lsrs	r3, r3, #3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	011b      	lsls	r3, r3, #4
 8000b48:	b258      	sxtb	r0, r3
 8000b4a:	793a      	ldrb	r2, [r7, #4]
 8000b4c:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <setDateTime+0x18c>)
 8000b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b52:	08d9      	lsrs	r1, r3, #3
 8000b54:	460b      	mov	r3, r1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	4303      	orrs	r3, r0
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8000b6a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b6e:	4a29      	ldr	r2, [pc, #164]	; (8000c14 <setDateTime+0x18c>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	b258      	sxtb	r0, r3
 8000b7c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b80:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <setDateTime+0x18c>)
 8000b82:	fba3 1302 	umull	r1, r3, r3, r2
 8000b86:	08d9      	lsrs	r1, r3, #3
 8000b88:	460b      	mov	r3, r1
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4303      	orrs	r3, r0
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8000b9e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <setDateTime+0x18c>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	08db      	lsrs	r3, r3, #3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	011b      	lsls	r3, r3, #4
 8000bae:	b258      	sxtb	r0, r3
 8000bb0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <setDateTime+0x18c>)
 8000bb6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bba:	08d9      	lsrs	r1, r3, #3
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	4303      	orrs	r3, r0
 8000bcc:	b25b      	sxtb	r3, r3
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <setDateTime+0x190>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f107 011c 	add.w	r1, r7, #28
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fb6d 	bl	80032bc <HAL_RTC_SetDate>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000bec:	e7fe      	b.n	8000bec <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <setDateTime+0x190>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f107 0108 	add.w	r1, r7, #8
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f002 fa61 	bl	80030c0 <HAL_RTC_SetTime>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000c08:	e7fe      	b.n	8000c08 <setDateTime+0x180>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	cccccccd 	.word	0xcccccccd
 8000c18:	2000015c 	.word	0x2000015c

08000c1c <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
 8000c28:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8000c3e:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <getDateTime+0x140>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f107 0114 	add.w	r1, r7, #20
 8000c46:	2201      	movs	r2, #1
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fad5 	bl	80031f8 <HAL_RTC_GetTime>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000c58:	e7fe      	b.n	8000c58 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <getDateTime+0x140>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f107 0110 	add.w	r1, r7, #16
 8000c62:	2201      	movs	r2, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fbaf 	bl	80033c8 <HAL_RTC_GetDate>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000c74:	e7fe      	b.n	8000c74 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0b11110000) >> 4) * 10 + (date.Year & 0b00001111);
 8000c76:	7cfb      	ldrb	r3, [r7, #19]
 8000c78:	091b      	lsrs	r3, r3, #4
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	0092      	lsls	r2, r2, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	7cfb      	ldrb	r3, [r7, #19]
 8000c88:	f003 030f 	and.w	r3, r3, #15
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0b00010000) >> 4) * 10 + (date.Month & 0b00001111);
 8000c96:	7c7b      	ldrb	r3, [r7, #17]
 8000c98:	111b      	asrs	r3, r3, #4
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	7c7b      	ldrb	r3, [r7, #17]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0b00110000) >> 4) * 10 + (date.Date & 0b00001111);
 8000cbc:	7cbb      	ldrb	r3, [r7, #18]
 8000cbe:	111b      	asrs	r3, r3, #4
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	7cbb      	ldrb	r3, [r7, #18]
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0b00110000) >> 4) * 10 + (time.Hours & 0b00001111);
 8000ce2:	7d3b      	ldrb	r3, [r7, #20]
 8000ce4:	111b      	asrs	r3, r3, #4
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	461a      	mov	r2, r3
 8000cf0:	0092      	lsls	r2, r2, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	7d3b      	ldrb	r3, [r7, #20]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0b01110000) >> 4) * 10 + (time.Minutes & 0b00001111);
 8000d08:	7d7b      	ldrb	r3, [r7, #21]
 8000d0a:	111b      	asrs	r3, r3, #4
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	461a      	mov	r2, r3
 8000d16:	0092      	lsls	r2, r2, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	7d7b      	ldrb	r3, [r7, #21]
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	4413      	add	r3, r2
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2c:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0b01110000) >> 4) * 10 + (time.Seconds & 0b00001111);
 8000d2e:	7dbb      	ldrb	r3, [r7, #22]
 8000d30:	111b      	asrs	r3, r3, #4
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	4413      	add	r3, r2
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	7dbb      	ldrb	r3, [r7, #22]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d52:	701a      	strb	r2, [r3, #0]
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	2000015c 	.word	0x2000015c

08000d60 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <LL_AHB2_GRP1_EnableClock>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000da4:	68fb      	ldr	r3, [r7, #12]
}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b090      	sub	sp, #64	; 0x40
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	2238      	movs	r2, #56	; 0x38
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f004 ffc3 	bl	8005d88 <memset>
  if(hrtc->Instance==RTC)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_RTC_MspInit+0x64>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d11d      	bne.n	8000e48 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 ffb3 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e28:	f7ff fe29 	bl	8000a7e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e2c:	f7ff ff98 	bl	8000d60 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e34:	f7ff ffbc 	bl	8000db0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	202a      	movs	r0, #42	; 0x2a
 8000e3e:	f000 fb26 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e42:	202a      	movs	r0, #42	; 0x2a
 8000e44:	f000 fb3d 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3740      	adds	r7, #64	; 0x40
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40002800 	.word	0x40002800

08000e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b096      	sub	sp, #88	; 0x58
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2238      	movs	r2, #56	; 0x38
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f004 ff87 	bl	8005d88 <memset>
  if(huart->Instance==USART2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <HAL_UART_MspInit+0x98>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d12e      	bne.n	8000ee2 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e88:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000e8c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4618      	mov	r0, r3
 8000e94:	f001 ff78 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e9e:	f7ff fdee 	bl	8000a7e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ea6:	f7ff ff83 	bl	8000db0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff ff68 	bl	8000d80 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f000 fbcf 	bl	8001670 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2025      	movs	r0, #37	; 0x25
 8000ed8:	f000 fad9 	bl	800148e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000edc:	2025      	movs	r0, #37	; 0x25
 8000ede:	f000 faf0 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3758      	adds	r7, #88	; 0x58
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40004400 	.word	0x40004400

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 f9b7 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <USART2_IRQHandler+0x10>)
 8000f46:	f002 fdef 	bl	8003b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200000c8 	.word	0x200000c8

08000f54 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <RTC_Alarm_IRQHandler+0x10>)
 8000f5a:	f002 fb8f 	bl	800367c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000090 	.word	0x20000090

08000f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f70:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <_sbrk+0x5c>)
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <_sbrk+0x60>)
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f7c:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <_sbrk+0x64>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <_sbrk+0x68>)
 8000f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d207      	bcs.n	8000fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f98:	f004 febe 	bl	8005d18 <__errno>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa6:	e009      	b.n	8000fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <_sbrk+0x64>)
 8000fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20008000 	.word	0x20008000
 8000fc8:	00000400 	.word	0x00000400
 8000fcc:	20000160 	.word	0x20000160
 8000fd0:	200001c8 	.word	0x200001c8

08000fd4 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <uartBasic_init+0x18>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000168 	.word	0x20000168

08000ff0 <uartBasic_TX_IT>:
/*
 *
 */
bool uartBasic_TX_IT(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <uartBasic_TX_IT+0x3c>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f083 0301 	eor.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <uartBasic_TX_IT+0x32>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <uartBasic_TX_IT+0x40>)
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f89a 	bl	8001148 <composeMessage>
		_txBuffer_full = true;
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <uartBasic_TX_IT+0x3c>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_IT();
 800101a:	f000 f865 	bl	80010e8 <_txMessage_IT>

		// report successfully queued
		return true;
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <uartBasic_TX_IT+0x34>
	}

	else
	{
		// return full buffer
		return false;
 8001022:	2300      	movs	r3, #0
	}
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200001ac 	.word	0x200001ac
 8001030:	2000016c 	.word	0x2000016c

08001034 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <uartBasic_RX_IT+0x24>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f083 0301 	eor.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 8001048:	f000 f866 	bl	8001118 <_rxMessage_IT>

		// return success
		return true;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 8001050:	2300      	movs	r3, #0
	}
}
 8001052:	4618      	mov	r0, r3
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001ad 	.word	0x200001ad

0800105c <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <uartBasic_get_RX+0x4c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d015      	beq.n	800109c <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8001070:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <uartBasic_get_RX+0x50>)
 8001072:	f107 0408 	add.w	r4, r7, #8
 8001076:	461d      	mov	r5, r3
 8001078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <uartBasic_get_RX+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	461a      	mov	r2, r3
 8001090:	6839      	ldr	r1, [r7, #0]
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f86e 	bl	8001174 <decomposeMessage>

		// report successfully dequeued
		return true;
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 800109c:	2300      	movs	r3, #0
	}
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bdb0      	pop	{r4, r5, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200001ad 	.word	0x200001ad
 80010ac:	2000018c 	.word	0x2000018c

080010b0 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <uartBasic_RX_Complete_ISR+0x14>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200001ad 	.word	0x200001ad

080010c8 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <uartBasic_TX_Complete_ISR+0x14>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	200001ac 	.word	0x200001ac

080010e0 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 80010e4:	e7fe      	b.n	80010e4 <uartBasic_Error_ISR+0x4>
	...

080010e8 <_txMessage_IT>:

/*
 *
 */
void _txMessage_IT(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <_txMessage_IT+0x24>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2220      	movs	r2, #32
 80010f2:	4907      	ldr	r1, [pc, #28]	; (8001110 <_txMessage_IT+0x28>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f002 fc37 	bl	8003968 <HAL_UART_Transmit_IT>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d102      	bne.n	8001106 <_txMessage_IT+0x1e>
		_txError = true;
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <_txMessage_IT+0x2c>)
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000168 	.word	0x20000168
 8001110:	2000016c 	.word	0x2000016c
 8001114:	20000164 	.word	0x20000164

08001118 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <_rxMessage_IT+0x24>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2220      	movs	r2, #32
 8001122:	4907      	ldr	r1, [pc, #28]	; (8001140 <_rxMessage_IT+0x28>)
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fcb3 	bl	8003a90 <HAL_UART_Receive_IT>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d102      	bne.n	8001136 <_rxMessage_IT+0x1e>
		_rxError = true;
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <_rxMessage_IT+0x2c>)
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000168 	.word	0x20000168
 8001140:	2000018c 	.word	0x2000018c
 8001144:	20000165 	.word	0x20000165

08001148 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3304      	adds	r3, #4
 8001162:	221c      	movs	r2, #28
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fe00 	bl	8005d6c <memcpy>
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3304      	adds	r3, #4
 800118e:	221c      	movs	r2, #28
 8001190:	4619      	mov	r1, r3
 8001192:	68b8      	ldr	r0, [r7, #8]
 8001194:	f004 fdea 	bl	8005d6c <memcpy>
}
 8001198:	bf00      	nop
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011a4:	f7ff f9be 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a8:	480c      	ldr	r0, [pc, #48]	; (80011dc <LoopForever+0x6>)
  ldr r1, =_edata
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <LoopForever+0xe>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c0:	4c0a      	ldr	r4, [pc, #40]	; (80011ec <LoopForever+0x16>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011ce:	f004 fda9 	bl	8005d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d2:	f7ff fa6f 	bl	80006b4 <main>

080011d6 <LoopForever>:

LoopForever:
    b LoopForever
 80011d6:	e7fe      	b.n	80011d6 <LoopForever>
  ldr   r0, =_estack
 80011d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011e4:	080067f0 	.word	0x080067f0
  ldr r2, =_sbss
 80011e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011ec:	200001c4 	.word	0x200001c4

080011f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f000 f93a 	bl	8001478 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001204:	f001 fbe2 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8001208:	4603      	mov	r3, r0
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <HAL_Init+0x3c>)
 800120c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f810 	bl	8001234 <HAL_InitTick>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	e001      	b.n	8001224 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001220:	f7ff fdde 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001224:	79fb      	ldrb	r3, [r7, #7]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000000 	.word	0x20000000

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_InitTick+0x6c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d024      	beq.n	8001292 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001248:	f001 fbc0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 800124c:	4602      	mov	r2, r0
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_InitTick+0x6c>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	fbb3 f3f1 	udiv	r3, r3, r1
 800125c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f000 f93c 	bl	80014de <HAL_SYSTICK_Config>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10f      	bne.n	800128c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	d809      	bhi.n	8001286 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001272:	2200      	movs	r2, #0
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800127a:	f000 f908 	bl	800148e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_InitTick+0x70>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e007      	b.n	8001296 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e004      	b.n	8001296 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e001      	b.n	8001296 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x1c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x20>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a03      	ldr	r2, [pc, #12]	; (80012c8 <HAL_IncTick+0x20>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	20000008 	.word	0x20000008
 80012c8:	200001b0 	.word	0x200001b0

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	200001b0 	.word	0x200001b0

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4906      	ldr	r1, [pc, #24]	; (8001378 <__NVIC_EnableIRQ+0x34>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001444:	d301      	bcc.n	800144a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001446:	2301      	movs	r3, #1
 8001448:	e00f      	b.n	800146a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <SysTick_Config+0x40>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3b01      	subs	r3, #1
 8001450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001452:	210f      	movs	r1, #15
 8001454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001458:	f7ff ff90 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SysTick_Config+0x40>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <SysTick_Config+0x40>)
 8001464:	2207      	movs	r2, #7
 8001466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	e000e010 	.word	0xe000e010

08001478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff ff2d 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff44 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff92 	bl	80013d0 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff61 	bl	800137c <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff37 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa4 	bl	8001434 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e04f      	b.n	80015a8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d008      	beq.n	8001526 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2204      	movs	r2, #4
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e040      	b.n	80015a8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 020e 	bic.w	r2, r2, #14
 8001534:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001544:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f003 021c 	and.w	r2, r3, #28
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	2101      	movs	r1, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001572:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00c      	beq.n	8001596 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001586:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800158a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001594:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d005      	beq.n	80015d6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2204      	movs	r2, #4
 80015ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e047      	b.n	8001666 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 020e 	bic.w	r2, r2, #14
 80015e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001604:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f003 021c 	and.w	r2, r3, #28
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	2101      	movs	r1, #1
 8001614:	fa01 f202 	lsl.w	r2, r1, r2
 8001618:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001622:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	2b00      	cmp	r3, #0
 800162a:	d00c      	beq.n	8001646 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001636:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800163a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001644:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
    }
  }
  return status;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167e:	e140      	b.n	8001902 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2101      	movs	r1, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	fa01 f303 	lsl.w	r3, r1, r3
 800168c:	4013      	ands	r3, r2
 800168e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 8132 	beq.w	80018fc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d005      	beq.n	80016b0 <HAL_GPIO_Init+0x40>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d130      	bne.n	8001712 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e6:	2201      	movs	r2, #1
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	f003 0201 	and.w	r2, r3, #1
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b03      	cmp	r3, #3
 800171c:	d017      	beq.n	800174e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	2203      	movs	r2, #3
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d123      	bne.n	80017a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	6939      	ldr	r1, [r7, #16]
 800179e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0203 	and.w	r2, r3, #3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 808c 	beq.w	80018fc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80017e4:	4a4e      	ldr	r2, [pc, #312]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	2207      	movs	r2, #7
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800180e:	d00d      	beq.n	800182c <HAL_GPIO_Init+0x1bc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a44      	ldr	r2, [pc, #272]	; (8001924 <HAL_GPIO_Init+0x2b4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0x1b8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a43      	ldr	r2, [pc, #268]	; (8001928 <HAL_GPIO_Init+0x2b8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_GPIO_Init+0x1b4>
 8001820:	2302      	movs	r3, #2
 8001822:	e004      	b.n	800182e <HAL_GPIO_Init+0x1be>
 8001824:	2307      	movs	r3, #7
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x1be>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_Init+0x1be>
 800182c:	2300      	movs	r3, #0
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800183e:	4938      	ldr	r1, [pc, #224]	; (8001920 <HAL_GPIO_Init+0x2b0>)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800184c:	4b37      	ldr	r3, [pc, #220]	; (800192c <HAL_GPIO_Init+0x2bc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001870:	4a2e      	ldr	r2, [pc, #184]	; (800192c <HAL_GPIO_Init+0x2bc>)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001876:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_GPIO_Init+0x2bc>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800189a:	4a24      	ldr	r2, [pc, #144]	; (800192c <HAL_GPIO_Init+0x2bc>)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80018a0:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_GPIO_Init+0x2bc>)
 80018a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018a6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80018c6:	4a19      	ldr	r2, [pc, #100]	; (800192c <HAL_GPIO_Init+0x2bc>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_GPIO_Init+0x2bc>)
 80018d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018d4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_GPIO_Init+0x2bc>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	f47f aeb7 	bne.w	8001680 <HAL_GPIO_Init+0x10>
  }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40010000 	.word	0x40010000
 8001924:	48000400 	.word	0x48000400
 8001928:	48000800 	.word	0x48000800
 800192c:	58000800 	.word	0x58000800

08001930 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a03      	ldr	r2, [pc, #12]	; (8001948 <HAL_PWR_EnableBkUpAccess+0x18>)
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	58000400 	.word	0x58000400

0800194c <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <LL_PWR_EnableBootC2+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4a03      	ldr	r2, [pc, #12]	; (8001964 <LL_PWR_EnableBootC2+0x18>)
 8001956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	58000400 	.word	0x58000400

08001968 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <HAL_PWREx_GetVoltageRange+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	58000400 	.word	0x58000400

08001980 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001988:	f7ff ffe0 	bl	800194c <LL_PWR_EnableBootC2>
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a4:	d101      	bne.n	80019aa <LL_PWR_IsEnabledBkUpAccess+0x16>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_PWR_IsEnabledBkUpAccess+0x18>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	58000400 	.word	0x58000400

080019b8 <LL_RCC_HSE_EnableTcxo>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <LL_RCC_HSE_DisableTcxo>:
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a02:	d101      	bne.n	8001a08 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <LL_RCC_HSE_Enable>:
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <LL_RCC_HSE_Disable>:
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_HSE_IsReady>:
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a5c:	d101      	bne.n	8001a62 <LL_RCC_HSE_IsReady+0x18>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_RCC_HSE_IsReady+0x1a>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <LL_RCC_HSI_Enable>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_HSI_Disable>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <LL_RCC_HSI_IsReady>:
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab6:	d101      	bne.n	8001abc <LL_RCC_HSI_IsReady+0x18>
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <LL_RCC_HSI_IsReady+0x1a>
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	061b      	lsls	r3, r3, #24
 8001adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <LL_RCC_LSE_IsReady>:
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d101      	bne.n	8001b06 <LL_RCC_LSE_IsReady+0x18>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e000      	b.n	8001b08 <LL_RCC_LSE_IsReady+0x1a>
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <LL_RCC_LSI_Enable>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_LSI_Disable>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b40:	f023 0301 	bic.w	r3, r3, #1
 8001b44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <LL_RCC_LSI_IsReady>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d101      	bne.n	8001b68 <LL_RCC_LSI_IsReady+0x18>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <LL_RCC_LSI_IsReady+0x1a>
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <LL_RCC_MSI_Enable>:
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6013      	str	r3, [r2, #0]
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_MSI_Disable>:
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6013      	str	r3, [r2, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr

08001baa <LL_RCC_MSI_IsReady>:
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d101      	bne.n	8001bc0 <LL_RCC_MSI_IsReady+0x16>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e000      	b.n	8001bc2 <LL_RCC_MSI_IsReady+0x18>
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d101      	bne.n	8001be0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_MSI_GetRange>:
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <LL_RCC_SetSysClkSource>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <LL_RCC_GetSysClkSource>:
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_SetAHBPrescaler>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <LL_RCC_SetAHB3Prescaler>:
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001cdc:	f023 020f 	bic.w	r2, r3, #15
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <LL_RCC_SetAPB1Prescaler>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr

08001d1e <LL_RCC_SetAPB2Prescaler>:
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_GetAHBPrescaler>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <LL_RCC_GetAHB3Prescaler>:
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d62:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <LL_RCC_GetAPB1Prescaler>:
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <LL_RCC_GetAPB2Prescaler>:
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr

08001da0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dea:	d101      	bne.n	8001df0 <LL_RCC_PLL_IsReady+0x18>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <LL_RCC_PLL_IsReady+0x1a>
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0303 	and.w	r3, r3, #3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e66:	d101      	bne.n	8001e6c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e8a:	d101      	bne.n	8001e90 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eae:	d101      	bne.n	8001eb4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr

08001ebe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ed0:	d101      	bne.n	8001ed6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ef2:	d101      	bne.n	8001ef8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
	...

08001f04 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e36f      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f16:	f7ff fea6 	bl	8001c66 <LL_RCC_GetSysClkSource>
 8001f1a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1c:	f7ff ff8f 	bl	8001e3e <LL_RCC_PLL_GetMainSource>
 8001f20:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80c4 	beq.w	80020b8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d005      	beq.n	8001f42 <HAL_RCC_OscConfig+0x3e>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	d176      	bne.n	800202a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d173      	bne.n	800202a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e353      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x68>
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6a:	e006      	b.n	8001f7a <HAL_RCC_OscConfig+0x76>
 8001f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d222      	bcs.n	8001fc4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fd5a 	bl	8002a3c <RCC_SetFlashLatencyFromMSIRange>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e331      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9c:	f043 0308 	orr.w	r3, r3, #8
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fe2b 	bl	8001c18 <LL_RCC_MSI_SetCalibTrimming>
 8001fc2:	e021      	b.n	8002008 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fe12 	bl	8001c18 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 fd1f 	bl	8002a3c <RCC_SetFlashLatencyFromMSIRange>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e2f6      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002008:	f000 fce0 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 800200c:	4603      	mov	r3, r0
 800200e:	4aa7      	ldr	r2, [pc, #668]	; (80022ac <HAL_RCC_OscConfig+0x3a8>)
 8002010:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002012:	4ba7      	ldr	r3, [pc, #668]	; (80022b0 <HAL_RCC_OscConfig+0x3ac>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff f90c 	bl	8001234 <HAL_InitTick>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002020:	7cfb      	ldrb	r3, [r7, #19]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d047      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002026:	7cfb      	ldrb	r3, [r7, #19]
 8002028:	e2e5      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d02c      	beq.n	800208c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002032:	f7ff fd9e 	bl	8001b72 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002036:	f7ff f949 	bl	80012cc <HAL_GetTick>
 800203a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800203e:	f7ff f945 	bl	80012cc <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e2d2      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002050:	f7ff fdab 	bl	8001baa <LL_RCC_MSI_IsReady>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f1      	beq.n	800203e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fdc7 	bl	8001c18 <LL_RCC_MSI_SetCalibTrimming>
 800208a:	e015      	b.n	80020b8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800208c:	f7ff fd7f 	bl	8001b8e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002090:	f7ff f91c 	bl	80012cc <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002098:	f7ff f918 	bl	80012cc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e2a5      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80020aa:	f7ff fd7e 	bl	8001baa <LL_RCC_MSI_IsReady>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f1      	bne.n	8002098 <HAL_RCC_OscConfig+0x194>
 80020b4:	e000      	b.n	80020b8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020b6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d058      	beq.n	8002176 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d005      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1d2>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b0c      	cmp	r3, #12
 80020ce:	d108      	bne.n	80020e2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d14b      	bne.n	8002176 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e289      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80020e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x204>
 8002102:	f7ff fc86 	bl	8001a12 <LL_RCC_HSE_Enable>
 8002106:	e00d      	b.n	8002124 <HAL_RCC_OscConfig+0x220>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002110:	d104      	bne.n	800211c <HAL_RCC_OscConfig+0x218>
 8002112:	f7ff fc51 	bl	80019b8 <LL_RCC_HSE_EnableTcxo>
 8002116:	f7ff fc7c 	bl	8001a12 <LL_RCC_HSE_Enable>
 800211a:	e003      	b.n	8002124 <HAL_RCC_OscConfig+0x220>
 800211c:	f7ff fc87 	bl	8001a2e <LL_RCC_HSE_Disable>
 8002120:	f7ff fc58 	bl	80019d4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff f8ce 	bl	80012cc <HAL_GetTick>
 8002130:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff f8ca 	bl	80012cc <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e257      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002146:	f7ff fc80 	bl	8001a4a <LL_RCC_HSE_IsReady>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f1      	beq.n	8002134 <HAL_RCC_OscConfig+0x230>
 8002150:	e011      	b.n	8002176 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7ff f8bb 	bl	80012cc <HAL_GetTick>
 8002156:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215a:	f7ff f8b7 	bl	80012cc <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	; 0x64
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e244      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800216c:	f7ff fc6d 	bl	8001a4a <LL_RCC_HSE_IsReady>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f1      	bne.n	800215a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d046      	beq.n	8002210 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d005      	beq.n	8002194 <HAL_RCC_OscConfig+0x290>
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d10e      	bne.n	80021ac <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e22a      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fc8e 	bl	8001ac6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021aa:	e031      	b.n	8002210 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d019      	beq.n	80021e8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b4:	f7ff fc5a 	bl	8001a6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f888 	bl	80012cc <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c0:	f7ff f884 	bl	80012cc <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e211      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021d2:	f7ff fc67 	bl	8001aa4 <LL_RCC_HSI_IsReady>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f1      	beq.n	80021c0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fc70 	bl	8001ac6 <LL_RCC_HSI_SetCalibTrimming>
 80021e6:	e013      	b.n	8002210 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e8:	f7ff fc4e 	bl	8001a88 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7ff f86e 	bl	80012cc <HAL_GetTick>
 80021f0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f4:	f7ff f86a 	bl	80012cc <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e1f7      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002206:	f7ff fc4d 	bl	8001aa4 <LL_RCC_HSI_IsReady>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f1      	bne.n	80021f4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d06e      	beq.n	80022fa <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d056      	beq.n	80022d2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800222c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 0310 	and.w	r3, r3, #16
 8002238:	429a      	cmp	r2, r3
 800223a:	d031      	beq.n	80022a0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e1d0      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d013      	beq.n	8002286 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800225e:	f7ff fc67 	bl	8001b30 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002262:	f7ff f833 	bl	80012cc <HAL_GetTick>
 8002266:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226a:	f7ff f82f 	bl	80012cc <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b11      	cmp	r3, #17
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1bc      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800227c:	f7ff fc68 	bl	8001b50 <LL_RCC_LSI_IsReady>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f1      	bne.n	800226a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228e:	f023 0210 	bic.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a0:	f7ff fc36 	bl	8001b10 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7ff f812 	bl	80012cc <HAL_GetTick>
 80022a8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80022aa:	e00c      	b.n	80022c6 <HAL_RCC_OscConfig+0x3c2>
 80022ac:	20000000 	.word	0x20000000
 80022b0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff f80a 	bl	80012cc <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b11      	cmp	r3, #17
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e197      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80022c6:	f7ff fc43 	bl	8001b50 <LL_RCC_LSI_IsReady>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f1      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3b0>
 80022d0:	e013      	b.n	80022fa <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d2:	f7ff fc2d 	bl	8001b30 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f7fe fff9 	bl	80012cc <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022de:	f7fe fff5 	bl	80012cc <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b11      	cmp	r3, #17
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e182      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80022f0:	f7ff fc2e 	bl	8001b50 <LL_RCC_LSI_IsReady>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f1      	bne.n	80022de <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80d8 	beq.w	80024b8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002308:	f7ff fb44 	bl	8001994 <LL_PWR_IsEnabledBkUpAccess>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d113      	bne.n	800233a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002312:	f7ff fb0d 	bl	8001930 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7fe ffd9 	bl	80012cc <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7fe ffd5 	bl	80012cc <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e162      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002330:	f7ff fb30 	bl	8001994 <LL_PWR_IsEnabledBkUpAccess>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f1      	beq.n	800231e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d07b      	beq.n	800243a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b85      	cmp	r3, #133	; 0x85
 8002348:	d003      	beq.n	8002352 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b05      	cmp	r3, #5
 8002350:	d109      	bne.n	8002366 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe ffb1 	bl	80012cc <HAL_GetTick>
 800236a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7fe ffa3 	bl	80012cc <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002390:	4293      	cmp	r3, r2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e12e      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002398:	f7ff fba9 	bl	8001aee <LL_RCC_LSE_IsReady>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0ef      	beq.n	8002382 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2b81      	cmp	r3, #129	; 0x81
 80023a8:	d003      	beq.n	80023b2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b85      	cmp	r3, #133	; 0x85
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe ff8b 	bl	80012cc <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe ff7d 	bl	80012cc <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e108      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ec      	beq.n	80023ce <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80023f4:	e060      	b.n	80024b8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7fe ff69 	bl	80012cc <HAL_GetTick>
 80023fa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe ff5b 	bl	80012cc <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0e6      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ec      	bne.n	8002412 <HAL_RCC_OscConfig+0x50e>
 8002438:	e03e      	b.n	80024b8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243a:	f7fe ff47 	bl	80012cc <HAL_GetTick>
 800243e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe ff39 	bl	80012cc <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0c4      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ec      	bne.n	8002456 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247c:	f7fe ff26 	bl	80012cc <HAL_GetTick>
 8002480:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002496:	e00a      	b.n	80024ae <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7fe ff18 	bl	80012cc <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e0a3      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80024ae:	f7ff fb1e 	bl	8001aee <LL_RCC_LSE_IsReady>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ef      	bne.n	8002498 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8099 	beq.w	80025f4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d06c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d14b      	bne.n	8002568 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d0:	f7ff fc74 	bl	8001dbc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fefa 	bl	80012cc <HAL_GetTick>
 80024d8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fef6 	bl	80012cc <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b0a      	cmp	r3, #10
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e083      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80024ee:	f7ff fc73 	bl	8001dd8 <LL_RCC_PLL_IsReady>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f1      	bne.n	80024dc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	4b40      	ldr	r3, [pc, #256]	; (8002600 <HAL_RCC_OscConfig+0x6fc>)
 8002500:	4013      	ands	r3, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800250a:	4311      	orrs	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002510:	0212      	lsls	r2, r2, #8
 8002512:	4311      	orrs	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002518:	4311      	orrs	r1, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800251e:	4311      	orrs	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002524:	430a      	orrs	r2, r1
 8002526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800252a:	4313      	orrs	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252e:	f7ff fc37 	bl	8001da0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fec3 	bl	80012cc <HAL_GetTick>
 8002546:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe febf 	bl	80012cc <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b0a      	cmp	r3, #10
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e04c      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800255c:	f7ff fc3c 	bl	8001dd8 <LL_RCC_PLL_IsReady>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f1      	beq.n	800254a <HAL_RCC_OscConfig+0x646>
 8002566:	e045      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	f7ff fc28 	bl	8001dbc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256c:	f7fe feae 	bl	80012cc <HAL_GetTick>
 8002570:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002574:	f7fe feaa 	bl	80012cc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e037      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002586:	f7ff fc27 	bl	8001dd8 <LL_RCC_PLL_IsReady>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1f1      	bne.n	8002574 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_RCC_OscConfig+0x700>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
 80025a0:	e028      	b.n	80025f4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e023      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d115      	bne.n	80025f0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10e      	bne.n	80025f0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	429a      	cmp	r2, r3
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	11c1808c 	.word	0x11c1808c
 8002604:	eefefffc 	.word	0xeefefffc

08002608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e12c      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b98      	ldr	r3, [pc, #608]	; (8002880 <HAL_RCC_ClockConfig+0x278>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d91b      	bls.n	8002662 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b95      	ldr	r3, [pc, #596]	; (8002880 <HAL_RCC_ClockConfig+0x278>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4993      	ldr	r1, [pc, #588]	; (8002880 <HAL_RCC_ClockConfig+0x278>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263a:	f7fe fe47 	bl	80012cc <HAL_GetTick>
 800263e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002640:	e008      	b.n	8002654 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002642:	f7fe fe43 	bl	80012cc <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e110      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002654:	4b8a      	ldr	r3, [pc, #552]	; (8002880 <HAL_RCC_ClockConfig+0x278>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d1ef      	bne.n	8002642 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fb02 	bl	8001c7c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002678:	f7fe fe28 	bl	80012cc <HAL_GetTick>
 800267c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002680:	f7fe fe24 	bl	80012cc <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e0f1      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002692:	f7ff fbdf 	bl	8001e54 <LL_RCC_IsActiveFlag_HPRE>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f1      	beq.n	8002680 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d016      	beq.n	80026d6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff faf8 	bl	8001ca2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026b2:	f7fe fe0b 	bl	80012cc <HAL_GetTick>
 80026b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ba:	f7fe fe07 	bl	80012cc <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0d4      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80026cc:	f7ff fbd3 	bl	8001e76 <LL_RCC_IsActiveFlag_C2HPRE>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f1      	beq.n	80026ba <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d016      	beq.n	8002710 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff faf0 	bl	8001ccc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fdee 	bl	80012cc <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026f4:	f7fe fdea 	bl	80012cc <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0b7      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002706:	f7ff fbc8 	bl	8001e9a <LL_RCC_IsActiveFlag_SHDHPRE>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f1      	beq.n	80026f4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d016      	beq.n	800274a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fae9 	bl	8001cf8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002726:	f7fe fdd1 	bl	80012cc <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800272c:	e008      	b.n	8002740 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800272e:	f7fe fdcd 	bl	80012cc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e09a      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002740:	f7ff fbbd 	bl	8001ebe <LL_RCC_IsActiveFlag_PPRE1>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f1      	beq.n	800272e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d017      	beq.n	8002786 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fade 	bl	8001d1e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002762:	f7fe fdb3 	bl	80012cc <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800276a:	f7fe fdaf 	bl	80012cc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e07c      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800277c:	f7ff fbb0 	bl	8001ee0 <LL_RCC_IsActiveFlag_PPRE2>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f1      	beq.n	800276a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d043      	beq.n	800281a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d106      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800279a:	f7ff f956 	bl	8001a4a <LL_RCC_HSE_IsReady>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d11e      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e066      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d106      	bne.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80027b0:	f7ff fb12 	bl	8001dd8 <LL_RCC_PLL_IsReady>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d113      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e05b      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80027c6:	f7ff f9f0 	bl	8001baa <LL_RCC_MSI_IsReady>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e050      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80027d4:	f7ff f966 	bl	8001aa4 <LL_RCC_HSI_IsReady>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e049      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fa2a 	bl	8001c40 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fd6e 	bl	80012cc <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fd6a 	bl	80012cc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e035      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	f7ff fa2c 	bl	8001c66 <LL_RCC_GetSysClkSource>
 800280e:	4602      	mov	r2, r0
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	429a      	cmp	r2, r3
 8002818:	d1ec      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281a:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_RCC_ClockConfig+0x278>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d21b      	bcs.n	8002860 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_RCC_ClockConfig+0x278>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 0207 	bic.w	r2, r3, #7
 8002830:	4913      	ldr	r1, [pc, #76]	; (8002880 <HAL_RCC_ClockConfig+0x278>)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002838:	f7fe fd48 	bl	80012cc <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	e008      	b.n	8002852 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002840:	f7fe fd44 	bl	80012cc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e011      	b.n	8002876 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_ClockConfig+0x278>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d1ef      	bne.n	8002840 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002860:	f000 f8b4 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002864:	4603      	mov	r3, r0
 8002866:	4a07      	ldr	r2, [pc, #28]	; (8002884 <HAL_RCC_ClockConfig+0x27c>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_RCC_ClockConfig+0x280>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fce0 	bl	8001234 <HAL_InitTick>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	58004000 	.word	0x58004000
 8002884:	20000000 	.word	0x20000000
 8002888:	20000004 	.word	0x20000004

0800288c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800289a:	f7ff f9e4 	bl	8001c66 <LL_RCC_GetSysClkSource>
 800289e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a0:	f7ff facd 	bl	8001e3e <LL_RCC_PLL_GetMainSource>
 80028a4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x2c>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d139      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d136      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80028b8:	f7ff f987 	bl	8001bca <LL_RCC_MSI_IsEnabledRangeSelect>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0x62>
 80028c2:	f7ff f982 	bl	8001bca <LL_RCC_MSI_IsEnabledRangeSelect>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d106      	bne.n	80028da <HAL_RCC_GetSysClockFreq+0x4e>
 80028cc:	f7ff f98d 	bl	8001bea <LL_RCC_MSI_GetRange>
 80028d0:	4603      	mov	r3, r0
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	e005      	b.n	80028e6 <HAL_RCC_GetSysClockFreq+0x5a>
 80028da:	f7ff f991 	bl	8001c00 <LL_RCC_MSI_GetRangeAfterStandby>
 80028de:	4603      	mov	r3, r0
 80028e0:	0a1b      	lsrs	r3, r3, #8
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	4a36      	ldr	r2, [pc, #216]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x134>)
 80028e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ec:	e014      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x8c>
 80028ee:	f7ff f96c 	bl	8001bca <LL_RCC_MSI_IsEnabledRangeSelect>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_GetSysClockFreq+0x7a>
 80028f8:	f7ff f977 	bl	8001bea <LL_RCC_MSI_GetRange>
 80028fc:	4603      	mov	r3, r0
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	e005      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0x86>
 8002906:	f7ff f97b 	bl	8001c00 <LL_RCC_MSI_GetRangeAfterStandby>
 800290a:	4603      	mov	r3, r0
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a2b      	ldr	r2, [pc, #172]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002918:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d115      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002924:	e012      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d102      	bne.n	8002932 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292c:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e00c      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d109      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002938:	f7ff f85a 	bl	80019f0 <LL_RCC_HSE_IsEnabledDiv2>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d102      	bne.n	8002948 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	e001      	b.n	800294c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800294a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800294c:	f7ff f98b 	bl	8001c66 <LL_RCC_GetSysClkSource>
 8002950:	4603      	mov	r3, r0
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d12f      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002956:	f7ff fa72 	bl	8001e3e <LL_RCC_PLL_GetMainSource>
 800295a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0xde>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d003      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0xe4>
 8002968:	e00d      	b.n	8002986 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800296c:	60fb      	str	r3, [r7, #12]
        break;
 800296e:	e00d      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002970:	f7ff f83e 	bl	80019f0 <LL_RCC_HSE_IsEnabledDiv2>
 8002974:	4603      	mov	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800297c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800297e:	e005      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002982:	60fb      	str	r3, [r7, #12]
        break;
 8002984:	e002      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	60fb      	str	r3, [r7, #12]
        break;
 800298a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800298c:	f7ff fa35 	bl	8001dfa <LL_RCC_PLL_GetN>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	fb03 f402 	mul.w	r4, r3, r2
 8002998:	f7ff fa46 	bl	8001e28 <LL_RCC_PLL_GetDivider>
 800299c:	4603      	mov	r3, r0
 800299e:	091b      	lsrs	r3, r3, #4
 80029a0:	3301      	adds	r3, #1
 80029a2:	fbb4 f4f3 	udiv	r4, r4, r3
 80029a6:	f7ff fa34 	bl	8001e12 <LL_RCC_PLL_GetR>
 80029aa:	4603      	mov	r3, r0
 80029ac:	0f5b      	lsrs	r3, r3, #29
 80029ae:	3301      	adds	r3, #1
 80029b0:	fbb4 f3f3 	udiv	r3, r4, r3
 80029b4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80029b6:	697b      	ldr	r3, [r7, #20]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	08006744 	.word	0x08006744
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	01e84800 	.word	0x01e84800

080029cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b598      	push	{r3, r4, r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029d0:	f7ff ff5c 	bl	800288c <HAL_RCC_GetSysClockFreq>
 80029d4:	4604      	mov	r4, r0
 80029d6:	f7ff f9b5 	bl	8001d44 <LL_RCC_GetAHBPrescaler>
 80029da:	4603      	mov	r3, r0
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd98      	pop	{r3, r4, r7, pc}
 80029f0:	080066e4 	.word	0x080066e4

080029f4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f4:	b598      	push	{r3, r4, r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029f8:	f7ff ffe8 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 80029fc:	4604      	mov	r4, r0
 80029fe:	f7ff f9b9 	bl	8001d74 <LL_RCC_GetAPB1Prescaler>
 8002a02:	4603      	mov	r3, r0
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	bd98      	pop	{r3, r4, r7, pc}
 8002a14:	08006724 	.word	0x08006724

08002a18 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a18:	b598      	push	{r3, r4, r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a1c:	f7ff ffd6 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a20:	4604      	mov	r4, r0
 8002a22:	f7ff f9b2 	bl	8001d8a <LL_RCC_GetAPB2Prescaler>
 8002a26:	4603      	mov	r3, r0
 8002a28:	0adb      	lsrs	r3, r3, #11
 8002a2a:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	bd98      	pop	{r3, r4, r7, pc}
 8002a38:	08006724 	.word	0x08006724

08002a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a3c:	b590      	push	{r4, r7, lr}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a52:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002a54:	f7ff f981 	bl	8001d5a <LL_RCC_GetAHB3Prescaler>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9c      	lsrs	r4, r3, #18
 8002a78:	f7fe ff76 	bl	8001968 <HAL_PWREx_GetVoltageRange>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4620      	mov	r0, r4
 8002a82:	f000 f80b 	bl	8002a9c <RCC_SetFlashLatency>
 8002a86:	4603      	mov	r3, r0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd90      	pop	{r4, r7, pc}
 8002a90:	08006744 	.word	0x08006744
 8002a94:	080066e4 	.word	0x080066e4
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002aa6:	4a3a      	ldr	r2, [pc, #232]	; (8002b90 <RCC_SetFlashLatency+0xf4>)
 8002aa8:	f107 0320 	add.w	r3, r7, #32
 8002aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ab0:	6018      	str	r0, [r3, #0]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002ab6:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <RCC_SetFlashLatency+0xf8>)
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac0:	6018      	str	r0, [r3, #0]
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002ac6:	4a34      	ldr	r2, [pc, #208]	; (8002b98 <RCC_SetFlashLatency+0xfc>)
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002adc:	d11b      	bne.n	8002b16 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae2:	e014      	b.n	8002b0e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	3338      	adds	r3, #56	; 0x38
 8002aea:	443b      	add	r3, r7
 8002aec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002af0:	461a      	mov	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d807      	bhi.n	8002b08 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	3338      	adds	r3, #56	; 0x38
 8002afe:	443b      	add	r3, r7
 8002b00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b06:	e021      	b.n	8002b4c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d9e7      	bls.n	8002ae4 <RCC_SetFlashLatency+0x48>
 8002b14:	e01a      	b.n	8002b4c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1a:	e014      	b.n	8002b46 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	3338      	adds	r3, #56	; 0x38
 8002b22:	443b      	add	r3, r7
 8002b24:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d807      	bhi.n	8002b40 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	3338      	adds	r3, #56	; 0x38
 8002b36:	443b      	add	r3, r7
 8002b38:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b3e:	e005      	b.n	8002b4c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	3301      	adds	r3, #1
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d9e7      	bls.n	8002b1c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <RCC_SetFlashLatency+0x100>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 0207 	bic.w	r2, r3, #7
 8002b54:	4911      	ldr	r1, [pc, #68]	; (8002b9c <RCC_SetFlashLatency+0x100>)
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b5c:	f7fe fbb6 	bl	80012cc <HAL_GetTick>
 8002b60:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b62:	e008      	b.n	8002b76 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b64:	f7fe fbb2 	bl	80012cc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e007      	b.n	8002b86 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <RCC_SetFlashLatency+0x100>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1ef      	bne.n	8002b64 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3738      	adds	r7, #56	; 0x38
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	080066c8 	.word	0x080066c8
 8002b94:	080066d0 	.word	0x080066d0
 8002b98:	080066d8 	.word	0x080066d8
 8002b9c:	58004000 	.word	0x58004000

08002ba0 <LL_RCC_LSE_IsReady>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d101      	bne.n	8002bb8 <LL_RCC_LSE_IsReady+0x18>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_RCC_LSE_IsReady+0x1a>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_SetUSARTClockSource>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	401a      	ands	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_SetI2SClockSource>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <LL_RCC_SetLPUARTClockSource>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_SetI2CClockSource>:
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	401a      	ands	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_SetLPTIMClockSource>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	0c1b      	lsrs	r3, r3, #16
 8002c92:	041b      	lsls	r3, r3, #16
 8002c94:	43db      	mvns	r3, r3
 8002c96:	401a      	ands	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_SetRNGClockSource>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_SetADCClockSource>:
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <LL_RCC_SetRTCClockSource>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_GetRTCClockSource>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <LL_RCC_ForceBackupDomainReset>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d7e:	bf00      	nop
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002d94:	2300      	movs	r3, #0
 8002d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d98:	2300      	movs	r3, #0
 8002d9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d058      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002da8:	f7fe fdc2 	bl	8001930 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dac:	f7fe fa8e 	bl	80012cc <HAL_GetTick>
 8002db0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002db2:	e009      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db4:	f7fe fa8a 	bl	80012cc <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d902      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	74fb      	strb	r3, [r7, #19]
        break;
 8002dc6:	e006      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002dc8:	4b7b      	ldr	r3, [pc, #492]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd4:	d1ee      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d13c      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002ddc:	f7ff ffa7 	bl	8002d2e <LL_RCC_GetRTCClockSource>
 8002de0:	4602      	mov	r2, r0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d00f      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df8:	f7ff ffa5 	bl	8002d46 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dfc:	f7ff ffb3 	bl	8002d66 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d014      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe fa5a 	bl	80012cc <HAL_GetTick>
 8002e18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fa56 	bl	80012cc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d902      	bls.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	74fb      	strb	r3, [r7, #19]
            break;
 8002e32:	e004      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002e34:	f7ff feb4 	bl	8002ba0 <LL_RCC_LSE_IsReady>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d1ee      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5b 	bl	8002d04 <LL_RCC_SetRTCClockSource>
 8002e4e:	e004      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
 8002e54:	e001      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d004      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fea9 	bl	8002bc2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff fe9e 	bl	8002bc2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fec0 	bl	8002c1c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fee6 	bl	8002c7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fedb 	bl	8002c7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fed0 	bl	8002c7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fea9 	bl	8002c46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fe9e 	bl	8002c46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fe93 	bl	8002c46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d011      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fe5e 	bl	8002bf2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d010      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fea5 	bl	8002cb0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d011      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fea3 	bl	8002cda <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f9c:	d107      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002fae:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	58000400 	.word	0x58000400

08002fbc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d071      	beq.n	80030b2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd ff02 	bl	8000dec <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002ff0:	4b32      	ldr	r3, [pc, #200]	; (80030bc <HAL_RTC_Init+0x100>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b10      	cmp	r3, #16
 8002ffa:	d051      	beq.n	80030a0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <HAL_RTC_Init+0x100>)
 8002ffe:	22ca      	movs	r2, #202	; 0xca
 8003000:	625a      	str	r2, [r3, #36]	; 0x24
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_RTC_Init+0x100>)
 8003004:	2253      	movs	r2, #83	; 0x53
 8003006:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fb87 	bl	800371c <RTC_EnterInitMode>
 800300e:	4603      	mov	r3, r0
 8003010:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d13f      	bne.n	8003098 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <HAL_RTC_Init+0x100>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a27      	ldr	r2, [pc, #156]	; (80030bc <HAL_RTC_Init+0x100>)
 800301e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003026:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <HAL_RTC_Init+0x100>)
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	4319      	orrs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	430b      	orrs	r3, r1
 800303c:	491f      	ldr	r1, [pc, #124]	; (80030bc <HAL_RTC_Init+0x100>)
 800303e:	4313      	orrs	r3, r2
 8003040:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	491b      	ldr	r1, [pc, #108]	; (80030bc <HAL_RTC_Init+0x100>)
 800304e:	4313      	orrs	r3, r2
 8003050:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003052:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <HAL_RTC_Init+0x100>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	430b      	orrs	r3, r1
 8003064:	4915      	ldr	r1, [pc, #84]	; (80030bc <HAL_RTC_Init+0x100>)
 8003066:	4313      	orrs	r3, r2
 8003068:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fb8a 	bl	8003784 <RTC_ExitInitMode>
 8003070:	4603      	mov	r3, r0
 8003072:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10e      	bne.n	8003098 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <HAL_RTC_Init+0x100>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a19      	ldr	r1, [r3, #32]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	4319      	orrs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	430b      	orrs	r3, r1
 8003092:	490a      	ldr	r1, [pc, #40]	; (80030bc <HAL_RTC_Init+0x100>)
 8003094:	4313      	orrs	r3, r2
 8003096:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_RTC_Init+0x100>)
 800309a:	22ff      	movs	r2, #255	; 0xff
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
 800309e:	e001      	b.n	80030a4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40002800 	.word	0x40002800

080030c0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030c0:	b590      	push	{r4, r7, lr}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_RTC_SetTime+0x1a>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e088      	b.n	80031ec <HAL_RTC_SetTime+0x12c>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030ea:	4b42      	ldr	r3, [pc, #264]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 80030ec:	22ca      	movs	r2, #202	; 0xca
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24
 80030f0:	4b40      	ldr	r3, [pc, #256]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 80030f2:	2253      	movs	r2, #83	; 0x53
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fb10 	bl	800371c <RTC_EnterInitMode>
 80030fc:	4603      	mov	r3, r0
 80030fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003100:	7cfb      	ldrb	r3, [r7, #19]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d15e      	bne.n	80031c4 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003106:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003112:	d057      	beq.n	80031c4 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d125      	bne.n	8003166 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800311a:	4b36      	ldr	r3, [pc, #216]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fb65 	bl	8003800 <RTC_ByteToBcd2>
 8003136:	4603      	mov	r3, r0
 8003138:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fb5e 	bl	8003800 <RTC_ByteToBcd2>
 8003144:	4603      	mov	r3, r0
 8003146:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003148:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	789b      	ldrb	r3, [r3, #2]
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fb56 	bl	8003800 <RTC_ByteToBcd2>
 8003154:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003156:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	78db      	ldrb	r3, [r3, #3]
 800315e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003160:	4313      	orrs	r3, r2
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e017      	b.n	8003196 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d102      	bne.n	8003178 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	785b      	ldrb	r3, [r3, #1]
 8003182:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003184:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800318a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	78db      	ldrb	r3, [r3, #3]
 8003190:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003192:	4313      	orrs	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800319e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031a2:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	68d9      	ldr	r1, [r3, #12]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	430b      	orrs	r3, r1
 80031be:	490d      	ldr	r1, [pc, #52]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fadd 	bl	8003784 <RTC_ExitInitMode>
 80031ca:	4603      	mov	r3, r0
 80031cc:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RTC_SetTime+0x134>)
 80031d0:	22ff      	movs	r2, #255	; 0xff
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d103      	bne.n	80031e2 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80031ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd90      	pop	{r4, r7, pc}
 80031f4:	40002800 	.word	0x40002800

080031f8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003204:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <HAL_RTC_GetTime+0xc0>)
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800320c:	4b2a      	ldr	r3, [pc, #168]	; (80032b8 <HAL_RTC_GetTime+0xc0>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d049      	beq.n	80032ae <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_RTC_GetTime+0xc0>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RTC_GetTime+0xc0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800322e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003232:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800324e:	b2da      	uxtb	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	0d9b      	lsrs	r3, r3, #22
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d11a      	bne.n	80032ae <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fade 	bl	800383e <RTC_Bcd2ToByte>
 8003282:	4603      	mov	r3, r0
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	785b      	ldrb	r3, [r3, #1]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fad5 	bl	800383e <RTC_Bcd2ToByte>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	789b      	ldrb	r3, [r3, #2]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 facc 	bl	800383e <RTC_Bcd2ToByte>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40002800 	.word	0x40002800

080032bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_RTC_SetDate+0x1a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e071      	b.n	80033ba <HAL_RTC_SetDate+0xfe>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10e      	bne.n	800330a <HAL_RTC_SetDate+0x4e>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	785b      	ldrb	r3, [r3, #1]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	785b      	ldrb	r3, [r3, #1]
 80032fc:	f023 0310 	bic.w	r3, r3, #16
 8003300:	b2db      	uxtb	r3, r3
 8003302:	330a      	adds	r3, #10
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d11c      	bne.n	800334a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	78db      	ldrb	r3, [r3, #3]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fa73 	bl	8003800 <RTC_ByteToBcd2>
 800331a:	4603      	mov	r3, r0
 800331c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	785b      	ldrb	r3, [r3, #1]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fa6c 	bl	8003800 <RTC_ByteToBcd2>
 8003328:	4603      	mov	r3, r0
 800332a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800332c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	789b      	ldrb	r3, [r3, #2]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fa64 	bl	8003800 <RTC_ByteToBcd2>
 8003338:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800333a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e00e      	b.n	8003368 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	78db      	ldrb	r3, [r3, #3]
 800334e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003356:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800335c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_RTC_SetDate+0x108>)
 800336a:	22ca      	movs	r2, #202	; 0xca
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_RTC_SetDate+0x108>)
 8003370:	2253      	movs	r2, #83	; 0x53
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f9d1 	bl	800371c <RTC_EnterInitMode>
 800337a:	4603      	mov	r3, r0
 800337c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003384:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <HAL_RTC_SetDate+0x108>)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800338c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003390:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f9f6 	bl	8003784 <RTC_ExitInitMode>
 8003398:	4603      	mov	r3, r0
 800339a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_RTC_SetDate+0x108>)
 800339e:	22ff      	movs	r2, #255	; 0xff
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d103      	bne.n	80033b0 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd90      	pop	{r4, r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40002800 	.word	0x40002800

080033c8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80033d4:	4b22      	ldr	r3, [pc, #136]	; (8003460 <HAL_RTC_GetDate+0x98>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0b5b      	lsrs	r3, r3, #13
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11a      	bne.n	8003456 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	78db      	ldrb	r3, [r3, #3]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fa0a 	bl	800383e <RTC_Bcd2ToByte>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	785b      	ldrb	r3, [r3, #1]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 fa01 	bl	800383e <RTC_Bcd2ToByte>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	789b      	ldrb	r3, [r3, #2]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 f9f8 	bl	800383e <RTC_Bcd2ToByte>
 800344e:	4603      	mov	r3, r0
 8003450:	461a      	mov	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40002800 	.word	0x40002800

08003464 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_RTC_SetAlarm_IT+0x1e>
 800347e:	2302      	movs	r3, #2
 8003480:	e0f3      	b.n	800366a <HAL_RTC_SetAlarm_IT+0x206>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2202      	movs	r2, #2
 800348e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003492:	4b78      	ldr	r3, [pc, #480]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a2:	d06a      	beq.n	800357a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d13a      	bne.n	8003520 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80034aa:	4b72      	ldr	r3, [pc, #456]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2200      	movs	r2, #0
 80034ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f999 	bl	8003800 <RTC_ByteToBcd2>
 80034ce:	4603      	mov	r3, r0
 80034d0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	785b      	ldrb	r3, [r3, #1]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f992 	bl	8003800 <RTC_ByteToBcd2>
 80034dc:	4603      	mov	r3, r0
 80034de:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80034e0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	789b      	ldrb	r3, [r3, #2]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f98a 	bl	8003800 <RTC_ByteToBcd2>
 80034ec:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80034ee:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	78db      	ldrb	r3, [r3, #3]
 80034f6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80034f8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f97c 	bl	8003800 <RTC_ByteToBcd2>
 8003508:	4603      	mov	r3, r0
 800350a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800350c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003514:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	e02c      	b.n	800357a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003528:	d00d      	beq.n	8003546 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003532:	d008      	beq.n	8003546 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003534:	4b4f      	ldr	r3, [pc, #316]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d102      	bne.n	8003546 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003552:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003558:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	78db      	ldrb	r3, [r3, #3]
 800355e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003560:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003568:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800356a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003570:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800357a:	4b3e      	ldr	r3, [pc, #248]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 800357c:	22ca      	movs	r2, #202	; 0xca
 800357e:	625a      	str	r2, [r3, #36]	; 0x24
 8003580:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003582:	2253      	movs	r2, #83	; 0x53
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358e:	d12c      	bne.n	80035ea <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003590:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	4a37      	ldr	r2, [pc, #220]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003596:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800359a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 800359e:	2201      	movs	r2, #1
 80035a0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a8:	d107      	bne.n	80035ba <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4930      	ldr	r1, [pc, #192]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	644b      	str	r3, [r1, #68]	; 0x44
 80035b8:	e006      	b.n	80035c8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80035ba:	4a2e      	ldr	r2, [pc, #184]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80035c0:	4a2c      	ldr	r2, [pc, #176]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80035c8:	4a2a      	ldr	r2, [pc, #168]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4a24      	ldr	r2, [pc, #144]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035e2:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80035e6:	6193      	str	r3, [r2, #24]
 80035e8:	e02b      	b.n	8003642 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	4a21      	ldr	r2, [pc, #132]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035f0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80035f4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80035f6:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 80035f8:	2202      	movs	r2, #2
 80035fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003602:	d107      	bne.n	8003614 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	4919      	ldr	r1, [pc, #100]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 800360e:	4313      	orrs	r3, r2
 8003610:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003612:	e006      	b.n	8003622 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003614:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800361a:	4a16      	ldr	r2, [pc, #88]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f043 0202 	orr.w	r2, r3, #2
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	4a0e      	ldr	r2, [pc, #56]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 800363c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003640:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RTC_SetAlarm_IT+0x214>)
 8003644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003648:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <HAL_RTC_SetAlarm_IT+0x214>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <HAL_RTC_SetAlarm_IT+0x210>)
 8003654:	22ff      	movs	r2, #255	; 0xff
 8003656:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bd90      	pop	{r4, r7, pc}
 8003672:	bf00      	nop
 8003674:	40002800 	.word	0x40002800
 8003678:	58000800 	.word	0x58000800

0800367c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <HAL_RTC_AlarmIRQHandler+0x50>)
 8003686:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4013      	ands	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <HAL_RTC_AlarmIRQHandler+0x50>)
 800369c:	2201      	movs	r2, #1
 800369e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7fc fffd 	bl	80006a0 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_RTC_AlarmIRQHandler+0x50>)
 80036b2:	2202      	movs	r2, #2
 80036b4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8dc 	bl	8003874 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40002800 	.word	0x40002800

080036d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80036d8:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <HAL_RTC_WaitForSynchro+0x48>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <HAL_RTC_WaitForSynchro+0x48>)
 80036de:	f023 0320 	bic.w	r3, r3, #32
 80036e2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80036e4:	f7fd fdf2 	bl	80012cc <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80036ea:	e009      	b.n	8003700 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036ec:	f7fd fdee 	bl	80012cc <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036fa:	d901      	bls.n	8003700 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e006      	b.n	800370e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <HAL_RTC_WaitForSynchro+0x48>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ef      	beq.n	80036ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40002800 	.word	0x40002800

0800371c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <RTC_EnterInitMode+0x64>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d120      	bne.n	8003776 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003734:	4b12      	ldr	r3, [pc, #72]	; (8003780 <RTC_EnterInitMode+0x64>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <RTC_EnterInitMode+0x64>)
 800373a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003740:	f7fd fdc4 	bl	80012cc <HAL_GetTick>
 8003744:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003746:	e00d      	b.n	8003764 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003748:	f7fd fdc0 	bl	80012cc <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003756:	d905      	bls.n	8003764 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2203      	movs	r2, #3
 8003760:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <RTC_EnterInitMode+0x64>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d102      	bne.n	8003776 <RTC_EnterInitMode+0x5a>
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d1e8      	bne.n	8003748 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003776:	7bfb      	ldrb	r3, [r7, #15]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40002800 	.word	0x40002800

08003784 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <RTC_ExitInitMode+0x78>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a19      	ldr	r2, [pc, #100]	; (80037fc <RTC_ExitInitMode+0x78>)
 8003796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <RTC_ExitInitMode+0x78>)
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10c      	bne.n	80037c2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff ff91 	bl	80036d0 <HAL_RTC_WaitForSynchro>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01e      	beq.n	80037f2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2203      	movs	r2, #3
 80037b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	73fb      	strb	r3, [r7, #15]
 80037c0:	e017      	b.n	80037f2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <RTC_ExitInitMode+0x78>)
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <RTC_ExitInitMode+0x78>)
 80037c8:	f023 0320 	bic.w	r3, r3, #32
 80037cc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ff7e 	bl	80036d0 <HAL_RTC_WaitForSynchro>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2203      	movs	r2, #3
 80037de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <RTC_ExitInitMode+0x78>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <RTC_ExitInitMode+0x78>)
 80037ec:	f043 0320 	orr.w	r3, r3, #32
 80037f0:	6193      	str	r3, [r2, #24]
  }

  return status;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40002800 	.word	0x40002800

08003800 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003812:	e005      	b.n	8003820 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800381a:	7afb      	ldrb	r3, [r7, #11]
 800381c:	3b0a      	subs	r3, #10
 800381e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003820:	7afb      	ldrb	r3, [r7, #11]
 8003822:	2b09      	cmp	r3, #9
 8003824:	d8f6      	bhi.n	8003814 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	b2da      	uxtb	r2, r3
 800382e:	7afb      	ldrb	r3, [r7, #11]
 8003830:	4313      	orrs	r3, r2
 8003832:	b2db      	uxtb	r3, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003848:	79fb      	ldrb	r3, [r7, #7]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	b2db      	uxtb	r3, r3
 8003866:	4413      	add	r3, r2
 8003868:	b2db      	uxtb	r3, r3
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <LL_RCC_GetUSARTClockSource>:
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800388e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003892:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	401a      	ands	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	4313      	orrs	r3, r2
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <LL_RCC_GetLPUARTClockSource>:
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80038b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4013      	ands	r3, r2
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e042      	b.n	8003960 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fd fab1 	bl	8000e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2224      	movs	r2, #36	; 0x24
 80038f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fc3c 	bl	8004188 <UART_SetConfig>
 8003910:	4603      	mov	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e022      	b.n	8003960 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fea4 	bl	8004670 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 ff2a 	bl	80047b2 <UART_CheckIdleState>
 800395e:	4603      	mov	r3, r0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003968:	b480      	push	{r7}
 800396a:	b091      	sub	sp, #68	; 0x44
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	4613      	mov	r3, r2
 8003974:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	2b20      	cmp	r3, #32
 800397e:	d178      	bne.n	8003a72 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Transmit_IT+0x24>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e071      	b.n	8003a74 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2221      	movs	r2, #33	; 0x21
 80039b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c4:	d12a      	bne.n	8003a1c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ce:	d107      	bne.n	80039e0 <HAL_UART_Transmit_IT+0x78>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d103      	bne.n	80039e0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4a29      	ldr	r2, [pc, #164]	; (8003a80 <HAL_UART_Transmit_IT+0x118>)
 80039dc:	679a      	str	r2, [r3, #120]	; 0x78
 80039de:	e002      	b.n	80039e6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a28      	ldr	r2, [pc, #160]	; (8003a84 <HAL_UART_Transmit_IT+0x11c>)
 80039e4:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3308      	adds	r3, #8
 80039ec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	e853 3f00 	ldrex	r3, [r3]
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3308      	adds	r3, #8
 8003a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a06:	637a      	str	r2, [r7, #52]	; 0x34
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e5      	bne.n	80039e6 <HAL_UART_Transmit_IT+0x7e>
 8003a1a:	e028      	b.n	8003a6e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a24:	d107      	bne.n	8003a36 <HAL_UART_Transmit_IT+0xce>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_UART_Transmit_IT+0x120>)
 8003a32:	679a      	str	r2, [r3, #120]	; 0x78
 8003a34:	e002      	b.n	8003a3c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a14      	ldr	r2, [pc, #80]	; (8003a8c <HAL_UART_Transmit_IT+0x124>)
 8003a3a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	613b      	str	r3, [r7, #16]
   return(result);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5a:	623b      	str	r3, [r7, #32]
 8003a5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	69f9      	ldr	r1, [r7, #28]
 8003a60:	6a3a      	ldr	r2, [r7, #32]
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3744      	adds	r7, #68	; 0x44
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	08004f6b 	.word	0x08004f6b
 8003a84:	08004e8d 	.word	0x08004e8d
 8003a88:	08004dcd 	.word	0x08004dcd
 8003a8c:	08004d17 	.word	0x08004d17

08003a90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d137      	bne.n	8003b18 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Receive_IT+0x24>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e030      	b.n	8003b1a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_UART_Receive_IT+0x94>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d01f      	beq.n	8003b08 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d018      	beq.n	8003b08 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	461a      	mov	r2, r3
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	623b      	str	r3, [r7, #32]
 8003af6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69f9      	ldr	r1, [r7, #28]
 8003afa:	6a3a      	ldr	r2, [r7, #32]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e6      	bne.n	8003ad6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 ff66 	bl	80049e0 <UART_Start_Receive_IT>
 8003b14:	4603      	mov	r3, r0
 8003b16:	e000      	b.n	8003b1a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3728      	adds	r7, #40	; 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40008000 	.word	0x40008000

08003b28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b0ba      	sub	sp, #232	; 0xe8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b52:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b56:	4013      	ands	r3, r2
 8003b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d11b      	bne.n	8003b9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 82e3 	beq.w	8004158 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4798      	blx	r3
      }
      return;
 8003b9a:	e2dd      	b.n	8004158 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8123 	beq.w	8003dec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ba6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003baa:	4b8d      	ldr	r3, [pc, #564]	; (8003de0 <HAL_UART_IRQHandler+0x2b8>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003bb6:	4b8b      	ldr	r3, [pc, #556]	; (8003de4 <HAL_UART_IRQHandler+0x2bc>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8116 	beq.w	8003dec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d011      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xc8>
 8003bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d011      	beq.n	8003c20 <HAL_UART_IRQHandler+0xf8>
 8003bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d011      	beq.n	8003c50 <HAL_UART_IRQHandler+0x128>
 8003c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c46:	f043 0202 	orr.w	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d017      	beq.n	8003c8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c60:	f003 0320 	and.w	r3, r3, #32
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003c6c:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <HAL_UART_IRQHandler+0x2b8>)
 8003c6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f043 0208 	orr.w	r2, r3, #8
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d012      	beq.n	8003cbe <HAL_UART_IRQHandler+0x196>
 8003c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00c      	beq.n	8003cbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8249 	beq.w	800415c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b40      	cmp	r3, #64	; 0x40
 8003d14:	d005      	beq.n	8003d22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d054      	beq.n	8003dcc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 ff7c 	bl	8004c20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d146      	bne.n	8003dc4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1d9      	bne.n	8003d36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d92:	4a15      	ldr	r2, [pc, #84]	; (8003de8 <HAL_UART_IRQHandler+0x2c0>)
 8003d94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fd fc08 	bl	80015b2 <HAL_DMA_Abort_IT>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d019      	beq.n	8003ddc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003db6:	4610      	mov	r0, r2
 8003db8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dba:	e00f      	b.n	8003ddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fc fc27 	bl	8000610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc2:	e00b      	b.n	8003ddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7fc fc23 	bl	8000610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dca:	e007      	b.n	8003ddc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fc fc1f 	bl	8000610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003dda:	e1bf      	b.n	800415c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	bf00      	nop
    return;
 8003dde:	e1bd      	b.n	800415c <HAL_UART_IRQHandler+0x634>
 8003de0:	10000001 	.word	0x10000001
 8003de4:	04000120 	.word	0x04000120
 8003de8:	08004ceb 	.word	0x08004ceb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 8153 	bne.w	800409c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dfa:	f003 0310 	and.w	r3, r3, #16
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 814c 	beq.w	800409c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8145 	beq.w	800409c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2210      	movs	r2, #16
 8003e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b40      	cmp	r3, #64	; 0x40
 8003e26:	f040 80bb 	bne.w	8003fa0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 818f 	beq.w	8004160 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	f080 8187 	bcs.w	8004160 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 8087 	bne.w	8003f7e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e7c:	e853 3f00 	ldrex	r3, [r3]
 8003e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1da      	bne.n	8003e70 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e1      	bne.n	8003eba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e3      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f44:	e853 3f00 	ldrex	r3, [r3]
 8003f48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4c:	f023 0310 	bic.w	r3, r3, #16
 8003f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e4      	bne.n	8003f3c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fabc 	bl	80014f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f8e9 	bl	8004170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f9e:	e0df      	b.n	8004160 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80d1 	beq.w	8004164 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003fc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80cc 	beq.w	8004164 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ff4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e4      	bne.n	8003fcc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	623b      	str	r3, [r7, #32]
   return(result);
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3308      	adds	r3, #8
 8004026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800402a:	633a      	str	r2, [r7, #48]	; 0x30
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e1      	bne.n	8004002 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0310 	bic.w	r3, r3, #16
 8004066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	69b9      	ldr	r1, [r7, #24]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	e841 2300 	strex	r3, r2, [r1]
 8004080:	617b      	str	r3, [r7, #20]
   return(result);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e4      	bne.n	8004052 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800408e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004092:	4619      	mov	r1, r3
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f86b 	bl	8004170 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800409a:	e063      	b.n	8004164 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800409c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <HAL_UART_IRQHandler+0x59e>
 80040a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80040bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f001 fd0e 	bl	8005ae0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040c4:	e051      	b.n	800416a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d014      	beq.n	80040fc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d105      	bne.n	80040ea <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d03a      	beq.n	8004168 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4798      	blx	r3
    }
    return;
 80040fa:	e035      	b.n	8004168 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d009      	beq.n	800411c <HAL_UART_IRQHandler+0x5f4>
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 ff9c 	bl	8005052 <UART_EndTransmit_IT>
    return;
 800411a:	e026      	b.n	800416a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <HAL_UART_IRQHandler+0x614>
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f001 fce5 	bl	8005b04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800413a:	e016      	b.n	800416a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d010      	beq.n	800416a <HAL_UART_IRQHandler+0x642>
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800414c:	2b00      	cmp	r3, #0
 800414e:	da0c      	bge.n	800416a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f001 fcce 	bl	8005af2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004156:	e008      	b.n	800416a <HAL_UART_IRQHandler+0x642>
      return;
 8004158:	bf00      	nop
 800415a:	e006      	b.n	800416a <HAL_UART_IRQHandler+0x642>
    return;
 800415c:	bf00      	nop
 800415e:	e004      	b.n	800416a <HAL_UART_IRQHandler+0x642>
      return;
 8004160:	bf00      	nop
 8004162:	e002      	b.n	800416a <HAL_UART_IRQHandler+0x642>
      return;
 8004164:	bf00      	nop
 8004166:	e000      	b.n	800416a <HAL_UART_IRQHandler+0x642>
    return;
 8004168:	bf00      	nop
  }
}
 800416a:	37e8      	adds	r7, #232	; 0xe8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bc80      	pop	{r7}
 8004184:	4770      	bx	lr
	...

08004188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800418c:	b08c      	sub	sp, #48	; 0x30
 800418e:	af00      	add	r7, sp, #0
 8004190:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b94      	ldr	r3, [pc, #592]	; (8004408 <UART_SetConfig+0x280>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a89      	ldr	r2, [pc, #548]	; (800440c <UART_SetConfig+0x284>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f0:	4313      	orrs	r3, r2
 80041f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80041fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004208:	430b      	orrs	r3, r1
 800420a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	f023 010f 	bic.w	r1, r3, #15
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7a      	ldr	r2, [pc, #488]	; (8004410 <UART_SetConfig+0x288>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d127      	bne.n	800427c <UART_SetConfig+0xf4>
 800422c:	2003      	movs	r0, #3
 800422e:	f7ff fb2a 	bl	8003886 <LL_RCC_GetUSARTClockSource>
 8004232:	4603      	mov	r3, r0
 8004234:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004238:	2b03      	cmp	r3, #3
 800423a:	d81b      	bhi.n	8004274 <UART_SetConfig+0xec>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0xbc>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004255 	.word	0x08004255
 8004248:	08004265 	.word	0x08004265
 800424c:	0800425d 	.word	0x0800425d
 8004250:	0800426d 	.word	0x0800426d
 8004254:	2301      	movs	r3, #1
 8004256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425a:	e080      	b.n	800435e <UART_SetConfig+0x1d6>
 800425c:	2302      	movs	r3, #2
 800425e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004262:	e07c      	b.n	800435e <UART_SetConfig+0x1d6>
 8004264:	2304      	movs	r3, #4
 8004266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426a:	e078      	b.n	800435e <UART_SetConfig+0x1d6>
 800426c:	2308      	movs	r3, #8
 800426e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004272:	e074      	b.n	800435e <UART_SetConfig+0x1d6>
 8004274:	2310      	movs	r3, #16
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427a:	e070      	b.n	800435e <UART_SetConfig+0x1d6>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a64      	ldr	r2, [pc, #400]	; (8004414 <UART_SetConfig+0x28c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d138      	bne.n	80042f8 <UART_SetConfig+0x170>
 8004286:	200c      	movs	r0, #12
 8004288:	f7ff fafd 	bl	8003886 <LL_RCC_GetUSARTClockSource>
 800428c:	4603      	mov	r3, r0
 800428e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004292:	2b0c      	cmp	r3, #12
 8004294:	d82c      	bhi.n	80042f0 <UART_SetConfig+0x168>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <UART_SetConfig+0x114>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042d1 	.word	0x080042d1
 80042a0:	080042f1 	.word	0x080042f1
 80042a4:	080042f1 	.word	0x080042f1
 80042a8:	080042f1 	.word	0x080042f1
 80042ac:	080042e1 	.word	0x080042e1
 80042b0:	080042f1 	.word	0x080042f1
 80042b4:	080042f1 	.word	0x080042f1
 80042b8:	080042f1 	.word	0x080042f1
 80042bc:	080042d9 	.word	0x080042d9
 80042c0:	080042f1 	.word	0x080042f1
 80042c4:	080042f1 	.word	0x080042f1
 80042c8:	080042f1 	.word	0x080042f1
 80042cc:	080042e9 	.word	0x080042e9
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d6:	e042      	b.n	800435e <UART_SetConfig+0x1d6>
 80042d8:	2302      	movs	r3, #2
 80042da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042de:	e03e      	b.n	800435e <UART_SetConfig+0x1d6>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042e6:	e03a      	b.n	800435e <UART_SetConfig+0x1d6>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ee:	e036      	b.n	800435e <UART_SetConfig+0x1d6>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042f6:	e032      	b.n	800435e <UART_SetConfig+0x1d6>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a43      	ldr	r2, [pc, #268]	; (800440c <UART_SetConfig+0x284>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d12a      	bne.n	8004358 <UART_SetConfig+0x1d0>
 8004302:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004306:	f7ff fad0 	bl	80038aa <LL_RCC_GetLPUARTClockSource>
 800430a:	4603      	mov	r3, r0
 800430c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004310:	d01a      	beq.n	8004348 <UART_SetConfig+0x1c0>
 8004312:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004316:	d81b      	bhi.n	8004350 <UART_SetConfig+0x1c8>
 8004318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431c:	d00c      	beq.n	8004338 <UART_SetConfig+0x1b0>
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004322:	d815      	bhi.n	8004350 <UART_SetConfig+0x1c8>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d003      	beq.n	8004330 <UART_SetConfig+0x1a8>
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432c:	d008      	beq.n	8004340 <UART_SetConfig+0x1b8>
 800432e:	e00f      	b.n	8004350 <UART_SetConfig+0x1c8>
 8004330:	2300      	movs	r3, #0
 8004332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004336:	e012      	b.n	800435e <UART_SetConfig+0x1d6>
 8004338:	2302      	movs	r3, #2
 800433a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800433e:	e00e      	b.n	800435e <UART_SetConfig+0x1d6>
 8004340:	2304      	movs	r3, #4
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004346:	e00a      	b.n	800435e <UART_SetConfig+0x1d6>
 8004348:	2308      	movs	r3, #8
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800434e:	e006      	b.n	800435e <UART_SetConfig+0x1d6>
 8004350:	2310      	movs	r3, #16
 8004352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004356:	e002      	b.n	800435e <UART_SetConfig+0x1d6>
 8004358:	2310      	movs	r3, #16
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2a      	ldr	r2, [pc, #168]	; (800440c <UART_SetConfig+0x284>)
 8004364:	4293      	cmp	r3, r2
 8004366:	f040 80a4 	bne.w	80044b2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800436a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800436e:	2b08      	cmp	r3, #8
 8004370:	d823      	bhi.n	80043ba <UART_SetConfig+0x232>
 8004372:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0x1f0>)
 8004374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043bb 	.word	0x080043bb
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043ab 	.word	0x080043ab
 800438c:	080043bb 	.word	0x080043bb
 8004390:	080043bb 	.word	0x080043bb
 8004394:	080043bb 	.word	0x080043bb
 8004398:	080043b3 	.word	0x080043b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800439c:	f7fe fb2a 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043a2:	e010      	b.n	80043c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a4:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <UART_SetConfig+0x290>)
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043a8:	e00d      	b.n	80043c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043aa:	f7fe fa6f 	bl	800288c <HAL_RCC_GetSysClockFreq>
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043b0:	e009      	b.n	80043c6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043b8:	e005      	b.n	80043c6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8137 	beq.w	800463c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	4a12      	ldr	r2, [pc, #72]	; (800441c <UART_SetConfig+0x294>)
 80043d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043d8:	461a      	mov	r2, r3
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d305      	bcc.n	80043fe <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d910      	bls.n	8004420 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004404:	e11a      	b.n	800463c <UART_SetConfig+0x4b4>
 8004406:	bf00      	nop
 8004408:	cfff69f3 	.word	0xcfff69f3
 800440c:	40008000 	.word	0x40008000
 8004410:	40013800 	.word	0x40013800
 8004414:	40004400 	.word	0x40004400
 8004418:	00f42400 	.word	0x00f42400
 800441c:	08006784 	.word	0x08006784
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	2200      	movs	r2, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	4a8e      	ldr	r2, [pc, #568]	; (8004668 <UART_SetConfig+0x4e0>)
 800442e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004432:	b29b      	uxth	r3, r3
 8004434:	2200      	movs	r2, #0
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004442:	f7fb feed 	bl	8000220 <__aeabi_uldivmod>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	020b      	lsls	r3, r1, #8
 8004458:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800445c:	0202      	lsls	r2, r0, #8
 800445e:	6979      	ldr	r1, [r7, #20]
 8004460:	6849      	ldr	r1, [r1, #4]
 8004462:	0849      	lsrs	r1, r1, #1
 8004464:	2000      	movs	r0, #0
 8004466:	460c      	mov	r4, r1
 8004468:	4605      	mov	r5, r0
 800446a:	eb12 0804 	adds.w	r8, r2, r4
 800446e:	eb43 0905 	adc.w	r9, r3, r5
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	469a      	mov	sl, r3
 800447a:	4693      	mov	fp, r2
 800447c:	4652      	mov	r2, sl
 800447e:	465b      	mov	r3, fp
 8004480:	4640      	mov	r0, r8
 8004482:	4649      	mov	r1, r9
 8004484:	f7fb fecc 	bl	8000220 <__aeabi_uldivmod>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4613      	mov	r3, r2
 800448e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004496:	d308      	bcc.n	80044aa <UART_SetConfig+0x322>
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800449e:	d204      	bcs.n	80044aa <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	60da      	str	r2, [r3, #12]
 80044a8:	e0c8      	b.n	800463c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044b0:	e0c4      	b.n	800463c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ba:	d167      	bne.n	800458c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80044bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d828      	bhi.n	8004516 <UART_SetConfig+0x38e>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x344>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	08004501 	.word	0x08004501
 80044d8:	08004517 	.word	0x08004517
 80044dc:	08004507 	.word	0x08004507
 80044e0:	08004517 	.word	0x08004517
 80044e4:	08004517 	.word	0x08004517
 80044e8:	08004517 	.word	0x08004517
 80044ec:	0800450f 	.word	0x0800450f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7fe fa80 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044f6:	e014      	b.n	8004522 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f8:	f7fe fa8e 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 80044fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044fe:	e010      	b.n	8004522 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004500:	4b5a      	ldr	r3, [pc, #360]	; (800466c <UART_SetConfig+0x4e4>)
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004504:	e00d      	b.n	8004522 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004506:	f7fe f9c1 	bl	800288c <HAL_RCC_GetSysClockFreq>
 800450a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800450c:	e009      	b.n	8004522 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004512:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004514:	e005      	b.n	8004522 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004520:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8089 	beq.w	800463c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	4a4e      	ldr	r2, [pc, #312]	; (8004668 <UART_SetConfig+0x4e0>)
 8004530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004534:	461a      	mov	r2, r3
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	fbb3 f3f2 	udiv	r3, r3, r2
 800453c:	005a      	lsls	r2, r3, #1
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	441a      	add	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d916      	bls.n	8004584 <UART_SetConfig+0x3fc>
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d212      	bcs.n	8004584 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f023 030f 	bic.w	r3, r3, #15
 8004566:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	b29b      	uxth	r3, r3
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	b29a      	uxth	r2, r3
 8004574:	8bfb      	ldrh	r3, [r7, #30]
 8004576:	4313      	orrs	r3, r2
 8004578:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	8bfa      	ldrh	r2, [r7, #30]
 8004580:	60da      	str	r2, [r3, #12]
 8004582:	e05b      	b.n	800463c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800458a:	e057      	b.n	800463c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800458c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004590:	2b08      	cmp	r3, #8
 8004592:	d828      	bhi.n	80045e6 <UART_SetConfig+0x45e>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x414>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d7 	.word	0x080045d7
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045e7 	.word	0x080045e7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fe fa18 	bl	80029f4 <HAL_RCC_GetPCLK1Freq>
 80045c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045c6:	e014      	b.n	80045f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c8:	f7fe fa26 	bl	8002a18 <HAL_RCC_GetPCLK2Freq>
 80045cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b26      	ldr	r3, [pc, #152]	; (800466c <UART_SetConfig+0x4e4>)
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fe f959 	bl	800288c <HAL_RCC_GetSysClockFreq>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80045f0:	bf00      	nop
    }

    if (pclk != 0U)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d021      	beq.n	800463c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	4a1a      	ldr	r2, [pc, #104]	; (8004668 <UART_SetConfig+0x4e0>)
 80045fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004602:	461a      	mov	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	fbb3 f2f2 	udiv	r2, r3, r2
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	441a      	add	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	fbb2 f3f3 	udiv	r3, r2, r3
 800461a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	2b0f      	cmp	r3, #15
 8004620:	d909      	bls.n	8004636 <UART_SetConfig+0x4ae>
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d205      	bcs.n	8004636 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	b29a      	uxth	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60da      	str	r2, [r3, #12]
 8004634:	e002      	b.n	800463c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2201      	movs	r2, #1
 8004640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2201      	movs	r2, #1
 8004648:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2200      	movs	r2, #0
 8004650:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2200      	movs	r2, #0
 8004656:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004658:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800465c:	4618      	mov	r0, r3
 800465e:	3730      	adds	r7, #48	; 0x30
 8004660:	46bd      	mov	sp, r7
 8004662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004666:	bf00      	nop
 8004668:	08006784 	.word	0x08006784
 800466c:	00f42400 	.word	0x00f42400

08004670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01a      	beq.n	8004786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476e:	d10a      	bne.n	8004786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]
  }
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af02      	add	r7, sp, #8
 80047b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047c2:	f7fc fd83 	bl	80012cc <HAL_GetTick>
 80047c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d10e      	bne.n	80047f4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f832 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e028      	b.n	8004846 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d10e      	bne.n	8004820 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004802:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f81c 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e012      	b.n	8004846 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b09c      	sub	sp, #112	; 0x70
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	e0a9      	b.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004866:	f000 80a5 	beq.w	80049b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fc fd2f 	bl	80012cc <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <UART_WaitOnFlagUntilTimeout+0x32>
 800487a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800487c:	2b00      	cmp	r3, #0
 800487e:	d140      	bne.n	8004902 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004890:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004894:	667b      	str	r3, [r7, #100]	; 0x64
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800489e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e6      	bne.n	8004880 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	663b      	str	r3, [r7, #96]	; 0x60
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3308      	adds	r3, #8
 80048d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80048d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e069      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d051      	beq.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491e:	d149      	bne.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004928:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800493e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004948:	637b      	str	r3, [r7, #52]	; 0x34
 800494a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800494e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e6      	bne.n	800492a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	e853 3f00 	ldrex	r3, [r3]
 800496a:	613b      	str	r3, [r7, #16]
   return(result);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f023 0301 	bic.w	r3, r3, #1
 8004972:	66bb      	str	r3, [r7, #104]	; 0x68
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800497c:	623a      	str	r2, [r7, #32]
 800497e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	69f9      	ldr	r1, [r7, #28]
 8004982:	6a3a      	ldr	r2, [r7, #32]
 8004984:	e841 2300 	strex	r3, r2, [r1]
 8004988:	61bb      	str	r3, [r7, #24]
   return(result);
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1e5      	bne.n	800495c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e010      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	69da      	ldr	r2, [r3, #28]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	461a      	mov	r2, r3
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	f43f af46 	beq.w	8004860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3770      	adds	r7, #112	; 0x70
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b0a3      	sub	sp, #140	; 0x8c
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	88fa      	ldrh	r2, [r7, #6]
 80049f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	d10e      	bne.n	8004a32 <UART_Start_Receive_IT+0x52>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d105      	bne.n	8004a28 <UART_Start_Receive_IT+0x48>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004a22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a26:	e02d      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	22ff      	movs	r2, #255	; 0xff
 8004a2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a30:	e028      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10d      	bne.n	8004a56 <UART_Start_Receive_IT+0x76>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d104      	bne.n	8004a4c <UART_Start_Receive_IT+0x6c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	22ff      	movs	r2, #255	; 0xff
 8004a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a4a:	e01b      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	227f      	movs	r2, #127	; 0x7f
 8004a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a54:	e016      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a5e:	d10d      	bne.n	8004a7c <UART_Start_Receive_IT+0x9c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <UART_Start_Receive_IT+0x92>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	227f      	movs	r2, #127	; 0x7f
 8004a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a70:	e008      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	223f      	movs	r2, #63	; 0x3f
 8004a76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004a7a:	e003      	b.n	8004a84 <UART_Start_Receive_IT+0xa4>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2222      	movs	r2, #34	; 0x22
 8004a90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa6:	f043 0301 	orr.w	r3, r3, #1
 8004aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004ab8:	673a      	str	r2, [r7, #112]	; 0x70
 8004aba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004abe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004ac6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e3      	bne.n	8004a94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ad4:	d14f      	bne.n	8004b76 <UART_Start_Receive_IT+0x196>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d349      	bcc.n	8004b76 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aea:	d107      	bne.n	8004afc <UART_Start_Receive_IT+0x11c>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d103      	bne.n	8004afc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a46      	ldr	r2, [pc, #280]	; (8004c10 <UART_Start_Receive_IT+0x230>)
 8004af8:	675a      	str	r2, [r3, #116]	; 0x74
 8004afa:	e002      	b.n	8004b02 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a45      	ldr	r2, [pc, #276]	; (8004c14 <UART_Start_Receive_IT+0x234>)
 8004b00:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01a      	beq.n	8004b40 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b2e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b34:	e841 2300 	strex	r3, r2, [r1]
 8004b38:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e4      	bne.n	8004b0a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3308      	adds	r3, #8
 8004b46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004b60:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e5      	bne.n	8004b40 <UART_Start_Receive_IT+0x160>
 8004b74:	e046      	b.n	8004c04 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7e:	d107      	bne.n	8004b90 <UART_Start_Receive_IT+0x1b0>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d103      	bne.n	8004b90 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a23      	ldr	r2, [pc, #140]	; (8004c18 <UART_Start_Receive_IT+0x238>)
 8004b8c:	675a      	str	r2, [r3, #116]	; 0x74
 8004b8e:	e002      	b.n	8004b96 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4a22      	ldr	r2, [pc, #136]	; (8004c1c <UART_Start_Receive_IT+0x23c>)
 8004b94:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d019      	beq.n	8004bd2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004bb2:	677b      	str	r3, [r7, #116]	; 0x74
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e6      	bne.n	8004b9e <UART_Start_Receive_IT+0x1be>
 8004bd0:	e018      	b.n	8004c04 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	613b      	str	r3, [r7, #16]
   return(result);
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f043 0320 	orr.w	r3, r3, #32
 8004be6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bf0:	623b      	str	r3, [r7, #32]
 8004bf2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	69f9      	ldr	r1, [r7, #28]
 8004bf6:	6a3a      	ldr	r2, [r7, #32]
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	378c      	adds	r7, #140	; 0x8c
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	08005779 	.word	0x08005779
 8004c14:	08005419 	.word	0x08005419
 8004c18:	08005261 	.word	0x08005261
 8004c1c:	080050a9 	.word	0x080050a9

08004c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b095      	sub	sp, #84	; 0x54
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
 8004c48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e6      	bne.n	8004c28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3308      	adds	r3, #8
 8004c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e3      	bne.n	8004c5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d118      	bne.n	8004ccc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	e853 3f00 	ldrex	r3, [r3]
 8004ca6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f023 0310 	bic.w	r3, r3, #16
 8004cae:	647b      	str	r3, [r7, #68]	; 0x44
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6979      	ldr	r1, [r7, #20]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e6      	bne.n	8004c9a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004ce0:	bf00      	nop
 8004ce2:	3754      	adds	r7, #84	; 0x54
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7fb fc81 	bl	8000610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d0e:	bf00      	nop
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b08f      	sub	sp, #60	; 0x3c
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	2b21      	cmp	r3, #33	; 0x21
 8004d26:	d14c      	bne.n	8004dc2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d132      	bne.n	8004d9a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d48:	637b      	str	r3, [r7, #52]	; 0x34
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d54:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e6      	bne.n	8004d34 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6979      	ldr	r1, [r7, #20]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	613b      	str	r3, [r7, #16]
   return(result);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e6      	bne.n	8004d66 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004d98:	e013      	b.n	8004dc2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	781a      	ldrb	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004dc2:	bf00      	nop
 8004dc4:	373c      	adds	r7, #60	; 0x3c
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr

08004dcc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b091      	sub	sp, #68	; 0x44
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dda:	2b21      	cmp	r3, #33	; 0x21
 8004ddc:	d151      	bne.n	8004e82 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d132      	bne.n	8004e50 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	623b      	str	r3, [r7, #32]
   return(result);
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e08:	633b      	str	r3, [r7, #48]	; 0x30
 8004e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	617b      	str	r3, [r7, #20]
   return(result);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e6      	bne.n	8004e1c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004e4e:	e018      	b.n	8004e82 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e64:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6a:	1c9a      	adds	r2, r3, #2
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004e82:	bf00      	nop
 8004e84:	3744      	adds	r7, #68	; 0x44
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b091      	sub	sp, #68	; 0x44
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	2b21      	cmp	r3, #33	; 0x21
 8004e9c:	d160      	bne.n	8004f60 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ea4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ea6:	e057      	b.n	8004f58 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d133      	bne.n	8004f1c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3308      	adds	r3, #8
 8004ed2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed4:	633a      	str	r2, [r7, #48]	; 0x30
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e5      	bne.n	8004eb4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efc:	637b      	str	r3, [r7, #52]	; 0x34
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	461a      	mov	r2, r3
 8004f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f06:	61fb      	str	r3, [r7, #28]
 8004f08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	69b9      	ldr	r1, [r7, #24]
 8004f0c:	69fa      	ldr	r2, [r7, #28]
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	617b      	str	r3, [r7, #20]
   return(result);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e6      	bne.n	8004ee8 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004f1a:	e021      	b.n	8004f60 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d013      	beq.n	8004f52 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2e:	781a      	ldrb	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f54:	3b01      	subs	r3, #1
 8004f56:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1a4      	bne.n	8004ea8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004f5e:	e7ff      	b.n	8004f60 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004f60:	bf00      	nop
 8004f62:	3744      	adds	r7, #68	; 0x44
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b091      	sub	sp, #68	; 0x44
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	2b21      	cmp	r3, #33	; 0x21
 8004f7a:	d165      	bne.n	8005048 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004f82:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f84:	e05c      	b.n	8005040 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d133      	bne.n	8004ffa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3308      	adds	r3, #8
 8004f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	e853 3f00 	ldrex	r3, [r3]
 8004fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1e5      	bne.n	8004f92 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	61bb      	str	r3, [r7, #24]
 8004fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004ff8:	e026      	b.n	8005048 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b00      	cmp	r3, #0
 8005006:	d018      	beq.n	800503a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800501c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005022:	1c9a      	adds	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800503a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800503c:	3b01      	subs	r3, #1
 800503e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005040:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005042:	2b00      	cmp	r3, #0
 8005044:	d19f      	bne.n	8004f86 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005046:	e7ff      	b.n	8005048 <UART_TxISR_16BIT_FIFOEN+0xde>
 8005048:	bf00      	nop
 800504a:	3744      	adds	r7, #68	; 0x44
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b088      	sub	sp, #32
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	60bb      	str	r3, [r7, #8]
   return(result);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	e841 2300 	strex	r3, r2, [r1]
 8005084:	613b      	str	r3, [r7, #16]
   return(result);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e6      	bne.n	800505a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2220      	movs	r2, #32
 8005090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fb fad0 	bl	8000640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a0:	bf00      	nop
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b09c      	sub	sp, #112	; 0x70
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80050b6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050c0:	2b22      	cmp	r3, #34	; 0x22
 80050c2:	f040 80be 	bne.w	8005242 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80050d4:	b2d9      	uxtb	r1, r3
 80050d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e0:	400a      	ands	r2, r1
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 80a1 	bne.w	8005252 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800511e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005124:	66bb      	str	r3, [r7, #104]	; 0x68
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800512e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005130:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005134:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800513c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e6      	bne.n	8005110 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3308      	adds	r3, #8
 8005148:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	667b      	str	r3, [r7, #100]	; 0x64
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005162:	647a      	str	r2, [r7, #68]	; 0x44
 8005164:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2220      	movs	r2, #32
 800517a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a33      	ldr	r2, [pc, #204]	; (800525c <UART_RxISR_8BIT+0x1b4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d01f      	beq.n	80051d4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d018      	beq.n	80051d4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	623b      	str	r3, [r7, #32]
   return(result);
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051b6:	663b      	str	r3, [r7, #96]	; 0x60
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051c0:	633b      	str	r3, [r7, #48]	; 0x30
 80051c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e6      	bne.n	80051a2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d12e      	bne.n	800523a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 0310 	bic.w	r3, r3, #16
 80051f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005204:	69b9      	ldr	r1, [r7, #24]
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	e841 2300 	strex	r3, r2, [r1]
 800520c:	617b      	str	r3, [r7, #20]
   return(result);
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d1e6      	bne.n	80051e2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b10      	cmp	r3, #16
 8005220:	d103      	bne.n	800522a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2210      	movs	r2, #16
 8005228:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fe ff9c 	bl	8004170 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005238:	e00b      	b.n	8005252 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fb fa18 	bl	8000670 <HAL_UART_RxCpltCallback>
}
 8005240:	e007      	b.n	8005252 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0208 	orr.w	r2, r2, #8
 8005250:	619a      	str	r2, [r3, #24]
}
 8005252:	bf00      	nop
 8005254:	3770      	adds	r7, #112	; 0x70
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40008000 	.word	0x40008000

08005260 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b09c      	sub	sp, #112	; 0x70
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800526e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005278:	2b22      	cmp	r3, #34	; 0x22
 800527a:	f040 80be 	bne.w	80053fa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800528e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005292:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005296:	4013      	ands	r3, r2
 8005298:	b29a      	uxth	r2, r3
 800529a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800529c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a2:	1c9a      	adds	r2, r3, #2
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 80a1 	bne.w	800540a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052dc:	667b      	str	r3, [r7, #100]	; 0x64
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052e6:	657b      	str	r3, [r7, #84]	; 0x54
 80052e8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052ee:	e841 2300 	strex	r3, r2, [r1]
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1e6      	bne.n	80052c8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3308      	adds	r3, #8
 8005300:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	663b      	str	r3, [r7, #96]	; 0x60
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3308      	adds	r3, #8
 8005318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800531a:	643a      	str	r2, [r7, #64]	; 0x40
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e5      	bne.n	80052fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a33      	ldr	r2, [pc, #204]	; (8005414 <UART_RxISR_16BIT+0x1b4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d01f      	beq.n	800538c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d018      	beq.n	800538c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	61fb      	str	r3, [r7, #28]
   return(result);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800536e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e6      	bne.n	800535a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d12e      	bne.n	80053f2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f023 0310 	bic.w	r3, r3, #16
 80053ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	461a      	mov	r2, r3
 80053b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	6979      	ldr	r1, [r7, #20]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	613b      	str	r3, [r7, #16]
   return(result);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e6      	bne.n	800539a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	2b10      	cmp	r3, #16
 80053d8:	d103      	bne.n	80053e2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2210      	movs	r2, #16
 80053e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fe fec0 	bl	8004170 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053f0:	e00b      	b.n	800540a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fb f93c 	bl	8000670 <HAL_UART_RxCpltCallback>
}
 80053f8:	e007      	b.n	800540a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0208 	orr.w	r2, r2, #8
 8005408:	619a      	str	r2, [r3, #24]
}
 800540a:	bf00      	nop
 800540c:	3770      	adds	r7, #112	; 0x70
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40008000 	.word	0x40008000

08005418 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b0ac      	sub	sp, #176	; 0xb0
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005426:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800544e:	2b22      	cmp	r3, #34	; 0x22
 8005450:	f040 8182 	bne.w	8005758 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800545a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800545e:	e125      	b.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800546a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800546e:	b2d9      	uxtb	r1, r3
 8005470:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005474:	b2da      	uxtb	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547a:	400a      	ands	r2, r1
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80054a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d053      	beq.n	800555a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80054be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2201      	movs	r2, #1
 80054d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d011      	beq.n	8005512 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80054ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2202      	movs	r2, #2
 8005500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	f043 0204 	orr.w	r2, r3, #4
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d011      	beq.n	8005542 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800551e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00b      	beq.n	8005542 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2204      	movs	r2, #4
 8005530:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f043 0202 	orr.w	r2, r3, #2
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005548:	2b00      	cmp	r3, #0
 800554a:	d006      	beq.n	800555a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7fb f85f 	bl	8000610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 80a2 	bne.w	80056ac <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005570:	e853 3f00 	ldrex	r3, [r3]
 8005574:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800557c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800558a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800558c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005590:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e4      	bne.n	8005568 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3308      	adds	r3, #8
 80055a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80055ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055c6:	66ba      	str	r2, [r7, #104]	; 0x68
 80055c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80055cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80055d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e1      	bne.n	800559e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a5f      	ldr	r2, [pc, #380]	; (8005770 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d021      	beq.n	800563c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01a      	beq.n	800563c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800561a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005628:	657b      	str	r3, [r7, #84]	; 0x54
 800562a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800562e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e4      	bne.n	8005606 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005640:	2b01      	cmp	r3, #1
 8005642:	d130      	bne.n	80056a6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	f023 0310 	bic.w	r3, r3, #16
 800565e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800566c:	643b      	str	r3, [r7, #64]	; 0x40
 800566e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005672:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e4      	bne.n	800564a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b10      	cmp	r3, #16
 800568c:	d103      	bne.n	8005696 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2210      	movs	r2, #16
 8005694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800569c:	4619      	mov	r1, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fe fd66 	bl	8004170 <HAL_UARTEx_RxEventCallback>
 80056a4:	e002      	b.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fa ffe2 	bl	8000670 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d006      	beq.n	80056c2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80056b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f47f aecf 	bne.w	8005460 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d049      	beq.n	8005768 <UART_RxISR_8BIT_FIFOEN+0x350>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80056de:	429a      	cmp	r2, r3
 80056e0:	d242      	bcs.n	8005768 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3308      	adds	r3, #8
 8005702:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005708:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800570c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e3      	bne.n	80056e2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a15      	ldr	r2, [pc, #84]	; (8005774 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800571e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	60bb      	str	r3, [r7, #8]
   return(result);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f043 0320 	orr.w	r3, r3, #32
 8005734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	613b      	str	r3, [r7, #16]
   return(result);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e4      	bne.n	8005720 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005756:	e007      	b.n	8005768 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0208 	orr.w	r2, r2, #8
 8005766:	619a      	str	r2, [r3, #24]
}
 8005768:	bf00      	nop
 800576a:	37b0      	adds	r7, #176	; 0xb0
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40008000 	.word	0x40008000
 8005774:	080050a9 	.word	0x080050a9

08005778 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b0ae      	sub	sp, #184	; 0xb8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005786:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ae:	2b22      	cmp	r3, #34	; 0x22
 80057b0:	f040 8186 	bne.w	8005ac0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057ba:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057be:	e129      	b.n	8005a14 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80057d2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80057d6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80057da:	4013      	ands	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e8:	1c9a      	adds	r2, r3, #2
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800580a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	2b00      	cmp	r3, #0
 8005814:	d053      	beq.n	80058be <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005816:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	d011      	beq.n	8005846 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583c:	f043 0201 	orr.w	r2, r3, #1
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d011      	beq.n	8005876 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005852:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00b      	beq.n	8005876 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2202      	movs	r2, #2
 8005864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586c:	f043 0204 	orr.w	r2, r3, #4
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d011      	beq.n	80058a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2204      	movs	r2, #4
 8005894:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	f043 0202 	orr.w	r2, r3, #2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d006      	beq.n	80058be <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fa fead 	bl	8000610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f040 80a4 	bne.w	8005a14 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058f2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e2      	bne.n	80058cc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	3308      	adds	r3, #8
 800592a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800592e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005930:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005934:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800593c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e1      	bne.n	8005906 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a5f      	ldr	r2, [pc, #380]	; (8005ad8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d021      	beq.n	80059a4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01a      	beq.n	80059a4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800597c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005982:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005990:	65bb      	str	r3, [r7, #88]	; 0x58
 8005992:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800599e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e4      	bne.n	800596e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d130      	bne.n	8005a0e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ba:	e853 3f00 	ldrex	r3, [r3]
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	f023 0310 	bic.w	r3, r3, #16
 80059c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80059d4:	647b      	str	r3, [r7, #68]	; 0x44
 80059d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e4      	bne.n	80059b2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d103      	bne.n	80059fe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2210      	movs	r2, #16
 80059fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fe fbb2 	bl	8004170 <HAL_UARTEx_RxEventCallback>
 8005a0c:	e002      	b.n	8005a14 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fa fe2e 	bl	8000670 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d006      	beq.n	8005a2a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005a1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f47f aecb 	bne.w	80057c0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a30:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d049      	beq.n	8005ad0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d242      	bcs.n	8005ad0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3308      	adds	r3, #8
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	623b      	str	r3, [r7, #32]
   return(result);
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3308      	adds	r3, #8
 8005a6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005a6e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e3      	bne.n	8005a4a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005a86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f043 0320 	orr.w	r3, r3, #32
 8005a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	69b9      	ldr	r1, [r7, #24]
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e4      	bne.n	8005a88 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005abe:	e007      	b.n	8005ad0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0208 	orr.w	r2, r2, #8
 8005ace:	619a      	str	r2, [r3, #24]
}
 8005ad0:	bf00      	nop
 8005ad2:	37b8      	adds	r7, #184	; 0xb8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40008000 	.word	0x40008000
 8005adc:	08005261 	.word	0x08005261

08005ae0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr

08005b04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr

08005b16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d101      	bne.n	8005b2c <HAL_UARTEx_DisableFifoMode+0x16>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	e027      	b.n	8005b7c <HAL_UARTEx_DisableFifoMode+0x66>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr

08005b86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e02d      	b.n	8005bfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2224      	movs	r2, #36	; 0x24
 8005baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0201 	bic.w	r2, r2, #1
 8005bc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f850 	bl	8005c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c16:	2302      	movs	r3, #2
 8005c18:	e02d      	b.n	8005c76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2224      	movs	r2, #36	; 0x24
 8005c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0201 	bic.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f812 	bl	8005c80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d108      	bne.n	8005ca2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ca0:	e031      	b.n	8005d06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ca6:	2308      	movs	r3, #8
 8005ca8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	0e5b      	lsrs	r3, r3, #25
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	f003 0307 	and.w	r3, r3, #7
 8005cb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	0f5b      	lsrs	r3, r3, #29
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cca:	7bbb      	ldrb	r3, [r7, #14]
 8005ccc:	7b3a      	ldrb	r2, [r7, #12]
 8005cce:	4910      	ldr	r1, [pc, #64]	; (8005d10 <UARTEx_SetNbDataToProcess+0x90>)
 8005cd0:	5c8a      	ldrb	r2, [r1, r2]
 8005cd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005cd6:	7b3a      	ldrb	r2, [r7, #12]
 8005cd8:	490e      	ldr	r1, [pc, #56]	; (8005d14 <UARTEx_SetNbDataToProcess+0x94>)
 8005cda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005cdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	7b7a      	ldrb	r2, [r7, #13]
 8005cec:	4908      	ldr	r1, [pc, #32]	; (8005d10 <UARTEx_SetNbDataToProcess+0x90>)
 8005cee:	5c8a      	ldrb	r2, [r1, r2]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cf4:	7b7a      	ldrb	r2, [r7, #13]
 8005cf6:	4907      	ldr	r1, [pc, #28]	; (8005d14 <UARTEx_SetNbDataToProcess+0x94>)
 8005cf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	0800679c 	.word	0x0800679c
 8005d14:	080067a4 	.word	0x080067a4

08005d18 <__errno>:
 8005d18:	4b01      	ldr	r3, [pc, #4]	; (8005d20 <__errno+0x8>)
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	2000000c 	.word	0x2000000c

08005d24 <__libc_init_array>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4d0d      	ldr	r5, [pc, #52]	; (8005d5c <__libc_init_array+0x38>)
 8005d28:	4c0d      	ldr	r4, [pc, #52]	; (8005d60 <__libc_init_array+0x3c>)
 8005d2a:	1b64      	subs	r4, r4, r5
 8005d2c:	10a4      	asrs	r4, r4, #2
 8005d2e:	2600      	movs	r6, #0
 8005d30:	42a6      	cmp	r6, r4
 8005d32:	d109      	bne.n	8005d48 <__libc_init_array+0x24>
 8005d34:	4d0b      	ldr	r5, [pc, #44]	; (8005d64 <__libc_init_array+0x40>)
 8005d36:	4c0c      	ldr	r4, [pc, #48]	; (8005d68 <__libc_init_array+0x44>)
 8005d38:	f000 fca0 	bl	800667c <_init>
 8005d3c:	1b64      	subs	r4, r4, r5
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	2600      	movs	r6, #0
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	d105      	bne.n	8005d52 <__libc_init_array+0x2e>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4c:	4798      	blx	r3
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7ee      	b.n	8005d30 <__libc_init_array+0xc>
 8005d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d56:	4798      	blx	r3
 8005d58:	3601      	adds	r6, #1
 8005d5a:	e7f2      	b.n	8005d42 <__libc_init_array+0x1e>
 8005d5c:	080067e8 	.word	0x080067e8
 8005d60:	080067e8 	.word	0x080067e8
 8005d64:	080067e8 	.word	0x080067e8
 8005d68:	080067ec 	.word	0x080067ec

08005d6c <memcpy>:
 8005d6c:	440a      	add	r2, r1
 8005d6e:	4291      	cmp	r1, r2
 8005d70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005d74:	d100      	bne.n	8005d78 <memcpy+0xc>
 8005d76:	4770      	bx	lr
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d82:	4291      	cmp	r1, r2
 8005d84:	d1f9      	bne.n	8005d7a <memcpy+0xe>
 8005d86:	bd10      	pop	{r4, pc}

08005d88 <memset>:
 8005d88:	4402      	add	r2, r0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d100      	bne.n	8005d92 <memset+0xa>
 8005d90:	4770      	bx	lr
 8005d92:	f803 1b01 	strb.w	r1, [r3], #1
 8005d96:	e7f9      	b.n	8005d8c <memset+0x4>

08005d98 <sniprintf>:
 8005d98:	b40c      	push	{r2, r3}
 8005d9a:	b530      	push	{r4, r5, lr}
 8005d9c:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <sniprintf+0x64>)
 8005d9e:	1e0c      	subs	r4, r1, #0
 8005da0:	681d      	ldr	r5, [r3, #0]
 8005da2:	b09d      	sub	sp, #116	; 0x74
 8005da4:	da08      	bge.n	8005db8 <sniprintf+0x20>
 8005da6:	238b      	movs	r3, #139	; 0x8b
 8005da8:	602b      	str	r3, [r5, #0]
 8005daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dae:	b01d      	add	sp, #116	; 0x74
 8005db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005db4:	b002      	add	sp, #8
 8005db6:	4770      	bx	lr
 8005db8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005dc0:	bf14      	ite	ne
 8005dc2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005dc6:	4623      	moveq	r3, r4
 8005dc8:	9304      	str	r3, [sp, #16]
 8005dca:	9307      	str	r3, [sp, #28]
 8005dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dd0:	9002      	str	r0, [sp, #8]
 8005dd2:	9006      	str	r0, [sp, #24]
 8005dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005dd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dda:	ab21      	add	r3, sp, #132	; 0x84
 8005ddc:	a902      	add	r1, sp, #8
 8005dde:	4628      	mov	r0, r5
 8005de0:	9301      	str	r3, [sp, #4]
 8005de2:	f000 f869 	bl	8005eb8 <_svfiprintf_r>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	bfbc      	itt	lt
 8005dea:	238b      	movlt	r3, #139	; 0x8b
 8005dec:	602b      	strlt	r3, [r5, #0]
 8005dee:	2c00      	cmp	r4, #0
 8005df0:	d0dd      	beq.n	8005dae <sniprintf+0x16>
 8005df2:	9b02      	ldr	r3, [sp, #8]
 8005df4:	2200      	movs	r2, #0
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e7d9      	b.n	8005dae <sniprintf+0x16>
 8005dfa:	bf00      	nop
 8005dfc:	2000000c 	.word	0x2000000c

08005e00 <__ssputs_r>:
 8005e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e04:	688e      	ldr	r6, [r1, #8]
 8005e06:	429e      	cmp	r6, r3
 8005e08:	4682      	mov	sl, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	4690      	mov	r8, r2
 8005e0e:	461f      	mov	r7, r3
 8005e10:	d838      	bhi.n	8005e84 <__ssputs_r+0x84>
 8005e12:	898a      	ldrh	r2, [r1, #12]
 8005e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e18:	d032      	beq.n	8005e80 <__ssputs_r+0x80>
 8005e1a:	6825      	ldr	r5, [r4, #0]
 8005e1c:	6909      	ldr	r1, [r1, #16]
 8005e1e:	eba5 0901 	sub.w	r9, r5, r1
 8005e22:	6965      	ldr	r5, [r4, #20]
 8005e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	444b      	add	r3, r9
 8005e30:	106d      	asrs	r5, r5, #1
 8005e32:	429d      	cmp	r5, r3
 8005e34:	bf38      	it	cc
 8005e36:	461d      	movcc	r5, r3
 8005e38:	0553      	lsls	r3, r2, #21
 8005e3a:	d531      	bpl.n	8005ea0 <__ssputs_r+0xa0>
 8005e3c:	4629      	mov	r1, r5
 8005e3e:	f000 fb53 	bl	80064e8 <_malloc_r>
 8005e42:	4606      	mov	r6, r0
 8005e44:	b950      	cbnz	r0, 8005e5c <__ssputs_r+0x5c>
 8005e46:	230c      	movs	r3, #12
 8005e48:	f8ca 3000 	str.w	r3, [sl]
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5c:	6921      	ldr	r1, [r4, #16]
 8005e5e:	464a      	mov	r2, r9
 8005e60:	f7ff ff84 	bl	8005d6c <memcpy>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	6126      	str	r6, [r4, #16]
 8005e72:	6165      	str	r5, [r4, #20]
 8005e74:	444e      	add	r6, r9
 8005e76:	eba5 0509 	sub.w	r5, r5, r9
 8005e7a:	6026      	str	r6, [r4, #0]
 8005e7c:	60a5      	str	r5, [r4, #8]
 8005e7e:	463e      	mov	r6, r7
 8005e80:	42be      	cmp	r6, r7
 8005e82:	d900      	bls.n	8005e86 <__ssputs_r+0x86>
 8005e84:	463e      	mov	r6, r7
 8005e86:	6820      	ldr	r0, [r4, #0]
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	f000 faa8 	bl	80063e0 <memmove>
 8005e90:	68a3      	ldr	r3, [r4, #8]
 8005e92:	1b9b      	subs	r3, r3, r6
 8005e94:	60a3      	str	r3, [r4, #8]
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	4433      	add	r3, r6
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e7db      	b.n	8005e58 <__ssputs_r+0x58>
 8005ea0:	462a      	mov	r2, r5
 8005ea2:	f000 fb95 	bl	80065d0 <_realloc_r>
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d1e1      	bne.n	8005e70 <__ssputs_r+0x70>
 8005eac:	6921      	ldr	r1, [r4, #16]
 8005eae:	4650      	mov	r0, sl
 8005eb0:	f000 fab0 	bl	8006414 <_free_r>
 8005eb4:	e7c7      	b.n	8005e46 <__ssputs_r+0x46>
	...

08005eb8 <_svfiprintf_r>:
 8005eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ebc:	4698      	mov	r8, r3
 8005ebe:	898b      	ldrh	r3, [r1, #12]
 8005ec0:	061b      	lsls	r3, r3, #24
 8005ec2:	b09d      	sub	sp, #116	; 0x74
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	460d      	mov	r5, r1
 8005ec8:	4614      	mov	r4, r2
 8005eca:	d50e      	bpl.n	8005eea <_svfiprintf_r+0x32>
 8005ecc:	690b      	ldr	r3, [r1, #16]
 8005ece:	b963      	cbnz	r3, 8005eea <_svfiprintf_r+0x32>
 8005ed0:	2140      	movs	r1, #64	; 0x40
 8005ed2:	f000 fb09 	bl	80064e8 <_malloc_r>
 8005ed6:	6028      	str	r0, [r5, #0]
 8005ed8:	6128      	str	r0, [r5, #16]
 8005eda:	b920      	cbnz	r0, 8005ee6 <_svfiprintf_r+0x2e>
 8005edc:	230c      	movs	r3, #12
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ee4:	e0d1      	b.n	800608a <_svfiprintf_r+0x1d2>
 8005ee6:	2340      	movs	r3, #64	; 0x40
 8005ee8:	616b      	str	r3, [r5, #20]
 8005eea:	2300      	movs	r3, #0
 8005eec:	9309      	str	r3, [sp, #36]	; 0x24
 8005eee:	2320      	movs	r3, #32
 8005ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ef8:	2330      	movs	r3, #48	; 0x30
 8005efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060a4 <_svfiprintf_r+0x1ec>
 8005efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f02:	f04f 0901 	mov.w	r9, #1
 8005f06:	4623      	mov	r3, r4
 8005f08:	469a      	mov	sl, r3
 8005f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f0e:	b10a      	cbz	r2, 8005f14 <_svfiprintf_r+0x5c>
 8005f10:	2a25      	cmp	r2, #37	; 0x25
 8005f12:	d1f9      	bne.n	8005f08 <_svfiprintf_r+0x50>
 8005f14:	ebba 0b04 	subs.w	fp, sl, r4
 8005f18:	d00b      	beq.n	8005f32 <_svfiprintf_r+0x7a>
 8005f1a:	465b      	mov	r3, fp
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4629      	mov	r1, r5
 8005f20:	4638      	mov	r0, r7
 8005f22:	f7ff ff6d 	bl	8005e00 <__ssputs_r>
 8005f26:	3001      	adds	r0, #1
 8005f28:	f000 80aa 	beq.w	8006080 <_svfiprintf_r+0x1c8>
 8005f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f2e:	445a      	add	r2, fp
 8005f30:	9209      	str	r2, [sp, #36]	; 0x24
 8005f32:	f89a 3000 	ldrb.w	r3, [sl]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f000 80a2 	beq.w	8006080 <_svfiprintf_r+0x1c8>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f46:	f10a 0a01 	add.w	sl, sl, #1
 8005f4a:	9304      	str	r3, [sp, #16]
 8005f4c:	9307      	str	r3, [sp, #28]
 8005f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f52:	931a      	str	r3, [sp, #104]	; 0x68
 8005f54:	4654      	mov	r4, sl
 8005f56:	2205      	movs	r2, #5
 8005f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f5c:	4851      	ldr	r0, [pc, #324]	; (80060a4 <_svfiprintf_r+0x1ec>)
 8005f5e:	f7fa f90f 	bl	8000180 <memchr>
 8005f62:	9a04      	ldr	r2, [sp, #16]
 8005f64:	b9d8      	cbnz	r0, 8005f9e <_svfiprintf_r+0xe6>
 8005f66:	06d0      	lsls	r0, r2, #27
 8005f68:	bf44      	itt	mi
 8005f6a:	2320      	movmi	r3, #32
 8005f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f70:	0711      	lsls	r1, r2, #28
 8005f72:	bf44      	itt	mi
 8005f74:	232b      	movmi	r3, #43	; 0x2b
 8005f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f80:	d015      	beq.n	8005fae <_svfiprintf_r+0xf6>
 8005f82:	9a07      	ldr	r2, [sp, #28]
 8005f84:	4654      	mov	r4, sl
 8005f86:	2000      	movs	r0, #0
 8005f88:	f04f 0c0a 	mov.w	ip, #10
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f92:	3b30      	subs	r3, #48	; 0x30
 8005f94:	2b09      	cmp	r3, #9
 8005f96:	d94e      	bls.n	8006036 <_svfiprintf_r+0x17e>
 8005f98:	b1b0      	cbz	r0, 8005fc8 <_svfiprintf_r+0x110>
 8005f9a:	9207      	str	r2, [sp, #28]
 8005f9c:	e014      	b.n	8005fc8 <_svfiprintf_r+0x110>
 8005f9e:	eba0 0308 	sub.w	r3, r0, r8
 8005fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	9304      	str	r3, [sp, #16]
 8005faa:	46a2      	mov	sl, r4
 8005fac:	e7d2      	b.n	8005f54 <_svfiprintf_r+0x9c>
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	1d19      	adds	r1, r3, #4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	9103      	str	r1, [sp, #12]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	bfbb      	ittet	lt
 8005fba:	425b      	neglt	r3, r3
 8005fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8005fc0:	9307      	strge	r3, [sp, #28]
 8005fc2:	9307      	strlt	r3, [sp, #28]
 8005fc4:	bfb8      	it	lt
 8005fc6:	9204      	strlt	r2, [sp, #16]
 8005fc8:	7823      	ldrb	r3, [r4, #0]
 8005fca:	2b2e      	cmp	r3, #46	; 0x2e
 8005fcc:	d10c      	bne.n	8005fe8 <_svfiprintf_r+0x130>
 8005fce:	7863      	ldrb	r3, [r4, #1]
 8005fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd2:	d135      	bne.n	8006040 <_svfiprintf_r+0x188>
 8005fd4:	9b03      	ldr	r3, [sp, #12]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	9203      	str	r2, [sp, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bfb8      	it	lt
 8005fe0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005fe4:	3402      	adds	r4, #2
 8005fe6:	9305      	str	r3, [sp, #20]
 8005fe8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80060a8 <_svfiprintf_r+0x1f0>
 8005fec:	7821      	ldrb	r1, [r4, #0]
 8005fee:	2203      	movs	r2, #3
 8005ff0:	4650      	mov	r0, sl
 8005ff2:	f7fa f8c5 	bl	8000180 <memchr>
 8005ff6:	b140      	cbz	r0, 800600a <_svfiprintf_r+0x152>
 8005ff8:	2340      	movs	r3, #64	; 0x40
 8005ffa:	eba0 000a 	sub.w	r0, r0, sl
 8005ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8006002:	9b04      	ldr	r3, [sp, #16]
 8006004:	4303      	orrs	r3, r0
 8006006:	3401      	adds	r4, #1
 8006008:	9304      	str	r3, [sp, #16]
 800600a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800600e:	4827      	ldr	r0, [pc, #156]	; (80060ac <_svfiprintf_r+0x1f4>)
 8006010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006014:	2206      	movs	r2, #6
 8006016:	f7fa f8b3 	bl	8000180 <memchr>
 800601a:	2800      	cmp	r0, #0
 800601c:	d038      	beq.n	8006090 <_svfiprintf_r+0x1d8>
 800601e:	4b24      	ldr	r3, [pc, #144]	; (80060b0 <_svfiprintf_r+0x1f8>)
 8006020:	bb1b      	cbnz	r3, 800606a <_svfiprintf_r+0x1b2>
 8006022:	9b03      	ldr	r3, [sp, #12]
 8006024:	3307      	adds	r3, #7
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	3308      	adds	r3, #8
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006030:	4433      	add	r3, r6
 8006032:	9309      	str	r3, [sp, #36]	; 0x24
 8006034:	e767      	b.n	8005f06 <_svfiprintf_r+0x4e>
 8006036:	fb0c 3202 	mla	r2, ip, r2, r3
 800603a:	460c      	mov	r4, r1
 800603c:	2001      	movs	r0, #1
 800603e:	e7a5      	b.n	8005f8c <_svfiprintf_r+0xd4>
 8006040:	2300      	movs	r3, #0
 8006042:	3401      	adds	r4, #1
 8006044:	9305      	str	r3, [sp, #20]
 8006046:	4619      	mov	r1, r3
 8006048:	f04f 0c0a 	mov.w	ip, #10
 800604c:	4620      	mov	r0, r4
 800604e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006052:	3a30      	subs	r2, #48	; 0x30
 8006054:	2a09      	cmp	r2, #9
 8006056:	d903      	bls.n	8006060 <_svfiprintf_r+0x1a8>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0c5      	beq.n	8005fe8 <_svfiprintf_r+0x130>
 800605c:	9105      	str	r1, [sp, #20]
 800605e:	e7c3      	b.n	8005fe8 <_svfiprintf_r+0x130>
 8006060:	fb0c 2101 	mla	r1, ip, r1, r2
 8006064:	4604      	mov	r4, r0
 8006066:	2301      	movs	r3, #1
 8006068:	e7f0      	b.n	800604c <_svfiprintf_r+0x194>
 800606a:	ab03      	add	r3, sp, #12
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	462a      	mov	r2, r5
 8006070:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <_svfiprintf_r+0x1fc>)
 8006072:	a904      	add	r1, sp, #16
 8006074:	4638      	mov	r0, r7
 8006076:	f3af 8000 	nop.w
 800607a:	1c42      	adds	r2, r0, #1
 800607c:	4606      	mov	r6, r0
 800607e:	d1d6      	bne.n	800602e <_svfiprintf_r+0x176>
 8006080:	89ab      	ldrh	r3, [r5, #12]
 8006082:	065b      	lsls	r3, r3, #25
 8006084:	f53f af2c 	bmi.w	8005ee0 <_svfiprintf_r+0x28>
 8006088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800608a:	b01d      	add	sp, #116	; 0x74
 800608c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006090:	ab03      	add	r3, sp, #12
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	462a      	mov	r2, r5
 8006096:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <_svfiprintf_r+0x1fc>)
 8006098:	a904      	add	r1, sp, #16
 800609a:	4638      	mov	r0, r7
 800609c:	f000 f87a 	bl	8006194 <_printf_i>
 80060a0:	e7eb      	b.n	800607a <_svfiprintf_r+0x1c2>
 80060a2:	bf00      	nop
 80060a4:	080067ac 	.word	0x080067ac
 80060a8:	080067b2 	.word	0x080067b2
 80060ac:	080067b6 	.word	0x080067b6
 80060b0:	00000000 	.word	0x00000000
 80060b4:	08005e01 	.word	0x08005e01

080060b8 <_printf_common>:
 80060b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060bc:	4616      	mov	r6, r2
 80060be:	4699      	mov	r9, r3
 80060c0:	688a      	ldr	r2, [r1, #8]
 80060c2:	690b      	ldr	r3, [r1, #16]
 80060c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060c8:	4293      	cmp	r3, r2
 80060ca:	bfb8      	it	lt
 80060cc:	4613      	movlt	r3, r2
 80060ce:	6033      	str	r3, [r6, #0]
 80060d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060d4:	4607      	mov	r7, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	b10a      	cbz	r2, 80060de <_printf_common+0x26>
 80060da:	3301      	adds	r3, #1
 80060dc:	6033      	str	r3, [r6, #0]
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	0699      	lsls	r1, r3, #26
 80060e2:	bf42      	ittt	mi
 80060e4:	6833      	ldrmi	r3, [r6, #0]
 80060e6:	3302      	addmi	r3, #2
 80060e8:	6033      	strmi	r3, [r6, #0]
 80060ea:	6825      	ldr	r5, [r4, #0]
 80060ec:	f015 0506 	ands.w	r5, r5, #6
 80060f0:	d106      	bne.n	8006100 <_printf_common+0x48>
 80060f2:	f104 0a19 	add.w	sl, r4, #25
 80060f6:	68e3      	ldr	r3, [r4, #12]
 80060f8:	6832      	ldr	r2, [r6, #0]
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	42ab      	cmp	r3, r5
 80060fe:	dc26      	bgt.n	800614e <_printf_common+0x96>
 8006100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006104:	1e13      	subs	r3, r2, #0
 8006106:	6822      	ldr	r2, [r4, #0]
 8006108:	bf18      	it	ne
 800610a:	2301      	movne	r3, #1
 800610c:	0692      	lsls	r2, r2, #26
 800610e:	d42b      	bmi.n	8006168 <_printf_common+0xb0>
 8006110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006114:	4649      	mov	r1, r9
 8006116:	4638      	mov	r0, r7
 8006118:	47c0      	blx	r8
 800611a:	3001      	adds	r0, #1
 800611c:	d01e      	beq.n	800615c <_printf_common+0xa4>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	68e5      	ldr	r5, [r4, #12]
 8006122:	6832      	ldr	r2, [r6, #0]
 8006124:	f003 0306 	and.w	r3, r3, #6
 8006128:	2b04      	cmp	r3, #4
 800612a:	bf08      	it	eq
 800612c:	1aad      	subeq	r5, r5, r2
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	6922      	ldr	r2, [r4, #16]
 8006132:	bf0c      	ite	eq
 8006134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006138:	2500      	movne	r5, #0
 800613a:	4293      	cmp	r3, r2
 800613c:	bfc4      	itt	gt
 800613e:	1a9b      	subgt	r3, r3, r2
 8006140:	18ed      	addgt	r5, r5, r3
 8006142:	2600      	movs	r6, #0
 8006144:	341a      	adds	r4, #26
 8006146:	42b5      	cmp	r5, r6
 8006148:	d11a      	bne.n	8006180 <_printf_common+0xc8>
 800614a:	2000      	movs	r0, #0
 800614c:	e008      	b.n	8006160 <_printf_common+0xa8>
 800614e:	2301      	movs	r3, #1
 8006150:	4652      	mov	r2, sl
 8006152:	4649      	mov	r1, r9
 8006154:	4638      	mov	r0, r7
 8006156:	47c0      	blx	r8
 8006158:	3001      	adds	r0, #1
 800615a:	d103      	bne.n	8006164 <_printf_common+0xac>
 800615c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006164:	3501      	adds	r5, #1
 8006166:	e7c6      	b.n	80060f6 <_printf_common+0x3e>
 8006168:	18e1      	adds	r1, r4, r3
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	2030      	movs	r0, #48	; 0x30
 800616e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006172:	4422      	add	r2, r4
 8006174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800617c:	3302      	adds	r3, #2
 800617e:	e7c7      	b.n	8006110 <_printf_common+0x58>
 8006180:	2301      	movs	r3, #1
 8006182:	4622      	mov	r2, r4
 8006184:	4649      	mov	r1, r9
 8006186:	4638      	mov	r0, r7
 8006188:	47c0      	blx	r8
 800618a:	3001      	adds	r0, #1
 800618c:	d0e6      	beq.n	800615c <_printf_common+0xa4>
 800618e:	3601      	adds	r6, #1
 8006190:	e7d9      	b.n	8006146 <_printf_common+0x8e>
	...

08006194 <_printf_i>:
 8006194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006198:	7e0f      	ldrb	r7, [r1, #24]
 800619a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800619c:	2f78      	cmp	r7, #120	; 0x78
 800619e:	4691      	mov	r9, r2
 80061a0:	4680      	mov	r8, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	469a      	mov	sl, r3
 80061a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061aa:	d807      	bhi.n	80061bc <_printf_i+0x28>
 80061ac:	2f62      	cmp	r7, #98	; 0x62
 80061ae:	d80a      	bhi.n	80061c6 <_printf_i+0x32>
 80061b0:	2f00      	cmp	r7, #0
 80061b2:	f000 80d8 	beq.w	8006366 <_printf_i+0x1d2>
 80061b6:	2f58      	cmp	r7, #88	; 0x58
 80061b8:	f000 80a3 	beq.w	8006302 <_printf_i+0x16e>
 80061bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061c4:	e03a      	b.n	800623c <_printf_i+0xa8>
 80061c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ca:	2b15      	cmp	r3, #21
 80061cc:	d8f6      	bhi.n	80061bc <_printf_i+0x28>
 80061ce:	a101      	add	r1, pc, #4	; (adr r1, 80061d4 <_printf_i+0x40>)
 80061d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061d4:	0800622d 	.word	0x0800622d
 80061d8:	08006241 	.word	0x08006241
 80061dc:	080061bd 	.word	0x080061bd
 80061e0:	080061bd 	.word	0x080061bd
 80061e4:	080061bd 	.word	0x080061bd
 80061e8:	080061bd 	.word	0x080061bd
 80061ec:	08006241 	.word	0x08006241
 80061f0:	080061bd 	.word	0x080061bd
 80061f4:	080061bd 	.word	0x080061bd
 80061f8:	080061bd 	.word	0x080061bd
 80061fc:	080061bd 	.word	0x080061bd
 8006200:	0800634d 	.word	0x0800634d
 8006204:	08006271 	.word	0x08006271
 8006208:	0800632f 	.word	0x0800632f
 800620c:	080061bd 	.word	0x080061bd
 8006210:	080061bd 	.word	0x080061bd
 8006214:	0800636f 	.word	0x0800636f
 8006218:	080061bd 	.word	0x080061bd
 800621c:	08006271 	.word	0x08006271
 8006220:	080061bd 	.word	0x080061bd
 8006224:	080061bd 	.word	0x080061bd
 8006228:	08006337 	.word	0x08006337
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	1d1a      	adds	r2, r3, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	602a      	str	r2, [r5, #0]
 8006234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800623c:	2301      	movs	r3, #1
 800623e:	e0a3      	b.n	8006388 <_printf_i+0x1f4>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	6829      	ldr	r1, [r5, #0]
 8006244:	0606      	lsls	r6, r0, #24
 8006246:	f101 0304 	add.w	r3, r1, #4
 800624a:	d50a      	bpl.n	8006262 <_printf_i+0xce>
 800624c:	680e      	ldr	r6, [r1, #0]
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	2e00      	cmp	r6, #0
 8006252:	da03      	bge.n	800625c <_printf_i+0xc8>
 8006254:	232d      	movs	r3, #45	; 0x2d
 8006256:	4276      	negs	r6, r6
 8006258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625c:	485e      	ldr	r0, [pc, #376]	; (80063d8 <_printf_i+0x244>)
 800625e:	230a      	movs	r3, #10
 8006260:	e019      	b.n	8006296 <_printf_i+0x102>
 8006262:	680e      	ldr	r6, [r1, #0]
 8006264:	602b      	str	r3, [r5, #0]
 8006266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800626a:	bf18      	it	ne
 800626c:	b236      	sxthne	r6, r6
 800626e:	e7ef      	b.n	8006250 <_printf_i+0xbc>
 8006270:	682b      	ldr	r3, [r5, #0]
 8006272:	6820      	ldr	r0, [r4, #0]
 8006274:	1d19      	adds	r1, r3, #4
 8006276:	6029      	str	r1, [r5, #0]
 8006278:	0601      	lsls	r1, r0, #24
 800627a:	d501      	bpl.n	8006280 <_printf_i+0xec>
 800627c:	681e      	ldr	r6, [r3, #0]
 800627e:	e002      	b.n	8006286 <_printf_i+0xf2>
 8006280:	0646      	lsls	r6, r0, #25
 8006282:	d5fb      	bpl.n	800627c <_printf_i+0xe8>
 8006284:	881e      	ldrh	r6, [r3, #0]
 8006286:	4854      	ldr	r0, [pc, #336]	; (80063d8 <_printf_i+0x244>)
 8006288:	2f6f      	cmp	r7, #111	; 0x6f
 800628a:	bf0c      	ite	eq
 800628c:	2308      	moveq	r3, #8
 800628e:	230a      	movne	r3, #10
 8006290:	2100      	movs	r1, #0
 8006292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006296:	6865      	ldr	r5, [r4, #4]
 8006298:	60a5      	str	r5, [r4, #8]
 800629a:	2d00      	cmp	r5, #0
 800629c:	bfa2      	ittt	ge
 800629e:	6821      	ldrge	r1, [r4, #0]
 80062a0:	f021 0104 	bicge.w	r1, r1, #4
 80062a4:	6021      	strge	r1, [r4, #0]
 80062a6:	b90e      	cbnz	r6, 80062ac <_printf_i+0x118>
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	d04d      	beq.n	8006348 <_printf_i+0x1b4>
 80062ac:	4615      	mov	r5, r2
 80062ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80062b2:	fb03 6711 	mls	r7, r3, r1, r6
 80062b6:	5dc7      	ldrb	r7, [r0, r7]
 80062b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062bc:	4637      	mov	r7, r6
 80062be:	42bb      	cmp	r3, r7
 80062c0:	460e      	mov	r6, r1
 80062c2:	d9f4      	bls.n	80062ae <_printf_i+0x11a>
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d10b      	bne.n	80062e0 <_printf_i+0x14c>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	07de      	lsls	r6, r3, #31
 80062cc:	d508      	bpl.n	80062e0 <_printf_i+0x14c>
 80062ce:	6923      	ldr	r3, [r4, #16]
 80062d0:	6861      	ldr	r1, [r4, #4]
 80062d2:	4299      	cmp	r1, r3
 80062d4:	bfde      	ittt	le
 80062d6:	2330      	movle	r3, #48	; 0x30
 80062d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062e0:	1b52      	subs	r2, r2, r5
 80062e2:	6122      	str	r2, [r4, #16]
 80062e4:	f8cd a000 	str.w	sl, [sp]
 80062e8:	464b      	mov	r3, r9
 80062ea:	aa03      	add	r2, sp, #12
 80062ec:	4621      	mov	r1, r4
 80062ee:	4640      	mov	r0, r8
 80062f0:	f7ff fee2 	bl	80060b8 <_printf_common>
 80062f4:	3001      	adds	r0, #1
 80062f6:	d14c      	bne.n	8006392 <_printf_i+0x1fe>
 80062f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fc:	b004      	add	sp, #16
 80062fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006302:	4835      	ldr	r0, [pc, #212]	; (80063d8 <_printf_i+0x244>)
 8006304:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006308:	6829      	ldr	r1, [r5, #0]
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006310:	6029      	str	r1, [r5, #0]
 8006312:	061d      	lsls	r5, r3, #24
 8006314:	d514      	bpl.n	8006340 <_printf_i+0x1ac>
 8006316:	07df      	lsls	r7, r3, #31
 8006318:	bf44      	itt	mi
 800631a:	f043 0320 	orrmi.w	r3, r3, #32
 800631e:	6023      	strmi	r3, [r4, #0]
 8006320:	b91e      	cbnz	r6, 800632a <_printf_i+0x196>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	f023 0320 	bic.w	r3, r3, #32
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	2310      	movs	r3, #16
 800632c:	e7b0      	b.n	8006290 <_printf_i+0xfc>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	f043 0320 	orr.w	r3, r3, #32
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	2378      	movs	r3, #120	; 0x78
 8006338:	4828      	ldr	r0, [pc, #160]	; (80063dc <_printf_i+0x248>)
 800633a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800633e:	e7e3      	b.n	8006308 <_printf_i+0x174>
 8006340:	0659      	lsls	r1, r3, #25
 8006342:	bf48      	it	mi
 8006344:	b2b6      	uxthmi	r6, r6
 8006346:	e7e6      	b.n	8006316 <_printf_i+0x182>
 8006348:	4615      	mov	r5, r2
 800634a:	e7bb      	b.n	80062c4 <_printf_i+0x130>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	6826      	ldr	r6, [r4, #0]
 8006350:	6961      	ldr	r1, [r4, #20]
 8006352:	1d18      	adds	r0, r3, #4
 8006354:	6028      	str	r0, [r5, #0]
 8006356:	0635      	lsls	r5, r6, #24
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	d501      	bpl.n	8006360 <_printf_i+0x1cc>
 800635c:	6019      	str	r1, [r3, #0]
 800635e:	e002      	b.n	8006366 <_printf_i+0x1d2>
 8006360:	0670      	lsls	r0, r6, #25
 8006362:	d5fb      	bpl.n	800635c <_printf_i+0x1c8>
 8006364:	8019      	strh	r1, [r3, #0]
 8006366:	2300      	movs	r3, #0
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	4615      	mov	r5, r2
 800636c:	e7ba      	b.n	80062e4 <_printf_i+0x150>
 800636e:	682b      	ldr	r3, [r5, #0]
 8006370:	1d1a      	adds	r2, r3, #4
 8006372:	602a      	str	r2, [r5, #0]
 8006374:	681d      	ldr	r5, [r3, #0]
 8006376:	6862      	ldr	r2, [r4, #4]
 8006378:	2100      	movs	r1, #0
 800637a:	4628      	mov	r0, r5
 800637c:	f7f9 ff00 	bl	8000180 <memchr>
 8006380:	b108      	cbz	r0, 8006386 <_printf_i+0x1f2>
 8006382:	1b40      	subs	r0, r0, r5
 8006384:	6060      	str	r0, [r4, #4]
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	2300      	movs	r3, #0
 800638c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006390:	e7a8      	b.n	80062e4 <_printf_i+0x150>
 8006392:	6923      	ldr	r3, [r4, #16]
 8006394:	462a      	mov	r2, r5
 8006396:	4649      	mov	r1, r9
 8006398:	4640      	mov	r0, r8
 800639a:	47d0      	blx	sl
 800639c:	3001      	adds	r0, #1
 800639e:	d0ab      	beq.n	80062f8 <_printf_i+0x164>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	079b      	lsls	r3, r3, #30
 80063a4:	d413      	bmi.n	80063ce <_printf_i+0x23a>
 80063a6:	68e0      	ldr	r0, [r4, #12]
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	4298      	cmp	r0, r3
 80063ac:	bfb8      	it	lt
 80063ae:	4618      	movlt	r0, r3
 80063b0:	e7a4      	b.n	80062fc <_printf_i+0x168>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4632      	mov	r2, r6
 80063b6:	4649      	mov	r1, r9
 80063b8:	4640      	mov	r0, r8
 80063ba:	47d0      	blx	sl
 80063bc:	3001      	adds	r0, #1
 80063be:	d09b      	beq.n	80062f8 <_printf_i+0x164>
 80063c0:	3501      	adds	r5, #1
 80063c2:	68e3      	ldr	r3, [r4, #12]
 80063c4:	9903      	ldr	r1, [sp, #12]
 80063c6:	1a5b      	subs	r3, r3, r1
 80063c8:	42ab      	cmp	r3, r5
 80063ca:	dcf2      	bgt.n	80063b2 <_printf_i+0x21e>
 80063cc:	e7eb      	b.n	80063a6 <_printf_i+0x212>
 80063ce:	2500      	movs	r5, #0
 80063d0:	f104 0619 	add.w	r6, r4, #25
 80063d4:	e7f5      	b.n	80063c2 <_printf_i+0x22e>
 80063d6:	bf00      	nop
 80063d8:	080067bd 	.word	0x080067bd
 80063dc:	080067ce 	.word	0x080067ce

080063e0 <memmove>:
 80063e0:	4288      	cmp	r0, r1
 80063e2:	b510      	push	{r4, lr}
 80063e4:	eb01 0402 	add.w	r4, r1, r2
 80063e8:	d902      	bls.n	80063f0 <memmove+0x10>
 80063ea:	4284      	cmp	r4, r0
 80063ec:	4623      	mov	r3, r4
 80063ee:	d807      	bhi.n	8006400 <memmove+0x20>
 80063f0:	1e43      	subs	r3, r0, #1
 80063f2:	42a1      	cmp	r1, r4
 80063f4:	d008      	beq.n	8006408 <memmove+0x28>
 80063f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063fe:	e7f8      	b.n	80063f2 <memmove+0x12>
 8006400:	4402      	add	r2, r0
 8006402:	4601      	mov	r1, r0
 8006404:	428a      	cmp	r2, r1
 8006406:	d100      	bne.n	800640a <memmove+0x2a>
 8006408:	bd10      	pop	{r4, pc}
 800640a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800640e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006412:	e7f7      	b.n	8006404 <memmove+0x24>

08006414 <_free_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4605      	mov	r5, r0
 8006418:	2900      	cmp	r1, #0
 800641a:	d041      	beq.n	80064a0 <_free_r+0x8c>
 800641c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006420:	1f0c      	subs	r4, r1, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	bfb8      	it	lt
 8006426:	18e4      	addlt	r4, r4, r3
 8006428:	f000 f912 	bl	8006650 <__malloc_lock>
 800642c:	4a1d      	ldr	r2, [pc, #116]	; (80064a4 <_free_r+0x90>)
 800642e:	6813      	ldr	r3, [r2, #0]
 8006430:	b933      	cbnz	r3, 8006440 <_free_r+0x2c>
 8006432:	6063      	str	r3, [r4, #4]
 8006434:	6014      	str	r4, [r2, #0]
 8006436:	4628      	mov	r0, r5
 8006438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800643c:	f000 b90e 	b.w	800665c <__malloc_unlock>
 8006440:	42a3      	cmp	r3, r4
 8006442:	d908      	bls.n	8006456 <_free_r+0x42>
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	1821      	adds	r1, r4, r0
 8006448:	428b      	cmp	r3, r1
 800644a:	bf01      	itttt	eq
 800644c:	6819      	ldreq	r1, [r3, #0]
 800644e:	685b      	ldreq	r3, [r3, #4]
 8006450:	1809      	addeq	r1, r1, r0
 8006452:	6021      	streq	r1, [r4, #0]
 8006454:	e7ed      	b.n	8006432 <_free_r+0x1e>
 8006456:	461a      	mov	r2, r3
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b10b      	cbz	r3, 8006460 <_free_r+0x4c>
 800645c:	42a3      	cmp	r3, r4
 800645e:	d9fa      	bls.n	8006456 <_free_r+0x42>
 8006460:	6811      	ldr	r1, [r2, #0]
 8006462:	1850      	adds	r0, r2, r1
 8006464:	42a0      	cmp	r0, r4
 8006466:	d10b      	bne.n	8006480 <_free_r+0x6c>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	4401      	add	r1, r0
 800646c:	1850      	adds	r0, r2, r1
 800646e:	4283      	cmp	r3, r0
 8006470:	6011      	str	r1, [r2, #0]
 8006472:	d1e0      	bne.n	8006436 <_free_r+0x22>
 8006474:	6818      	ldr	r0, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	6053      	str	r3, [r2, #4]
 800647a:	4401      	add	r1, r0
 800647c:	6011      	str	r1, [r2, #0]
 800647e:	e7da      	b.n	8006436 <_free_r+0x22>
 8006480:	d902      	bls.n	8006488 <_free_r+0x74>
 8006482:	230c      	movs	r3, #12
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	e7d6      	b.n	8006436 <_free_r+0x22>
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	1821      	adds	r1, r4, r0
 800648c:	428b      	cmp	r3, r1
 800648e:	bf04      	itt	eq
 8006490:	6819      	ldreq	r1, [r3, #0]
 8006492:	685b      	ldreq	r3, [r3, #4]
 8006494:	6063      	str	r3, [r4, #4]
 8006496:	bf04      	itt	eq
 8006498:	1809      	addeq	r1, r1, r0
 800649a:	6021      	streq	r1, [r4, #0]
 800649c:	6054      	str	r4, [r2, #4]
 800649e:	e7ca      	b.n	8006436 <_free_r+0x22>
 80064a0:	bd38      	pop	{r3, r4, r5, pc}
 80064a2:	bf00      	nop
 80064a4:	200001b4 	.word	0x200001b4

080064a8 <sbrk_aligned>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	4e0e      	ldr	r6, [pc, #56]	; (80064e4 <sbrk_aligned+0x3c>)
 80064ac:	460c      	mov	r4, r1
 80064ae:	6831      	ldr	r1, [r6, #0]
 80064b0:	4605      	mov	r5, r0
 80064b2:	b911      	cbnz	r1, 80064ba <sbrk_aligned+0x12>
 80064b4:	f000 f8bc 	bl	8006630 <_sbrk_r>
 80064b8:	6030      	str	r0, [r6, #0]
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 f8b7 	bl	8006630 <_sbrk_r>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d00a      	beq.n	80064dc <sbrk_aligned+0x34>
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d007      	beq.n	80064e0 <sbrk_aligned+0x38>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 f8ac 	bl	8006630 <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d101      	bne.n	80064e0 <sbrk_aligned+0x38>
 80064dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064e0:	4620      	mov	r0, r4
 80064e2:	bd70      	pop	{r4, r5, r6, pc}
 80064e4:	200001b8 	.word	0x200001b8

080064e8 <_malloc_r>:
 80064e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ec:	1ccd      	adds	r5, r1, #3
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	4607      	mov	r7, r0
 80064fe:	db01      	blt.n	8006504 <_malloc_r+0x1c>
 8006500:	42a9      	cmp	r1, r5
 8006502:	d905      	bls.n	8006510 <_malloc_r+0x28>
 8006504:	230c      	movs	r3, #12
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	2600      	movs	r6, #0
 800650a:	4630      	mov	r0, r6
 800650c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006510:	4e2e      	ldr	r6, [pc, #184]	; (80065cc <_malloc_r+0xe4>)
 8006512:	f000 f89d 	bl	8006650 <__malloc_lock>
 8006516:	6833      	ldr	r3, [r6, #0]
 8006518:	461c      	mov	r4, r3
 800651a:	bb34      	cbnz	r4, 800656a <_malloc_r+0x82>
 800651c:	4629      	mov	r1, r5
 800651e:	4638      	mov	r0, r7
 8006520:	f7ff ffc2 	bl	80064a8 <sbrk_aligned>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	4604      	mov	r4, r0
 8006528:	d14d      	bne.n	80065c6 <_malloc_r+0xde>
 800652a:	6834      	ldr	r4, [r6, #0]
 800652c:	4626      	mov	r6, r4
 800652e:	2e00      	cmp	r6, #0
 8006530:	d140      	bne.n	80065b4 <_malloc_r+0xcc>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	4631      	mov	r1, r6
 8006536:	4638      	mov	r0, r7
 8006538:	eb04 0803 	add.w	r8, r4, r3
 800653c:	f000 f878 	bl	8006630 <_sbrk_r>
 8006540:	4580      	cmp	r8, r0
 8006542:	d13a      	bne.n	80065ba <_malloc_r+0xd2>
 8006544:	6821      	ldr	r1, [r4, #0]
 8006546:	3503      	adds	r5, #3
 8006548:	1a6d      	subs	r5, r5, r1
 800654a:	f025 0503 	bic.w	r5, r5, #3
 800654e:	3508      	adds	r5, #8
 8006550:	2d0c      	cmp	r5, #12
 8006552:	bf38      	it	cc
 8006554:	250c      	movcc	r5, #12
 8006556:	4629      	mov	r1, r5
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ffa5 	bl	80064a8 <sbrk_aligned>
 800655e:	3001      	adds	r0, #1
 8006560:	d02b      	beq.n	80065ba <_malloc_r+0xd2>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	442b      	add	r3, r5
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	e00e      	b.n	8006588 <_malloc_r+0xa0>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	1b52      	subs	r2, r2, r5
 800656e:	d41e      	bmi.n	80065ae <_malloc_r+0xc6>
 8006570:	2a0b      	cmp	r2, #11
 8006572:	d916      	bls.n	80065a2 <_malloc_r+0xba>
 8006574:	1961      	adds	r1, r4, r5
 8006576:	42a3      	cmp	r3, r4
 8006578:	6025      	str	r5, [r4, #0]
 800657a:	bf18      	it	ne
 800657c:	6059      	strne	r1, [r3, #4]
 800657e:	6863      	ldr	r3, [r4, #4]
 8006580:	bf08      	it	eq
 8006582:	6031      	streq	r1, [r6, #0]
 8006584:	5162      	str	r2, [r4, r5]
 8006586:	604b      	str	r3, [r1, #4]
 8006588:	4638      	mov	r0, r7
 800658a:	f104 060b 	add.w	r6, r4, #11
 800658e:	f000 f865 	bl	800665c <__malloc_unlock>
 8006592:	f026 0607 	bic.w	r6, r6, #7
 8006596:	1d23      	adds	r3, r4, #4
 8006598:	1af2      	subs	r2, r6, r3
 800659a:	d0b6      	beq.n	800650a <_malloc_r+0x22>
 800659c:	1b9b      	subs	r3, r3, r6
 800659e:	50a3      	str	r3, [r4, r2]
 80065a0:	e7b3      	b.n	800650a <_malloc_r+0x22>
 80065a2:	6862      	ldr	r2, [r4, #4]
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	bf0c      	ite	eq
 80065a8:	6032      	streq	r2, [r6, #0]
 80065aa:	605a      	strne	r2, [r3, #4]
 80065ac:	e7ec      	b.n	8006588 <_malloc_r+0xa0>
 80065ae:	4623      	mov	r3, r4
 80065b0:	6864      	ldr	r4, [r4, #4]
 80065b2:	e7b2      	b.n	800651a <_malloc_r+0x32>
 80065b4:	4634      	mov	r4, r6
 80065b6:	6876      	ldr	r6, [r6, #4]
 80065b8:	e7b9      	b.n	800652e <_malloc_r+0x46>
 80065ba:	230c      	movs	r3, #12
 80065bc:	603b      	str	r3, [r7, #0]
 80065be:	4638      	mov	r0, r7
 80065c0:	f000 f84c 	bl	800665c <__malloc_unlock>
 80065c4:	e7a1      	b.n	800650a <_malloc_r+0x22>
 80065c6:	6025      	str	r5, [r4, #0]
 80065c8:	e7de      	b.n	8006588 <_malloc_r+0xa0>
 80065ca:	bf00      	nop
 80065cc:	200001b4 	.word	0x200001b4

080065d0 <_realloc_r>:
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	4680      	mov	r8, r0
 80065d6:	4614      	mov	r4, r2
 80065d8:	460e      	mov	r6, r1
 80065da:	b921      	cbnz	r1, 80065e6 <_realloc_r+0x16>
 80065dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	4611      	mov	r1, r2
 80065e2:	f7ff bf81 	b.w	80064e8 <_malloc_r>
 80065e6:	b92a      	cbnz	r2, 80065f4 <_realloc_r+0x24>
 80065e8:	f7ff ff14 	bl	8006414 <_free_r>
 80065ec:	4625      	mov	r5, r4
 80065ee:	4628      	mov	r0, r5
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	f000 f838 	bl	8006668 <_malloc_usable_size_r>
 80065f8:	4284      	cmp	r4, r0
 80065fa:	4607      	mov	r7, r0
 80065fc:	d802      	bhi.n	8006604 <_realloc_r+0x34>
 80065fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006602:	d812      	bhi.n	800662a <_realloc_r+0x5a>
 8006604:	4621      	mov	r1, r4
 8006606:	4640      	mov	r0, r8
 8006608:	f7ff ff6e 	bl	80064e8 <_malloc_r>
 800660c:	4605      	mov	r5, r0
 800660e:	2800      	cmp	r0, #0
 8006610:	d0ed      	beq.n	80065ee <_realloc_r+0x1e>
 8006612:	42bc      	cmp	r4, r7
 8006614:	4622      	mov	r2, r4
 8006616:	4631      	mov	r1, r6
 8006618:	bf28      	it	cs
 800661a:	463a      	movcs	r2, r7
 800661c:	f7ff fba6 	bl	8005d6c <memcpy>
 8006620:	4631      	mov	r1, r6
 8006622:	4640      	mov	r0, r8
 8006624:	f7ff fef6 	bl	8006414 <_free_r>
 8006628:	e7e1      	b.n	80065ee <_realloc_r+0x1e>
 800662a:	4635      	mov	r5, r6
 800662c:	e7df      	b.n	80065ee <_realloc_r+0x1e>
	...

08006630 <_sbrk_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d06      	ldr	r5, [pc, #24]	; (800664c <_sbrk_r+0x1c>)
 8006634:	2300      	movs	r3, #0
 8006636:	4604      	mov	r4, r0
 8006638:	4608      	mov	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7fa fc94 	bl	8000f68 <_sbrk>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_sbrk_r+0x1a>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_sbrk_r+0x1a>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	200001bc 	.word	0x200001bc

08006650 <__malloc_lock>:
 8006650:	4801      	ldr	r0, [pc, #4]	; (8006658 <__malloc_lock+0x8>)
 8006652:	f000 b811 	b.w	8006678 <__retarget_lock_acquire_recursive>
 8006656:	bf00      	nop
 8006658:	200001c0 	.word	0x200001c0

0800665c <__malloc_unlock>:
 800665c:	4801      	ldr	r0, [pc, #4]	; (8006664 <__malloc_unlock+0x8>)
 800665e:	f000 b80c 	b.w	800667a <__retarget_lock_release_recursive>
 8006662:	bf00      	nop
 8006664:	200001c0 	.word	0x200001c0

08006668 <_malloc_usable_size_r>:
 8006668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800666c:	1f18      	subs	r0, r3, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfbc      	itt	lt
 8006672:	580b      	ldrlt	r3, [r1, r0]
 8006674:	18c0      	addlt	r0, r0, r3
 8006676:	4770      	bx	lr

08006678 <__retarget_lock_acquire_recursive>:
 8006678:	4770      	bx	lr

0800667a <__retarget_lock_release_recursive>:
 800667a:	4770      	bx	lr

0800667c <_init>:
 800667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667e:	bf00      	nop
 8006680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006682:	bc08      	pop	{r3}
 8006684:	469e      	mov	lr, r3
 8006686:	4770      	bx	lr

08006688 <_fini>:
 8006688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800668a:	bf00      	nop
 800668c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668e:	bc08      	pop	{r3}
 8006690:	469e      	mov	lr, r3
 8006692:	4770      	bx	lr

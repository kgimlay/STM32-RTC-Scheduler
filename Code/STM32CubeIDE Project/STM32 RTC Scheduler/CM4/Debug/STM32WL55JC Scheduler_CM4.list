
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad4  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004c0c  08004c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf0  08004cf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf8  08004cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08004d0c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08004d0c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010eb7  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273d  00000000  00000000  00030eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00033630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  000346d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c34b  00000000  00000000  00035688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103d1  00000000  00000000  000519d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b0024  00000000  00000000  00061da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111dc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004400  00000000  00000000  00111e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004bf4 	.word	0x08004bf4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08004bf4 	.word	0x08004bf4

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <initDesktopCommunication>:


/*
 *
 */
void initDesktopCommunication(UART_HandleTypeDef* uartHandle) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000490:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <initDesktopCommunication+0x20>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6013      	str	r3, [r2, #0]
//	uartQueue_init(&(_process_queue));
//	uartQueue_init(&(_report_queue));

	// set isInit flag
	_isInit = true;
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <initDesktopCommunication+0x24>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	2000002c 	.word	0x2000002c
 80004ac:	20000028 	.word	0x20000028

080004b0 <reportToDesktopApp>:
/*
 *
 */
REPORT_QUEUE_STATUS reportToDesktopApp(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b08a      	sub	sp, #40	; 0x28
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// Compose header and body into one message
	composeMessage(header, body, message);
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	461a      	mov	r2, r3
 80004c0:	6839      	ldr	r1, [r7, #0]
 80004c2:	6878      	ldr	r0, [r7, #4]
 80004c4:	f000 fb46 	bl	8000b54 <composeMessage>

	// if the queue is not full
//	if (!uartQueue_isFull(&_report_queue))
	if (!_report_queue_full)
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <reportToDesktopApp+0x88>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d12d      	bne.n	800052e <reportToDesktopApp+0x7e>
	{
		// disable IRQs from UART to prevent race condition
		if (_uartHandle->Instance == USART1)
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <reportToDesktopApp+0x8c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a19      	ldr	r2, [pc, #100]	; (8000540 <reportToDesktopApp+0x90>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d103      	bne.n	80004e6 <reportToDesktopApp+0x36>
			HAL_NVIC_DisableIRQ(USART1_IRQn);
 80004de:	2024      	movs	r0, #36	; 0x24
 80004e0:	f000 fd33 	bl	8000f4a <HAL_NVIC_DisableIRQ>
 80004e4:	e008      	b.n	80004f8 <reportToDesktopApp+0x48>
		else if (_uartHandle->Instance == USART2)
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <reportToDesktopApp+0x8c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a15      	ldr	r2, [pc, #84]	; (8000544 <reportToDesktopApp+0x94>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d102      	bne.n	80004f8 <reportToDesktopApp+0x48>
			HAL_NVIC_DisableIRQ(USART2_IRQn);
 80004f2:	2025      	movs	r0, #37	; 0x25
 80004f4:	f000 fd29 	bl	8000f4a <HAL_NVIC_DisableIRQ>
 80004f8:	68bb      	ldr	r3, [r7, #8]

		// queue into report queue
//		uartQueue_enqueue(&_report_queue, message);
		memcpy(_report_queue, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80004fa:	4a13      	ldr	r2, [pc, #76]	; (8000548 <reportToDesktopApp+0x98>)
 80004fc:	6013      	str	r3, [r2, #0]
		_report_queue_full = true;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <reportToDesktopApp+0x88>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]

		// enable UART IRQs
		if (_uartHandle->Instance == USART1)
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <reportToDesktopApp+0x8c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <reportToDesktopApp+0x90>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d103      	bne.n	8000518 <reportToDesktopApp+0x68>
			HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000510:	2024      	movs	r0, #36	; 0x24
 8000512:	f000 fd0c 	bl	8000f2e <HAL_NVIC_EnableIRQ>
 8000516:	e008      	b.n	800052a <reportToDesktopApp+0x7a>
		else if (_uartHandle->Instance == USART2)
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <reportToDesktopApp+0x8c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a09      	ldr	r2, [pc, #36]	; (8000544 <reportToDesktopApp+0x94>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d102      	bne.n	800052a <reportToDesktopApp+0x7a>
			HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000524:	2025      	movs	r0, #37	; 0x25
 8000526:	f000 fd02 	bl	8000f2e <HAL_NVIC_EnableIRQ>

		// report successfully queued
		return REPORT_QUEUED;
 800052a:	2300      	movs	r3, #0
 800052c:	e000      	b.n	8000530 <reportToDesktopApp+0x80>
	}

	// report queue is full
	else
	{
		return REPORT_FULL;
 800052e:	2301      	movs	r3, #1
	}
}
 8000530:	4618      	mov	r0, r3
 8000532:	3728      	adds	r7, #40	; 0x28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000071 	.word	0x20000071
 800053c:	2000002c 	.word	0x2000002c
 8000540:	40013800 	.word	0x40013800
 8000544:	40004400 	.word	0x40004400
 8000548:	20000050 	.word	0x20000050

0800054c <retrieveFromDesktopApp>:
/*
 *
 */
PROCESS_QUEUE_STATUS retrieveFromDesktopApp(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
//	if (!uartQueue_isEmpty(&_process_queue))
	if (_process_queue_full)
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <retrieveFromDesktopApp+0x88>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	b2db      	uxtb	r3, r3
 800055c:	2b00      	cmp	r3, #0
 800055e:	d034      	beq.n	80005ca <retrieveFromDesktopApp+0x7e>
	{
		// disable IRQs from UART to prevent race condition
		if (_uartHandle->Instance == USART1)
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <retrieveFromDesktopApp+0x8c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1d      	ldr	r2, [pc, #116]	; (80005dc <retrieveFromDesktopApp+0x90>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d103      	bne.n	8000574 <retrieveFromDesktopApp+0x28>
			HAL_NVIC_DisableIRQ(USART1_IRQn);
 800056c:	2024      	movs	r0, #36	; 0x24
 800056e:	f000 fcec 	bl	8000f4a <HAL_NVIC_DisableIRQ>
 8000572:	e008      	b.n	8000586 <retrieveFromDesktopApp+0x3a>
		else if (_uartHandle->Instance == USART2)
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <retrieveFromDesktopApp+0x8c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <retrieveFromDesktopApp+0x94>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d102      	bne.n	8000586 <retrieveFromDesktopApp+0x3a>
			HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000580:	2025      	movs	r0, #37	; 0x25
 8000582:	f000 fce2 	bl	8000f4a <HAL_NVIC_DisableIRQ>
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <retrieveFromDesktopApp+0x98>)
 8000588:	681b      	ldr	r3, [r3, #0]

		// retrieve message from process queue
//		uartQueue_dequeue(&_process_queue, message);
		memcpy(message, _process_queue, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 800058a:	60bb      	str	r3, [r7, #8]
		_process_queue_full = false;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <retrieveFromDesktopApp+0x88>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]

		// enable UART IRQs
		if (_uartHandle->Instance == USART1)
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <retrieveFromDesktopApp+0x8c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <retrieveFromDesktopApp+0x90>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d103      	bne.n	80005a6 <retrieveFromDesktopApp+0x5a>
			HAL_NVIC_EnableIRQ(USART1_IRQn);
 800059e:	2024      	movs	r0, #36	; 0x24
 80005a0:	f000 fcc5 	bl	8000f2e <HAL_NVIC_EnableIRQ>
 80005a4:	e008      	b.n	80005b8 <retrieveFromDesktopApp+0x6c>
		else if (_uartHandle->Instance == USART2)
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <retrieveFromDesktopApp+0x8c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <retrieveFromDesktopApp+0x94>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d102      	bne.n	80005b8 <retrieveFromDesktopApp+0x6c>
			HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005b2:	2025      	movs	r0, #37	; 0x25
 80005b4:	f000 fcbb 	bl	8000f2e <HAL_NVIC_EnableIRQ>

		// decompose header and body from message
		decomposeMessage(header, body, message);
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	461a      	mov	r2, r3
 80005be:	6839      	ldr	r1, [r7, #0]
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 fadd 	bl	8000b80 <decomposeMessage>

		// report successfully dequeued
		return PROCESS_DEQUEUED;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e000      	b.n	80005cc <retrieveFromDesktopApp+0x80>

	// report queue is empty
	else
	{
		// report empty
		return PROCESS_EMPTY;
 80005ca:	2301      	movs	r3, #1
	}
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000070 	.word	0x20000070
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	40013800 	.word	0x40013800
 80005e0:	40004400 	.word	0x40004400
 80005e4:	20000030 	.word	0x20000030

080005e8 <checkRxTxError>:


/*
 *
 */
bool checkRxTxError(void) {
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	return (_rxError || _txError);
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <checkRxTxError+0x2c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d104      	bne.n	8000600 <checkRxTxError+0x18>
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <checkRxTxError+0x30>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <checkRxTxError+0x1c>
 8000600:	2301      	movs	r3, #1
 8000602:	e000      	b.n	8000606 <checkRxTxError+0x1e>
 8000604:	2300      	movs	r3, #0
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	2000002a 	.word	0x2000002a
 8000618:	20000029 	.word	0x20000029

0800061c <flushReportQueue>:


/*
 *
 */
void flushReportQueue(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	// while the report queue is not empty
	while (!uartQueue_isEmpty(&_report_queue))
 8000620:	e005      	b.n	800062e <flushReportQueue+0x12>
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <flushReportQueue+0x2c>)
 8000624:	681b      	ldr	r3, [r3, #0]
	{
		// pop message from report queue and place in tx buffer
//		uartQueue_dequeue(&_report_queue, _txBuffer);
		memcpy(_txBuffer, _report_queue, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <flushReportQueue+0x30>)
 8000628:	6013      	str	r3, [r2, #0]

		// send message to computer
		_txMessage_Poll();
 800062a:	f000 f855 	bl	80006d8 <_txMessage_Poll>
	while (!uartQueue_isEmpty(&_report_queue))
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <flushReportQueue+0x2c>)
 8000630:	f000 fabc 	bl	8000bac <uartQueue_isEmpty>
 8000634:	4603      	mov	r3, r0
 8000636:	f083 0301 	eor.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f0      	bne.n	8000622 <flushReportQueue+0x6>
	}
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000050 	.word	0x20000050
 800064c:	20000074 	.word	0x20000074

08000650 <startDesktopAppCommunication>:


/*
 *
 */
void startDesktopAppCommunication(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	_rxMessage_IT();
 8000654:	f000 f828 	bl	80006a8 <_rxMessage_IT>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <deskAppRxCompleteISR>:


/*
 *
 */
void deskAppRxCompleteISR(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <deskAppRxCompleteISR+0x1c>)
 8000662:	681b      	ldr	r3, [r3, #0]
//		// todo: replace with something better
//		composeMessage("FULL", " BUFFER FULL!\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0", _txBuffer);
//		_txMessage_IT();
//	}

	memcpy(_process_queue, _rxBuffer, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <deskAppRxCompleteISR+0x20>)
 8000666:	6013      	str	r3, [r2, #0]
	_process_queue_full = true;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <deskAppRxCompleteISR+0x24>)
 800066a:	2201      	movs	r2, #1
 800066c:	701a      	strb	r2, [r3, #0]

	// begin receiving again
	_rxMessage_IT();
 800066e:	f000 f81b 	bl	80006a8 <_rxMessage_IT>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000094 	.word	0x20000094
 800067c:	20000030 	.word	0x20000030
 8000680:	20000070 	.word	0x20000070

08000684 <deskAppTxCompleteISR>:


/*
 *
 */
void deskAppTxCompleteISR(void) {
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
	_report_queue_full = false;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <deskAppTxCompleteISR+0x14>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000071 	.word	0x20000071

0800069c <deskAppErrorISR>:


/*
 *
 */
void deskAppErrorISR(void) {
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <_rxMessage_IT>:


/*
 *
 */
void _rxMessage_IT(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <_rxMessage_IT+0x24>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2220      	movs	r2, #32
 80006b2:	4907      	ldr	r1, [pc, #28]	; (80006d0 <_rxMessage_IT+0x28>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fabd 	bl	8002c34 <HAL_UART_Receive_IT>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d102      	bne.n	80006c6 <_rxMessage_IT+0x1e>
		_rxError = true;
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <_rxMessage_IT+0x2c>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000002c 	.word	0x2000002c
 80006d0:	20000094 	.word	0x20000094
 80006d4:	2000002a 	.word	0x2000002a

080006d8 <_txMessage_Poll>:


/*
 *
 */
void _txMessage_Poll(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_txMessage_Poll+0x24>)
 80006de:	6818      	ldr	r0, [r3, #0]
 80006e0:	23fa      	movs	r3, #250	; 0xfa
 80006e2:	2220      	movs	r2, #32
 80006e4:	4906      	ldr	r1, [pc, #24]	; (8000700 <_txMessage_Poll+0x28>)
 80006e6:	f002 fa1e 	bl	8002b26 <HAL_UART_Transmit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d102      	bne.n	80006f6 <_txMessage_Poll+0x1e>
		_txError = true;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <_txMessage_Poll+0x2c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	20000074 	.word	0x20000074
 8000704:	20000029 	.word	0x20000029

08000708 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000718:	f023 0218 	bic.w	r2, r3, #24
 800071c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4313      	orrs	r3, r2
 8000724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000732:	b480      	push	{r7}
 8000734:	b085      	sub	sp, #20
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800073a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4313      	orrs	r3, r2
 8000748:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800074a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800074e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4013      	ands	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000756:	68fb      	ldr	r3, [r7, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
	...

08000764 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a06      	ldr	r2, [pc, #24]	; (800078c <HAL_UART_ErrorCallback+0x28>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d006      	beq.n	8000784 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a05      	ldr	r2, [pc, #20]	; (8000790 <HAL_UART_ErrorCallback+0x2c>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d101      	bne.n	8000784 <HAL_UART_ErrorCallback+0x20>
		deskAppErrorISR();
 8000780:	f7ff ff8c 	bl	800069c <deskAppErrorISR>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40013800 	.word	0x40013800
 8000790:	40004400 	.word	0x40004400

08000794 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_UART_TxCpltCallback+0x28>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d006      	beq.n	80007b4 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <HAL_UART_TxCpltCallback+0x2c>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d101      	bne.n	80007b4 <HAL_UART_TxCpltCallback+0x20>
		deskAppTxCompleteISR();
 80007b0:	f7ff ff68 	bl	8000684 <deskAppTxCompleteISR>
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40013800 	.word	0x40013800
 80007c0:	40004400 	.word	0x40004400

080007c4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_UART_RxCpltCallback+0x28>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d006      	beq.n	80007e4 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <HAL_UART_RxCpltCallback+0x2c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d101      	bne.n	80007e4 <HAL_UART_RxCpltCallback+0x20>
		deskAppRxCompleteISR();
 80007e0:	f7ff ff3c 	bl	800065c <deskAppRxCompleteISR>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40013800 	.word	0x40013800
 80007f0:	40004400 	.word	0x40004400

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 fa0d 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f831 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 f8df 	bl	80009c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000806:	f000 f887 	bl	8000918 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800080a:	2001      	movs	r0, #1
 800080c:	f000 fdfc 	bl	8001408 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  initDesktopCommunication(&huart2);
 8000810:	4813      	ldr	r0, [pc, #76]	; (8000860 <main+0x6c>)
 8000812:	f7ff fe39 	bl	8000488 <initDesktopCommunication>

  // begin listening for messages from desktop
  startDesktopAppCommunication();
 8000816:	f7ff ff1b 	bl	8000650 <startDesktopAppCommunication>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  PROCESS_QUEUE_STATUS messageStatus;
  int messageCount = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {
	  // check if there was an error in rx or tx
	  if (checkRxTxError())
 800081e:	f7ff fee3 	bl	80005e8 <checkRxTxError>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d000      	beq.n	800082a <main+0x36>
		  while (1) {}
 8000828:	e7fe      	b.n	8000828 <main+0x34>

	  // flush the report queue
	  flushReportQueue();
 800082a:	f7ff fef7 	bl	800061c <flushReportQueue>

	  // check for message in the process queue
	  messageStatus = retrieveFromDesktopApp(messageHeader, messageBody);
 800082e:	463a      	mov	r2, r7
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe88 	bl	800054c <retrieveFromDesktopApp>
 800083c:	4603      	mov	r3, r0
 800083e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  // if message present, handle message
	  if (messageStatus == PROCESS_DEQUEUED) {
 8000842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1e9      	bne.n	800081e <main+0x2a>
		  // echo back to computer
		  reportToDesktopApp(messageHeader, messageBody);
 800084a:	463a      	mov	r2, r7
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fe2c 	bl	80004b0 <reportToDesktopApp>
		  messageCount++;
 8000858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085a:	3301      	adds	r3, #1
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
	  if (checkRxTxError())
 800085e:	e7de      	b.n	800081e <main+0x2a>
 8000860:	200000b4 	.word	0x200000b4

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09a      	sub	sp, #104	; 0x68
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0320 	add.w	r3, r7, #32
 800086e:	2248      	movs	r2, #72	; 0x48
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f004 f9b6 	bl	8004be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800088a:	f000 fd95 	bl	80013b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ff3a 	bl	8000708 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <SystemClock_Config+0xb0>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800089c:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <SystemClock_Config+0xb0>)
 800089e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <SystemClock_Config+0xb0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008b0:	2324      	movs	r3, #36	; 0x24
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008b4:	2381      	movs	r3, #129	; 0x81
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008bc:	2300      	movs	r3, #0
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008c0:	2360      	movs	r3, #96	; 0x60
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f85d 	bl	800198c <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008d8:	f000 f881 	bl	80009de <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80008dc:	236f      	movs	r3, #111	; 0x6f
 80008de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 fbc7 	bl	8002090 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000908:	f000 f869 	bl	80009de <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3768      	adds	r7, #104	; 0x68
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58000400 	.word	0x58000400

08000918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 800091e:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <MX_USART2_UART_Init+0xa8>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000922:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000924:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000938:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800093c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000940:	220c      	movs	r2, #12
 8000942:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 800095e:	2230      	movs	r2, #48	; 0x30
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000968:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 800096c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000970:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000974:	f002 f887 	bl	8002a86 <HAL_UART_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800097e:	f000 f82e 	bl	80009de <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000986:	f004 f832 	bl	80049ee <HAL_UARTEx_SetTxFifoThreshold>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000990:	f000 f825 	bl	80009de <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000994:	2100      	movs	r1, #0
 8000996:	4809      	ldr	r0, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 8000998:	f004 f867 	bl	8004a6a <HAL_UARTEx_SetRxFifoThreshold>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80009a2:	f000 f81c 	bl	80009de <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0xa4>)
 80009a8:	f003 ffe9 	bl	800497e <HAL_UARTEx_DisableFifoMode>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 80009b2:	f000 f814 	bl	80009de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000b4 	.word	0x200000b4
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff feb2 	bl	8000732 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2004      	movs	r0, #4
 80009d0:	f7ff feaf 	bl	8000732 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	2002      	movs	r0, #2
 80009d6:	f7ff feac 	bl	8000732 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}

080009de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e2:	b672      	cpsid	i
}
 80009e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <Error_Handler+0x8>

080009e8 <LL_AHB2_GRP1_EnableClock>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b096      	sub	sp, #88	; 0x58
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2238      	movs	r2, #56	; 0x38
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 f8b5 	bl	8004be4 <memset>
  if(huart->Instance==USART2)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_UART_MspInit+0x98>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d12e      	bne.n	8000ae2 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a8c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 febc 	bl	8002810 <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9e:	f7ff ff9e 	bl	80009de <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000aa6:	f7ff ffb7 	bl	8000a18 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f7ff ff9c 	bl	80009e8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f000 fb13 	bl	80010f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2025      	movs	r0, #37	; 0x25
 8000ad8:	f000 fa0f 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000adc:	2025      	movs	r0, #37	; 0x25
 8000ade:	f000 fa26 	bl	8000f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3758      	adds	r7, #88	; 0x58
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <NMI_Handler+0x4>

08000af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <HardFault_Handler+0x4>

08000afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <MemManage_Handler+0x4>

08000b02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b36:	f000 f8c9 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <USART2_IRQHandler+0x10>)
 8000b46:	f002 f8c1 	bl	8002ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200000b4 	.word	0x200000b4

08000b54 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	221c      	movs	r2, #28
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f004 f828 	bl	8004bc8 <memcpy>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	221c      	movs	r2, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	68b8      	ldr	r0, [r7, #8]
 8000ba0:	f004 f812 	bl	8004bc8 <memcpy>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <uartQueue_isEmpty>:
}

/*
 *
 */
bool uartQueue_isEmpty(UART_Queue* queue) {
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	return (queue->_isEmpty);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b2db      	uxtb	r3, r3
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bc8:	f7ff fc58 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0a      	ldr	r4, [pc, #40]	; (8000c10 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bf2:	f003 ffc5 	bl	8004b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf6:	f7ff fdfd 	bl	80007f4 <main>

08000bfa <LoopForever>:

LoopForever:
    b LoopForever
 8000bfa:	e7fe      	b.n	8000bfa <LoopForever>
  ldr   r0, =_estack
 8000bfc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c08:	08004d00 	.word	0x08004d00
  ldr r2, =_sbss
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c10:	2000014c 	.word	0x2000014c

08000c14 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f95e 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000c28:	f001 fc14 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <HAL_Init+0x3c>)
 8000c30:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c32:	2000      	movs	r0, #0
 8000c34:	f000 f810 	bl	8000c58 <HAL_InitTick>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	e001      	b.n	8000c48 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c44:	f7ff ff00 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000000 	.word	0x20000000

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d024      	beq.n	8000cb6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c6c:	f001 fbf2 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8000c70:	4602      	mov	r2, r0
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_InitTick+0x6c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4619      	mov	r1, r3
 8000c78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f96e 	bl	8000f66 <HAL_SYSTICK_Config>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10f      	bne.n	8000cb0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	d809      	bhi.n	8000caa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c96:	2200      	movs	r2, #0
 8000c98:	6879      	ldr	r1, [r7, #4]
 8000c9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9e:	f000 f92c 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <HAL_InitTick+0x70>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e007      	b.n	8000cba <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	e004      	b.n	8000cba <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	73fb      	strb	r3, [r7, #15]
 8000cb4:	e001      	b.n	8000cba <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <HAL_IncTick+0x20>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000148 	.word	0x20000148

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	20000148 	.word	0x20000148

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	db0b      	blt.n	8000d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f003 021f 	and.w	r2, r3, #31
 8000d80:	4906      	ldr	r1, [pc, #24]	; (8000d9c <__NVIC_EnableIRQ+0x34>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	2001      	movs	r0, #1
 8000d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db12      	blt.n	8000dd8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	490a      	ldr	r1, [pc, #40]	; (8000de4 <__NVIC_DisableIRQ+0x44>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	3320      	adds	r3, #32
 8000dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dcc:	f3bf 8f4f 	dsb	sy
}
 8000dd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd2:	f3bf 8f6f 	isb	sy
}
 8000dd6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	; (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	; (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	; 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec4:	f7ff ff90 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff09 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f08:	f7ff ff20 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68b9      	ldr	r1, [r7, #8]
 8000f12:	6978      	ldr	r0, [r7, #20]
 8000f14:	f7ff ff92 	bl	8000e3c <NVIC_EncodePriority>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff61 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff13 	bl	8000d68 <__NVIC_EnableIRQ>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff21 	bl	8000da0 <__NVIC_DisableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff96 	bl	8000ea0 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e04f      	b.n	8001030 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d008      	beq.n	8000fae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e040      	b.n	8001030 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 020e 	bic.w	r2, r2, #14
 8000fbc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0201 	bic.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f003 021c 	and.w	r2, r3, #28
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	2101      	movs	r1, #1
 8000fec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000ffa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00c      	beq.n	800101e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001012:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800101c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d005      	beq.n	800105e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2204      	movs	r2, #4
 8001056:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e047      	b.n	80010ee <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 020e 	bic.w	r2, r2, #14
 800106c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0201 	bic.w	r2, r2, #1
 800107c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800108c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f003 021c 	and.w	r2, r3, #28
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	2101      	movs	r1, #1
 800109c:	fa01 f202 	lsl.w	r2, r1, r2
 80010a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00c      	beq.n	80010ce <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	4798      	blx	r3
    }
  }
  return status;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	e140      	b.n	800138a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	2101      	movs	r1, #1
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 8132 	beq.w	8001384 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d005      	beq.n	8001138 <HAL_GPIO_Init+0x40>
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d130      	bne.n	800119a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116e:	2201      	movs	r2, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	f003 0201 	and.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d017      	beq.n	80011d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d123      	bne.n	800122a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	08da      	lsrs	r2, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	3208      	adds	r2, #8
 80011ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691a      	ldr	r2, [r3, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	6939      	ldr	r1, [r7, #16]
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0203 	and.w	r2, r3, #3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 808c 	beq.w	8001384 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	2207      	movs	r2, #7
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001296:	d00d      	beq.n	80012b4 <HAL_GPIO_Init+0x1bc>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a44      	ldr	r2, [pc, #272]	; (80013ac <HAL_GPIO_Init+0x2b4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_Init+0x1b8>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a43      	ldr	r2, [pc, #268]	; (80013b0 <HAL_GPIO_Init+0x2b8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d101      	bne.n	80012ac <HAL_GPIO_Init+0x1b4>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e004      	b.n	80012b6 <HAL_GPIO_Init+0x1be>
 80012ac:	2307      	movs	r3, #7
 80012ae:	e002      	b.n	80012b6 <HAL_GPIO_Init+0x1be>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <HAL_GPIO_Init+0x1be>
 80012b4:	2300      	movs	r3, #0
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4093      	lsls	r3, r2
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c6:	4938      	ldr	r1, [pc, #224]	; (80013a8 <HAL_GPIO_Init+0x2b0>)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f8:	4a2e      	ldr	r2, [pc, #184]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001322:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 800132a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800132e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800134e:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 8001358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800135c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_GPIO_Init+0x2bc>)
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	f47f aeb7 	bne.w	8001108 <HAL_GPIO_Init+0x10>
  }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40010000 	.word	0x40010000
 80013ac:	48000400 	.word	0x48000400
 80013b0:	48000800 	.word	0x48000800
 80013b4:	58000800 	.word	0x58000800

080013b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	58000400 	.word	0x58000400

080013d4 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <LL_PWR_EnableBootC2+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <LL_PWR_EnableBootC2+0x18>)
 80013de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	58000400 	.word	0x58000400

080013f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80013f4:	4b03      	ldr	r3, [pc, #12]	; (8001404 <HAL_PWREx_GetVoltageRange+0x14>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	58000400 	.word	0x58000400

08001408 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001410:	f7ff ffe0 	bl	80013d4 <LL_PWR_EnableBootC2>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <LL_PWR_IsEnabledBkUpAccess>:
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800142c:	d101      	bne.n	8001432 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	58000400 	.word	0x58000400

08001440 <LL_RCC_HSE_EnableTcxo>:
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800144e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <LL_RCC_HSE_DisableTcxo>:
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800146a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800148a:	d101      	bne.n	8001490 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <LL_RCC_HSE_Enable>:
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800149e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <LL_RCC_HSE_Disable>:
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <LL_RCC_HSE_IsReady>:
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80014d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014e4:	d101      	bne.n	80014ea <LL_RCC_HSE_IsReady+0x18>
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <LL_RCC_HSE_IsReady+0x1a>
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <LL_RCC_HSI_Enable>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80014f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <LL_RCC_HSI_Disable>:
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <LL_RCC_HSI_IsReady>:
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153e:	d101      	bne.n	8001544 <LL_RCC_HSI_IsReady+0x18>
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <LL_RCC_HSI_IsReady+0x1a>
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <LL_RCC_HSI_SetCalibTrimming>:
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	061b      	lsls	r3, r3, #24
 8001564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b02      	cmp	r3, #2
 8001588:	d101      	bne.n	800158e <LL_RCC_LSE_IsReady+0x18>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <LL_RCC_LSE_IsReady+0x1a>
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800159c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d101      	bne.n	80015f0 <LL_RCC_LSI_IsReady+0x18>
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <LL_RCC_LSI_IsReady+0x1a>
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80015fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001624:	f023 0301 	bic.w	r3, r3, #1
 8001628:	6013      	str	r3, [r2, #0]
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b02      	cmp	r3, #2
 8001642:	d101      	bne.n	8001648 <LL_RCC_MSI_IsReady+0x16>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <LL_RCC_MSI_IsReady+0x18>
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b08      	cmp	r3, #8
 8001662:	d101      	bne.n	8001668 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800168c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001694:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 0203 	bic.w	r2, r3, #3
 80016da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 030c 	and.w	r3, r3, #12
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001736:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800173a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800173e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4313      	orrs	r3, r2
 8001746:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001764:	f023 020f 	bic.w	r2, r3, #15
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001770:	4313      	orrs	r3, r2
 8001772:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4313      	orrs	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800182c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001872:	d101      	bne.n	8001878 <LL_RCC_PLL_IsReady+0x18>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <LL_RCC_PLL_IsReady+0x1a>
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800189e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0303 	and.w	r3, r3, #3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ee:	d101      	bne.n	80018f4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr

080018fe <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001912:	d101      	bne.n	8001918 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001936:	d101      	bne.n	800193c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001958:	d101      	bne.n	800195e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800196c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001976:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800197a:	d101      	bne.n	8001980 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e36f      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199e:	f7ff fea6 	bl	80016ee <LL_RCC_GetSysClkSource>
 80019a2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a4:	f7ff ff8f 	bl	80018c6 <LL_RCC_PLL_GetMainSource>
 80019a8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0320 	and.w	r3, r3, #32
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80c4 	beq.w	8001b40 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x3e>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d176      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d173      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e353      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_OscConfig+0x68>
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f2:	e006      	b.n	8001a02 <HAL_RCC_OscConfig+0x76>
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d222      	bcs.n	8001a4c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fd5a 	bl	80024c4 <RCC_SetFlashLatencyFromMSIRange>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e331      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe2b 	bl	80016a0 <LL_RCC_MSI_SetCalibTrimming>
 8001a4a:	e021      	b.n	8001a90 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a56:	f043 0308 	orr.w	r3, r3, #8
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fe12 	bl	80016a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fd1f 	bl	80024c4 <RCC_SetFlashLatencyFromMSIRange>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e2f6      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a90:	f000 fce0 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4aa7      	ldr	r2, [pc, #668]	; (8001d34 <HAL_RCC_OscConfig+0x3a8>)
 8001a98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001a9a:	4ba7      	ldr	r3, [pc, #668]	; (8001d38 <HAL_RCC_OscConfig+0x3ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f8da 	bl	8000c58 <HAL_InitTick>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001aa8:	7cfb      	ldrb	r3, [r7, #19]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d047      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001aae:	7cfb      	ldrb	r3, [r7, #19]
 8001ab0:	e2e5      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d02c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aba:	f7ff fd9e 	bl	80015fa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001abe:	f7ff f917 	bl	8000cf0 <HAL_GetTick>
 8001ac2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f913 	bl	8000cf0 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e2d2      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ad8:	f7ff fdab 	bl	8001632 <LL_RCC_MSI_IsReady>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f1      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aec:	f043 0308 	orr.w	r3, r3, #8
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fdc7 	bl	80016a0 <LL_RCC_MSI_SetCalibTrimming>
 8001b12:	e015      	b.n	8001b40 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b14:	f7ff fd7f 	bl	8001616 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b18:	f7ff f8ea 	bl	8000cf0 <HAL_GetTick>
 8001b1c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b20:	f7ff f8e6 	bl	8000cf0 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e2a5      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001b32:	f7ff fd7e 	bl	8001632 <LL_RCC_MSI_IsReady>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f1      	bne.n	8001b20 <HAL_RCC_OscConfig+0x194>
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b3e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d058      	beq.n	8001bfe <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d2>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d108      	bne.n	8001b6a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d14b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e289      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0x204>
 8001b8a:	f7ff fc86 	bl	800149a <LL_RCC_HSE_Enable>
 8001b8e:	e00d      	b.n	8001bac <HAL_RCC_OscConfig+0x220>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001b98:	d104      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x218>
 8001b9a:	f7ff fc51 	bl	8001440 <LL_RCC_HSE_EnableTcxo>
 8001b9e:	f7ff fc7c 	bl	800149a <LL_RCC_HSE_Enable>
 8001ba2:	e003      	b.n	8001bac <HAL_RCC_OscConfig+0x220>
 8001ba4:	f7ff fc87 	bl	80014b6 <LL_RCC_HSE_Disable>
 8001ba8:	f7ff fc58 	bl	800145c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d012      	beq.n	8001bda <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f89c 	bl	8000cf0 <HAL_GetTick>
 8001bb8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f898 	bl	8000cf0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e257      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001bce:	f7ff fc80 	bl	80014d2 <LL_RCC_HSE_IsReady>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f1      	beq.n	8001bbc <HAL_RCC_OscConfig+0x230>
 8001bd8:	e011      	b.n	8001bfe <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff f889 	bl	8000cf0 <HAL_GetTick>
 8001bde:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be2:	f7ff f885 	bl	8000cf0 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	; 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e244      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001bf4:	f7ff fc6d 	bl	80014d2 <LL_RCC_HSE_IsReady>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f1      	bne.n	8001be2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d046      	beq.n	8001c98 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_OscConfig+0x290>
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d10e      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d10b      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e22a      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fc8e 	bl	800154e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c32:	e031      	b.n	8001c98 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d019      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c3c:	f7ff fc5a 	bl	80014f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff f856 	bl	8000cf0 <HAL_GetTick>
 8001c44:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff f852 	bl	8000cf0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e211      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001c5a:	f7ff fc67 	bl	800152c <LL_RCC_HSI_IsReady>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f1      	beq.n	8001c48 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fc70 	bl	800154e <LL_RCC_HSI_SetCalibTrimming>
 8001c6e:	e013      	b.n	8001c98 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c70:	f7ff fc4e 	bl	8001510 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f83c 	bl	8000cf0 <HAL_GetTick>
 8001c78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f838 	bl	8000cf0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e1f7      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001c8e:	f7ff fc4d 	bl	800152c <LL_RCC_HSI_IsReady>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f1      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d06e      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d056      	beq.n	8001d5a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d031      	beq.n	8001d28 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d006      	beq.n	8001cdc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e1d0      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d013      	beq.n	8001d0e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ce6:	f7ff fc67 	bl	80015b8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cea:	f7ff f801 	bl	8000cf0 <HAL_GetTick>
 8001cee:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7fe fffd 	bl	8000cf0 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b11      	cmp	r3, #17
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1bc      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001d04:	f7ff fc68 	bl	80015d8 <LL_RCC_LSI_IsReady>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f1      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d16:	f023 0210 	bic.w	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d28:	f7ff fc36 	bl	8001598 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7fe ffe0 	bl	8000cf0 <HAL_GetTick>
 8001d30:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001d32:	e00c      	b.n	8001d4e <HAL_RCC_OscConfig+0x3c2>
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7fe ffd8 	bl	8000cf0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b11      	cmp	r3, #17
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e197      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001d4e:	f7ff fc43 	bl	80015d8 <LL_RCC_LSI_IsReady>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f1      	beq.n	8001d3c <HAL_RCC_OscConfig+0x3b0>
 8001d58:	e013      	b.n	8001d82 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5a:	f7ff fc2d 	bl	80015b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7fe ffc7 	bl	8000cf0 <HAL_GetTick>
 8001d62:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d66:	f7fe ffc3 	bl	8000cf0 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b11      	cmp	r3, #17
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e182      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001d78:	f7ff fc2e 	bl	80015d8 <LL_RCC_LSI_IsReady>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f1      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80d8 	beq.w	8001f40 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001d90:	f7ff fb44 	bl	800141c <LL_PWR_IsEnabledBkUpAccess>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d113      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001d9a:	f7ff fb0d 	bl	80013b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9e:	f7fe ffa7 	bl	8000cf0 <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7fe ffa3 	bl	8000cf0 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e162      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001db8:	f7ff fb30 	bl	800141c <LL_PWR_IsEnabledBkUpAccess>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f1      	beq.n	8001da6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d07b      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b85      	cmp	r3, #133	; 0x85
 8001dd0:	d003      	beq.n	8001dda <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe ff7f 	bl	8000cf0 <HAL_GetTick>
 8001df2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ff71 	bl	8000cf0 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e12e      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001e20:	f7ff fba9 	bl	8001576 <LL_RCC_LSE_IsReady>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0ef      	beq.n	8001e0a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b81      	cmp	r3, #129	; 0x81
 8001e30:	d003      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b85      	cmp	r3, #133	; 0x85
 8001e38:	d121      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe ff59 	bl	8000cf0 <HAL_GetTick>
 8001e3e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe ff4b 	bl	8000cf0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e108      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0ec      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001e7c:	e060      	b.n	8001f40 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7fe ff37 	bl	8000cf0 <HAL_GetTick>
 8001e82:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7fe ff29 	bl	8000cf0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0e6      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1ec      	bne.n	8001e9a <HAL_RCC_OscConfig+0x50e>
 8001ec0:	e03e      	b.n	8001f40 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7fe ff15 	bl	8000cf0 <HAL_GetTick>
 8001ec6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7fe ff07 	bl	8000cf0 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0c4      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1ec      	bne.n	8001ede <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f04:	f7fe fef4 	bl	8000cf0 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7fe fee6 	bl	8000cf0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0a3      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001f36:	f7ff fb1e 	bl	8001576 <LL_RCC_LSE_IsReady>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ef      	bne.n	8001f20 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8099 	beq.w	800207c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d06c      	beq.n	800202a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d14b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	f7ff fc74 	bl	8001844 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7fe fec8 	bl	8000cf0 <HAL_GetTick>
 8001f60:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7fe fec4 	bl	8000cf0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b0a      	cmp	r3, #10
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e083      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001f76:	f7ff fc73 	bl	8001860 <LL_RCC_PLL_IsReady>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f1      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_RCC_OscConfig+0x6fc>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f98:	0212      	lsls	r2, r2, #8
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fa6:	4311      	orrs	r1, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fac:	430a      	orrs	r2, r1
 8001fae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb6:	f7ff fc37 	bl	8001828 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7fe fe91 	bl	8000cf0 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7fe fe8d 	bl	8000cf0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b0a      	cmp	r3, #10
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e04c      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001fe4:	f7ff fc3c 	bl	8001860 <LL_RCC_PLL_IsReady>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f1      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x646>
 8001fee:	e045      	b.n	800207c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff0:	f7ff fc28 	bl	8001844 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe fe7c 	bl	8000cf0 <HAL_GetTick>
 8001ff8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe fe78 	bl	8000cf0 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b0a      	cmp	r3, #10
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e037      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800200e:	f7ff fc27 	bl	8001860 <LL_RCC_PLL_IsReady>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f1      	bne.n	8001ffc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_RCC_OscConfig+0x700>)
 8002024:	4013      	ands	r3, r2
 8002026:	60cb      	str	r3, [r1, #12]
 8002028:	e028      	b.n	800207c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e023      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f003 0203 	and.w	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	429a      	cmp	r2, r3
 800204a:	d115      	bne.n	8002078 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002056:	429a      	cmp	r2, r3
 8002058:	d10e      	bne.n	8002078 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	429a      	cmp	r2, r3
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	11c1808c 	.word	0x11c1808c
 800208c:	eefefffc 	.word	0xeefefffc

08002090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e12c      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020a4:	4b98      	ldr	r3, [pc, #608]	; (8002308 <HAL_RCC_ClockConfig+0x278>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d91b      	bls.n	80020ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b2:	4b95      	ldr	r3, [pc, #596]	; (8002308 <HAL_RCC_ClockConfig+0x278>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 0207 	bic.w	r2, r3, #7
 80020ba:	4993      	ldr	r1, [pc, #588]	; (8002308 <HAL_RCC_ClockConfig+0x278>)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c2:	f7fe fe15 	bl	8000cf0 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020ca:	f7fe fe11 	bl	8000cf0 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e110      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020dc:	4b8a      	ldr	r3, [pc, #552]	; (8002308 <HAL_RCC_ClockConfig+0x278>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d1ef      	bne.n	80020ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fb02 	bl	8001704 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002100:	f7fe fdf6 	bl	8000cf0 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002108:	f7fe fdf2 	bl	8000cf0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e0f1      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800211a:	f7ff fbdf 	bl	80018dc <LL_RCC_IsActiveFlag_HPRE>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f1      	beq.n	8002108 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d016      	beq.n	800215e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff faf8 	bl	800172a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800213a:	f7fe fdd9 	bl	8000cf0 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002142:	f7fe fdd5 	bl	8000cf0 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0d4      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002154:	f7ff fbd3 	bl	80018fe <LL_RCC_IsActiveFlag_C2HPRE>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f1      	beq.n	8002142 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff faf0 	bl	8001754 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002174:	f7fe fdbc 	bl	8000cf0 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800217c:	f7fe fdb8 	bl	8000cf0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0b7      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800218e:	f7ff fbc8 	bl	8001922 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f1      	beq.n	800217c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d016      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fae9 	bl	8001780 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021ae:	f7fe fd9f 	bl	8000cf0 <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021b6:	f7fe fd9b 	bl	8000cf0 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e09a      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80021c8:	f7ff fbbd 	bl	8001946 <LL_RCC_IsActiveFlag_PPRE1>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f1      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d017      	beq.n	800220e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fade 	bl	80017a6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80021ea:	f7fe fd81 	bl	8000cf0 <HAL_GetTick>
 80021ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80021f2:	f7fe fd7d 	bl	8000cf0 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e07c      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002204:	f7ff fbb0 	bl	8001968 <LL_RCC_IsActiveFlag_PPRE2>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f1      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d043      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d106      	bne.n	8002230 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002222:	f7ff f956 	bl	80014d2 <LL_RCC_HSE_IsReady>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d11e      	bne.n	800226a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e066      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d106      	bne.n	8002246 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002238:	f7ff fb12 	bl	8001860 <LL_RCC_PLL_IsReady>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d113      	bne.n	800226a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e05b      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800224e:	f7ff f9f0 	bl	8001632 <LL_RCC_MSI_IsReady>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d108      	bne.n	800226a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e050      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800225c:	f7ff f966 	bl	800152c <LL_RCC_HSI_IsReady>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e049      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fa2a 	bl	80016c8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7fe fd3c 	bl	8000cf0 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe fd38 	bl	8000cf0 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e035      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	f7ff fa2c 	bl	80016ee <LL_RCC_GetSysClkSource>
 8002296:	4602      	mov	r2, r0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	429a      	cmp	r2, r3
 80022a0:	d1ec      	bne.n	800227c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_ClockConfig+0x278>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d21b      	bcs.n	80022e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCC_ClockConfig+0x278>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 0207 	bic.w	r2, r3, #7
 80022b8:	4913      	ldr	r1, [pc, #76]	; (8002308 <HAL_RCC_ClockConfig+0x278>)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022c0:	f7fe fd16 	bl	8000cf0 <HAL_GetTick>
 80022c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c6:	e008      	b.n	80022da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022c8:	f7fe fd12 	bl	8000cf0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e011      	b.n	80022fe <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_ClockConfig+0x278>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1ef      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022e8:	f000 f8b4 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_RCC_ClockConfig+0x27c>)
 80022f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_RCC_ClockConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fcae 	bl	8000c58 <HAL_InitTick>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	58004000 	.word	0x58004000
 800230c:	20000000 	.word	0x20000000
 8002310:	20000004 	.word	0x20000004

08002314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002322:	f7ff f9e4 	bl	80016ee <LL_RCC_GetSysClkSource>
 8002326:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002328:	f7ff facd 	bl	80018c6 <LL_RCC_PLL_GetMainSource>
 800232c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x2c>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b0c      	cmp	r3, #12
 8002338:	d139      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d136      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002340:	f7ff f987 	bl	8001652 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d115      	bne.n	8002376 <HAL_RCC_GetSysClockFreq+0x62>
 800234a:	f7ff f982 	bl	8001652 <LL_RCC_MSI_IsEnabledRangeSelect>
 800234e:	4603      	mov	r3, r0
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_GetSysClockFreq+0x4e>
 8002354:	f7ff f98d 	bl	8001672 <LL_RCC_MSI_GetRange>
 8002358:	4603      	mov	r3, r0
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	e005      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x5a>
 8002362:	f7ff f991 	bl	8001688 <LL_RCC_MSI_GetRangeAfterStandby>
 8002366:	4603      	mov	r3, r0
 8002368:	0a1b      	lsrs	r3, r3, #8
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4a36      	ldr	r2, [pc, #216]	; (8002448 <HAL_RCC_GetSysClockFreq+0x134>)
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	e014      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x8c>
 8002376:	f7ff f96c 	bl	8001652 <LL_RCC_MSI_IsEnabledRangeSelect>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_GetSysClockFreq+0x7a>
 8002380:	f7ff f977 	bl	8001672 <LL_RCC_MSI_GetRange>
 8002384:	4603      	mov	r3, r0
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	e005      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x86>
 800238e:	f7ff f97b 	bl	8001688 <LL_RCC_MSI_GetRangeAfterStandby>
 8002392:	4603      	mov	r3, r0
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	4a2b      	ldr	r2, [pc, #172]	; (8002448 <HAL_RCC_GetSysClockFreq+0x134>)
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d115      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023ac:	e012      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d102      	bne.n	80023ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_RCC_GetSysClockFreq+0x138>)
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e00c      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d109      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80023c0:	f7ff f85a 	bl	8001478 <LL_RCC_HSE_IsEnabledDiv2>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_GetSysClockFreq+0x138>)
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e001      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	; (8002450 <HAL_RCC_GetSysClockFreq+0x13c>)
 80023d2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d4:	f7ff f98b 	bl	80016ee <LL_RCC_GetSysClkSource>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d12f      	bne.n	800243e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80023de:	f7ff fa72 	bl	80018c6 <LL_RCC_PLL_GetMainSource>
 80023e2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0xde>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b03      	cmp	r3, #3
 80023ee:	d003      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0xe4>
 80023f0:	e00d      	b.n	800240e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_RCC_GetSysClockFreq+0x138>)
 80023f4:	60fb      	str	r3, [r7, #12]
        break;
 80023f6:	e00d      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80023f8:	f7ff f83e 	bl	8001478 <LL_RCC_HSE_IsEnabledDiv2>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d102      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_GetSysClockFreq+0x138>)
 8002404:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002406:	e005      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <HAL_RCC_GetSysClockFreq+0x13c>)
 800240a:	60fb      	str	r3, [r7, #12]
        break;
 800240c:	e002      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	60fb      	str	r3, [r7, #12]
        break;
 8002412:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002414:	f7ff fa35 	bl	8001882 <LL_RCC_PLL_GetN>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	fb03 f402 	mul.w	r4, r3, r2
 8002420:	f7ff fa46 	bl	80018b0 <LL_RCC_PLL_GetDivider>
 8002424:	4603      	mov	r3, r0
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	3301      	adds	r3, #1
 800242a:	fbb4 f4f3 	udiv	r4, r4, r3
 800242e:	f7ff fa34 	bl	800189a <LL_RCC_PLL_GetR>
 8002432:	4603      	mov	r3, r0
 8002434:	0f5b      	lsrs	r3, r3, #29
 8002436:	3301      	adds	r3, #1
 8002438:	fbb4 f3f3 	udiv	r3, r4, r3
 800243c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800243e:	697b      	ldr	r3, [r7, #20]
}
 8002440:	4618      	mov	r0, r3
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	08004c88 	.word	0x08004c88
 800244c:	00f42400 	.word	0x00f42400
 8002450:	01e84800 	.word	0x01e84800

08002454 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002454:	b598      	push	{r3, r4, r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002458:	f7ff ff5c 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 800245c:	4604      	mov	r4, r0
 800245e:	f7ff f9b5 	bl	80017cc <LL_RCC_GetAHBPrescaler>
 8002462:	4603      	mov	r3, r0
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	4a03      	ldr	r2, [pc, #12]	; (8002478 <HAL_RCC_GetHCLKFreq+0x24>)
 800246c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002470:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd98      	pop	{r3, r4, r7, pc}
 8002478:	08004c28 	.word	0x08004c28

0800247c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b598      	push	{r3, r4, r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002480:	f7ff ffe8 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 8002484:	4604      	mov	r4, r0
 8002486:	f7ff f9b9 	bl	80017fc <LL_RCC_GetAPB1Prescaler>
 800248a:	4603      	mov	r3, r0
 800248c:	0a1b      	lsrs	r3, r3, #8
 800248e:	4a03      	ldr	r2, [pc, #12]	; (800249c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd98      	pop	{r3, r4, r7, pc}
 800249c:	08004c68 	.word	0x08004c68

080024a0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a0:	b598      	push	{r3, r4, r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80024a4:	f7ff ffd6 	bl	8002454 <HAL_RCC_GetHCLKFreq>
 80024a8:	4604      	mov	r4, r0
 80024aa:	f7ff f9b2 	bl	8001812 <LL_RCC_GetAPB2Prescaler>
 80024ae:	4603      	mov	r3, r0
 80024b0:	0adb      	lsrs	r3, r3, #11
 80024b2:	4a03      	ldr	r2, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd98      	pop	{r3, r4, r7, pc}
 80024c0:	08004c68 	.word	0x08004c68

080024c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	4a10      	ldr	r2, [pc, #64]	; (8002518 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80024d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024da:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80024dc:	f7ff f981 	bl	80017e2 <LL_RCC_GetAHB3Prescaler>
 80024e0:	4603      	mov	r3, r0
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	4a0c      	ldr	r2, [pc, #48]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	4a09      	ldr	r2, [pc, #36]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80024fa:	fba2 2303 	umull	r2, r3, r2, r3
 80024fe:	0c9c      	lsrs	r4, r3, #18
 8002500:	f7fe ff76 	bl	80013f0 <HAL_PWREx_GetVoltageRange>
 8002504:	4603      	mov	r3, r0
 8002506:	4619      	mov	r1, r3
 8002508:	4620      	mov	r0, r4
 800250a:	f000 f80b 	bl	8002524 <RCC_SetFlashLatency>
 800250e:	4603      	mov	r3, r0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	08004c88 	.word	0x08004c88
 800251c:	08004c28 	.word	0x08004c28
 8002520:	431bde83 	.word	0x431bde83

08002524 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	; 0x38
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <RCC_SetFlashLatency+0xf4>)
 8002530:	f107 0320 	add.w	r3, r7, #32
 8002534:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002538:	6018      	str	r0, [r3, #0]
 800253a:	3304      	adds	r3, #4
 800253c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800253e:	4a37      	ldr	r2, [pc, #220]	; (800261c <RCC_SetFlashLatency+0xf8>)
 8002540:	f107 0318 	add.w	r3, r7, #24
 8002544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002548:	6018      	str	r0, [r3, #0]
 800254a:	3304      	adds	r3, #4
 800254c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800254e:	4a34      	ldr	r2, [pc, #208]	; (8002620 <RCC_SetFlashLatency+0xfc>)
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	ca07      	ldmia	r2, {r0, r1, r2}
 8002556:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800255a:	2300      	movs	r3, #0
 800255c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002564:	d11b      	bne.n	800259e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002566:	2300      	movs	r3, #0
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
 800256a:	e014      	b.n	8002596 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	3338      	adds	r3, #56	; 0x38
 8002572:	443b      	add	r3, r7
 8002574:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002578:	461a      	mov	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4293      	cmp	r3, r2
 800257e:	d807      	bhi.n	8002590 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	3338      	adds	r3, #56	; 0x38
 8002586:	443b      	add	r3, r7
 8002588:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800258e:	e021      	b.n	80025d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	3301      	adds	r3, #1
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	2b02      	cmp	r3, #2
 800259a:	d9e7      	bls.n	800256c <RCC_SetFlashLatency+0x48>
 800259c:	e01a      	b.n	80025d4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a2:	e014      	b.n	80025ce <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	3338      	adds	r3, #56	; 0x38
 80025aa:	443b      	add	r3, r7
 80025ac:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d807      	bhi.n	80025c8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	3338      	adds	r3, #56	; 0x38
 80025be:	443b      	add	r3, r7
 80025c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80025c6:	e005      	b.n	80025d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	3301      	adds	r3, #1
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d9e7      	bls.n	80025a4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <RCC_SetFlashLatency+0x100>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0207 	bic.w	r2, r3, #7
 80025dc:	4911      	ldr	r1, [pc, #68]	; (8002624 <RCC_SetFlashLatency+0x100>)
 80025de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80025e4:	f7fe fb84 	bl	8000cf0 <HAL_GetTick>
 80025e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80025ea:	e008      	b.n	80025fe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025ec:	f7fe fb80 	bl	8000cf0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e007      	b.n	800260e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <RCC_SetFlashLatency+0x100>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002608:	429a      	cmp	r2, r3
 800260a:	d1ef      	bne.n	80025ec <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3738      	adds	r7, #56	; 0x38
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	08004c0c 	.word	0x08004c0c
 800261c:	08004c14 	.word	0x08004c14
 8002620:	08004c1c 	.word	0x08004c1c
 8002624:	58004000 	.word	0x58004000

08002628 <LL_RCC_LSE_IsReady>:
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b02      	cmp	r3, #2
 800263a:	d101      	bne.n	8002640 <LL_RCC_LSE_IsReady+0x18>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <LL_RCC_LSE_IsReady+0x1a>
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_RCC_SetUSARTClockSource>:
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	43db      	mvns	r3, r3
 8002660:	401a      	ands	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <LL_RCC_SetI2SClockSource>:
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800268e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <LL_RCC_SetLPUARTClockSource>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <LL_RCC_SetI2CClockSource>:
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80026d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80026e6:	43db      	mvns	r3, r3
 80026e8:	401a      	ands	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80026f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <LL_RCC_SetLPTIMClockSource>:
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	041b      	lsls	r3, r3, #16
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <LL_RCC_SetRNGClockSource>:
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800274c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <LL_RCC_SetADCClockSource>:
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800276a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <LL_RCC_SetRTCClockSource>:
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <LL_RCC_GetRTCClockSource>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <LL_RCC_ForceBackupDomainReset>:
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80027f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
	...

08002810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800281c:	2300      	movs	r3, #0
 800281e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002820:	2300      	movs	r3, #0
 8002822:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d058      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002830:	f7fe fdc2 	bl	80013b8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002834:	f7fe fa5c 	bl	8000cf0 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800283a:	e009      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283c:	f7fe fa58 	bl	8000cf0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d902      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	74fb      	strb	r3, [r7, #19]
        break;
 800284e:	e006      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002850:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285c:	d1ee      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d13c      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002864:	f7ff ffa7 	bl	80027b6 <LL_RCC_GetRTCClockSource>
 8002868:	4602      	mov	r2, r0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	429a      	cmp	r2, r3
 8002870:	d00f      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002880:	f7ff ffa5 	bl	80027ce <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002884:	f7ff ffb3 	bl	80027ee <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d014      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fa28 	bl	8000cf0 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80028a2:	e00b      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe fa24 	bl	8000cf0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d902      	bls.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	74fb      	strb	r3, [r7, #19]
            break;
 80028ba:	e004      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80028bc:	f7ff feb4 	bl	8002628 <LL_RCC_LSE_IsReady>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d1ee      	bne.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff5b 	bl	800278c <LL_RCC_SetRTCClockSource>
 80028d6:	e004      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
 80028dc:	e001      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fea9 	bl	800264a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fe9e 	bl	800264a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff fec0 	bl	80026a4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fee6 	bl	8002706 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fedb 	bl	8002706 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002958:	2b00      	cmp	r3, #0
 800295a:	d004      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fed0 	bl	8002706 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fea9 	bl	80026ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fe9e 	bl	80026ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fe93 	bl	80026ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d011      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fe5e 	bl	800267a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	d107      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fea5 	bl	8002738 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d107      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a04:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d011      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fea3 	bl	8002762 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a24:	d107      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002a36:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	58000400 	.word	0x58000400

08002a44 <LL_RCC_GetUSARTClockSource>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	401a      	ands	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	041b      	lsls	r3, r3, #16
 8002a5c:	4313      	orrs	r3, r2
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <LL_RCC_GetLPUARTClockSource>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4013      	ands	r3, r2
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e042      	b.n	8002b1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fd ffd2 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fc2f 	bl	800332c <UART_SetConfig>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e022      	b.n	8002b1e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fe97 	bl	8003814 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002af4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 ff1d 	bl	8003956 <UART_CheckIdleState>
 8002b1c:	4603      	mov	r3, r0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b08a      	sub	sp, #40	; 0x28
 8002b2a:	af02      	add	r7, sp, #8
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d173      	bne.n	8002c28 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_UART_Transmit+0x26>
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e06c      	b.n	8002c2a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2221      	movs	r2, #33	; 0x21
 8002b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b60:	f7fe f8c6 	bl	8000cf0 <HAL_GetTick>
 8002b64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	d108      	bne.n	8002b92 <HAL_UART_Transmit+0x6c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	61bb      	str	r3, [r7, #24]
 8002b90:	e003      	b.n	8002b9a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b9a:	e02c      	b.n	8002bf6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 ff23 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e039      	b.n	8002c2a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	3302      	adds	r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	e007      	b.n	8002be4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1cc      	bne.n	8002b9c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fef0 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d137      	bne.n	8002cbc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_UART_Receive_IT+0x24>
 8002c52:	88fb      	ldrh	r3, [r7, #6]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e030      	b.n	8002cbe <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a18      	ldr	r2, [pc, #96]	; (8002cc8 <HAL_UART_Receive_IT+0x94>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d01f      	beq.n	8002cac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d018      	beq.n	8002cac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	613b      	str	r3, [r7, #16]
   return(result);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	69f9      	ldr	r1, [r7, #28]
 8002c9e:	6a3a      	ldr	r2, [r7, #32]
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e6      	bne.n	8002c7a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 ff66 	bl	8003b84 <UART_Start_Receive_IT>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	e000      	b.n	8002cbe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3728      	adds	r7, #40	; 0x28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40008000 	.word	0x40008000

08002ccc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b0ba      	sub	sp, #232	; 0xe8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002cf2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002cf6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d11b      	bne.n	8002d40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d015      	beq.n	8002d40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 82e3 	beq.w	80032fc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
      }
      return;
 8002d3e:	e2dd      	b.n	80032fc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8123 	beq.w	8002f90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002d4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002d4e:	4b8d      	ldr	r3, [pc, #564]	; (8002f84 <HAL_UART_IRQHandler+0x2b8>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002d56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002d5a:	4b8b      	ldr	r3, [pc, #556]	; (8002f88 <HAL_UART_IRQHandler+0x2bc>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8116 	beq.w	8002f90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d011      	beq.n	8002d94 <HAL_UART_IRQHandler+0xc8>
 8002d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00b      	beq.n	8002d94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2201      	movs	r2, #1
 8002d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d011      	beq.n	8002dc4 <HAL_UART_IRQHandler+0xf8>
 8002da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2202      	movs	r2, #2
 8002db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f043 0204 	orr.w	r2, r3, #4
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d011      	beq.n	8002df4 <HAL_UART_IRQHandler+0x128>
 8002dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2204      	movs	r2, #4
 8002de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d017      	beq.n	8002e30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002e0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002e10:	4b5c      	ldr	r3, [pc, #368]	; (8002f84 <HAL_UART_IRQHandler+0x2b8>)
 8002e12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f043 0208 	orr.w	r2, r3, #8
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d012      	beq.n	8002e62 <HAL_UART_IRQHandler+0x196>
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00c      	beq.n	8002e62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	f043 0220 	orr.w	r2, r3, #32
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 8249 	beq.w	8003300 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d013      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d005      	beq.n	8002ec6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ebe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d054      	beq.n	8002f70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 ff7c 	bl	8003dc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b40      	cmp	r3, #64	; 0x40
 8002ed8:	d146      	bne.n	8002f68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3308      	adds	r3, #8
 8002f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1d9      	bne.n	8002eda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f36:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <HAL_UART_IRQHandler+0x2c0>)
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe f87a 	bl	800103a <HAL_DMA_Abort_IT>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d019      	beq.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5e:	e00f      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7fd fbff 	bl	8000764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f66:	e00b      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fd fbfb 	bl	8000764 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6e:	e007      	b.n	8002f80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7fd fbf7 	bl	8000764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002f7e:	e1bf      	b.n	8003300 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	bf00      	nop
    return;
 8002f82:	e1bd      	b.n	8003300 <HAL_UART_IRQHandler+0x634>
 8002f84:	10000001 	.word	0x10000001
 8002f88:	04000120 	.word	0x04000120
 8002f8c:	08003e8f 	.word	0x08003e8f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	f040 8153 	bne.w	8003240 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 814c 	beq.w	8003240 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8145 	beq.w	8003240 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b40      	cmp	r3, #64	; 0x40
 8002fca:	f040 80bb 	bne.w	8003144 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002fdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 818f 	beq.w	8003304 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002fec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	f080 8187 	bcs.w	8003304 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ffc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 8087 	bne.w	8003122 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800302c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800303e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003042:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003046:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800304a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1da      	bne.n	8003014 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	3308      	adds	r3, #8
 8003064:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003068:	e853 3f00 	ldrex	r3, [r3]
 800306c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800306e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3308      	adds	r3, #8
 800307e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003082:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003086:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003088:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800308a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800308e:	e841 2300 	strex	r3, r2, [r1]
 8003092:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e1      	bne.n	800305e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3308      	adds	r3, #8
 80030a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030a4:	e853 3f00 	ldrex	r3, [r3]
 80030a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3308      	adds	r3, #8
 80030ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e3      	bne.n	800309a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	461a      	mov	r2, r3
 80030fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003102:	65bb      	str	r3, [r7, #88]	; 0x58
 8003104:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd ff2e 	bl	8000f7e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003134:	b29b      	uxth	r3, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	b29b      	uxth	r3, r3
 800313a:	4619      	mov	r1, r3
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f8e9 	bl	8003314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003142:	e0df      	b.n	8003304 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003150:	b29b      	uxth	r3, r3
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80d1 	beq.w	8003308 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80cc 	beq.w	8003308 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003192:	647b      	str	r3, [r7, #68]	; 0x44
 8003194:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e4      	bne.n	8003170 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3308      	adds	r3, #8
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	623b      	str	r3, [r7, #32]
   return(result);
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3308      	adds	r3, #8
 80031ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031ce:	633a      	str	r2, [r7, #48]	; 0x30
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e1      	bne.n	80031a6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	60fb      	str	r3, [r7, #12]
   return(result);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f023 0310 	bic.w	r3, r3, #16
 800320a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003218:	61fb      	str	r3, [r7, #28]
 800321a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	69b9      	ldr	r1, [r7, #24]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	617b      	str	r3, [r7, #20]
   return(result);
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e4      	bne.n	80031f6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003232:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f86b 	bl	8003314 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800323e:	e063      	b.n	8003308 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003244:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00e      	beq.n	800326a <HAL_UART_IRQHandler+0x59e>
 800324c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003260:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f001 fb70 	bl	8004948 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003268:	e051      	b.n	800330e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800326e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003272:	2b00      	cmp	r3, #0
 8003274:	d014      	beq.n	80032a0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003292:	2b00      	cmp	r3, #0
 8003294:	d03a      	beq.n	800330c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
    }
    return;
 800329e:	e035      	b.n	800330c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_UART_IRQHandler+0x5f4>
 80032ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fdfe 	bl	8003eba <UART_EndTransmit_IT>
    return;
 80032be:	e026      	b.n	800330e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80032c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d009      	beq.n	80032e0 <HAL_UART_IRQHandler+0x614>
 80032cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f001 fb47 	bl	800496c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032de:	e016      	b.n	800330e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80032e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <HAL_UART_IRQHandler+0x642>
 80032ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da0c      	bge.n	800330e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f001 fb30 	bl	800495a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032fa:	e008      	b.n	800330e <HAL_UART_IRQHandler+0x642>
      return;
 80032fc:	bf00      	nop
 80032fe:	e006      	b.n	800330e <HAL_UART_IRQHandler+0x642>
    return;
 8003300:	bf00      	nop
 8003302:	e004      	b.n	800330e <HAL_UART_IRQHandler+0x642>
      return;
 8003304:	bf00      	nop
 8003306:	e002      	b.n	800330e <HAL_UART_IRQHandler+0x642>
      return;
 8003308:	bf00      	nop
 800330a:	e000      	b.n	800330e <HAL_UART_IRQHandler+0x642>
    return;
 800330c:	bf00      	nop
  }
}
 800330e:	37e8      	adds	r7, #232	; 0xe8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
	...

0800332c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800332c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003330:	b08c      	sub	sp, #48	; 0x30
 8003332:	af00      	add	r7, sp, #0
 8003334:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	431a      	orrs	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	4313      	orrs	r3, r2
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b94      	ldr	r3, [pc, #592]	; (80035ac <UART_SetConfig+0x280>)
 800335c:	4013      	ands	r3, r2
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	6812      	ldr	r2, [r2, #0]
 8003362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003364:	430b      	orrs	r3, r1
 8003366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a89      	ldr	r2, [pc, #548]	; (80035b0 <UART_SetConfig+0x284>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d004      	beq.n	8003398 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003394:	4313      	orrs	r3, r2
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80033a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f023 010f 	bic.w	r1, r3, #15
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7a      	ldr	r2, [pc, #488]	; (80035b4 <UART_SetConfig+0x288>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d127      	bne.n	8003420 <UART_SetConfig+0xf4>
 80033d0:	2003      	movs	r0, #3
 80033d2:	f7ff fb37 	bl	8002a44 <LL_RCC_GetUSARTClockSource>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80033dc:	2b03      	cmp	r3, #3
 80033de:	d81b      	bhi.n	8003418 <UART_SetConfig+0xec>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <UART_SetConfig+0xbc>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	080033f9 	.word	0x080033f9
 80033ec:	08003409 	.word	0x08003409
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003411 	.word	0x08003411
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fe:	e080      	b.n	8003502 <UART_SetConfig+0x1d6>
 8003400:	2302      	movs	r3, #2
 8003402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003406:	e07c      	b.n	8003502 <UART_SetConfig+0x1d6>
 8003408:	2304      	movs	r3, #4
 800340a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800340e:	e078      	b.n	8003502 <UART_SetConfig+0x1d6>
 8003410:	2308      	movs	r3, #8
 8003412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003416:	e074      	b.n	8003502 <UART_SetConfig+0x1d6>
 8003418:	2310      	movs	r3, #16
 800341a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800341e:	e070      	b.n	8003502 <UART_SetConfig+0x1d6>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a64      	ldr	r2, [pc, #400]	; (80035b8 <UART_SetConfig+0x28c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d138      	bne.n	800349c <UART_SetConfig+0x170>
 800342a:	200c      	movs	r0, #12
 800342c:	f7ff fb0a 	bl	8002a44 <LL_RCC_GetUSARTClockSource>
 8003430:	4603      	mov	r3, r0
 8003432:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d82c      	bhi.n	8003494 <UART_SetConfig+0x168>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <UART_SetConfig+0x114>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003475 	.word	0x08003475
 8003444:	08003495 	.word	0x08003495
 8003448:	08003495 	.word	0x08003495
 800344c:	08003495 	.word	0x08003495
 8003450:	08003485 	.word	0x08003485
 8003454:	08003495 	.word	0x08003495
 8003458:	08003495 	.word	0x08003495
 800345c:	08003495 	.word	0x08003495
 8003460:	0800347d 	.word	0x0800347d
 8003464:	08003495 	.word	0x08003495
 8003468:	08003495 	.word	0x08003495
 800346c:	08003495 	.word	0x08003495
 8003470:	0800348d 	.word	0x0800348d
 8003474:	2300      	movs	r3, #0
 8003476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800347a:	e042      	b.n	8003502 <UART_SetConfig+0x1d6>
 800347c:	2302      	movs	r3, #2
 800347e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003482:	e03e      	b.n	8003502 <UART_SetConfig+0x1d6>
 8003484:	2304      	movs	r3, #4
 8003486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800348a:	e03a      	b.n	8003502 <UART_SetConfig+0x1d6>
 800348c:	2308      	movs	r3, #8
 800348e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003492:	e036      	b.n	8003502 <UART_SetConfig+0x1d6>
 8003494:	2310      	movs	r3, #16
 8003496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800349a:	e032      	b.n	8003502 <UART_SetConfig+0x1d6>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a43      	ldr	r2, [pc, #268]	; (80035b0 <UART_SetConfig+0x284>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d12a      	bne.n	80034fc <UART_SetConfig+0x1d0>
 80034a6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80034aa:	f7ff fadd 	bl	8002a68 <LL_RCC_GetLPUARTClockSource>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034b4:	d01a      	beq.n	80034ec <UART_SetConfig+0x1c0>
 80034b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ba:	d81b      	bhi.n	80034f4 <UART_SetConfig+0x1c8>
 80034bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c0:	d00c      	beq.n	80034dc <UART_SetConfig+0x1b0>
 80034c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034c6:	d815      	bhi.n	80034f4 <UART_SetConfig+0x1c8>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <UART_SetConfig+0x1a8>
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d0:	d008      	beq.n	80034e4 <UART_SetConfig+0x1b8>
 80034d2:	e00f      	b.n	80034f4 <UART_SetConfig+0x1c8>
 80034d4:	2300      	movs	r3, #0
 80034d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034da:	e012      	b.n	8003502 <UART_SetConfig+0x1d6>
 80034dc:	2302      	movs	r3, #2
 80034de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034e2:	e00e      	b.n	8003502 <UART_SetConfig+0x1d6>
 80034e4:	2304      	movs	r3, #4
 80034e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ea:	e00a      	b.n	8003502 <UART_SetConfig+0x1d6>
 80034ec:	2308      	movs	r3, #8
 80034ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f2:	e006      	b.n	8003502 <UART_SetConfig+0x1d6>
 80034f4:	2310      	movs	r3, #16
 80034f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034fa:	e002      	b.n	8003502 <UART_SetConfig+0x1d6>
 80034fc:	2310      	movs	r3, #16
 80034fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2a      	ldr	r2, [pc, #168]	; (80035b0 <UART_SetConfig+0x284>)
 8003508:	4293      	cmp	r3, r2
 800350a:	f040 80a4 	bne.w	8003656 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800350e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003512:	2b08      	cmp	r3, #8
 8003514:	d823      	bhi.n	800355e <UART_SetConfig+0x232>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x1f0>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	08003541 	.word	0x08003541
 8003520:	0800355f 	.word	0x0800355f
 8003524:	08003549 	.word	0x08003549
 8003528:	0800355f 	.word	0x0800355f
 800352c:	0800354f 	.word	0x0800354f
 8003530:	0800355f 	.word	0x0800355f
 8003534:	0800355f 	.word	0x0800355f
 8003538:	0800355f 	.word	0x0800355f
 800353c:	08003557 	.word	0x08003557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7fe ff9c 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003546:	e010      	b.n	800356a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003548:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <UART_SetConfig+0x290>)
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800354c:	e00d      	b.n	800356a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354e:	f7fe fee1 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 8003552:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003554:	e009      	b.n	800356a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800355c:	e005      	b.n	800356a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8137 	beq.w	80037e0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <UART_SetConfig+0x294>)
 8003578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800357c:	461a      	mov	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	fbb3 f3f2 	udiv	r3, r3, r2
 8003584:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d305      	bcc.n	80035a2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d910      	bls.n	80035c4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035a8:	e11a      	b.n	80037e0 <UART_SetConfig+0x4b4>
 80035aa:	bf00      	nop
 80035ac:	cfff69f3 	.word	0xcfff69f3
 80035b0:	40008000 	.word	0x40008000
 80035b4:	40013800 	.word	0x40013800
 80035b8:	40004400 	.word	0x40004400
 80035bc:	00f42400 	.word	0x00f42400
 80035c0:	08004cc8 	.word	0x08004cc8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	2200      	movs	r2, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	60fa      	str	r2, [r7, #12]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	4a8e      	ldr	r2, [pc, #568]	; (800380c <UART_SetConfig+0x4e0>)
 80035d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2200      	movs	r2, #0
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035e6:	f7fc fdc7 	bl	8000178 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4610      	mov	r0, r2
 80035f0:	4619      	mov	r1, r3
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	020b      	lsls	r3, r1, #8
 80035fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003600:	0202      	lsls	r2, r0, #8
 8003602:	6979      	ldr	r1, [r7, #20]
 8003604:	6849      	ldr	r1, [r1, #4]
 8003606:	0849      	lsrs	r1, r1, #1
 8003608:	2000      	movs	r0, #0
 800360a:	460c      	mov	r4, r1
 800360c:	4605      	mov	r5, r0
 800360e:	eb12 0804 	adds.w	r8, r2, r4
 8003612:	eb43 0905 	adc.w	r9, r3, r5
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	469a      	mov	sl, r3
 800361e:	4693      	mov	fp, r2
 8003620:	4652      	mov	r2, sl
 8003622:	465b      	mov	r3, fp
 8003624:	4640      	mov	r0, r8
 8003626:	4649      	mov	r1, r9
 8003628:	f7fc fda6 	bl	8000178 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363a:	d308      	bcc.n	800364e <UART_SetConfig+0x322>
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003642:	d204      	bcs.n	800364e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	e0c8      	b.n	80037e0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003654:	e0c4      	b.n	80037e0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365e:	d167      	bne.n	8003730 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003660:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003664:	2b08      	cmp	r3, #8
 8003666:	d828      	bhi.n	80036ba <UART_SetConfig+0x38e>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0x344>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	08003695 	.word	0x08003695
 8003674:	0800369d 	.word	0x0800369d
 8003678:	080036a5 	.word	0x080036a5
 800367c:	080036bb 	.word	0x080036bb
 8003680:	080036ab 	.word	0x080036ab
 8003684:	080036bb 	.word	0x080036bb
 8003688:	080036bb 	.word	0x080036bb
 800368c:	080036bb 	.word	0x080036bb
 8003690:	080036b3 	.word	0x080036b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7fe fef2 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003698:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800369a:	e014      	b.n	80036c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800369c:	f7fe ff00 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036a2:	e010      	b.n	80036c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036a4:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <UART_SetConfig+0x4e4>)
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036a8:	e00d      	b.n	80036c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036aa:	f7fe fe33 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 80036ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036b0:	e009      	b.n	80036c6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036b8:	e005      	b.n	80036c6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8089 	beq.w	80037e0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	4a4e      	ldr	r2, [pc, #312]	; (800380c <UART_SetConfig+0x4e0>)
 80036d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d8:	461a      	mov	r2, r3
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80036e0:	005a      	lsls	r2, r3, #1
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	441a      	add	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	2b0f      	cmp	r3, #15
 80036f8:	d916      	bls.n	8003728 <UART_SetConfig+0x3fc>
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003700:	d212      	bcs.n	8003728 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	b29b      	uxth	r3, r3
 8003706:	f023 030f 	bic.w	r3, r3, #15
 800370a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	b29b      	uxth	r3, r3
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	b29a      	uxth	r2, r3
 8003718:	8bfb      	ldrh	r3, [r7, #30]
 800371a:	4313      	orrs	r3, r2
 800371c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	8bfa      	ldrh	r2, [r7, #30]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	e05b      	b.n	80037e0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800372e:	e057      	b.n	80037e0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003730:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003734:	2b08      	cmp	r3, #8
 8003736:	d828      	bhi.n	800378a <UART_SetConfig+0x45e>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <UART_SetConfig+0x414>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003765 	.word	0x08003765
 8003744:	0800376d 	.word	0x0800376d
 8003748:	08003775 	.word	0x08003775
 800374c:	0800378b 	.word	0x0800378b
 8003750:	0800377b 	.word	0x0800377b
 8003754:	0800378b 	.word	0x0800378b
 8003758:	0800378b 	.word	0x0800378b
 800375c:	0800378b 	.word	0x0800378b
 8003760:	08003783 	.word	0x08003783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003764:	f7fe fe8a 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376a:	e014      	b.n	8003796 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800376c:	f7fe fe98 	bl	80024a0 <HAL_RCC_GetPCLK2Freq>
 8003770:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003772:	e010      	b.n	8003796 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003774:	4b26      	ldr	r3, [pc, #152]	; (8003810 <UART_SetConfig+0x4e4>)
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003778:	e00d      	b.n	8003796 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377a:	f7fe fdcb 	bl	8002314 <HAL_RCC_GetSysClockFreq>
 800377e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003780:	e009      	b.n	8003796 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003788:	e005      	b.n	8003796 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003794:	bf00      	nop
    }

    if (pclk != 0U)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d021      	beq.n	80037e0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	4a1a      	ldr	r2, [pc, #104]	; (800380c <UART_SetConfig+0x4e0>)
 80037a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037a6:	461a      	mov	r2, r3
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	441a      	add	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d909      	bls.n	80037da <UART_SetConfig+0x4ae>
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d205      	bcs.n	80037da <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60da      	str	r2, [r3, #12]
 80037d8:	e002      	b.n	80037e0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80037fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003800:	4618      	mov	r0, r3
 8003802:	3730      	adds	r7, #48	; 0x30
 8003804:	46bd      	mov	sp, r7
 8003806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800380a:	bf00      	nop
 800380c:	08004cc8 	.word	0x08004cc8
 8003810:	00f42400 	.word	0x00f42400

08003814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00a      	beq.n	800383e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00a      	beq.n	8003860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01a      	beq.n	800392a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003912:	d10a      	bne.n	800392a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af02      	add	r7, sp, #8
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003966:	f7fd f9c3 	bl	8000cf0 <HAL_GetTick>
 800396a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	d10e      	bne.n	8003998 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800397a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f832 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e028      	b.n	80039ea <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d10e      	bne.n	80039c4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f81c 	bl	80039f2 <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e012      	b.n	80039ea <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b09c      	sub	sp, #112	; 0x70
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	4613      	mov	r3, r2
 8003a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a02:	e0a9      	b.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a0a:	f000 80a5 	beq.w	8003b58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fd f96f 	bl	8000cf0 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d140      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a38:	667b      	str	r3, [r7, #100]	; 0x64
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a44:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e6      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a76:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a78:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e5      	bne.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e069      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d051      	beq.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac2:	d149      	bne.n	8003b58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003acc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	e853 3f00 	ldrex	r3, [r3]
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
 8003aee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e6      	bne.n	8003ace <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3308      	adds	r3, #8
 8003b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b20:	623a      	str	r2, [r7, #32]
 8003b22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	6a3a      	ldr	r2, [r7, #32]
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e5      	bne.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e010      	b.n	8003b7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4013      	ands	r3, r2
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	f43f af46 	beq.w	8003a04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3770      	adds	r7, #112	; 0x70
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b0a3      	sub	sp, #140	; 0x8c
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	88fa      	ldrh	r2, [r7, #6]
 8003ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d10e      	bne.n	8003bd6 <UART_Start_Receive_IT+0x52>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d105      	bne.n	8003bcc <UART_Start_Receive_IT+0x48>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003bca:	e02d      	b.n	8003c28 <UART_Start_Receive_IT+0xa4>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	22ff      	movs	r2, #255	; 0xff
 8003bd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003bd4:	e028      	b.n	8003c28 <UART_Start_Receive_IT+0xa4>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10d      	bne.n	8003bfa <UART_Start_Receive_IT+0x76>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d104      	bne.n	8003bf0 <UART_Start_Receive_IT+0x6c>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	22ff      	movs	r2, #255	; 0xff
 8003bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003bee:	e01b      	b.n	8003c28 <UART_Start_Receive_IT+0xa4>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	227f      	movs	r2, #127	; 0x7f
 8003bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003bf8:	e016      	b.n	8003c28 <UART_Start_Receive_IT+0xa4>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c02:	d10d      	bne.n	8003c20 <UART_Start_Receive_IT+0x9c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <UART_Start_Receive_IT+0x92>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	227f      	movs	r2, #127	; 0x7f
 8003c10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c14:	e008      	b.n	8003c28 <UART_Start_Receive_IT+0xa4>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	223f      	movs	r2, #63	; 0x3f
 8003c1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003c1e:	e003      	b.n	8003c28 <UART_Start_Receive_IT+0xa4>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2222      	movs	r2, #34	; 0x22
 8003c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003c5c:	673a      	str	r2, [r7, #112]	; 0x70
 8003c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003c62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003c64:	e841 2300 	strex	r3, r2, [r1]
 8003c68:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e3      	bne.n	8003c38 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c78:	d14f      	bne.n	8003d1a <UART_Start_Receive_IT+0x196>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d349      	bcc.n	8003d1a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8e:	d107      	bne.n	8003ca0 <UART_Start_Receive_IT+0x11c>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a46      	ldr	r2, [pc, #280]	; (8003db4 <UART_Start_Receive_IT+0x230>)
 8003c9c:	675a      	str	r2, [r3, #116]	; 0x74
 8003c9e:	e002      	b.n	8003ca6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a45      	ldr	r2, [pc, #276]	; (8003db8 <UART_Start_Receive_IT+0x234>)
 8003ca4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01a      	beq.n	8003ce4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e4      	bne.n	8003cae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cee:	e853 3f00 	ldrex	r3, [r3]
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3308      	adds	r3, #8
 8003d02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003d04:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d0c:	e841 2300 	strex	r3, r2, [r1]
 8003d10:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1e5      	bne.n	8003ce4 <UART_Start_Receive_IT+0x160>
 8003d18:	e046      	b.n	8003da8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	d107      	bne.n	8003d34 <UART_Start_Receive_IT+0x1b0>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d103      	bne.n	8003d34 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <UART_Start_Receive_IT+0x238>)
 8003d30:	675a      	str	r2, [r3, #116]	; 0x74
 8003d32:	e002      	b.n	8003d3a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a22      	ldr	r2, [pc, #136]	; (8003dc0 <UART_Start_Receive_IT+0x23c>)
 8003d38:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d019      	beq.n	8003d76 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003d56:	677b      	str	r3, [r7, #116]	; 0x74
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
 8003d62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e6      	bne.n	8003d42 <UART_Start_Receive_IT+0x1be>
 8003d74:	e018      	b.n	8003da8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	613b      	str	r3, [r7, #16]
   return(result);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f043 0320 	orr.w	r3, r3, #32
 8003d8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	69f9      	ldr	r1, [r7, #28]
 8003d9a:	6a3a      	ldr	r2, [r7, #32]
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e6      	bne.n	8003d76 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	378c      	adds	r7, #140	; 0x8c
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr
 8003db4:	080045e1 	.word	0x080045e1
 8003db8:	08004281 	.word	0x08004281
 8003dbc:	080040c9 	.word	0x080040c9
 8003dc0:	08003f11 	.word	0x08003f11

08003dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b095      	sub	sp, #84	; 0x54
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dea:	643b      	str	r3, [r7, #64]	; 0x40
 8003dec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e6      	bne.n	8003dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3308      	adds	r3, #8
 8003e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e14:	f023 0301 	bic.w	r3, r3, #1
 8003e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e3      	bne.n	8003dfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d118      	bne.n	8003e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	e853 3f00 	ldrex	r3, [r3]
 8003e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f023 0310 	bic.w	r3, r3, #16
 8003e52:	647b      	str	r3, [r7, #68]	; 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5c:	61bb      	str	r3, [r7, #24]
 8003e5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	6979      	ldr	r1, [r7, #20]
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e6      	bne.n	8003e3e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e84:	bf00      	nop
 8003e86:	3754      	adds	r7, #84	; 0x54
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f7fc fc59 	bl	8000764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b088      	sub	sp, #32
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	461a      	mov	r2, r3
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6979      	ldr	r1, [r7, #20]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	613b      	str	r3, [r7, #16]
   return(result);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e6      	bne.n	8003ec2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7fc fc46 	bl	8000794 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f08:	bf00      	nop
 8003f0a:	3720      	adds	r7, #32
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b09c      	sub	sp, #112	; 0x70
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003f1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f28:	2b22      	cmp	r3, #34	; 0x22
 8003f2a:	f040 80be 	bne.w	80040aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f38:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f3c:	b2d9      	uxtb	r1, r3
 8003f3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	400a      	ands	r2, r1
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	3b01      	subs	r3, #1
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 80a1 	bne.w	80040ba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	667b      	str	r3, [r7, #100]	; 0x64
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003fca:	647a      	str	r2, [r7, #68]	; 0x44
 8003fcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a33      	ldr	r2, [pc, #204]	; (80040c4 <UART_RxISR_8BIT+0x1b4>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d01f      	beq.n	800403c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d018      	beq.n	800403c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	623b      	str	r3, [r7, #32]
   return(result);
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800401e:	663b      	str	r3, [r7, #96]	; 0x60
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004028:	633b      	str	r3, [r7, #48]	; 0x30
 800402a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800402e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e6      	bne.n	800400a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d12e      	bne.n	80040a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	60fb      	str	r3, [r7, #12]
   return(result);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0310 	bic.w	r3, r3, #16
 800405e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	69b9      	ldr	r1, [r7, #24]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	617b      	str	r3, [r7, #20]
   return(result);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e6      	bne.n	800404a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b10      	cmp	r3, #16
 8004088:	d103      	bne.n	8004092 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2210      	movs	r2, #16
 8004090:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff f93a 	bl	8003314 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040a0:	e00b      	b.n	80040ba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc fb8e 	bl	80007c4 <HAL_UART_RxCpltCallback>
}
 80040a8:	e007      	b.n	80040ba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0208 	orr.w	r2, r2, #8
 80040b8:	619a      	str	r2, [r3, #24]
}
 80040ba:	bf00      	nop
 80040bc:	3770      	adds	r7, #112	; 0x70
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40008000 	.word	0x40008000

080040c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b09c      	sub	sp, #112	; 0x70
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80040d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e0:	2b22      	cmp	r3, #34	; 0x22
 80040e2:	f040 80be 	bne.w	8004262 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80040f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80040fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80040fe:	4013      	ands	r3, r2
 8004100:	b29a      	uxth	r2, r3
 8004102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004104:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	1c9a      	adds	r2, r3, #2
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	f040 80a1 	bne.w	8004272 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004138:	e853 3f00 	ldrex	r3, [r3]
 800413c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800413e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004144:	667b      	str	r3, [r7, #100]	; 0x64
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800414e:	657b      	str	r3, [r7, #84]	; 0x54
 8004150:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004152:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004154:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800415c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1e6      	bne.n	8004130 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3308      	adds	r3, #8
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	663b      	str	r3, [r7, #96]	; 0x60
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3308      	adds	r3, #8
 8004180:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004182:	643a      	str	r2, [r7, #64]	; 0x40
 8004184:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e5      	bne.n	8004162 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a33      	ldr	r2, [pc, #204]	; (800427c <UART_RxISR_16BIT+0x1b4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d01f      	beq.n	80041f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d018      	beq.n	80041f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e6      	bne.n	80041c2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d12e      	bne.n	800425a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	65bb      	str	r3, [r7, #88]	; 0x58
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	613b      	str	r3, [r7, #16]
   return(result);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e6      	bne.n	8004202 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b10      	cmp	r3, #16
 8004240:	d103      	bne.n	800424a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2210      	movs	r2, #16
 8004248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004250:	4619      	mov	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff f85e 	bl	8003314 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004258:	e00b      	b.n	8004272 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fc fab2 	bl	80007c4 <HAL_UART_RxCpltCallback>
}
 8004260:	e007      	b.n	8004272 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0208 	orr.w	r2, r2, #8
 8004270:	619a      	str	r2, [r3, #24]
}
 8004272:	bf00      	nop
 8004274:	3770      	adds	r7, #112	; 0x70
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40008000 	.word	0x40008000

08004280 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b0ac      	sub	sp, #176	; 0xb0
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800428e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b6:	2b22      	cmp	r3, #34	; 0x22
 80042b8:	f040 8182 	bne.w	80045c0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80042c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042c6:	e125      	b.n	8004514 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80042d6:	b2d9      	uxtb	r1, r3
 80042d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	400a      	ands	r2, r1
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800430e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	2b00      	cmp	r3, #0
 8004318:	d053      	beq.n	80043c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800431a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d011      	beq.n	800434a <UART_RxISR_8BIT_FIFOEN+0xca>
 8004326:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800432a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800434a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d011      	beq.n	800437a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2202      	movs	r2, #2
 8004368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800437a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d011      	beq.n	80043aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2204      	movs	r2, #4
 8004398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f043 0202 	orr.w	r2, r3, #2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7fc f9d5 	bl	8000764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 80a2 	bne.w	8004514 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d8:	e853 3f00 	ldrex	r3, [r3]
 80043dc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80043de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043f4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80043f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e4      	bne.n	80043d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3308      	adds	r3, #8
 800440c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3308      	adds	r3, #8
 800442a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800442e:	66ba      	str	r2, [r7, #104]	; 0x68
 8004430:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004432:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004434:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004436:	e841 2300 	strex	r3, r2, [r1]
 800443a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800443c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e1      	bne.n	8004406 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a5f      	ldr	r2, [pc, #380]	; (80045d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d021      	beq.n	80044a4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01a      	beq.n	80044a4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800447c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
 8004492:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004494:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004496:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004498:	e841 2300 	strex	r3, r2, [r1]
 800449c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800449e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e4      	bne.n	800446e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d130      	bne.n	800450e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	f023 0310 	bic.w	r3, r3, #16
 80044c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d4:	643b      	str	r3, [r7, #64]	; 0x40
 80044d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e4      	bne.n	80044b2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b10      	cmp	r3, #16
 80044f4:	d103      	bne.n	80044fe <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2210      	movs	r2, #16
 80044fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fe ff04 	bl	8003314 <HAL_UARTEx_RxEventCallback>
 800450c:	e002      	b.n	8004514 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fc f958 	bl	80007c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004514:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004518:	2b00      	cmp	r3, #0
 800451a:	d006      	beq.n	800452a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800451c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	f47f aecf 	bne.w	80042c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004530:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004534:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004538:	2b00      	cmp	r3, #0
 800453a:	d049      	beq.n	80045d0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004542:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004546:	429a      	cmp	r2, r3
 8004548:	d242      	bcs.n	80045d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3308      	adds	r3, #8
 8004550:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	61fb      	str	r3, [r7, #28]
   return(result);
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800456e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004574:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e3      	bne.n	800454a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a15      	ldr	r2, [pc, #84]	; (80045dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004586:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	60bb      	str	r3, [r7, #8]
   return(result);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f043 0320 	orr.w	r3, r3, #32
 800459c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6979      	ldr	r1, [r7, #20]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	613b      	str	r3, [r7, #16]
   return(result);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e4      	bne.n	8004588 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045be:	e007      	b.n	80045d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699a      	ldr	r2, [r3, #24]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0208 	orr.w	r2, r2, #8
 80045ce:	619a      	str	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	37b0      	adds	r7, #176	; 0xb0
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	40008000 	.word	0x40008000
 80045dc:	08003f11 	.word	0x08003f11

080045e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b0ae      	sub	sp, #184	; 0xb8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80045ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004616:	2b22      	cmp	r3, #34	; 0x22
 8004618:	f040 8186 	bne.w	8004928 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004622:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004626:	e129      	b.n	800487c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800463a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800463e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004642:	4013      	ands	r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800464a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	1c9a      	adds	r2, r3, #2
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b00      	cmp	r3, #0
 800467c:	d053      	beq.n	8004726 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800467e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d011      	beq.n	80046ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800468a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2201      	movs	r2, #1
 800469c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f043 0201 	orr.w	r2, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d011      	beq.n	80046de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80046ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2202      	movs	r2, #2
 80046cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	f043 0204 	orr.w	r2, r3, #4
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d011      	beq.n	800470e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80046ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00b      	beq.n	800470e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2204      	movs	r2, #4
 80046fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f043 0202 	orr.w	r2, r3, #2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fc f823 	bl	8000764 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 80a4 	bne.w	800487c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800475a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800475e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e2      	bne.n	8004734 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3308      	adds	r3, #8
 8004774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800477e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	3308      	adds	r3, #8
 8004792:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800479c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e1      	bne.n	800476e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5f      	ldr	r2, [pc, #380]	; (8004940 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d021      	beq.n	800480c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01a      	beq.n	800480c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80047fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e4      	bne.n	80047d6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004810:	2b01      	cmp	r3, #1
 8004812:	d130      	bne.n	8004876 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482a:	f023 0310 	bic.w	r3, r3, #16
 800482e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800483c:	647b      	str	r3, [r7, #68]	; 0x44
 800483e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800484a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e4      	bne.n	800481a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b10      	cmp	r3, #16
 800485c:	d103      	bne.n	8004866 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2210      	movs	r2, #16
 8004864:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fe fd50 	bl	8003314 <HAL_UARTEx_RxEventCallback>
 8004874:	e002      	b.n	800487c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fb ffa4 	bl	80007c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800487c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004884:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	f47f aecb 	bne.w	8004628 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004898:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800489c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d049      	beq.n	8004938 <UART_RxISR_16BIT_FIFOEN+0x358>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80048aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d242      	bcs.n	8004938 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	623b      	str	r3, [r7, #32]
   return(result);
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3308      	adds	r3, #8
 80048d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80048d6:	633a      	str	r2, [r7, #48]	; 0x30
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048de:	e841 2300 	strex	r3, r2, [r1]
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1e3      	bne.n	80048b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80048ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	617b      	str	r3, [r7, #20]
   return(result);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e4      	bne.n	80048f0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004926:	e007      	b.n	8004938 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0208 	orr.w	r2, r2, #8
 8004936:	619a      	str	r2, [r3, #24]
}
 8004938:	bf00      	nop
 800493a:	37b8      	adds	r7, #184	; 0xb8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40008000 	.word	0x40008000
 8004944:	080040c9 	.word	0x080040c9

08004948 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	bc80      	pop	{r7}
 8004958:	4770      	bx	lr

0800495a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr

0800497e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_UARTEx_DisableFifoMode+0x16>
 8004990:	2302      	movs	r3, #2
 8004992:	e027      	b.n	80049e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e02d      	b.n	8004a62 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2224      	movs	r2, #36	; 0x24
 8004a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f850 	bl	8004ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e02d      	b.n	8004ade <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2224      	movs	r2, #36	; 0x24
 8004a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0201 	bic.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f812 	bl	8004ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d108      	bne.n	8004b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b08:	e031      	b.n	8004b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b0e:	2308      	movs	r3, #8
 8004b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	0e5b      	lsrs	r3, r3, #25
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	0f5b      	lsrs	r3, r3, #29
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b32:	7bbb      	ldrb	r3, [r7, #14]
 8004b34:	7b3a      	ldrb	r2, [r7, #12]
 8004b36:	4910      	ldr	r1, [pc, #64]	; (8004b78 <UARTEx_SetNbDataToProcess+0x90>)
 8004b38:	5c8a      	ldrb	r2, [r1, r2]
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b3e:	7b3a      	ldrb	r2, [r7, #12]
 8004b40:	490e      	ldr	r1, [pc, #56]	; (8004b7c <UARTEx_SetNbDataToProcess+0x94>)
 8004b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	7b7a      	ldrb	r2, [r7, #13]
 8004b54:	4908      	ldr	r1, [pc, #32]	; (8004b78 <UARTEx_SetNbDataToProcess+0x90>)
 8004b56:	5c8a      	ldrb	r2, [r1, r2]
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b5c:	7b7a      	ldrb	r2, [r7, #13]
 8004b5e:	4907      	ldr	r1, [pc, #28]	; (8004b7c <UARTEx_SetNbDataToProcess+0x94>)
 8004b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	08004ce0 	.word	0x08004ce0
 8004b7c:	08004ce8 	.word	0x08004ce8

08004b80 <__libc_init_array>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	4d0d      	ldr	r5, [pc, #52]	; (8004bb8 <__libc_init_array+0x38>)
 8004b84:	4c0d      	ldr	r4, [pc, #52]	; (8004bbc <__libc_init_array+0x3c>)
 8004b86:	1b64      	subs	r4, r4, r5
 8004b88:	10a4      	asrs	r4, r4, #2
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	42a6      	cmp	r6, r4
 8004b8e:	d109      	bne.n	8004ba4 <__libc_init_array+0x24>
 8004b90:	4d0b      	ldr	r5, [pc, #44]	; (8004bc0 <__libc_init_array+0x40>)
 8004b92:	4c0c      	ldr	r4, [pc, #48]	; (8004bc4 <__libc_init_array+0x44>)
 8004b94:	f000 f82e 	bl	8004bf4 <_init>
 8004b98:	1b64      	subs	r4, r4, r5
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	2600      	movs	r6, #0
 8004b9e:	42a6      	cmp	r6, r4
 8004ba0:	d105      	bne.n	8004bae <__libc_init_array+0x2e>
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
 8004ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba8:	4798      	blx	r3
 8004baa:	3601      	adds	r6, #1
 8004bac:	e7ee      	b.n	8004b8c <__libc_init_array+0xc>
 8004bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb2:	4798      	blx	r3
 8004bb4:	3601      	adds	r6, #1
 8004bb6:	e7f2      	b.n	8004b9e <__libc_init_array+0x1e>
 8004bb8:	08004cf8 	.word	0x08004cf8
 8004bbc:	08004cf8 	.word	0x08004cf8
 8004bc0:	08004cf8 	.word	0x08004cf8
 8004bc4:	08004cfc 	.word	0x08004cfc

08004bc8 <memcpy>:
 8004bc8:	440a      	add	r2, r1
 8004bca:	4291      	cmp	r1, r2
 8004bcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004bd0:	d100      	bne.n	8004bd4 <memcpy+0xc>
 8004bd2:	4770      	bx	lr
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bde:	4291      	cmp	r1, r2
 8004be0:	d1f9      	bne.n	8004bd6 <memcpy+0xe>
 8004be2:	bd10      	pop	{r4, pc}

08004be4 <memset>:
 8004be4:	4402      	add	r2, r0
 8004be6:	4603      	mov	r3, r0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d100      	bne.n	8004bee <memset+0xa>
 8004bec:	4770      	bx	lr
 8004bee:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf2:	e7f9      	b.n	8004be8 <memset+0x4>

08004bf4 <_init>:
 8004bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf6:	bf00      	nop
 8004bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bfa:	bc08      	pop	{r3}
 8004bfc:	469e      	mov	lr, r3
 8004bfe:	4770      	bx	lr

08004c00 <_fini>:
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	bf00      	nop
 8004c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c06:	bc08      	pop	{r3}
 8004c08:	469e      	mov	lr, r3
 8004c0a:	4770      	bx	lr


STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000485c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a78  08004a78  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a80  08004a80  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a80  08004a80  00014a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000060  08004ae8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004ae8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffd2  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002417  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00032478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00033460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b756  00000000  00000000  00034380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f160  00000000  00000000  0004fad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afd77  00000000  00000000  0005ec36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e9ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041bc  00000000  00000000  0010ea00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000060 	.word	0x20000060
 8000154:	00000000 	.word	0x00000000
 8000158:	0800497c 	.word	0x0800497c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000064 	.word	0x20000064
 8000174:	0800497c 	.word	0x0800497c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000498:	f023 0218 	bic.w	r2, r3, #24
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr

080004e2 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80004e2:	b480      	push	{r7}
 80004e4:	b083      	sub	sp, #12
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
	...

08000508 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	UART_QUEUE_STATUS qStatus;

	// add message to queue
	qStatus = uartQueue_enqueue(&rxQueue, rxBuffer);
 8000510:	490f      	ldr	r1, [pc, #60]	; (8000550 <HAL_UART_RxCpltCallback+0x48>)
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <HAL_UART_RxCpltCallback+0x4c>)
 8000514:	f000 fa29 	bl	800096a <uartQueue_enqueue>
 8000518:	4603      	mov	r3, r0
 800051a:	73fb      	strb	r3, [r7, #15]

	if(HAL_UART_Transmit(UartHandle, (uint8_t*)QueuedMessage, (COUNTOF(QueuedMessage) - 1), 100)!= HAL_OK)
 800051c:	2364      	movs	r3, #100	; 0x64
 800051e:	2214      	movs	r2, #20
 8000520:	490d      	ldr	r1, [pc, #52]	; (8000558 <HAL_UART_RxCpltCallback+0x50>)
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f002 f9c3 	bl	80028ae <HAL_UART_Transmit>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_UART_RxCpltCallback+0x2a>
	  {
		/* Transfer error in transmission process */
		Error_Handler();
 800052e:	f000 f900 	bl	8000732 <Error_Handler>
	  }

	// begin receiving again
	if(HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, RXBUFFERSIZE)== HAL_ERROR)
 8000532:	2220      	movs	r2, #32
 8000534:	4906      	ldr	r1, [pc, #24]	; (8000550 <HAL_UART_RxCpltCallback+0x48>)
 8000536:	4809      	ldr	r0, [pc, #36]	; (800055c <HAL_UART_RxCpltCallback+0x54>)
 8000538:	f002 fa40 	bl	80029bc <HAL_UART_Receive_IT>
 800053c:	4603      	mov	r3, r0
 800053e:	2b01      	cmp	r3, #1
 8000540:	d101      	bne.n	8000546 <HAL_UART_RxCpltCallback+0x3e>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 8000542:	f000 f8f6 	bl	8000732 <Error_Handler>
	}
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000019c 	.word	0x2000019c
 8000554:	20000110 	.word	0x20000110
 8000558:	20000040 	.word	0x20000040
 800055c:	2000007c 	.word	0x2000007c

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uartQueue_init(&rxQueue);
 8000564:	4812      	ldr	r0, [pc, #72]	; (80005b0 <main+0x50>)
 8000566:	f000 f9d2 	bl	800090e <uartQueue_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fa4b 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f827 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8d1 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000576:	f000 f87d 	bl	8000674 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_UART_Transmit(&huart2, (uint8_t*)HelloWorldMessage, (COUNTOF(HelloWorldMessage) - 1), 1000)!= HAL_OK)
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	223a      	movs	r2, #58	; 0x3a
 8000580:	490c      	ldr	r1, [pc, #48]	; (80005b4 <main+0x54>)
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <main+0x58>)
 8000584:	f002 f993 	bl	80028ae <HAL_UART_Transmit>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x32>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 800058e:	f000 f8d0 	bl	8000732 <Error_Handler>
	}

  if(HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, RXBUFFERSIZE)== HAL_ERROR)
 8000592:	2220      	movs	r2, #32
 8000594:	4909      	ldr	r1, [pc, #36]	; (80005bc <main+0x5c>)
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0x58>)
 8000598:	f002 fa10 	bl	80029bc <HAL_UART_Receive_IT>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d101      	bne.n	80005a6 <main+0x46>
	{
	  /* Transfer error in transmission process */
	  Error_Handler();
 80005a2:	f000 f8c6 	bl	8000732 <Error_Handler>
	}
  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80005a6:	2001      	movs	r0, #1
 80005a8:	f000 fdf2 	bl	8001190 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x4c>
 80005ae:	bf00      	nop
 80005b0:	20000110 	.word	0x20000110
 80005b4:	20000004 	.word	0x20000004
 80005b8:	2000007c 	.word	0x2000007c
 80005bc:	2000019c 	.word	0x2000019c

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b09a      	sub	sp, #104	; 0x68
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2248      	movs	r2, #72	; 0x48
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 f9cc 	bl	800496c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e6:	f000 fdab 	bl	8001140 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f7ff ff4c 	bl	8000488 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xb0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005f8:	4a1d      	ldr	r2, [pc, #116]	; (8000670 <SystemClock_Config+0xb0>)
 80005fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <SystemClock_Config+0xb0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800060c:	2324      	movs	r3, #36	; 0x24
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000610:	2381      	movs	r3, #129	; 0x81
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000618:	2300      	movs	r3, #0
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061c:	2360      	movs	r3, #96	; 0x60
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f873 	bl	8001714 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000634:	f000 f87d 	bl	8000732 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000638:	236f      	movs	r3, #111	; 0x6f
 800063a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fbdd 	bl	8001e18 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000664:	f000 f865 	bl	8000732 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3768      	adds	r7, #104	; 0x68
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	58000400 	.word	0x58000400

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 800067a:	4a26      	ldr	r2, [pc, #152]	; (8000714 <MX_USART2_UART_Init+0xa0>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 600;
 800067e:	4b24      	ldr	r3, [pc, #144]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 8000680:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 8000694:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000698:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 800069c:	220c      	movs	r2, #12
 800069e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006ba:	2210      	movs	r2, #16
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006c8:	f002 f8a1 	bl	800280e <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x62>
  {
    Error_Handler();
 80006d2:	f000 f82e 	bl	8000732 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006da:	f004 f84c 	bl	8004776 <HAL_UARTEx_SetTxFifoThreshold>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_USART2_UART_Init+0x74>
  {
    Error_Handler();
 80006e4:	f000 f825 	bl	8000732 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006ec:	f004 f881 	bl	80047f2 <HAL_UARTEx_SetRxFifoThreshold>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x86>
  {
    Error_Handler();
 80006f6:	f000 f81c 	bl	8000732 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x9c>)
 80006fc:	f004 f803 	bl	8004706 <HAL_UARTEx_DisableFifoMode>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x96>
  {
    Error_Handler();
 8000706:	f000 f814 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000007c 	.word	0x2000007c
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fec8 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2004      	movs	r0, #4
 8000724:	f7ff fec5 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff fec2 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}

08000732 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000736:	b672      	cpsid	i
}
 8000738:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073a:	e7fe      	b.n	800073a <Error_Handler+0x8>

0800073c <LL_AHB2_GRP1_EnableClock>:
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800074a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000760:	68fb      	ldr	r3, [r7, #12]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800077a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000790:	68fb      	ldr	r3, [r7, #12]
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b096      	sub	sp, #88	; 0x58
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2238      	movs	r2, #56	; 0x38
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 f8cf 	bl	800496c <memset>
  if(huart->Instance==USART2)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <HAL_UART_MspInit+0x98>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d12e      	bne.n	8000836 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007d8:	2302      	movs	r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007dc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80007e0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fed6 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007f2:	f7ff ff9e 	bl	8000732 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007fa:	f7ff ffb7 	bl	800076c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff9c 	bl	800073c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000804:	230c      	movs	r3, #12
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000814:	2307      	movs	r3, #7
 8000816:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800081c:	4619      	mov	r1, r3
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fb2d 	bl	8000e80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2025      	movs	r0, #37	; 0x25
 800082c:	f000 fa37 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000830:	2025      	movs	r0, #37	; 0x25
 8000832:	f000 fa4e 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3758      	adds	r7, #88	; 0x58
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088a:	f000 f915 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <USART2_IRQHandler+0x10>)
 800089a:	f002 f8db 	bl	8002a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000007c 	.word	0x2000007c

080008a8 <nextIdx>:


/*
 * Private helper to calculate next index in circular queue.
 */
uint8_t nextIdx(uint8_t index) {
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	return (index + 1) % QUEUE_SIZE;
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	3301      	adds	r3, #1
 80008b6:	425a      	negs	r2, r3
 80008b8:	f003 0303 	and.w	r3, r3, #3
 80008bc:	f002 0203 	and.w	r2, r2, #3
 80008c0:	bf58      	it	pl
 80008c2:	4253      	negpl	r3, r2
 80008c4:	b2db      	uxtb	r3, r3
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <_enqueue>:

/*
 * Private helper to enqueue a message to the queue.
 */
void _enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
	// copy the message to the queue and increment the rear pointer
//	strncpy(queue->queue[queue->rear], message, QUEUE_BUFFER_SIZE);
	memcpy(queue->queue[queue->rear], message, QUEUE_BUFFER_SIZE*sizeof(char));
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	015b      	lsls	r3, r3, #5
 80008e0:	3308      	adds	r3, #8
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	3304      	adds	r3, #4
 80008e8:	2220      	movs	r2, #32
 80008ea:	6839      	ldr	r1, [r7, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f004 f82f 	bl	8004950 <memcpy>
	queue->rear = nextIdx(queue->rear);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ffd5 	bl	80008a8 <nextIdx>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	609a      	str	r2, [r3, #8]
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <uartQueue_init>:

/*
 * Initializes a UART_Queue structure.
 * Call before attempting to operate on the queue.
 */
void uartQueue_init(UART_Queue* queue) {
 800090e:	b480      	push	{r7}
 8000910:	b085      	sub	sp, #20
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	// operation variables
	int row, col;

	// reset all operation variables
	queue->isEmpty = true;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
	queue->front = 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
	queue->rear = 0;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]

	// ensure that the queue messages are empty
	for (row = 0; row < SERIAL_MESSAGE_SIZE; row++)
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e014      	b.n	8000958 <uartQueue_init+0x4a>
		for (col = 0; col < SERIAL_MESSAGE_SIZE; col++)
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	e00b      	b.n	800094c <uartQueue_init+0x3e>
			queue->queue[row][col] = '\0';
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	015b      	lsls	r3, r3, #5
 800093a:	441a      	add	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	4413      	add	r3, r2
 8000940:	330c      	adds	r3, #12
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
		for (col = 0; col < SERIAL_MESSAGE_SIZE; col++)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	3301      	adds	r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	2b1f      	cmp	r3, #31
 8000950:	ddf0      	ble.n	8000934 <uartQueue_init+0x26>
	for (row = 0; row < SERIAL_MESSAGE_SIZE; row++)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	3301      	adds	r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b1f      	cmp	r3, #31
 800095c:	dde7      	ble.n	800092e <uartQueue_init+0x20>
}
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr

0800096a <uartQueue_enqueue>:

/*
 * Enqueue a message.
 * Return success if enqueueing successful, or full if the queue is full.
 */
UART_QUEUE_STATUS uartQueue_enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (queue->isEmpty) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d008      	beq.n	800098e <uartQueue_enqueue+0x24>
		// set not empty
		queue->isEmpty = false;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]

		// and enqueue
		_enqueue(queue, message);
 8000982:	6839      	ldr	r1, [r7, #0]
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ffa3 	bl	80008d0 <_enqueue>
		return UART_QUEUE_SUCCESS;
 800098a:	2300      	movs	r3, #0
 800098c:	e00c      	b.n	80009a8 <uartQueue_enqueue+0x3e>
	}

	// case that queue is not empty
	else {
		// case that queue is full
		if (queue->front == queue->rear)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	429a      	cmp	r2, r3
 8000998:	d101      	bne.n	800099e <uartQueue_enqueue+0x34>
			return UART_QUEUE_FULL;
 800099a:	2301      	movs	r3, #1
 800099c:	e004      	b.n	80009a8 <uartQueue_enqueue+0x3e>

		// queue is not full, enqueue
		_enqueue(queue, message);
 800099e:	6839      	ldr	r1, [r7, #0]
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff95 	bl	80008d0 <_enqueue>
		return UART_QUEUE_SUCCESS;
 80009a6:	2300      	movs	r3, #0
	}
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009b4:	f7ff fd62 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	; (80009f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	; (80009fc <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009de:	f003 ff93 	bl	8004908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e2:	f7ff fdbd 	bl	8000560 <main>

080009e6 <LoopForever>:

LoopForever:
    b LoopForever
 80009e6:	e7fe      	b.n	80009e6 <LoopForever>
  ldr   r0, =_estack
 80009e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009f4:	08004a88 	.word	0x08004a88
  ldr r2, =_sbss
 80009f8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009fc:	200001c0 	.word	0x200001c0

08000a00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC_IRQHandler>
	...

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 f93a 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000a14:	f001 fbe2 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a09      	ldr	r2, [pc, #36]	; (8000a40 <HAL_Init+0x3c>)
 8000a1c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f810 	bl	8000a44 <HAL_InitTick>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	e001      	b.n	8000a34 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a30:	f7ff feb4 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000000 	.word	0x20000000

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_InitTick+0x6c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d024      	beq.n	8000aa2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a58:	f001 fbc0 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_InitTick+0x6c>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a68:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 f93c 	bl	8000cee <HAL_SYSTICK_Config>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d10f      	bne.n	8000a9c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d809      	bhi.n	8000a96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a82:	2200      	movs	r2, #0
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a8a:	f000 f908 	bl	8000c9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8e:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <HAL_InitTick+0x70>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e007      	b.n	8000aa6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e004      	b.n	8000aa6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	73fb      	strb	r3, [r7, #15]
 8000aa0:	e001      	b.n	8000aa6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000005c 	.word	0x2000005c
 8000ab4:	20000058 	.word	0x20000058

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x1c>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x20>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <HAL_IncTick+0x20>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	2000005c 	.word	0x2000005c
 8000ad8:	200001bc 	.word	0x200001bc

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <HAL_GetTick+0x10>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	200001bc 	.word	0x200001bc

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4906      	ldr	r1, [pc, #24]	; (8000b88 <__NVIC_EnableIRQ+0x34>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c68:	f7ff ff90 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff2d 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff44 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ff92 	bl	8000be0 <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff61 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff37 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ffa4 	bl	8000c44 <SysTick_Config>
 8000cfc:	4603      	mov	r3, r0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e04f      	b.n	8000db8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d008      	beq.n	8000d36 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2204      	movs	r2, #4
 8000d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e040      	b.n	8000db8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f022 020e 	bic.w	r2, r2, #14
 8000d44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0201 	bic.w	r2, r2, #1
 8000d64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f003 021c 	and.w	r2, r3, #28
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	2101      	movs	r1, #1
 8000d74:	fa01 f202 	lsl.w	r2, r1, r2
 8000d78:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d82:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00c      	beq.n	8000da6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000da4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d005      	beq.n	8000de6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2204      	movs	r2, #4
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	e047      	b.n	8000e76 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 020e 	bic.w	r2, r2, #14
 8000df4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0201 	bic.w	r2, r2, #1
 8000e04:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f003 021c 	and.w	r2, r3, #28
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	2101      	movs	r1, #1
 8000e24:	fa01 f202 	lsl.w	r2, r1, r2
 8000e28:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e32:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00c      	beq.n	8000e56 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e54:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d003      	beq.n	8000e76 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	4798      	blx	r3
    }
  }
  return status;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8e:	e140      	b.n	8001112 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	2101      	movs	r1, #1
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8132 	beq.w	800110c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d005      	beq.n	8000ec0 <HAL_GPIO_Init+0x40>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d130      	bne.n	8000f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	68da      	ldr	r2, [r3, #12]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	091b      	lsrs	r3, r3, #4
 8000f0c:	f003 0201 	and.w	r2, r3, #1
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d017      	beq.n	8000f5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d123      	bne.n	8000fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	08da      	lsrs	r2, r3, #3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3208      	adds	r2, #8
 8000fac:	6939      	ldr	r1, [r7, #16]
 8000fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0203 	and.w	r2, r3, #3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 808c 	beq.w	800110c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff4:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	2207      	movs	r2, #7
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101e:	d00d      	beq.n	800103c <HAL_GPIO_Init+0x1bc>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_GPIO_Init+0x2b4>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d007      	beq.n	8001038 <HAL_GPIO_Init+0x1b8>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a43      	ldr	r2, [pc, #268]	; (8001138 <HAL_GPIO_Init+0x2b8>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d101      	bne.n	8001034 <HAL_GPIO_Init+0x1b4>
 8001030:	2302      	movs	r3, #2
 8001032:	e004      	b.n	800103e <HAL_GPIO_Init+0x1be>
 8001034:	2307      	movs	r3, #7
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x1be>
 8001038:	2301      	movs	r3, #1
 800103a:	e000      	b.n	800103e <HAL_GPIO_Init+0x1be>
 800103c:	2300      	movs	r3, #0
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	f002 0203 	and.w	r2, r2, #3
 8001044:	0092      	lsls	r2, r2, #2
 8001046:	4093      	lsls	r3, r2
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104e:	4938      	ldr	r1, [pc, #224]	; (8001130 <HAL_GPIO_Init+0x2b0>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	3302      	adds	r3, #2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <HAL_GPIO_Init+0x2bc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001080:	4a2e      	ldr	r2, [pc, #184]	; (800113c <HAL_GPIO_Init+0x2bc>)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_GPIO_Init+0x2bc>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43db      	mvns	r3, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010aa:	4a24      	ldr	r2, [pc, #144]	; (800113c <HAL_GPIO_Init+0x2bc>)
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <HAL_GPIO_Init+0x2bc>)
 80010b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010b6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <HAL_GPIO_Init+0x2bc>)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <HAL_GPIO_Init+0x2bc>)
 80010e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010e4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_GPIO_Init+0x2bc>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	f47f aeb7 	bne.w	8000e90 <HAL_GPIO_Init+0x10>
  }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40010000 	.word	0x40010000
 8001134:	48000400 	.word	0x48000400
 8001138:	48000800 	.word	0x48000800
 800113c:	58000800 	.word	0x58000800

08001140 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <HAL_PWR_EnableBkUpAccess+0x18>)
 800114a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	58000400 	.word	0x58000400

0800115c <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <LL_PWR_EnableBootC2+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <LL_PWR_EnableBootC2+0x18>)
 8001166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	58000400 	.word	0x58000400

08001178 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_PWREx_GetVoltageRange+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	58000400 	.word	0x58000400

08001190 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001198:	f7ff ffe0 	bl	800115c <LL_PWR_EnableBootC2>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011b4:	d101      	bne.n	80011ba <LL_PWR_IsEnabledBkUpAccess+0x16>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	58000400 	.word	0x58000400

080011c8 <LL_RCC_HSE_EnableTcxo>:
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80011cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <LL_RCC_HSE_DisableTcxo>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80011e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001212:	d101      	bne.n	8001218 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr

08001222 <LL_RCC_HSE_Enable>:
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <LL_RCC_HSE_Disable>:
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001250:	6013      	str	r3, [r2, #0]
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <LL_RCC_HSE_IsReady>:
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800125e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800126c:	d101      	bne.n	8001272 <LL_RCC_HSE_IsReady+0x18>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <LL_RCC_HSE_IsReady+0x1a>
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr

0800127c <LL_RCC_HSI_Enable>:
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800128a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_RCC_HSI_Disable>:
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012aa:	6013      	str	r3, [r2, #0]
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <LL_RCC_HSI_IsReady>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c6:	d101      	bne.n	80012cc <LL_RCC_HSI_IsReady+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_RCC_HSI_IsReady+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80012de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	061b      	lsls	r3, r3, #24
 80012ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b02      	cmp	r3, #2
 8001310:	d101      	bne.n	8001316 <LL_RCC_LSE_IsReady+0x18>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_RCC_LSE_IsReady+0x1a>
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b02      	cmp	r3, #2
 8001372:	d101      	bne.n	8001378 <LL_RCC_LSI_IsReady+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_RCC_LSI_IsReady+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6013      	str	r3, [r2, #0]
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80013a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6013      	str	r3, [r2, #0]
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80013be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d101      	bne.n	80013d0 <LL_RCC_MSI_IsReady+0x16>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <LL_RCC_MSI_IsReady+0x18>
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80013de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	d101      	bne.n	80013f0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80013fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001442:	4313      	orrs	r3, r2
 8001444:	604b      	str	r3, [r1, #4]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f023 0203 	bic.w	r2, r3, #3
 8001462:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4313      	orrs	r3, r2
 800146a:	608b      	str	r3, [r1, #8]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800147a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 030c 	and.w	r3, r3, #12
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	608b      	str	r3, [r1, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80014e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ec:	f023 020f 	bic.w	r2, r3, #15
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014f8:	4313      	orrs	r3, r2
 80014fa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800151a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800159e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80015b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80015ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015fa:	d101      	bne.n	8001600 <LL_RCC_PLL_IsReady+0x18>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <LL_RCC_PLL_IsReady+0x1a>
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr

0800164e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0303 	and.w	r3, r3, #3
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001676:	d101      	bne.n	800167c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800169a:	d101      	bne.n	80016a0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80016b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016be:	d101      	bne.n	80016c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016e0:	d101      	bne.n	80016e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001702:	d101      	bne.n	8001708 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
	...

08001714 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e36f      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001726:	f7ff fea6 	bl	8001476 <LL_RCC_GetSysClkSource>
 800172a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800172c:	f7ff ff8f 	bl	800164e <LL_RCC_PLL_GetMainSource>
 8001730:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80c4 	beq.w	80018c8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d005      	beq.n	8001752 <HAL_RCC_OscConfig+0x3e>
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d176      	bne.n	800183a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d173      	bne.n	800183a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e353      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d005      	beq.n	800177c <HAL_RCC_OscConfig+0x68>
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800177a:	e006      	b.n	800178a <HAL_RCC_OscConfig+0x76>
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800178a:	4293      	cmp	r3, r2
 800178c:	d222      	bcs.n	80017d4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fd5a 	bl	800224c <RCC_SetFlashLatencyFromMSIRange>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e331      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017c4:	4313      	orrs	r3, r2
 80017c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fe2b 	bl	8001428 <LL_RCC_MSI_SetCalibTrimming>
 80017d2:	e021      	b.n	8001818 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017de:	f043 0308 	orr.w	r3, r3, #8
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe12 	bl	8001428 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fd1f 	bl	800224c <RCC_SetFlashLatencyFromMSIRange>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e2f6      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001818:	f000 fce0 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 800181c:	4603      	mov	r3, r0
 800181e:	4aa7      	ldr	r2, [pc, #668]	; (8001abc <HAL_RCC_OscConfig+0x3a8>)
 8001820:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001822:	4ba7      	ldr	r3, [pc, #668]	; (8001ac0 <HAL_RCC_OscConfig+0x3ac>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff f90c 	bl	8000a44 <HAL_InitTick>
 800182c:	4603      	mov	r3, r0
 800182e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001830:	7cfb      	ldrb	r3, [r7, #19]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d047      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001836:	7cfb      	ldrb	r3, [r7, #19]
 8001838:	e2e5      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d02c      	beq.n	800189c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001842:	f7ff fd9e 	bl	8001382 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001846:	f7ff f949 	bl	8000adc <HAL_GetTick>
 800184a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184e:	f7ff f945 	bl	8000adc <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e2d2      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001860:	f7ff fdab 	bl	80013ba <LL_RCC_MSI_IsReady>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f1      	beq.n	800184e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fdc7 	bl	8001428 <LL_RCC_MSI_SetCalibTrimming>
 800189a:	e015      	b.n	80018c8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800189c:	f7ff fd7f 	bl	800139e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a0:	f7ff f91c 	bl	8000adc <HAL_GetTick>
 80018a4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018a8:	f7ff f918 	bl	8000adc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e2a5      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80018ba:	f7ff fd7e 	bl	80013ba <LL_RCC_MSI_IsReady>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f1      	bne.n	80018a8 <HAL_RCC_OscConfig+0x194>
 80018c4:	e000      	b.n	80018c8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80018c6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d058      	beq.n	8001986 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1d2>
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	d108      	bne.n	80018f2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d105      	bne.n	80018f2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d14b      	bne.n	8001986 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e289      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0x204>
 8001912:	f7ff fc86 	bl	8001222 <LL_RCC_HSE_Enable>
 8001916:	e00d      	b.n	8001934 <HAL_RCC_OscConfig+0x220>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001920:	d104      	bne.n	800192c <HAL_RCC_OscConfig+0x218>
 8001922:	f7ff fc51 	bl	80011c8 <LL_RCC_HSE_EnableTcxo>
 8001926:	f7ff fc7c 	bl	8001222 <LL_RCC_HSE_Enable>
 800192a:	e003      	b.n	8001934 <HAL_RCC_OscConfig+0x220>
 800192c:	f7ff fc87 	bl	800123e <LL_RCC_HSE_Disable>
 8001930:	f7ff fc58 	bl	80011e4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d012      	beq.n	8001962 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff f8ce 	bl	8000adc <HAL_GetTick>
 8001940:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff f8ca 	bl	8000adc <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e257      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001956:	f7ff fc80 	bl	800125a <LL_RCC_HSE_IsReady>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f1      	beq.n	8001944 <HAL_RCC_OscConfig+0x230>
 8001960:	e011      	b.n	8001986 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001962:	f7ff f8bb 	bl	8000adc <HAL_GetTick>
 8001966:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196a:	f7ff f8b7 	bl	8000adc <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b64      	cmp	r3, #100	; 0x64
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e244      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800197c:	f7ff fc6d 	bl	800125a <LL_RCC_HSE_IsReady>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f1      	bne.n	800196a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d046      	beq.n	8001a20 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	2b04      	cmp	r3, #4
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x290>
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d10e      	bne.n	80019bc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d10b      	bne.n	80019bc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e22a      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fc8e 	bl	80012d6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80019ba:	e031      	b.n	8001a20 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d019      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	f7ff fc5a 	bl	800127c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f888 	bl	8000adc <HAL_GetTick>
 80019cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff f884 	bl	8000adc <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e211      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80019e2:	f7ff fc67 	bl	80012b4 <LL_RCC_HSI_IsReady>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f1      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fc70 	bl	80012d6 <LL_RCC_HSI_SetCalibTrimming>
 80019f6:	e013      	b.n	8001a20 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f8:	f7ff fc4e 	bl	8001298 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff f86e 	bl	8000adc <HAL_GetTick>
 8001a00:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a04:	f7ff f86a 	bl	8000adc <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1f7      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001a16:	f7ff fc4d 	bl	80012b4 <LL_RCC_HSI_IsReady>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f1      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d06e      	beq.n	8001b0a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d056      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69da      	ldr	r2, [r3, #28]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d031      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e1d0      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d013      	beq.n	8001a96 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a6e:	f7ff fc67 	bl	8001340 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a72:	f7ff f833 	bl	8000adc <HAL_GetTick>
 8001a76:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f82f 	bl	8000adc <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b11      	cmp	r3, #17
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1bc      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001a8c:	f7ff fc68 	bl	8001360 <LL_RCC_LSI_IsReady>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f1      	bne.n	8001a7a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9e:	f023 0210 	bic.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab0:	f7ff fc36 	bl	8001320 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f812 	bl	8000adc <HAL_GetTick>
 8001ab8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001aba:	e00c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x3c2>
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000058 	.word	0x20000058
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff f80a 	bl	8000adc <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b11      	cmp	r3, #17
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e197      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001ad6:	f7ff fc43 	bl	8001360 <LL_RCC_LSI_IsReady>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f1      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x3b0>
 8001ae0:	e013      	b.n	8001b0a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae2:	f7ff fc2d 	bl	8001340 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae6:	f7fe fff9 	bl	8000adc <HAL_GetTick>
 8001aea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aee:	f7fe fff5 	bl	8000adc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b11      	cmp	r3, #17
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e182      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001b00:	f7ff fc2e 	bl	8001360 <LL_RCC_LSI_IsReady>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f1      	bne.n	8001aee <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80d8 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b18:	f7ff fb44 	bl	80011a4 <LL_PWR_IsEnabledBkUpAccess>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d113      	bne.n	8001b4a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001b22:	f7ff fb0d 	bl	8001140 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7fe ffd9 	bl	8000adc <HAL_GetTick>
 8001b2a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7fe ffd5 	bl	8000adc <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e162      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001b40:	f7ff fb30 	bl	80011a4 <LL_PWR_IsEnabledBkUpAccess>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f1      	beq.n	8001b2e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d07b      	beq.n	8001c4a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b85      	cmp	r3, #133	; 0x85
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7fe ffb1 	bl	8000adc <HAL_GetTick>
 8001b7a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b90:	e00a      	b.n	8001ba8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f7fe ffa3 	bl	8000adc <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e12e      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ba8:	f7ff fba9 	bl	80012fe <LL_RCC_LSE_IsReady>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0ef      	beq.n	8001b92 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b81      	cmp	r3, #129	; 0x81
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b85      	cmp	r3, #133	; 0x85
 8001bc0:	d121      	bne.n	8001c06 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7fe ff8b 	bl	8000adc <HAL_GetTick>
 8001bc6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7fe ff7d 	bl	8000adc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e108      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ec      	beq.n	8001bde <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c04:	e060      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7fe ff69 	bl	8000adc <HAL_GetTick>
 8001c0a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7fe ff5b 	bl	8000adc <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e0e6      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ec      	bne.n	8001c22 <HAL_RCC_OscConfig+0x50e>
 8001c48:	e03e      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe ff47 	bl	8000adc <HAL_GetTick>
 8001c4e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7fe ff39 	bl	8000adc <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e0c4      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ec      	bne.n	8001c66 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7fe ff26 	bl	8000adc <HAL_GetTick>
 8001c90:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca8:	f7fe ff18 	bl	8000adc <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0a3      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001cbe:	f7ff fb1e 	bl	80012fe <LL_RCC_LSE_IsReady>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ef      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 8099 	beq.w	8001e04 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d06c      	beq.n	8001db2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d14b      	bne.n	8001d78 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	f7ff fc74 	bl	80015cc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fefa 	bl	8000adc <HAL_GetTick>
 8001ce8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe fef6 	bl	8000adc <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e083      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cfe:	f7ff fc73 	bl	80015e8 <LL_RCC_PLL_IsReady>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1f1      	bne.n	8001cec <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <HAL_RCC_OscConfig+0x6fc>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d1a:	4311      	orrs	r1, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d20:	0212      	lsls	r2, r2, #8
 8001d22:	4311      	orrs	r1, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d28:	4311      	orrs	r1, r2
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d2e:	4311      	orrs	r1, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d34:	430a      	orrs	r2, r1
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3e:	f7ff fc37 	bl	80015b0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7fe fec3 	bl	8000adc <HAL_GetTick>
 8001d56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7fe febf 	bl	8000adc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b0a      	cmp	r3, #10
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e04c      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001d6c:	f7ff fc3c 	bl	80015e8 <LL_RCC_PLL_IsReady>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f1      	beq.n	8001d5a <HAL_RCC_OscConfig+0x646>
 8001d76:	e045      	b.n	8001e04 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	f7ff fc28 	bl	80015cc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe feae 	bl	8000adc <HAL_GetTick>
 8001d80:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe feaa 	bl	8000adc <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b0a      	cmp	r3, #10
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e037      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d96:	f7ff fc27 	bl	80015e8 <LL_RCC_PLL_IsReady>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f1      	bne.n	8001d84 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_RCC_OscConfig+0x700>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
 8001db0:	e028      	b.n	8001e04 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e023      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d115      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d10e      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d106      	bne.n	8001e00 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	11c1808c 	.word	0x11c1808c
 8001e14:	eefefffc 	.word	0xeefefffc

08001e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e12c      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b98      	ldr	r3, [pc, #608]	; (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d91b      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b95      	ldr	r3, [pc, #596]	; (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 0207 	bic.w	r2, r3, #7
 8001e42:	4993      	ldr	r1, [pc, #588]	; (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e4a:	f7fe fe47 	bl	8000adc <HAL_GetTick>
 8001e4e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e52:	f7fe fe43 	bl	8000adc <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e110      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e64:	4b8a      	ldr	r3, [pc, #552]	; (8002090 <HAL_RCC_ClockConfig+0x278>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d1ef      	bne.n	8001e52 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d016      	beq.n	8001eac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fb02 	bl	800148c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e88:	f7fe fe28 	bl	8000adc <HAL_GetTick>
 8001e8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e90:	f7fe fe24 	bl	8000adc <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0f1      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001ea2:	f7ff fbdf 	bl	8001664 <LL_RCC_IsActiveFlag_HPRE>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f1      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d016      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff faf8 	bl	80014b2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ec2:	f7fe fe0b 	bl	8000adc <HAL_GetTick>
 8001ec6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001eca:	f7fe fe07 	bl	8000adc <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e0d4      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001edc:	f7ff fbd3 	bl	8001686 <LL_RCC_IsActiveFlag_C2HPRE>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f1      	beq.n	8001eca <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff faf0 	bl	80014dc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001efc:	f7fe fdee 	bl	8000adc <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f04:	f7fe fdea 	bl	8000adc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0b7      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001f16:	f7ff fbc8 	bl	80016aa <LL_RCC_IsActiveFlag_SHDHPRE>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f1      	beq.n	8001f04 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d016      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fae9 	bl	8001508 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f36:	f7fe fdd1 	bl	8000adc <HAL_GetTick>
 8001f3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f3e:	f7fe fdcd 	bl	8000adc <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e09a      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001f50:	f7ff fbbd 	bl	80016ce <LL_RCC_IsActiveFlag_PPRE1>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f1      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d017      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fade 	bl	800152e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f72:	f7fe fdb3 	bl	8000adc <HAL_GetTick>
 8001f76:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f7a:	f7fe fdaf 	bl	8000adc <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e07c      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001f8c:	f7ff fbb0 	bl	80016f0 <LL_RCC_IsActiveFlag_PPRE2>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d0f1      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d043      	beq.n	800202a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d106      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001faa:	f7ff f956 	bl	800125a <LL_RCC_HSE_IsReady>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d11e      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e066      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001fc0:	f7ff fb12 	bl	80015e8 <LL_RCC_PLL_IsReady>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d113      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e05b      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001fd6:	f7ff f9f0 	bl	80013ba <LL_RCC_MSI_IsReady>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d108      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e050      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001fe4:	f7ff f966 	bl	80012b4 <LL_RCC_HSI_IsReady>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e049      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fa2a 	bl	8001450 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fd6e 	bl	8000adc <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	e00a      	b.n	800201a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f7fe fd6a 	bl	8000adc <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e035      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	f7ff fa2c 	bl	8001476 <LL_RCC_GetSysClkSource>
 800201e:	4602      	mov	r2, r0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	429a      	cmp	r2, r3
 8002028:	d1ec      	bne.n	8002004 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCC_ClockConfig+0x278>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d21b      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCC_ClockConfig+0x278>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 0207 	bic.w	r2, r3, #7
 8002040:	4913      	ldr	r1, [pc, #76]	; (8002090 <HAL_RCC_ClockConfig+0x278>)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002048:	f7fe fd48 	bl	8000adc <HAL_GetTick>
 800204c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	e008      	b.n	8002062 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002050:	f7fe fd44 	bl	8000adc <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e011      	b.n	8002086 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCC_ClockConfig+0x278>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d1ef      	bne.n	8002050 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002070:	f000 f8b4 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8002074:	4603      	mov	r3, r0
 8002076:	4a07      	ldr	r2, [pc, #28]	; (8002094 <HAL_RCC_ClockConfig+0x27c>)
 8002078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_RCC_ClockConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fce0 	bl	8000a44 <HAL_InitTick>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	58004000 	.word	0x58004000
 8002094:	20000000 	.word	0x20000000
 8002098:	20000058 	.word	0x20000058

0800209c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020aa:	f7ff f9e4 	bl	8001476 <LL_RCC_GetSysClkSource>
 80020ae:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020b0:	f7ff facd 	bl	800164e <LL_RCC_PLL_GetMainSource>
 80020b4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x2c>
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d139      	bne.n	8002136 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d136      	bne.n	8002136 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80020c8:	f7ff f987 	bl	80013da <LL_RCC_MSI_IsEnabledRangeSelect>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_RCC_GetSysClockFreq+0x62>
 80020d2:	f7ff f982 	bl	80013da <LL_RCC_MSI_IsEnabledRangeSelect>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d106      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x4e>
 80020dc:	f7ff f98d 	bl	80013fa <LL_RCC_MSI_GetRange>
 80020e0:	4603      	mov	r3, r0
 80020e2:	0a1b      	lsrs	r3, r3, #8
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	e005      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x5a>
 80020ea:	f7ff f991 	bl	8001410 <LL_RCC_MSI_GetRangeAfterStandby>
 80020ee:	4603      	mov	r3, r0
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4a36      	ldr	r2, [pc, #216]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x134>)
 80020f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fc:	e014      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x8c>
 80020fe:	f7ff f96c 	bl	80013da <LL_RCC_MSI_IsEnabledRangeSelect>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d106      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x7a>
 8002108:	f7ff f977 	bl	80013fa <LL_RCC_MSI_GetRange>
 800210c:	4603      	mov	r3, r0
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	e005      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x86>
 8002116:	f7ff f97b 	bl	8001410 <LL_RCC_MSI_GetRangeAfterStandby>
 800211a:	4603      	mov	r3, r0
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	4a2b      	ldr	r2, [pc, #172]	; (80021d0 <HAL_RCC_GetSysClockFreq+0x134>)
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d115      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002134:	e012      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d102      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800213c:	4b25      	ldr	r3, [pc, #148]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00c      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d109      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002148:	f7ff f85a 	bl	8001200 <LL_RCC_HSE_IsEnabledDiv2>
 800214c:	4603      	mov	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	d102      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e001      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800215a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800215c:	f7ff f98b 	bl	8001476 <LL_RCC_GetSysClkSource>
 8002160:	4603      	mov	r3, r0
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d12f      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002166:	f7ff fa72 	bl	800164e <LL_RCC_PLL_GetMainSource>
 800216a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0xde>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d003      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xe4>
 8002178:	e00d      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800217c:	60fb      	str	r3, [r7, #12]
        break;
 800217e:	e00d      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002180:	f7ff f83e 	bl	8001200 <LL_RCC_HSE_IsEnabledDiv2>
 8002184:	4603      	mov	r3, r0
 8002186:	2b01      	cmp	r3, #1
 8002188:	d102      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800218c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800218e:	e005      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002192:	60fb      	str	r3, [r7, #12]
        break;
 8002194:	e002      	b.n	800219c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	60fb      	str	r3, [r7, #12]
        break;
 800219a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800219c:	f7ff fa35 	bl	800160a <LL_RCC_PLL_GetN>
 80021a0:	4602      	mov	r2, r0
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	fb03 f402 	mul.w	r4, r3, r2
 80021a8:	f7ff fa46 	bl	8001638 <LL_RCC_PLL_GetDivider>
 80021ac:	4603      	mov	r3, r0
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	3301      	adds	r3, #1
 80021b2:	fbb4 f4f3 	udiv	r4, r4, r3
 80021b6:	f7ff fa34 	bl	8001622 <LL_RCC_PLL_GetR>
 80021ba:	4603      	mov	r3, r0
 80021bc:	0f5b      	lsrs	r3, r3, #29
 80021be:	3301      	adds	r3, #1
 80021c0:	fbb4 f3f3 	udiv	r3, r4, r3
 80021c4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80021c6:	697b      	ldr	r3, [r7, #20]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	08004a10 	.word	0x08004a10
 80021d4:	00f42400 	.word	0x00f42400
 80021d8:	01e84800 	.word	0x01e84800

080021dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021dc:	b598      	push	{r3, r4, r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80021e0:	f7ff ff5c 	bl	800209c <HAL_RCC_GetSysClockFreq>
 80021e4:	4604      	mov	r4, r0
 80021e6:	f7ff f9b5 	bl	8001554 <LL_RCC_GetAHBPrescaler>
 80021ea:	4603      	mov	r3, r0
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	4a03      	ldr	r2, [pc, #12]	; (8002200 <HAL_RCC_GetHCLKFreq+0x24>)
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd98      	pop	{r3, r4, r7, pc}
 8002200:	080049b0 	.word	0x080049b0

08002204 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b598      	push	{r3, r4, r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002208:	f7ff ffe8 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 800220c:	4604      	mov	r4, r0
 800220e:	f7ff f9b9 	bl	8001584 <LL_RCC_GetAPB1Prescaler>
 8002212:	4603      	mov	r3, r0
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	4a03      	ldr	r2, [pc, #12]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd98      	pop	{r3, r4, r7, pc}
 8002224:	080049f0 	.word	0x080049f0

08002228 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b598      	push	{r3, r4, r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800222c:	f7ff ffd6 	bl	80021dc <HAL_RCC_GetHCLKFreq>
 8002230:	4604      	mov	r4, r0
 8002232:	f7ff f9b2 	bl	800159a <LL_RCC_GetAPB2Prescaler>
 8002236:	4603      	mov	r3, r0
 8002238:	0adb      	lsrs	r3, r3, #11
 800223a:	4a03      	ldr	r2, [pc, #12]	; (8002248 <HAL_RCC_GetPCLK2Freq+0x20>)
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd98      	pop	{r3, r4, r7, pc}
 8002248:	080049f0 	.word	0x080049f0

0800224c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002264:	f7ff f981 	bl	800156a <LL_RCC_GetAHB3Prescaler>
 8002268:	4603      	mov	r3, r0
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9c      	lsrs	r4, r3, #18
 8002288:	f7fe ff76 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 800228c:	4603      	mov	r3, r0
 800228e:	4619      	mov	r1, r3
 8002290:	4620      	mov	r0, r4
 8002292:	f000 f80b 	bl	80022ac <RCC_SetFlashLatency>
 8002296:	4603      	mov	r3, r0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	08004a10 	.word	0x08004a10
 80022a4:	080049b0 	.word	0x080049b0
 80022a8:	431bde83 	.word	0x431bde83

080022ac <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08e      	sub	sp, #56	; 0x38
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80022b6:	4a3a      	ldr	r2, [pc, #232]	; (80023a0 <RCC_SetFlashLatency+0xf4>)
 80022b8:	f107 0320 	add.w	r3, r7, #32
 80022bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022c0:	6018      	str	r0, [r3, #0]
 80022c2:	3304      	adds	r3, #4
 80022c4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80022c6:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <RCC_SetFlashLatency+0xf8>)
 80022c8:	f107 0318 	add.w	r3, r7, #24
 80022cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d0:	6018      	str	r0, [r3, #0]
 80022d2:	3304      	adds	r3, #4
 80022d4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80022d6:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <RCC_SetFlashLatency+0xfc>)
 80022d8:	f107 030c 	add.w	r3, r7, #12
 80022dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80022de:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80022e2:	2300      	movs	r3, #0
 80022e4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ec:	d11b      	bne.n	8002326 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
 80022f2:	e014      	b.n	800231e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	3338      	adds	r3, #56	; 0x38
 80022fa:	443b      	add	r3, r7
 80022fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002300:	461a      	mov	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4293      	cmp	r3, r2
 8002306:	d807      	bhi.n	8002318 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	3338      	adds	r3, #56	; 0x38
 800230e:	443b      	add	r3, r7
 8002310:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002316:	e021      	b.n	800235c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	3301      	adds	r3, #1
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
 800231e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002320:	2b02      	cmp	r3, #2
 8002322:	d9e7      	bls.n	80022f4 <RCC_SetFlashLatency+0x48>
 8002324:	e01a      	b.n	800235c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232a:	e014      	b.n	8002356 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	3338      	adds	r3, #56	; 0x38
 8002332:	443b      	add	r3, r7
 8002334:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4293      	cmp	r3, r2
 800233e:	d807      	bhi.n	8002350 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	3338      	adds	r3, #56	; 0x38
 8002346:	443b      	add	r3, r7
 8002348:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800234e:	e005      	b.n	800235c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002352:	3301      	adds	r3, #1
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	2b02      	cmp	r3, #2
 800235a:	d9e7      	bls.n	800232c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <RCC_SetFlashLatency+0x100>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 0207 	bic.w	r2, r3, #7
 8002364:	4911      	ldr	r1, [pc, #68]	; (80023ac <RCC_SetFlashLatency+0x100>)
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800236c:	f7fe fbb6 	bl	8000adc <HAL_GetTick>
 8002370:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002372:	e008      	b.n	8002386 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002374:	f7fe fbb2 	bl	8000adc <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e007      	b.n	8002396 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002386:	4b09      	ldr	r3, [pc, #36]	; (80023ac <RCC_SetFlashLatency+0x100>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002390:	429a      	cmp	r2, r3
 8002392:	d1ef      	bne.n	8002374 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3738      	adds	r7, #56	; 0x38
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	08004994 	.word	0x08004994
 80023a4:	0800499c 	.word	0x0800499c
 80023a8:	080049a4 	.word	0x080049a4
 80023ac:	58004000 	.word	0x58004000

080023b0 <LL_RCC_LSE_IsReady>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80023b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d101      	bne.n	80023c8 <LL_RCC_LSE_IsReady+0x18>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <LL_RCC_LSE_IsReady+0x1a>
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <LL_RCC_SetUSARTClockSource>:
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80023da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	43db      	mvns	r3, r3
 80023e8:	401a      	ands	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <LL_RCC_SetI2SClockSource>:
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <LL_RCC_SetLPUARTClockSource>:
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <LL_RCC_SetI2CClockSource>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800245e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002462:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	091b      	lsrs	r3, r3, #4
 800246a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800246e:	43db      	mvns	r3, r3
 8002470:	401a      	ands	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800247a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <LL_RCC_SetLPTIMClockSource>:
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	0c1b      	lsrs	r3, r3, #16
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	43db      	mvns	r3, r3
 80024a6:	401a      	ands	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_SetRNGClockSource>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <LL_RCC_SetADCClockSource>:
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <LL_RCC_SetRTCClockSource>:
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <LL_RCC_GetRTCClockSource>:
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr

08002556 <LL_RCC_ForceBackupDomainReset>:
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80025a4:	2300      	movs	r3, #0
 80025a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80025a8:	2300      	movs	r3, #0
 80025aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d058      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80025b8:	f7fe fdc2 	bl	8001140 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025bc:	f7fe fa8e 	bl	8000adc <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80025c2:	e009      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c4:	f7fe fa8a 	bl	8000adc <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d902      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	74fb      	strb	r3, [r7, #19]
        break;
 80025d6:	e006      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80025d8:	4b7b      	ldr	r3, [pc, #492]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e4:	d1ee      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d13c      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80025ec:	f7ff ffa7 	bl	800253e <LL_RCC_GetRTCClockSource>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d00f      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002606:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002608:	f7ff ffa5 	bl	8002556 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800260c:	f7ff ffb3 	bl	8002576 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d014      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fa5a 	bl	8000adc <HAL_GetTick>
 8002628:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800262a:	e00b      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262c:	f7fe fa56 	bl	8000adc <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	f241 3288 	movw	r2, #5000	; 0x1388
 800263a:	4293      	cmp	r3, r2
 800263c:	d902      	bls.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	74fb      	strb	r3, [r7, #19]
            break;
 8002642:	e004      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002644:	f7ff feb4 	bl	80023b0 <LL_RCC_LSE_IsReady>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d1ee      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff5b 	bl	8002514 <LL_RCC_SetRTCClockSource>
 800265e:	e004      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	74bb      	strb	r3, [r7, #18]
 8002664:	e001      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fea9 	bl	80023d2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe9e 	bl	80023d2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff fec0 	bl	800242c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fee6 	bl	800248e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d004      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fedb 	bl	800248e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fed0 	bl	800248e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fea9 	bl	8002456 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fe9e 	bl	8002456 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fe93 	bl	8002456 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d011      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fe5e 	bl	8002402 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274e:	d107      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800275a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d010      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fea5 	bl	80024c0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800278c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d011      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fea3 	bl	80024ea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027ac:	d107      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80027be:	7cbb      	ldrb	r3, [r7, #18]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	58000400 	.word	0x58000400

080027cc <LL_RCC_GetUSARTClockSource>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	041b      	lsls	r3, r3, #16
 80027e4:	4313      	orrs	r3, r2
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <LL_RCC_GetLPUARTClockSource>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4013      	ands	r3, r2
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e042      	b.n	80028a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	2b00      	cmp	r3, #0
 8002828:	d106      	bne.n	8002838 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7fd ffb8 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2224      	movs	r2, #36	; 0x24
 800283c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fc2f 	bl	80030b4 <UART_SetConfig>
 8002856:	4603      	mov	r3, r0
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e022      	b.n	80028a6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fe97 	bl	800359c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800287c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800288c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 ff1d 	bl	80036de <UART_CheckIdleState>
 80028a4:	4603      	mov	r3, r0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b08a      	sub	sp, #40	; 0x28
 80028b2:	af02      	add	r7, sp, #8
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d173      	bne.n	80029b0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_UART_Transmit+0x26>
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e06c      	b.n	80029b2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2221      	movs	r2, #33	; 0x21
 80028e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028e8:	f7fe f8f8 	bl	8000adc <HAL_GetTick>
 80028ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	d108      	bne.n	800291a <HAL_UART_Transmit+0x6c>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e003      	b.n	8002922 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002922:	e02c      	b.n	800297e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2200      	movs	r2, #0
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 ff23 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e039      	b.n	80029b2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	3302      	adds	r3, #2
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e007      	b.n	800296c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	3301      	adds	r3, #1
 800296a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1cc      	bne.n	8002924 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fef0 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e006      	b.n	80029b2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d137      	bne.n	8002a44 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_UART_Receive_IT+0x24>
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e030      	b.n	8002a46 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_UART_Receive_IT+0x94>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d01f      	beq.n	8002a34 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d018      	beq.n	8002a34 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	69f9      	ldr	r1, [r7, #28]
 8002a26:	6a3a      	ldr	r2, [r7, #32]
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e6      	bne.n	8002a02 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68b9      	ldr	r1, [r7, #8]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 ff66 	bl	800390c <UART_Start_Receive_IT>
 8002a40:	4603      	mov	r3, r0
 8002a42:	e000      	b.n	8002a46 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a44:	2302      	movs	r3, #2
  }
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40008000 	.word	0x40008000

08002a54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b0ba      	sub	sp, #232	; 0xe8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a82:	4013      	ands	r3, r2
 8002a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d11b      	bne.n	8002ac8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 82e3 	beq.w	8003084 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
      }
      return;
 8002ac6:	e2dd      	b.n	8003084 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ac8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 8123 	beq.w	8002d18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ad2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002ad6:	4b8d      	ldr	r3, [pc, #564]	; (8002d0c <HAL_UART_IRQHandler+0x2b8>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ade:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ae2:	4b8b      	ldr	r3, [pc, #556]	; (8002d10 <HAL_UART_IRQHandler+0x2bc>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8116 	beq.w	8002d18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d011      	beq.n	8002b1c <HAL_UART_IRQHandler+0xc8>
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d011      	beq.n	8002b4c <HAL_UART_IRQHandler+0xf8>
 8002b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f043 0204 	orr.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d011      	beq.n	8002b7c <HAL_UART_IRQHandler+0x128>
 8002b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00b      	beq.n	8002b7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f043 0202 	orr.w	r2, r3, #2
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d017      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002b98:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <HAL_UART_IRQHandler+0x2b8>)
 8002b9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f043 0208 	orr.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <HAL_UART_IRQHandler+0x196>
 8002bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00c      	beq.n	8002bea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be0:	f043 0220 	orr.w	r2, r3, #32
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8249 	beq.w	8003088 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d013      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d007      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d005      	beq.n	8002c4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d054      	beq.n	8002cf8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 ff7c 	bl	8003b4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d146      	bne.n	8002cf0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3308      	adds	r3, #8
 8002c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3308      	adds	r3, #8
 8002c8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1d9      	bne.n	8002c62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_UART_IRQHandler+0x2c0>)
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe f87a 	bl	8000dc2 <HAL_DMA_Abort_IT>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d019      	beq.n	8002d08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce6:	e00f      	b.n	8002d08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7fd fbfa 	bl	80004e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cee:	e00b      	b.n	8002d08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fd fbf6 	bl	80004e2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf6:	e007      	b.n	8002d08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fd fbf2 	bl	80004e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002d06:	e1bf      	b.n	8003088 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d08:	bf00      	nop
    return;
 8002d0a:	e1bd      	b.n	8003088 <HAL_UART_IRQHandler+0x634>
 8002d0c:	10000001 	.word	0x10000001
 8002d10:	04000120 	.word	0x04000120
 8002d14:	08003c17 	.word	0x08003c17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	f040 8153 	bne.w	8002fc8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 814c 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8145 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2210      	movs	r2, #16
 8002d44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	f040 80bb 	bne.w	8002ecc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 818f 	beq.w	800308c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002d74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f080 8187 	bcs.w	800308c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 8087 	bne.w	8002eaa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002da8:	e853 3f00 	ldrex	r3, [r3]
 8002dac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1da      	bne.n	8002d9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3308      	adds	r3, #8
 8002e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e16:	e841 2300 	strex	r3, r2, [r1]
 8002e1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e1      	bne.n	8002de6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3308      	adds	r3, #8
 8002e28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2c:	e853 3f00 	ldrex	r3, [r3]
 8002e30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e4e:	e841 2300 	strex	r3, r2, [r1]
 8002e52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e3      	bne.n	8002e22 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e78:	f023 0310 	bic.w	r3, r3, #16
 8002e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e4      	bne.n	8002e68 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd ff2e 	bl	8000d06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2202      	movs	r2, #2
 8002eae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8e9 	bl	800309c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eca:	e0df      	b.n	800308c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80d1 	beq.w	8003090 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 80cc 	beq.w	8003090 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	461a      	mov	r2, r3
 8002f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f22:	e841 2300 	strex	r3, r2, [r1]
 8002f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1e4      	bne.n	8002ef8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3308      	adds	r3, #8
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3308      	adds	r3, #8
 8002f52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f56:	633a      	str	r2, [r7, #48]	; 0x30
 8002f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e1      	bne.n	8002f2e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0310 	bic.w	r3, r3, #16
 8002f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	69b9      	ldr	r1, [r7, #24]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	617b      	str	r3, [r7, #20]
   return(result);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e4      	bne.n	8002f7e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f86b 	bl	800309c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fc6:	e063      	b.n	8003090 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x59e>
 8002fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fe8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f001 fb70 	bl	80046d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ff0:	e051      	b.n	8003096 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800300a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800300e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800301a:	2b00      	cmp	r3, #0
 800301c:	d03a      	beq.n	8003094 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
    }
    return;
 8003026:	e035      	b.n	8003094 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d009      	beq.n	8003048 <HAL_UART_IRQHandler+0x5f4>
 8003034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fdfe 	bl	8003c42 <UART_EndTransmit_IT>
    return;
 8003046:	e026      	b.n	8003096 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_UART_IRQHandler+0x614>
 8003054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003058:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f001 fb47 	bl	80046f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003066:	e016      	b.n	8003096 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_UART_IRQHandler+0x642>
 8003074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003078:	2b00      	cmp	r3, #0
 800307a:	da0c      	bge.n	8003096 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f001 fb30 	bl	80046e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003082:	e008      	b.n	8003096 <HAL_UART_IRQHandler+0x642>
      return;
 8003084:	bf00      	nop
 8003086:	e006      	b.n	8003096 <HAL_UART_IRQHandler+0x642>
    return;
 8003088:	bf00      	nop
 800308a:	e004      	b.n	8003096 <HAL_UART_IRQHandler+0x642>
      return;
 800308c:	bf00      	nop
 800308e:	e002      	b.n	8003096 <HAL_UART_IRQHandler+0x642>
      return;
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <HAL_UART_IRQHandler+0x642>
    return;
 8003094:	bf00      	nop
  }
}
 8003096:	37e8      	adds	r7, #232	; 0xe8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
	...

080030b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b8:	b08c      	sub	sp, #48	; 0x30
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	4313      	orrs	r3, r2
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b94      	ldr	r3, [pc, #592]	; (8003334 <UART_SetConfig+0x280>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a89      	ldr	r2, [pc, #548]	; (8003338 <UART_SetConfig+0x284>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d004      	beq.n	8003120 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800311c:	4313      	orrs	r3, r2
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800312a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003134:	430b      	orrs	r3, r1
 8003136:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	f023 010f 	bic.w	r1, r3, #15
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a7a      	ldr	r2, [pc, #488]	; (800333c <UART_SetConfig+0x288>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d127      	bne.n	80031a8 <UART_SetConfig+0xf4>
 8003158:	2003      	movs	r0, #3
 800315a:	f7ff fb37 	bl	80027cc <LL_RCC_GetUSARTClockSource>
 800315e:	4603      	mov	r3, r0
 8003160:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003164:	2b03      	cmp	r3, #3
 8003166:	d81b      	bhi.n	80031a0 <UART_SetConfig+0xec>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <UART_SetConfig+0xbc>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003181 	.word	0x08003181
 8003174:	08003191 	.word	0x08003191
 8003178:	08003189 	.word	0x08003189
 800317c:	08003199 	.word	0x08003199
 8003180:	2301      	movs	r3, #1
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003186:	e080      	b.n	800328a <UART_SetConfig+0x1d6>
 8003188:	2302      	movs	r3, #2
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318e:	e07c      	b.n	800328a <UART_SetConfig+0x1d6>
 8003190:	2304      	movs	r3, #4
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003196:	e078      	b.n	800328a <UART_SetConfig+0x1d6>
 8003198:	2308      	movs	r3, #8
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800319e:	e074      	b.n	800328a <UART_SetConfig+0x1d6>
 80031a0:	2310      	movs	r3, #16
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a6:	e070      	b.n	800328a <UART_SetConfig+0x1d6>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a64      	ldr	r2, [pc, #400]	; (8003340 <UART_SetConfig+0x28c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d138      	bne.n	8003224 <UART_SetConfig+0x170>
 80031b2:	200c      	movs	r0, #12
 80031b4:	f7ff fb0a 	bl	80027cc <LL_RCC_GetUSARTClockSource>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80031be:	2b0c      	cmp	r3, #12
 80031c0:	d82c      	bhi.n	800321c <UART_SetConfig+0x168>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <UART_SetConfig+0x114>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	0800321d 	.word	0x0800321d
 80031d4:	0800321d 	.word	0x0800321d
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	0800321d 	.word	0x0800321d
 80031e0:	0800321d 	.word	0x0800321d
 80031e4:	0800321d 	.word	0x0800321d
 80031e8:	08003205 	.word	0x08003205
 80031ec:	0800321d 	.word	0x0800321d
 80031f0:	0800321d 	.word	0x0800321d
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	08003215 	.word	0x08003215
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003202:	e042      	b.n	800328a <UART_SetConfig+0x1d6>
 8003204:	2302      	movs	r3, #2
 8003206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800320a:	e03e      	b.n	800328a <UART_SetConfig+0x1d6>
 800320c:	2304      	movs	r3, #4
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003212:	e03a      	b.n	800328a <UART_SetConfig+0x1d6>
 8003214:	2308      	movs	r3, #8
 8003216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800321a:	e036      	b.n	800328a <UART_SetConfig+0x1d6>
 800321c:	2310      	movs	r3, #16
 800321e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003222:	e032      	b.n	800328a <UART_SetConfig+0x1d6>
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a43      	ldr	r2, [pc, #268]	; (8003338 <UART_SetConfig+0x284>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d12a      	bne.n	8003284 <UART_SetConfig+0x1d0>
 800322e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003232:	f7ff fadd 	bl	80027f0 <LL_RCC_GetLPUARTClockSource>
 8003236:	4603      	mov	r3, r0
 8003238:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800323c:	d01a      	beq.n	8003274 <UART_SetConfig+0x1c0>
 800323e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003242:	d81b      	bhi.n	800327c <UART_SetConfig+0x1c8>
 8003244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003248:	d00c      	beq.n	8003264 <UART_SetConfig+0x1b0>
 800324a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324e:	d815      	bhi.n	800327c <UART_SetConfig+0x1c8>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <UART_SetConfig+0x1a8>
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003258:	d008      	beq.n	800326c <UART_SetConfig+0x1b8>
 800325a:	e00f      	b.n	800327c <UART_SetConfig+0x1c8>
 800325c:	2300      	movs	r3, #0
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003262:	e012      	b.n	800328a <UART_SetConfig+0x1d6>
 8003264:	2302      	movs	r3, #2
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326a:	e00e      	b.n	800328a <UART_SetConfig+0x1d6>
 800326c:	2304      	movs	r3, #4
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003272:	e00a      	b.n	800328a <UART_SetConfig+0x1d6>
 8003274:	2308      	movs	r3, #8
 8003276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800327a:	e006      	b.n	800328a <UART_SetConfig+0x1d6>
 800327c:	2310      	movs	r3, #16
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003282:	e002      	b.n	800328a <UART_SetConfig+0x1d6>
 8003284:	2310      	movs	r3, #16
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <UART_SetConfig+0x284>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f040 80a4 	bne.w	80033de <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003296:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800329a:	2b08      	cmp	r3, #8
 800329c:	d823      	bhi.n	80032e6 <UART_SetConfig+0x232>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0x1f0>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032e7 	.word	0x080032e7
 80032ac:	080032d1 	.word	0x080032d1
 80032b0:	080032e7 	.word	0x080032e7
 80032b4:	080032d7 	.word	0x080032d7
 80032b8:	080032e7 	.word	0x080032e7
 80032bc:	080032e7 	.word	0x080032e7
 80032c0:	080032e7 	.word	0x080032e7
 80032c4:	080032df 	.word	0x080032df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe ff9c 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 80032cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ce:	e010      	b.n	80032f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <UART_SetConfig+0x290>)
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032d4:	e00d      	b.n	80032f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d6:	f7fe fee1 	bl	800209c <HAL_RCC_GetSysClockFreq>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032dc:	e009      	b.n	80032f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032e4:	e005      	b.n	80032f2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 8137 	beq.w	8003568 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <UART_SetConfig+0x294>)
 8003300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003304:	461a      	mov	r2, r3
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	fbb3 f3f2 	udiv	r3, r3, r2
 800330c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	429a      	cmp	r2, r3
 800331c:	d305      	bcc.n	800332a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	429a      	cmp	r2, r3
 8003328:	d910      	bls.n	800334c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003330:	e11a      	b.n	8003568 <UART_SetConfig+0x4b4>
 8003332:	bf00      	nop
 8003334:	cfff69f3 	.word	0xcfff69f3
 8003338:	40008000 	.word	0x40008000
 800333c:	40013800 	.word	0x40013800
 8003340:	40004400 	.word	0x40004400
 8003344:	00f42400 	.word	0x00f42400
 8003348:	08004a50 	.word	0x08004a50
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	2200      	movs	r2, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	60fa      	str	r2, [r7, #12]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	4a8e      	ldr	r2, [pc, #568]	; (8003594 <UART_SetConfig+0x4e0>)
 800335a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800335e:	b29b      	uxth	r3, r3
 8003360:	2200      	movs	r2, #0
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800336a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800336e:	f7fc ff03 	bl	8000178 <__aeabi_uldivmod>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	020b      	lsls	r3, r1, #8
 8003384:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003388:	0202      	lsls	r2, r0, #8
 800338a:	6979      	ldr	r1, [r7, #20]
 800338c:	6849      	ldr	r1, [r1, #4]
 800338e:	0849      	lsrs	r1, r1, #1
 8003390:	2000      	movs	r0, #0
 8003392:	460c      	mov	r4, r1
 8003394:	4605      	mov	r5, r0
 8003396:	eb12 0804 	adds.w	r8, r2, r4
 800339a:	eb43 0905 	adc.w	r9, r3, r5
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	469a      	mov	sl, r3
 80033a6:	4693      	mov	fp, r2
 80033a8:	4652      	mov	r2, sl
 80033aa:	465b      	mov	r3, fp
 80033ac:	4640      	mov	r0, r8
 80033ae:	4649      	mov	r1, r9
 80033b0:	f7fc fee2 	bl	8000178 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033c2:	d308      	bcc.n	80033d6 <UART_SetConfig+0x322>
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ca:	d204      	bcs.n	80033d6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6a3a      	ldr	r2, [r7, #32]
 80033d2:	60da      	str	r2, [r3, #12]
 80033d4:	e0c8      	b.n	8003568 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033dc:	e0c4      	b.n	8003568 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e6:	d167      	bne.n	80034b8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80033e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d828      	bhi.n	8003442 <UART_SetConfig+0x38e>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <UART_SetConfig+0x344>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800341d 	.word	0x0800341d
 80033fc:	08003425 	.word	0x08003425
 8003400:	0800342d 	.word	0x0800342d
 8003404:	08003443 	.word	0x08003443
 8003408:	08003433 	.word	0x08003433
 800340c:	08003443 	.word	0x08003443
 8003410:	08003443 	.word	0x08003443
 8003414:	08003443 	.word	0x08003443
 8003418:	0800343b 	.word	0x0800343b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800341c:	f7fe fef2 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003420:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003422:	e014      	b.n	800344e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003424:	f7fe ff00 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8003428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800342a:	e010      	b.n	800344e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800342c:	4b5a      	ldr	r3, [pc, #360]	; (8003598 <UART_SetConfig+0x4e4>)
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003430:	e00d      	b.n	800344e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003432:	f7fe fe33 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8003436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003438:	e009      	b.n	800344e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003440:	e005      	b.n	800344e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800344c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8089 	beq.w	8003568 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	4a4e      	ldr	r2, [pc, #312]	; (8003594 <UART_SetConfig+0x4e0>)
 800345c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003460:	461a      	mov	r2, r3
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	fbb3 f3f2 	udiv	r3, r3, r2
 8003468:	005a      	lsls	r2, r3, #1
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	441a      	add	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	2b0f      	cmp	r3, #15
 8003480:	d916      	bls.n	80034b0 <UART_SetConfig+0x3fc>
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d212      	bcs.n	80034b0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	b29b      	uxth	r3, r3
 800348e:	f023 030f 	bic.w	r3, r3, #15
 8003492:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	b29a      	uxth	r2, r3
 80034a0:	8bfb      	ldrh	r3, [r7, #30]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	8bfa      	ldrh	r2, [r7, #30]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	e05b      	b.n	8003568 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034b6:	e057      	b.n	8003568 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d828      	bhi.n	8003512 <UART_SetConfig+0x45e>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0x414>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034ed 	.word	0x080034ed
 80034cc:	080034f5 	.word	0x080034f5
 80034d0:	080034fd 	.word	0x080034fd
 80034d4:	08003513 	.word	0x08003513
 80034d8:	08003503 	.word	0x08003503
 80034dc:	08003513 	.word	0x08003513
 80034e0:	08003513 	.word	0x08003513
 80034e4:	08003513 	.word	0x08003513
 80034e8:	0800350b 	.word	0x0800350b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ec:	f7fe fe8a 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 80034f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034f2:	e014      	b.n	800351e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034f4:	f7fe fe98 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 80034f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034fa:	e010      	b.n	800351e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <UART_SetConfig+0x4e4>)
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003500:	e00d      	b.n	800351e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003502:	f7fe fdcb 	bl	800209c <HAL_RCC_GetSysClockFreq>
 8003506:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003508:	e009      	b.n	800351e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800350a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003510:	e005      	b.n	800351e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800351c:	bf00      	nop
    }

    if (pclk != 0U)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	2b00      	cmp	r3, #0
 8003522:	d021      	beq.n	8003568 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <UART_SetConfig+0x4e0>)
 800352a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800352e:	461a      	mov	r2, r3
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	fbb3 f2f2 	udiv	r2, r3, r2
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	441a      	add	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	d909      	bls.n	8003562 <UART_SetConfig+0x4ae>
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d205      	bcs.n	8003562 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	b29a      	uxth	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e002      	b.n	8003568 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2201      	movs	r2, #1
 800356c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	2201      	movs	r2, #1
 8003574:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003584:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003588:	4618      	mov	r0, r3
 800358a:	3730      	adds	r7, #48	; 0x30
 800358c:	46bd      	mov	sp, r7
 800358e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003592:	bf00      	nop
 8003594:	08004a50 	.word	0x08004a50
 8003598:	00f42400 	.word	0x00f42400

0800359c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01a      	beq.n	80036b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369a:	d10a      	bne.n	80036b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	605a      	str	r2, [r3, #4]
  }
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af02      	add	r7, sp, #8
 80036e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ee:	f7fd f9f5 	bl	8000adc <HAL_GetTick>
 80036f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d10e      	bne.n	8003720 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003702:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f832 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e028      	b.n	8003772 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d10e      	bne.n	800374c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f81c 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e012      	b.n	8003772 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b09c      	sub	sp, #112	; 0x70
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	e0a9      	b.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003792:	f000 80a5 	beq.w	80038e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fd f9a1 	bl	8000adc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <UART_WaitOnFlagUntilTimeout+0x32>
 80037a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d140      	bne.n	800382e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c0:	667b      	str	r3, [r7, #100]	; 0x64
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e6      	bne.n	80037ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	663b      	str	r3, [r7, #96]	; 0x60
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3308      	adds	r3, #8
 80037fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800380c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e5      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e069      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d051      	beq.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800384a:	d149      	bne.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003854:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800386a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	461a      	mov	r2, r3
 8003872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003874:	637b      	str	r3, [r7, #52]	; 0x34
 8003876:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800387a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e6      	bne.n	8003856 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	613b      	str	r3, [r7, #16]
   return(result);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f023 0301 	bic.w	r3, r3, #1
 800389e:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3308      	adds	r3, #8
 80038a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038a8:	623a      	str	r2, [r7, #32]
 80038aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	69f9      	ldr	r1, [r7, #28]
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e5      	bne.n	8003888 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e010      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	f43f af46 	beq.w	800378c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3770      	adds	r7, #112	; 0x70
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800390c:	b480      	push	{r7}
 800390e:	b0a3      	sub	sp, #140	; 0x8c
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	88fa      	ldrh	r2, [r7, #6]
 8003924:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d10e      	bne.n	800395e <UART_Start_Receive_IT+0x52>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <UART_Start_Receive_IT+0x48>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800394e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003952:	e02d      	b.n	80039b0 <UART_Start_Receive_IT+0xa4>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	22ff      	movs	r2, #255	; 0xff
 8003958:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800395c:	e028      	b.n	80039b0 <UART_Start_Receive_IT+0xa4>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10d      	bne.n	8003982 <UART_Start_Receive_IT+0x76>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <UART_Start_Receive_IT+0x6c>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	22ff      	movs	r2, #255	; 0xff
 8003972:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003976:	e01b      	b.n	80039b0 <UART_Start_Receive_IT+0xa4>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	227f      	movs	r2, #127	; 0x7f
 800397c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003980:	e016      	b.n	80039b0 <UART_Start_Receive_IT+0xa4>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800398a:	d10d      	bne.n	80039a8 <UART_Start_Receive_IT+0x9c>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d104      	bne.n	800399e <UART_Start_Receive_IT+0x92>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	227f      	movs	r2, #127	; 0x7f
 8003998:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800399c:	e008      	b.n	80039b0 <UART_Start_Receive_IT+0xa4>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	223f      	movs	r2, #63	; 0x3f
 80039a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80039a6:	e003      	b.n	80039b0 <UART_Start_Receive_IT+0xa4>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2222      	movs	r2, #34	; 0x22
 80039bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3308      	adds	r3, #8
 80039c6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80039d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039d2:	f043 0301 	orr.w	r3, r3, #1
 80039d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3308      	adds	r3, #8
 80039e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80039e4:	673a      	str	r2, [r7, #112]	; 0x70
 80039e6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80039ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80039f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e3      	bne.n	80039c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a00:	d14f      	bne.n	8003aa2 <UART_Start_Receive_IT+0x196>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003a08:	88fa      	ldrh	r2, [r7, #6]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d349      	bcc.n	8003aa2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a16:	d107      	bne.n	8003a28 <UART_Start_Receive_IT+0x11c>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d103      	bne.n	8003a28 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4a46      	ldr	r2, [pc, #280]	; (8003b3c <UART_Start_Receive_IT+0x230>)
 8003a24:	675a      	str	r2, [r3, #116]	; 0x74
 8003a26:	e002      	b.n	8003a2e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4a45      	ldr	r2, [pc, #276]	; (8003b40 <UART_Start_Receive_IT+0x234>)
 8003a2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01a      	beq.n	8003a6c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a3e:	e853 3f00 	ldrex	r3, [r3]
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a5a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e4      	bne.n	8003a36 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3308      	adds	r3, #8
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3308      	adds	r3, #8
 8003a8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003a8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e5      	bne.n	8003a6c <UART_Start_Receive_IT+0x160>
 8003aa0:	e046      	b.n	8003b30 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d107      	bne.n	8003abc <UART_Start_Receive_IT+0x1b0>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d103      	bne.n	8003abc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4a23      	ldr	r2, [pc, #140]	; (8003b44 <UART_Start_Receive_IT+0x238>)
 8003ab8:	675a      	str	r2, [r3, #116]	; 0x74
 8003aba:	e002      	b.n	8003ac2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a22      	ldr	r2, [pc, #136]	; (8003b48 <UART_Start_Receive_IT+0x23c>)
 8003ac0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d019      	beq.n	8003afe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ade:	677b      	str	r3, [r7, #116]	; 0x74
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8003aea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <UART_Start_Receive_IT+0x1be>
 8003afc:	e018      	b.n	8003b30 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f043 0320 	orr.w	r3, r3, #32
 8003b12:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1c:	623b      	str	r3, [r7, #32]
 8003b1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	69f9      	ldr	r1, [r7, #28]
 8003b22:	6a3a      	ldr	r2, [r7, #32]
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e6      	bne.n	8003afe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	378c      	adds	r7, #140	; 0x8c
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr
 8003b3c:	08004369 	.word	0x08004369
 8003b40:	08004009 	.word	0x08004009
 8003b44:	08003e51 	.word	0x08003e51
 8003b48:	08003c99 	.word	0x08003c99

08003b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b095      	sub	sp, #84	; 0x54
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40
 8003b74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e6      	bne.n	8003b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	e853 3f00 	ldrex	r3, [r3]
 8003b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e3      	bne.n	8003b86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d118      	bne.n	8003bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f023 0310 	bic.w	r3, r3, #16
 8003bda:	647b      	str	r3, [r7, #68]	; 0x44
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e6      	bne.n	8003bc6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003c0c:	bf00      	nop
 8003c0e:	3754      	adds	r7, #84	; 0x54
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr

08003c16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7fc fc54 	bl	80004e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b088      	sub	sp, #32
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	6979      	ldr	r1, [r7, #20]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	613b      	str	r3, [r7, #16]
   return(result);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e6      	bne.n	8003c4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fc fc32 	bl	80004f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c90:	bf00      	nop
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b09c      	sub	sp, #112	; 0x70
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ca6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cb0:	2b22      	cmp	r3, #34	; 0x22
 8003cb2:	f040 80be 	bne.w	8003e32 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003cc4:	b2d9      	uxtb	r1, r3
 8003cc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 80a1 	bne.w	8003e42 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d08:	e853 3f00 	ldrex	r3, [r3]
 8003d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d14:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d26:	e841 2300 	strex	r3, r2, [r1]
 8003d2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e6      	bne.n	8003d00 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3308      	adds	r3, #8
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	667b      	str	r3, [r7, #100]	; 0x64
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3308      	adds	r3, #8
 8003d50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d52:	647a      	str	r2, [r7, #68]	; 0x44
 8003d54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a33      	ldr	r2, [pc, #204]	; (8003e4c <UART_RxISR_8BIT+0x1b4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d01f      	beq.n	8003dc4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d018      	beq.n	8003dc4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003da6:	663b      	str	r3, [r7, #96]	; 0x60
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db0:	633b      	str	r3, [r7, #48]	; 0x30
 8003db2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e6      	bne.n	8003d92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d12e      	bne.n	8003e2a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e6      	bne.n	8003dd2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d103      	bne.n	8003e1a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2210      	movs	r2, #16
 8003e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff f93a 	bl	800309c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e28:	e00b      	b.n	8003e42 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc fb6c 	bl	8000508 <HAL_UART_RxCpltCallback>
}
 8003e30:	e007      	b.n	8003e42 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f042 0208 	orr.w	r2, r2, #8
 8003e40:	619a      	str	r2, [r3, #24]
}
 8003e42:	bf00      	nop
 8003e44:	3770      	adds	r7, #112	; 0x70
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40008000 	.word	0x40008000

08003e50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b09c      	sub	sp, #112	; 0x70
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003e5e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e68:	2b22      	cmp	r3, #34	; 0x22
 8003e6a:	f040 80be 	bne.w	8003fea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e7e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003e82:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003e86:	4013      	ands	r3, r2
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	1c9a      	adds	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f040 80a1 	bne.w	8003ffa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec0:	e853 3f00 	ldrex	r3, [r3]
 8003ec4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ed8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1e6      	bne.n	8003eb8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	3308      	adds	r3, #8
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	663b      	str	r3, [r7, #96]	; 0x60
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3308      	adds	r3, #8
 8003f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f0a:	643a      	str	r2, [r7, #64]	; 0x40
 8003f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e5      	bne.n	8003eea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a33      	ldr	r2, [pc, #204]	; (8004004 <UART_RxISR_16BIT+0x1b4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d01f      	beq.n	8003f7c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d018      	beq.n	8003f7c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e6      	bne.n	8003f4a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d12e      	bne.n	8003fe2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f023 0310 	bic.w	r3, r3, #16
 8003f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	6979      	ldr	r1, [r7, #20]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e6      	bne.n	8003f8a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d103      	bne.n	8003fd2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2210      	movs	r2, #16
 8003fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff f85e 	bl	800309c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003fe0:	e00b      	b.n	8003ffa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7fc fa90 	bl	8000508 <HAL_UART_RxCpltCallback>
}
 8003fe8:	e007      	b.n	8003ffa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0208 	orr.w	r2, r2, #8
 8003ff8:	619a      	str	r2, [r3, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	3770      	adds	r7, #112	; 0x70
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40008000 	.word	0x40008000

08004008 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b0ac      	sub	sp, #176	; 0xb0
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004016:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800403e:	2b22      	cmp	r3, #34	; 0x22
 8004040:	f040 8182 	bne.w	8004348 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800404a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800404e:	e125      	b.n	800429c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800405a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800405e:	b2d9      	uxtb	r1, r3
 8004060:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004064:	b2da      	uxtb	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406a:	400a      	ands	r2, r1
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d053      	beq.n	800414a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80040ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2201      	movs	r2, #1
 80040c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d011      	beq.n	8004102 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80040de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2202      	movs	r2, #2
 80040f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f043 0204 	orr.w	r2, r3, #4
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004102:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d011      	beq.n	8004132 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800410e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2204      	movs	r2, #4
 8004120:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004128:	f043 0202 	orr.w	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004138:	2b00      	cmp	r3, #0
 800413a:	d006      	beq.n	800414a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fc f9d0 	bl	80004e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 80a2 	bne.w	800429c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800416c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800417a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800417c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004180:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e4      	bne.n	8004158 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3308      	adds	r3, #8
 8004194:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800419e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3308      	adds	r3, #8
 80041b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80041b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80041bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80041c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e1      	bne.n	800418e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a5f      	ldr	r2, [pc, #380]	; (8004360 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d021      	beq.n	800422c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01a      	beq.n	800422c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800420a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	461a      	mov	r2, r3
 8004214:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004218:	657b      	str	r3, [r7, #84]	; 0x54
 800421a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800421e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e4      	bne.n	80041f6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d130      	bne.n	8004296 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004242:	e853 3f00 	ldrex	r3, [r3]
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	f023 0310 	bic.w	r3, r3, #16
 800424e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800425c:	643b      	str	r3, [r7, #64]	; 0x40
 800425e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e4      	bne.n	800423a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	2b10      	cmp	r3, #16
 800427c:	d103      	bne.n	8004286 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2210      	movs	r2, #16
 8004284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800428c:	4619      	mov	r1, r3
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fe ff04 	bl	800309c <HAL_UARTEx_RxEventCallback>
 8004294:	e002      	b.n	800429c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc f936 	bl	8000508 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800429c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d006      	beq.n	80042b2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80042a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f47f aecf 	bne.w	8004050 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80042bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d049      	beq.n	8004358 <UART_RxISR_8BIT_FIFOEN+0x350>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80042ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d242      	bcs.n	8004358 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3308      	adds	r3, #8
 80042d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3308      	adds	r3, #8
 80042f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80042f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e3      	bne.n	80042d2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800430e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	60bb      	str	r3, [r7, #8]
   return(result);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f043 0320 	orr.w	r3, r3, #32
 8004324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6979      	ldr	r1, [r7, #20]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	613b      	str	r3, [r7, #16]
   return(result);
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e4      	bne.n	8004310 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004346:	e007      	b.n	8004358 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699a      	ldr	r2, [r3, #24]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0208 	orr.w	r2, r2, #8
 8004356:	619a      	str	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	37b0      	adds	r7, #176	; 0xb0
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40008000 	.word	0x40008000
 8004364:	08003c99 	.word	0x08003c99

08004368 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b0ae      	sub	sp, #184	; 0xb8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004376:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439e:	2b22      	cmp	r3, #34	; 0x22
 80043a0:	f040 8186 	bne.w	80046b0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80043aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80043ae:	e129      	b.n	8004604 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80043c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80043c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80043ca:	4013      	ands	r3, r2
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	1c9a      	adds	r2, r3, #2
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80043fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	2b00      	cmp	r3, #0
 8004404:	d053      	beq.n	80044ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d011      	beq.n	8004436 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00b      	beq.n	8004436 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d011      	beq.n	8004466 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004442:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2202      	movs	r2, #2
 8004454:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f043 0204 	orr.w	r2, r3, #4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d011      	beq.n	8004496 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2204      	movs	r2, #4
 8004484:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	f043 0202 	orr.w	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fc f81e 	bl	80004e2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f040 80a4 	bne.w	8004604 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e2      	bne.n	80044bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800451e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004520:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004524:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800452c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e1      	bne.n	80044f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a5f      	ldr	r2, [pc, #380]	; (80046c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d021      	beq.n	8004594 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01a      	beq.n	8004594 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800456c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004580:	65bb      	str	r3, [r7, #88]	; 0x58
 8004582:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004586:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800458e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e4      	bne.n	800455e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d130      	bne.n	80045fe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e4      	bne.n	80045a2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d103      	bne.n	80045ee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2210      	movs	r2, #16
 80045ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fe fd50 	bl	800309c <HAL_UARTEx_RxEventCallback>
 80045fc:	e002      	b.n	8004604 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fb ff82 	bl	8000508 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004604:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004608:	2b00      	cmp	r3, #0
 800460a:	d006      	beq.n	800461a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800460c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	f47f aecb 	bne.w	80043b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004620:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004624:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004628:	2b00      	cmp	r3, #0
 800462a:	d049      	beq.n	80046c0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004632:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004636:	429a      	cmp	r2, r3
 8004638:	d242      	bcs.n	80046c0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	623b      	str	r3, [r7, #32]
   return(result);
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800465e:	633a      	str	r2, [r7, #48]	; 0x30
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e3      	bne.n	800463a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a15      	ldr	r2, [pc, #84]	; (80046cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004676:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	e853 3f00 	ldrex	r3, [r3]
 8004684:	60fb      	str	r3, [r7, #12]
   return(result);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f043 0320 	orr.w	r3, r3, #32
 800468c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	69b9      	ldr	r1, [r7, #24]
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	617b      	str	r3, [r7, #20]
   return(result);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e4      	bne.n	8004678 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046ae:	e007      	b.n	80046c0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	619a      	str	r2, [r3, #24]
}
 80046c0:	bf00      	nop
 80046c2:	37b8      	adds	r7, #184	; 0xb8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40008000 	.word	0x40008000
 80046cc:	08003e51 	.word	0x08003e51

080046d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr

080046e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	bc80      	pop	{r7}
 8004704:	4770      	bx	lr

08004706 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004706:	b480      	push	{r7}
 8004708:	b085      	sub	sp, #20
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UARTEx_DisableFifoMode+0x16>
 8004718:	2302      	movs	r3, #2
 800471a:	e027      	b.n	800476c <HAL_UARTEx_DisableFifoMode+0x66>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	; 0x24
 8004728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800474a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800478a:	2302      	movs	r3, #2
 800478c:	e02d      	b.n	80047ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2224      	movs	r2, #36	; 0x24
 800479a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f850 	bl	8004870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004806:	2302      	movs	r3, #2
 8004808:	e02d      	b.n	8004866 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2224      	movs	r2, #36	; 0x24
 8004816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f812 	bl	8004870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004890:	e031      	b.n	80048f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004892:	2308      	movs	r3, #8
 8004894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004896:	2308      	movs	r3, #8
 8004898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	0e5b      	lsrs	r3, r3, #25
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	0f5b      	lsrs	r3, r3, #29
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ba:	7bbb      	ldrb	r3, [r7, #14]
 80048bc:	7b3a      	ldrb	r2, [r7, #12]
 80048be:	4910      	ldr	r1, [pc, #64]	; (8004900 <UARTEx_SetNbDataToProcess+0x90>)
 80048c0:	5c8a      	ldrb	r2, [r1, r2]
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048c6:	7b3a      	ldrb	r2, [r7, #12]
 80048c8:	490e      	ldr	r1, [pc, #56]	; (8004904 <UARTEx_SetNbDataToProcess+0x94>)
 80048ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	7b7a      	ldrb	r2, [r7, #13]
 80048dc:	4908      	ldr	r1, [pc, #32]	; (8004900 <UARTEx_SetNbDataToProcess+0x90>)
 80048de:	5c8a      	ldrb	r2, [r1, r2]
 80048e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048e4:	7b7a      	ldrb	r2, [r7, #13]
 80048e6:	4907      	ldr	r1, [pc, #28]	; (8004904 <UARTEx_SetNbDataToProcess+0x94>)
 80048e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048f6:	bf00      	nop
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	08004a68 	.word	0x08004a68
 8004904:	08004a70 	.word	0x08004a70

08004908 <__libc_init_array>:
 8004908:	b570      	push	{r4, r5, r6, lr}
 800490a:	4d0d      	ldr	r5, [pc, #52]	; (8004940 <__libc_init_array+0x38>)
 800490c:	4c0d      	ldr	r4, [pc, #52]	; (8004944 <__libc_init_array+0x3c>)
 800490e:	1b64      	subs	r4, r4, r5
 8004910:	10a4      	asrs	r4, r4, #2
 8004912:	2600      	movs	r6, #0
 8004914:	42a6      	cmp	r6, r4
 8004916:	d109      	bne.n	800492c <__libc_init_array+0x24>
 8004918:	4d0b      	ldr	r5, [pc, #44]	; (8004948 <__libc_init_array+0x40>)
 800491a:	4c0c      	ldr	r4, [pc, #48]	; (800494c <__libc_init_array+0x44>)
 800491c:	f000 f82e 	bl	800497c <_init>
 8004920:	1b64      	subs	r4, r4, r5
 8004922:	10a4      	asrs	r4, r4, #2
 8004924:	2600      	movs	r6, #0
 8004926:	42a6      	cmp	r6, r4
 8004928:	d105      	bne.n	8004936 <__libc_init_array+0x2e>
 800492a:	bd70      	pop	{r4, r5, r6, pc}
 800492c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004930:	4798      	blx	r3
 8004932:	3601      	adds	r6, #1
 8004934:	e7ee      	b.n	8004914 <__libc_init_array+0xc>
 8004936:	f855 3b04 	ldr.w	r3, [r5], #4
 800493a:	4798      	blx	r3
 800493c:	3601      	adds	r6, #1
 800493e:	e7f2      	b.n	8004926 <__libc_init_array+0x1e>
 8004940:	08004a80 	.word	0x08004a80
 8004944:	08004a80 	.word	0x08004a80
 8004948:	08004a80 	.word	0x08004a80
 800494c:	08004a84 	.word	0x08004a84

08004950 <memcpy>:
 8004950:	440a      	add	r2, r1
 8004952:	4291      	cmp	r1, r2
 8004954:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004958:	d100      	bne.n	800495c <memcpy+0xc>
 800495a:	4770      	bx	lr
 800495c:	b510      	push	{r4, lr}
 800495e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004966:	4291      	cmp	r1, r2
 8004968:	d1f9      	bne.n	800495e <memcpy+0xe>
 800496a:	bd10      	pop	{r4, pc}

0800496c <memset>:
 800496c:	4402      	add	r2, r0
 800496e:	4603      	mov	r3, r0
 8004970:	4293      	cmp	r3, r2
 8004972:	d100      	bne.n	8004976 <memset+0xa>
 8004974:	4770      	bx	lr
 8004976:	f803 1b01 	strb.w	r1, [r3], #1
 800497a:	e7f9      	b.n	8004970 <memset+0x4>

0800497c <_init>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr

08004988 <_fini>:
 8004988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498a:	bf00      	nop
 800498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498e:	bc08      	pop	{r3}
 8004990:	469e      	mov	lr, r3
 8004992:	4770      	bx	lr

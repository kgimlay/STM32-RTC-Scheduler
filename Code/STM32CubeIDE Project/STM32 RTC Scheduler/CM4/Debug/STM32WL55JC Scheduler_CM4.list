
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b14  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d44  08004d44  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d4c  08004d4c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000020  08004d74  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004d74  00020234  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ba1  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002632  00000000  00000000  00030beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00033220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00034290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c138  00000000  00000000  00035228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc58  00000000  00000000  00051360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000affb7  00000000  00000000  00060fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110f6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000438c  00000000  00000000  00110fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000020 	.word	0x20000020
 8000154:	00000000 	.word	0x00000000
 8000158:	08004c34 	.word	0x08004c34

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000024 	.word	0x20000024
 8000174:	08004c34 	.word	0x08004c34

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <initDesktopCommunication>:


/*
 *
 */
void initDesktopCommunication(UART_HandleTypeDef* uartHandle) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <initDesktopCommunication+0x28>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6013      	str	r3, [r2, #0]
	uartQueue_init(&(_process_queue));
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <initDesktopCommunication+0x2c>)
 8000498:	f000 fa06 	bl	80008a8 <uartQueue_init>
	uartQueue_init(&(_report_queue));
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <initDesktopCommunication+0x30>)
 800049e:	f000 fa03 	bl	80008a8 <uartQueue_init>

	// set isInit flag
	_isInit = true;
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <initDesktopCommunication+0x34>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000040 	.word	0x20000040
 80004b4:	20000044 	.word	0x20000044
 80004b8:	200000d0 	.word	0x200000d0
 80004bc:	2000003c 	.word	0x2000003c

080004c0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004d0:	f023 0218 	bic.w	r2, r3, #24
 80004d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4313      	orrs	r3, r2
 80004dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr

080004ea <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4313      	orrs	r3, r2
 8000500:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4013      	ands	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 800051a:	b480      	push	{r7}
 800051c:	b083      	sub	sp, #12
 800051e:	af00      	add	r7, sp, #0
 8000520:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
	// if UART rx on UART2 (for desktop app communication)
//	deskAppRxCompleteISR();
	(void)0;  // no operation
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fa00 	bl	8000958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f82e 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f8dc 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000560:	f000 f884 	bl	800066c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000564:	2001      	movs	r0, #1
 8000566:	f000 fdbd 	bl	80010e4 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  strncpy(txBuffer, "Hello Computer!\0", UART_MESSAGE_SIZE);
 800056a:	2220      	movs	r2, #32
 800056c:	490d      	ldr	r1, [pc, #52]	; (80005a4 <main+0x54>)
 800056e:	480e      	ldr	r0, [pc, #56]	; (80005a8 <main+0x58>)
 8000570:	f004 fb4c 	bl	8004c0c <strncpy>

  if (HAL_UART_Transmit_IT(&huart2, (uint8_t*)helloComputer, COUNTOF(helloComputer)) != HAL_OK)
 8000574:	2211      	movs	r2, #17
 8000576:	490d      	ldr	r1, [pc, #52]	; (80005ac <main+0x5c>)
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <main+0x60>)
 800057a:	f002 f943 	bl	8002804 <HAL_UART_Transmit_IT>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <main+0x38>
  	  Error_Handler();
 8000584:	f000 f8d5 	bl	8000732 <Error_Handler>

  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, UART_MESSAGE_SIZE) != HAL_OK)
 8000588:	2220      	movs	r2, #32
 800058a:	490a      	ldr	r1, [pc, #40]	; (80005b4 <main+0x64>)
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <main+0x60>)
 800058e:	f002 f9cd 	bl	800292c <HAL_UART_Receive_IT>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <main+0x4c>
	  Error_Handler();
 8000598:	f000 f8cb 	bl	8000732 <Error_Handler>

  // initialize the desktop communication module (doesn't establish connection!)
  initDesktopCommunication(&huart2);
 800059c:	4804      	ldr	r0, [pc, #16]	; (80005b0 <main+0x60>)
 800059e:	f7ff ff73 	bl	8000488 <initDesktopCommunication>

  // begin listening for messages from desktop
//  startDesktopAppCommunication();

  while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x52>
 80005a4:	08004c4c 	.word	0x08004c4c
 80005a8:	20000210 	.word	0x20000210
 80005ac:	20000004 	.word	0x20000004
 80005b0:	2000015c 	.word	0x2000015c
 80005b4:	200001f0 	.word	0x200001f0

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09a      	sub	sp, #104	; 0x68
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2248      	movs	r2, #72	; 0x48
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f004 fb18 	bl	8004bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005de:	f000 fd59 	bl	8001094 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ff6c 	bl	80004c0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xb0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005f0:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <SystemClock_Config+0xb0>)
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <SystemClock_Config+0xb0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000604:	2324      	movs	r3, #36	; 0x24
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000608:	2381      	movs	r3, #129	; 0x81
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f001 f821 	bl	8001668 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800062c:	f000 f881 	bl	8000732 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000630:	236f      	movs	r3, #111	; 0x6f
 8000632:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fb8b 	bl	8001d6c <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800065c:	f000 f869 	bl	8000732 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3768      	adds	r7, #104	; 0x68
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58000400 	.word	0x58000400

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 8000672:	4a28      	ldr	r2, [pc, #160]	; (8000714 <MX_USART2_UART_Init+0xa8>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 8000678:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b24      	ldr	r3, [pc, #144]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 800068c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000690:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 8000694:	220c      	movs	r2, #12
 8000696:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80006b0:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006bc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006c4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c6:	4812      	ldr	r0, [pc, #72]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006c8:	f002 f84b 	bl	8002762 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006d2:	f000 f82e 	bl	8000732 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006da:	f004 f9a2 	bl	8004a22 <HAL_UARTEx_SetTxFifoThreshold>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006e4:	f000 f825 	bl	8000732 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006ec:	f004 f9d7 	bl	8004a9e <HAL_UARTEx_SetRxFifoThreshold>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80006f6:	f000 f81c 	bl	8000732 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0xa4>)
 80006fc:	f004 f959 	bl	80049b2 <HAL_UARTEx_DisableFifoMode>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000706:	f000 f814 	bl	8000732 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000015c 	.word	0x2000015c
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071c:	2001      	movs	r0, #1
 800071e:	f7ff fee4 	bl	80004ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2004      	movs	r0, #4
 8000724:	f7ff fee1 	bl	80004ea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff fede 	bl	80004ea <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}

08000732 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000736:	b672      	cpsid	i
}
 8000738:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073a:	e7fe      	b.n	800073a <Error_Handler+0x8>

0800073c <LL_AHB2_GRP1_EnableClock>:
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800074a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4313      	orrs	r3, r2
 8000752:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000760:	68fb      	ldr	r3, [r7, #12]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800077a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4013      	ands	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000790:	68fb      	ldr	r3, [r7, #12]
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b096      	sub	sp, #88	; 0x58
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2238      	movs	r2, #56	; 0x38
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f004 fa17 	bl	8004bfc <memset>
  if(huart->Instance==USART2)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <HAL_UART_MspInit+0x98>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d12e      	bne.n	8000836 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007d8:	2302      	movs	r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007dc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80007e0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fe80 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007f2:	f7ff ff9e 	bl	8000732 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007fa:	f7ff ffb7 	bl	800076c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff9c 	bl	800073c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000804:	230c      	movs	r3, #12
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000814:	2307      	movs	r3, #7
 8000816:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800081c:	4619      	mov	r1, r3
 800081e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000822:	f000 fad7 	bl	8000dd4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2025      	movs	r0, #37	; 0x25
 800082c:	f000 f9e1 	bl	8000bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000830:	2025      	movs	r0, #37	; 0x25
 8000832:	f000 f9f8 	bl	8000c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000836:	bf00      	nop
 8000838:	3758      	adds	r7, #88	; 0x58
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40004400 	.word	0x40004400

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <MemManage_Handler+0x4>

08000856 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <BusFault_Handler+0x4>

0800085c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <UsageFault_Handler+0x4>

08000862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088a:	f000 f8bf 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <USART2_IRQHandler+0x10>)
 800089a:	f002 f893 	bl	80029c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000015c 	.word	0x2000015c

080008a8 <uartQueue_init>:

/*
 * Initializes a UART_Queue structure.
 * Call before attempting to operate on the queue.
 */
void uartQueue_init(UART_Queue* queue) {
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	// operation variables
	int row, col;

	// reset all operation variables
	queue->_isEmpty = true;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
	queue->_front = 0;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
	queue->_rear = 0;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]

	// ensure that the queue messages are empty
	for (row = 0; row < UART_MESSAGE_SIZE; row++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	e014      	b.n	80008f2 <uartQueue_init+0x4a>
		for (col = 0; col < UART_MESSAGE_SIZE; col++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	e00b      	b.n	80008e6 <uartQueue_init+0x3e>
			queue->_queue[row][col] = '\0';
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	015b      	lsls	r3, r3, #5
 80008d4:	441a      	add	r2, r3
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	4413      	add	r3, r2
 80008da:	330c      	adds	r3, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
		for (col = 0; col < UART_MESSAGE_SIZE; col++)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3301      	adds	r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	ddf0      	ble.n	80008ce <uartQueue_init+0x26>
	for (row = 0; row < UART_MESSAGE_SIZE; row++)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b1f      	cmp	r3, #31
 80008f6:	dde7      	ble.n	80008c8 <uartQueue_init+0x20>
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f7ff fdb8 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000932:	f004 f93f 	bl	8004bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fe0b 	bl	8000550 <main>

0800093a <LoopForever>:

LoopForever:
    b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000948:	08004d54 	.word	0x08004d54
  ldr r2, =_sbss
 800094c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000950:	20000234 	.word	0x20000234

08000954 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800095e:	2300      	movs	r3, #0
 8000960:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000962:	2003      	movs	r0, #3
 8000964:	f000 f93a 	bl	8000bdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000968:	f001 fbe2 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 800096c:	4603      	mov	r3, r0
 800096e:	4a09      	ldr	r2, [pc, #36]	; (8000994 <HAL_Init+0x3c>)
 8000970:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f810 	bl	8000998 <HAL_InitTick>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	e001      	b.n	8000988 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000984:	f7ff ff0a 	bl	800079c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000988:	79fb      	ldrb	r3, [r7, #7]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000000 	.word	0x20000000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d024      	beq.n	80009f6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009ac:	f001 fbc0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 80009b0:	4602      	mov	r2, r0
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x6c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4619      	mov	r1, r3
 80009b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	f000 f93c 	bl	8000c42 <HAL_SYSTICK_Config>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10f      	bne.n	80009f0 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d809      	bhi.n	80009ea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d6:	2200      	movs	r2, #0
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009de:	f000 f908 	bl	8000bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e2:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <HAL_InitTick+0x70>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e007      	b.n	80009fa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	73fb      	strb	r3, [r7, #15]
 80009ee:	e004      	b.n	80009fa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]
 80009f4:	e001      	b.n	80009fa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000001c 	.word	0x2000001c
 8000a08:	20000018 	.word	0x20000018

08000a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x1c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x20>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <HAL_IncTick+0x20>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	2000001c 	.word	0x2000001c
 8000a2c:	20000230 	.word	0x20000230

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <HAL_GetTick+0x10>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000230 	.word	0x20000230

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4906      	ldr	r1, [pc, #24]	; (8000adc <__NVIC_EnableIRQ+0x34>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	; (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	; 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ba8:	d301      	bcc.n	8000bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00f      	b.n	8000bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <SysTick_Config+0x40>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb6:	210f      	movs	r1, #15
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f7ff ff90 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <SysTick_Config+0x40>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010

08000bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff2d 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff44 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff92 	bl	8000b34 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff61 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff37 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffa4 	bl	8000b98 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e04f      	b.n	8000d0c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d008      	beq.n	8000c8a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e040      	b.n	8000d0c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 020e 	bic.w	r2, r2, #14
 8000c98:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ca8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f022 0201 	bic.w	r2, r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f003 021c 	and.w	r2, r3, #28
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000cd6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00c      	beq.n	8000cfa <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000cf8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d005      	beq.n	8000d3a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2204      	movs	r2, #4
 8000d32:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e047      	b.n	8000dca <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f022 020e 	bic.w	r2, r2, #14
 8000d48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0201 	bic.w	r2, r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f003 021c 	and.w	r2, r3, #28
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000d86:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00c      	beq.n	8000daa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000da8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
    }
  }
  return status;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e140      	b.n	8001066 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	2101      	movs	r1, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	4013      	ands	r3, r2
 8000df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8132 	beq.w	8001060 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d005      	beq.n	8000e14 <HAL_GPIO_Init+0x40>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 0201 	and.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d017      	beq.n	8000eb2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d123      	bne.n	8000f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	6939      	ldr	r1, [r7, #16]
 8000f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	2203      	movs	r2, #3
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0203 	and.w	r2, r3, #3
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 808c 	beq.w	8001060 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f48:	4a4e      	ldr	r2, [pc, #312]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	3302      	adds	r3, #2
 8000f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	2207      	movs	r2, #7
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f72:	d00d      	beq.n	8000f90 <HAL_GPIO_Init+0x1bc>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a44      	ldr	r2, [pc, #272]	; (8001088 <HAL_GPIO_Init+0x2b4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d007      	beq.n	8000f8c <HAL_GPIO_Init+0x1b8>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_GPIO_Init+0x1b4>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e004      	b.n	8000f92 <HAL_GPIO_Init+0x1be>
 8000f88:	2307      	movs	r3, #7
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x1be>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <HAL_GPIO_Init+0x1be>
 8000f90:	2300      	movs	r3, #0
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	f002 0203 	and.w	r2, r2, #3
 8000f98:	0092      	lsls	r2, r2, #2
 8000f9a:	4093      	lsls	r3, r2
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa2:	4938      	ldr	r1, [pc, #224]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb0:	4b37      	ldr	r3, [pc, #220]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fda:	4b2d      	ldr	r3, [pc, #180]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001004:	4b22      	ldr	r3, [pc, #136]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8001006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800100a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8001034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001038:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4313      	orrs	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f aeb7 	bne.w	8000de4 <HAL_GPIO_Init+0x10>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40010000 	.word	0x40010000
 8001088:	48000400 	.word	0x48000400
 800108c:	48000800 	.word	0x48000800
 8001090:	58000800 	.word	0x58000800

08001094 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a03      	ldr	r2, [pc, #12]	; (80010ac <HAL_PWR_EnableBkUpAccess+0x18>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	58000400 	.word	0x58000400

080010b0 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <LL_PWR_EnableBootC2+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <LL_PWR_EnableBootC2+0x18>)
 80010ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	58000400 	.word	0x58000400

080010cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_PWREx_GetVoltageRange+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	58000400 	.word	0x58000400

080010e4 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80010ec:	f7ff ffe0 	bl	80010b0 <LL_PWR_EnableBootC2>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LL_PWR_IsEnabledBkUpAccess>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001108:	d101      	bne.n	800110e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	58000400 	.word	0x58000400

0800111c <LL_RCC_HSE_EnableTcxo>:
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800112a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <LL_RCC_HSE_DisableTcxo>:
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800113c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001166:	d101      	bne.n	800116c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <LL_RCC_HSE_Enable>:
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800117a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <LL_RCC_HSE_Disable>:
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_HSE_IsReady>:
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011c0:	d101      	bne.n	80011c6 <LL_RCC_HSE_IsReady+0x18>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <LL_RCC_HSE_IsReady+0x1a>
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_HSI_Enable>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <LL_RCC_HSI_Disable>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <LL_RCC_HSI_IsReady>:
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d101      	bne.n	8001220 <LL_RCC_HSI_IsReady+0x18>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_RCC_HSI_IsReady+0x1a>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <LL_RCC_HSI_SetCalibTrimming>:
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	061b      	lsls	r3, r3, #24
 8001240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d101      	bne.n	800126a <LL_RCC_LSE_IsReady+0x18>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_RCC_LSE_IsReady+0x1a>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d101      	bne.n	80012cc <LL_RCC_LSI_IsReady+0x18>
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <LL_RCC_LSI_IsReady+0x1a>
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6013      	str	r3, [r2, #0]
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b02      	cmp	r3, #2
 800131e:	d101      	bne.n	8001324 <LL_RCC_MSI_IsReady+0x16>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <LL_RCC_MSI_IsReady+0x18>
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	2b08      	cmp	r3, #8
 800133e:	d101      	bne.n	8001344 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001370:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr

080013a4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f023 0203 	bic.w	r2, r3, #3
 80013b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	608b      	str	r3, [r1, #8]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 030c 	and.w	r3, r3, #12
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80013e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	608b      	str	r3, [r1, #8]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001412:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800141a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001440:	f023 020f 	bic.w	r2, r3, #15
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	091b      	lsrs	r3, r3, #4
 8001448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800144c:	4313      	orrs	r3, r2
 800144e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800146e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4313      	orrs	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800148a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80014ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr

080014be <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80014c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80014f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800154e:	d101      	bne.n	8001554 <LL_RCC_PLL_IsReady+0x18>
 8001550:	2301      	movs	r3, #1
 8001552:	e000      	b.n	8001556 <LL_RCC_PLL_IsReady+0x1a>
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800157a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800159a:	4618      	mov	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0303 	and.w	r3, r3, #3
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ca:	d101      	bne.n	80015d0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015ee:	d101      	bne.n	80015f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001606:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d101      	bne.n	8001618 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr

08001622 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001634:	d101      	bne.n	800163a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001656:	d101      	bne.n	800165c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001658:	2301      	movs	r3, #1
 800165a:	e000      	b.n	800165e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
	...

08001668 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b088      	sub	sp, #32
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e36f      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167a:	f7ff fea6 	bl	80013ca <LL_RCC_GetSysClkSource>
 800167e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001680:	f7ff ff8f 	bl	80015a2 <LL_RCC_PLL_GetMainSource>
 8001684:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80c4 	beq.w	800181c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x3e>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d176      	bne.n	800178e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d173      	bne.n	800178e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e353      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x68>
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ce:	e006      	b.n	80016de <HAL_RCC_OscConfig+0x76>
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016de:	4293      	cmp	r3, r2
 80016e0:	d222      	bcs.n	8001728 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fd5a 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e331      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fe2b 	bl	800137c <LL_RCC_MSI_SetCalibTrimming>
 8001726:	e021      	b.n	800176c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe12 	bl	800137c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fd1f 	bl	80021a0 <RCC_SetFlashLatencyFromMSIRange>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e2f6      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800176c:	f000 fce0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8001770:	4603      	mov	r3, r0
 8001772:	4aa7      	ldr	r2, [pc, #668]	; (8001a10 <HAL_RCC_OscConfig+0x3a8>)
 8001774:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001776:	4ba7      	ldr	r3, [pc, #668]	; (8001a14 <HAL_RCC_OscConfig+0x3ac>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff f90c 	bl	8000998 <HAL_InitTick>
 8001780:	4603      	mov	r3, r0
 8001782:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001784:	7cfb      	ldrb	r3, [r7, #19]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d047      	beq.n	800181a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800178a:	7cfb      	ldrb	r3, [r7, #19]
 800178c:	e2e5      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d02c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001796:	f7ff fd9e 	bl	80012d6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800179a:	f7ff f949 	bl	8000a30 <HAL_GetTick>
 800179e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a2:	f7ff f945 	bl	8000a30 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e2d2      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80017b4:	f7ff fdab 	bl	800130e <LL_RCC_MSI_IsReady>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f1      	beq.n	80017a2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fdc7 	bl	800137c <LL_RCC_MSI_SetCalibTrimming>
 80017ee:	e015      	b.n	800181c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017f0:	f7ff fd7f 	bl	80012f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f4:	f7ff f91c 	bl	8000a30 <HAL_GetTick>
 80017f8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017fc:	f7ff f918 	bl	8000a30 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e2a5      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800180e:	f7ff fd7e 	bl	800130e <LL_RCC_MSI_IsReady>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1f1      	bne.n	80017fc <HAL_RCC_OscConfig+0x194>
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800181a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d058      	beq.n	80018da <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b08      	cmp	r3, #8
 800182c:	d005      	beq.n	800183a <HAL_RCC_OscConfig+0x1d2>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d108      	bne.n	8001846 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b03      	cmp	r3, #3
 8001838:	d105      	bne.n	8001846 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d14b      	bne.n	80018da <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e289      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d102      	bne.n	800186c <HAL_RCC_OscConfig+0x204>
 8001866:	f7ff fc86 	bl	8001176 <LL_RCC_HSE_Enable>
 800186a:	e00d      	b.n	8001888 <HAL_RCC_OscConfig+0x220>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001874:	d104      	bne.n	8001880 <HAL_RCC_OscConfig+0x218>
 8001876:	f7ff fc51 	bl	800111c <LL_RCC_HSE_EnableTcxo>
 800187a:	f7ff fc7c 	bl	8001176 <LL_RCC_HSE_Enable>
 800187e:	e003      	b.n	8001888 <HAL_RCC_OscConfig+0x220>
 8001880:	f7ff fc87 	bl	8001192 <LL_RCC_HSE_Disable>
 8001884:	f7ff fc58 	bl	8001138 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff f8ce 	bl	8000a30 <HAL_GetTick>
 8001894:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff f8ca 	bl	8000a30 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e257      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80018aa:	f7ff fc80 	bl	80011ae <LL_RCC_HSE_IsReady>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f1      	beq.n	8001898 <HAL_RCC_OscConfig+0x230>
 80018b4:	e011      	b.n	80018da <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff f8bb 	bl	8000a30 <HAL_GetTick>
 80018ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff f8b7 	bl	8000a30 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e244      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80018d0:	f7ff fc6d 	bl	80011ae <LL_RCC_HSE_IsReady>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f1      	bne.n	80018be <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d046      	beq.n	8001974 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x290>
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d10e      	bne.n	8001910 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d10b      	bne.n	8001910 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e22a      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc8e 	bl	800122a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800190e:	e031      	b.n	8001974 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d019      	beq.n	800194c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001918:	f7ff fc5a 	bl	80011d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff f888 	bl	8000a30 <HAL_GetTick>
 8001920:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001924:	f7ff f884 	bl	8000a30 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e211      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001936:	f7ff fc67 	bl	8001208 <LL_RCC_HSI_IsReady>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f1      	beq.n	8001924 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fc70 	bl	800122a <LL_RCC_HSI_SetCalibTrimming>
 800194a:	e013      	b.n	8001974 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194c:	f7ff fc4e 	bl	80011ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f86e 	bl	8000a30 <HAL_GetTick>
 8001954:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff f86a 	bl	8000a30 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1f7      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800196a:	f7ff fc4d 	bl	8001208 <LL_RCC_HSI_IsReady>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f1      	bne.n	8001958 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d06e      	beq.n	8001a5e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d056      	beq.n	8001a36 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001990:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69da      	ldr	r2, [r3, #28]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	429a      	cmp	r2, r3
 800199e:	d031      	beq.n	8001a04 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e1d0      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d013      	beq.n	80019ea <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80019c2:	f7ff fc67 	bl	8001294 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c6:	f7ff f833 	bl	8000a30 <HAL_GetTick>
 80019ca:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff f82f 	bl	8000a30 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1bc      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80019e0:	f7ff fc68 	bl	80012b4 <LL_RCC_LSI_IsReady>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f1      	bne.n	80019ce <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f2:	f023 0210 	bic.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a04:	f7ff fc36 	bl	8001274 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a08:	f7ff f812 	bl	8000a30 <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a0e:	e00c      	b.n	8001a2a <HAL_RCC_OscConfig+0x3c2>
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000018 	.word	0x20000018
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f80a 	bl	8000a30 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b11      	cmp	r3, #17
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e197      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a2a:	f7ff fc43 	bl	80012b4 <LL_RCC_LSI_IsReady>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f1      	beq.n	8001a18 <HAL_RCC_OscConfig+0x3b0>
 8001a34:	e013      	b.n	8001a5e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a36:	f7ff fc2d 	bl	8001294 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7fe fff9 	bl	8000a30 <HAL_GetTick>
 8001a3e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a42:	f7fe fff5 	bl	8000a30 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b11      	cmp	r3, #17
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e182      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a54:	f7ff fc2e 	bl	80012b4 <LL_RCC_LSI_IsReady>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f1      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80d8 	beq.w	8001c1c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a6c:	f7ff fb44 	bl	80010f8 <LL_PWR_IsEnabledBkUpAccess>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d113      	bne.n	8001a9e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001a76:	f7ff fb0d 	bl	8001094 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7a:	f7fe ffd9 	bl	8000a30 <HAL_GetTick>
 8001a7e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a82:	f7fe ffd5 	bl	8000a30 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e162      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a94:	f7ff fb30 	bl	80010f8 <LL_PWR_IsEnabledBkUpAccess>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f1      	beq.n	8001a82 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d07b      	beq.n	8001b9e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b85      	cmp	r3, #133	; 0x85
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d109      	bne.n	8001aca <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aca:	f7fe ffb1 	bl	8000a30 <HAL_GetTick>
 8001ace:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7fe ffa3 	bl	8000a30 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e12e      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001afc:	f7ff fba9 	bl	8001252 <LL_RCC_LSE_IsReady>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0ef      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b81      	cmp	r3, #129	; 0x81
 8001b0c:	d003      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b85      	cmp	r3, #133	; 0x85
 8001b14:	d121      	bne.n	8001b5a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7fe ff8b 	bl	8000a30 <HAL_GetTick>
 8001b1a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b30:	e00a      	b.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b32:	f7fe ff7d 	bl	8000a30 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e108      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0ec      	beq.n	8001b32 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b58:	e060      	b.n	8001c1c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe ff69 	bl	8000a30 <HAL_GetTick>
 8001b5e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7fe ff5b 	bl	8000a30 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0e6      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1ec      	bne.n	8001b76 <HAL_RCC_OscConfig+0x50e>
 8001b9c:	e03e      	b.n	8001c1c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9e:	f7fe ff47 	bl	8000a30 <HAL_GetTick>
 8001ba2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe ff39 	bl	8000a30 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e0c4      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ec      	bne.n	8001bba <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7fe ff26 	bl	8000a30 <HAL_GetTick>
 8001be4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf2:	f023 0301 	bic.w	r3, r3, #1
 8001bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7fe ff18 	bl	8000a30 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e0a3      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c12:	f7ff fb1e 	bl	8001252 <LL_RCC_LSE_IsReady>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ef      	bne.n	8001bfc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8099 	beq.w	8001d58 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d06c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d14b      	bne.n	8001ccc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	f7ff fc74 	bl	8001520 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe fefa 	bl	8000a30 <HAL_GetTick>
 8001c3c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe fef6 	bl	8000a30 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b0a      	cmp	r3, #10
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e083      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c52:	f7ff fc73 	bl	800153c <LL_RCC_PLL_IsReady>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f1      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	4b40      	ldr	r3, [pc, #256]	; (8001d64 <HAL_RCC_OscConfig+0x6fc>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c74:	0212      	lsls	r2, r2, #8
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c82:	4311      	orrs	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c92:	f7ff fc37 	bl	8001504 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7fe fec3 	bl	8000a30 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cae:	f7fe febf 	bl	8000a30 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b0a      	cmp	r3, #10
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e04c      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001cc0:	f7ff fc3c 	bl	800153c <LL_RCC_PLL_IsReady>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f1      	beq.n	8001cae <HAL_RCC_OscConfig+0x646>
 8001cca:	e045      	b.n	8001d58 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ccc:	f7ff fc28 	bl	8001520 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe feae 	bl	8000a30 <HAL_GetTick>
 8001cd4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7fe feaa 	bl	8000a30 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b0a      	cmp	r3, #10
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e037      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001cea:	f7ff fc27 	bl	800153c <LL_RCC_PLL_IsReady>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f1      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_RCC_OscConfig+0x700>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
 8001d04:	e028      	b.n	8001d58 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e023      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f003 0203 	and.w	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d115      	bne.n	8001d54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d10e      	bne.n	8001d54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d106      	bne.n	8001d54 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	11c1808c 	.word	0x11c1808c
 8001d68:	eefefffc 	.word	0xeefefffc

08001d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e12c      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d80:	4b98      	ldr	r3, [pc, #608]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d91b      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b95      	ldr	r3, [pc, #596]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4993      	ldr	r1, [pc, #588]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d9e:	f7fe fe47 	bl	8000a30 <HAL_GetTick>
 8001da2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001da6:	f7fe fe43 	bl	8000a30 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e110      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db8:	4b8a      	ldr	r3, [pc, #552]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d1ef      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d016      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fb02 	bl	80013e0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ddc:	f7fe fe28 	bl	8000a30 <HAL_GetTick>
 8001de0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001de4:	f7fe fe24 	bl	8000a30 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0f1      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001df6:	f7ff fbdf 	bl	80015b8 <LL_RCC_IsActiveFlag_HPRE>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f1      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d016      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff faf8 	bl	8001406 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e16:	f7fe fe0b 	bl	8000a30 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e1e:	f7fe fe07 	bl	8000a30 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e0d4      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e30:	f7ff fbd3 	bl	80015da <LL_RCC_IsActiveFlag_C2HPRE>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f1      	beq.n	8001e1e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff faf0 	bl	8001430 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e50:	f7fe fdee 	bl	8000a30 <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e58:	f7fe fdea 	bl	8000a30 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0b7      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e6a:	f7ff fbc8 	bl	80015fe <LL_RCC_IsActiveFlag_SHDHPRE>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f1      	beq.n	8001e58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d016      	beq.n	8001eae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fae9 	bl	800145c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e8a:	f7fe fdd1 	bl	8000a30 <HAL_GetTick>
 8001e8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e92:	f7fe fdcd 	bl	8000a30 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e09a      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ea4:	f7ff fbbd 	bl	8001622 <LL_RCC_IsActiveFlag_PPRE1>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f1      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d017      	beq.n	8001eea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fade 	bl	8001482 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ec6:	f7fe fdb3 	bl	8000a30 <HAL_GetTick>
 8001eca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ece:	f7fe fdaf 	bl	8000a30 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e07c      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ee0:	f7ff fbb0 	bl	8001644 <LL_RCC_IsActiveFlag_PPRE2>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f1      	beq.n	8001ece <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d043      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001efe:	f7ff f956 	bl	80011ae <LL_RCC_HSE_IsReady>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d11e      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e066      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001f14:	f7ff fb12 	bl	800153c <LL_RCC_PLL_IsReady>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d113      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e05b      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001f2a:	f7ff f9f0 	bl	800130e <LL_RCC_MSI_IsReady>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d108      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e050      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001f38:	f7ff f966 	bl	8001208 <LL_RCC_HSI_IsReady>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e049      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fa2a 	bl	80013a4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f50:	f7fe fd6e 	bl	8000a30 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7fe fd6a 	bl	8000a30 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e035      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	f7ff fa2c 	bl	80013ca <LL_RCC_GetSysClkSource>
 8001f72:	4602      	mov	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d1ec      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d21b      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 0207 	bic.w	r2, r3, #7
 8001f94:	4913      	ldr	r1, [pc, #76]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f9c:	f7fe fd48 	bl	8000a30 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fa4:	f7fe fd44 	bl	8000a30 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e011      	b.n	8001fda <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_ClockConfig+0x278>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1ef      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fc4:	f000 f8b4 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_RCC_ClockConfig+0x27c>)
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <HAL_RCC_ClockConfig+0x280>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fce0 	bl	8000998 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	58004000 	.word	0x58004000
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000018 	.word	0x20000018

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffe:	f7ff f9e4 	bl	80013ca <LL_RCC_GetSysClkSource>
 8002002:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	f7ff facd 	bl	80015a2 <LL_RCC_PLL_GetMainSource>
 8002008:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x2c>
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d139      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d136      	bne.n	800208a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800201c:	f7ff f987 	bl	800132e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d115      	bne.n	8002052 <HAL_RCC_GetSysClockFreq+0x62>
 8002026:	f7ff f982 	bl	800132e <LL_RCC_MSI_IsEnabledRangeSelect>
 800202a:	4603      	mov	r3, r0
 800202c:	2b01      	cmp	r3, #1
 800202e:	d106      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x4e>
 8002030:	f7ff f98d 	bl	800134e <LL_RCC_MSI_GetRange>
 8002034:	4603      	mov	r3, r0
 8002036:	0a1b      	lsrs	r3, r3, #8
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	e005      	b.n	800204a <HAL_RCC_GetSysClockFreq+0x5a>
 800203e:	f7ff f991 	bl	8001364 <LL_RCC_MSI_GetRangeAfterStandby>
 8002042:	4603      	mov	r3, r0
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a36      	ldr	r2, [pc, #216]	; (8002124 <HAL_RCC_GetSysClockFreq+0x134>)
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	e014      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x8c>
 8002052:	f7ff f96c 	bl	800132e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002056:	4603      	mov	r3, r0
 8002058:	2b01      	cmp	r3, #1
 800205a:	d106      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x7a>
 800205c:	f7ff f977 	bl	800134e <LL_RCC_MSI_GetRange>
 8002060:	4603      	mov	r3, r0
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	e005      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x86>
 800206a:	f7ff f97b 	bl	8001364 <LL_RCC_MSI_GetRangeAfterStandby>
 800206e:	4603      	mov	r3, r0
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <HAL_RCC_GetSysClockFreq+0x134>)
 8002078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d115      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002088:	e012      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d102      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_GetSysClockFreq+0x138>)
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e00c      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b08      	cmp	r3, #8
 800209a:	d109      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800209c:	f7ff f85a 	bl	8001154 <LL_RCC_HSE_IsEnabledDiv2>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_GetSysClockFreq+0x138>)
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	e001      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_RCC_GetSysClockFreq+0x13c>)
 80020ae:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b0:	f7ff f98b 	bl	80013ca <LL_RCC_GetSysClkSource>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b0c      	cmp	r3, #12
 80020b8:	d12f      	bne.n	800211a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80020ba:	f7ff fa72 	bl	80015a2 <LL_RCC_PLL_GetMainSource>
 80020be:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0xde>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d003      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0xe4>
 80020cc:	e00d      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80020ce:	4b16      	ldr	r3, [pc, #88]	; (8002128 <HAL_RCC_GetSysClockFreq+0x138>)
 80020d0:	60fb      	str	r3, [r7, #12]
        break;
 80020d2:	e00d      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020d4:	f7ff f83e 	bl	8001154 <LL_RCC_HSE_IsEnabledDiv2>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d102      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_GetSysClockFreq+0x138>)
 80020e0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80020e2:	e005      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_GetSysClockFreq+0x13c>)
 80020e6:	60fb      	str	r3, [r7, #12]
        break;
 80020e8:	e002      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	60fb      	str	r3, [r7, #12]
        break;
 80020ee:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80020f0:	f7ff fa35 	bl	800155e <LL_RCC_PLL_GetN>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	fb03 f402 	mul.w	r4, r3, r2
 80020fc:	f7ff fa46 	bl	800158c <LL_RCC_PLL_GetDivider>
 8002100:	4603      	mov	r3, r0
 8002102:	091b      	lsrs	r3, r3, #4
 8002104:	3301      	adds	r3, #1
 8002106:	fbb4 f4f3 	udiv	r4, r4, r3
 800210a:	f7ff fa34 	bl	8001576 <LL_RCC_PLL_GetR>
 800210e:	4603      	mov	r3, r0
 8002110:	0f5b      	lsrs	r3, r3, #29
 8002112:	3301      	adds	r3, #1
 8002114:	fbb4 f3f3 	udiv	r3, r4, r3
 8002118:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800211a:	697b      	ldr	r3, [r7, #20]
}
 800211c:	4618      	mov	r0, r3
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	08004cdc 	.word	0x08004cdc
 8002128:	00f42400 	.word	0x00f42400
 800212c:	01e84800 	.word	0x01e84800

08002130 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b598      	push	{r3, r4, r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002134:	f7ff ff5c 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8002138:	4604      	mov	r4, r0
 800213a:	f7ff f9b5 	bl	80014a8 <LL_RCC_GetAHBPrescaler>
 800213e:	4603      	mov	r3, r0
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	4a03      	ldr	r2, [pc, #12]	; (8002154 <HAL_RCC_GetHCLKFreq+0x24>)
 8002148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd98      	pop	{r3, r4, r7, pc}
 8002154:	08004c7c 	.word	0x08004c7c

08002158 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b598      	push	{r3, r4, r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800215c:	f7ff ffe8 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002160:	4604      	mov	r4, r0
 8002162:	f7ff f9b9 	bl	80014d8 <LL_RCC_GetAPB1Prescaler>
 8002166:	4603      	mov	r3, r0
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	4a03      	ldr	r2, [pc, #12]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd98      	pop	{r3, r4, r7, pc}
 8002178:	08004cbc 	.word	0x08004cbc

0800217c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800217c:	b598      	push	{r3, r4, r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002180:	f7ff ffd6 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002184:	4604      	mov	r4, r0
 8002186:	f7ff f9b2 	bl	80014ee <LL_RCC_GetAPB2Prescaler>
 800218a:	4603      	mov	r3, r0
 800218c:	0adb      	lsrs	r3, r3, #11
 800218e:	4a03      	ldr	r2, [pc, #12]	; (800219c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd98      	pop	{r3, r4, r7, pc}
 800219c:	08004cbc 	.word	0x08004cbc

080021a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80021a0:	b590      	push	{r4, r7, lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80021b8:	f7ff f981 	bl	80014be <LL_RCC_GetAHB3Prescaler>
 80021bc:	4603      	mov	r3, r0
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4a09      	ldr	r2, [pc, #36]	; (80021fc <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9c      	lsrs	r4, r3, #18
 80021dc:	f7fe ff76 	bl	80010cc <HAL_PWREx_GetVoltageRange>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4619      	mov	r1, r3
 80021e4:	4620      	mov	r0, r4
 80021e6:	f000 f80b 	bl	8002200 <RCC_SetFlashLatency>
 80021ea:	4603      	mov	r3, r0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	08004cdc 	.word	0x08004cdc
 80021f8:	08004c7c 	.word	0x08004c7c
 80021fc:	431bde83 	.word	0x431bde83

08002200 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800220a:	4a3a      	ldr	r2, [pc, #232]	; (80022f4 <RCC_SetFlashLatency+0xf4>)
 800220c:	f107 0320 	add.w	r3, r7, #32
 8002210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002214:	6018      	str	r0, [r3, #0]
 8002216:	3304      	adds	r3, #4
 8002218:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800221a:	4a37      	ldr	r2, [pc, #220]	; (80022f8 <RCC_SetFlashLatency+0xf8>)
 800221c:	f107 0318 	add.w	r3, r7, #24
 8002220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002224:	6018      	str	r0, [r3, #0]
 8002226:	3304      	adds	r3, #4
 8002228:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800222a:	4a34      	ldr	r2, [pc, #208]	; (80022fc <RCC_SetFlashLatency+0xfc>)
 800222c:	f107 030c 	add.w	r3, r7, #12
 8002230:	ca07      	ldmia	r2, {r0, r1, r2}
 8002232:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002236:	2300      	movs	r3, #0
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002240:	d11b      	bne.n	800227a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002242:	2300      	movs	r3, #0
 8002244:	633b      	str	r3, [r7, #48]	; 0x30
 8002246:	e014      	b.n	8002272 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	3338      	adds	r3, #56	; 0x38
 800224e:	443b      	add	r3, r7
 8002250:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002254:	461a      	mov	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4293      	cmp	r3, r2
 800225a:	d807      	bhi.n	800226c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800225c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	3338      	adds	r3, #56	; 0x38
 8002262:	443b      	add	r3, r7
 8002264:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800226a:	e021      	b.n	80022b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	3301      	adds	r3, #1
 8002270:	633b      	str	r3, [r7, #48]	; 0x30
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	2b02      	cmp	r3, #2
 8002276:	d9e7      	bls.n	8002248 <RCC_SetFlashLatency+0x48>
 8002278:	e01a      	b.n	80022b0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227e:	e014      	b.n	80022aa <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	3338      	adds	r3, #56	; 0x38
 8002286:	443b      	add	r3, r7
 8002288:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4293      	cmp	r3, r2
 8002292:	d807      	bhi.n	80022a4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	3338      	adds	r3, #56	; 0x38
 800229a:	443b      	add	r3, r7
 800229c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022a2:	e005      	b.n	80022b0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	3301      	adds	r3, #1
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d9e7      	bls.n	8002280 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <RCC_SetFlashLatency+0x100>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 0207 	bic.w	r2, r3, #7
 80022b8:	4911      	ldr	r1, [pc, #68]	; (8002300 <RCC_SetFlashLatency+0x100>)
 80022ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022c0:	f7fe fbb6 	bl	8000a30 <HAL_GetTick>
 80022c4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022c6:	e008      	b.n	80022da <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022c8:	f7fe fbb2 	bl	8000a30 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e007      	b.n	80022ea <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <RCC_SetFlashLatency+0x100>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1ef      	bne.n	80022c8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3738      	adds	r7, #56	; 0x38
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	08004c60 	.word	0x08004c60
 80022f8:	08004c68 	.word	0x08004c68
 80022fc:	08004c70 	.word	0x08004c70
 8002300:	58004000 	.word	0x58004000

08002304 <LL_RCC_LSE_IsReady>:
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	d101      	bne.n	800231c <LL_RCC_LSE_IsReady+0x18>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <LL_RCC_LSE_IsReady+0x1a>
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <LL_RCC_SetUSARTClockSource>:
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	43db      	mvns	r3, r3
 800233c:	401a      	ands	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <LL_RCC_SetI2SClockSource>:
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800236a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <LL_RCC_SetLPUARTClockSource>:
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr

080023aa <LL_RCC_SetI2CClockSource>:
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80023ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <LL_RCC_SetLPTIMClockSource>:
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	0c1b      	lsrs	r3, r3, #16
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	43db      	mvns	r3, r3
 80023fa:	401a      	ands	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <LL_RCC_SetRNGClockSource>:
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002428:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <LL_RCC_SetADCClockSource>:
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <LL_RCC_SetRTCClockSource>:
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800247c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <LL_RCC_GetRTCClockSource>:
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_ForceBackupDomainReset>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <LL_RCC_ReleaseBackupDomainReset>:
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024e2:	bf00      	nop
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80024f8:	2300      	movs	r3, #0
 80024fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80024fc:	2300      	movs	r3, #0
 80024fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d058      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800250c:	f7fe fdc2 	bl	8001094 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002510:	f7fe fa8e 	bl	8000a30 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002516:	e009      	b.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002518:	f7fe fa8a 	bl	8000a30 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	74fb      	strb	r3, [r7, #19]
        break;
 800252a:	e006      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800252c:	4b7b      	ldr	r3, [pc, #492]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002538:	d1ee      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d13c      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002540:	f7ff ffa7 	bl	8002492 <LL_RCC_GetRTCClockSource>
 8002544:	4602      	mov	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	429a      	cmp	r2, r3
 800254c:	d00f      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800255c:	f7ff ffa5 	bl	80024aa <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002560:	f7ff ffb3 	bl	80024ca <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d014      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002578:	f7fe fa5a 	bl	8000a30 <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800257e:	e00b      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe fa56 	bl	8000a30 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d902      	bls.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	74fb      	strb	r3, [r7, #19]
            break;
 8002596:	e004      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002598:	f7ff feb4 	bl	8002304 <LL_RCC_LSE_IsReady>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff5b 	bl	8002468 <LL_RCC_SetRTCClockSource>
 80025b2:	e004      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	74bb      	strb	r3, [r7, #18]
 80025b8:	e001      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fea9 	bl	8002326 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fe9e 	bl	8002326 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fec0 	bl	8002380 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fee6 	bl	80023e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	2b00      	cmp	r3, #0
 8002620:	d004      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fedb 	bl	80023e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fed0 	bl	80023e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fea9 	bl	80023aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d004      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fe9e 	bl	80023aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fe93 	bl	80023aa <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d011      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fe5e 	bl	8002356 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a2:	d107      	bne.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d010      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fea5 	bl	8002414 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d107      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d011      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fea3 	bl	800243e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002700:	d107      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002712:	7cbb      	ldrb	r3, [r7, #18]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	58000400 	.word	0x58000400

08002720 <LL_RCC_GetUSARTClockSource>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	4313      	orrs	r3, r2
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <LL_RCC_GetLPUARTClockSource>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002750:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4013      	ands	r3, r2
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e042      	b.n	80027fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe f80e 	bl	80007a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	; 0x24
 8002790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 fc3d 	bl	8003024 <UART_SetConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e022      	b.n	80027fa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fea5 	bl	800350c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 ff2b 	bl	800364e <UART_CheckIdleState>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002804:	b480      	push	{r7}
 8002806:	b091      	sub	sp, #68	; 0x44
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	4613      	mov	r3, r2
 8002810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	2b20      	cmp	r3, #32
 800281a:	d178      	bne.n	800290e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_UART_Transmit_IT+0x24>
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e071      	b.n	8002910 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2221      	movs	r2, #33	; 0x21
 8002854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002860:	d12a      	bne.n	80028b8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	d107      	bne.n	800287c <HAL_UART_Transmit_IT+0x78>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4a29      	ldr	r2, [pc, #164]	; (800291c <HAL_UART_Transmit_IT+0x118>)
 8002878:	679a      	str	r2, [r3, #120]	; 0x78
 800287a:	e002      	b.n	8002882 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4a28      	ldr	r2, [pc, #160]	; (8002920 <HAL_UART_Transmit_IT+0x11c>)
 8002880:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3308      	adds	r3, #8
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002898:	63bb      	str	r3, [r7, #56]	; 0x38
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3308      	adds	r3, #8
 80028a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a2:	637a      	str	r2, [r7, #52]	; 0x34
 80028a4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80028b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e5      	bne.n	8002882 <HAL_UART_Transmit_IT+0x7e>
 80028b6:	e028      	b.n	800290a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c0:	d107      	bne.n	80028d2 <HAL_UART_Transmit_IT+0xce>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4a15      	ldr	r2, [pc, #84]	; (8002924 <HAL_UART_Transmit_IT+0x120>)
 80028ce:	679a      	str	r2, [r3, #120]	; 0x78
 80028d0:	e002      	b.n	80028d8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_UART_Transmit_IT+0x124>)
 80028d6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	e853 3f00 	ldrex	r3, [r3]
 80028e4:	613b      	str	r3, [r7, #16]
   return(result);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f6:	623b      	str	r3, [r7, #32]
 80028f8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	69f9      	ldr	r1, [r7, #28]
 80028fc:	6a3a      	ldr	r2, [r7, #32]
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	61bb      	str	r3, [r7, #24]
   return(result);
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e6      	bne.n	80028d8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3744      	adds	r7, #68	; 0x44
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	08003e07 	.word	0x08003e07
 8002920:	08003d29 	.word	0x08003d29
 8002924:	08003c69 	.word	0x08003c69
 8002928:	08003bb3 	.word	0x08003bb3

0800292c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08a      	sub	sp, #40	; 0x28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	4613      	mov	r3, r2
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002940:	2b20      	cmp	r3, #32
 8002942:	d137      	bne.n	80029b4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_UART_Receive_IT+0x24>
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e030      	b.n	80029b6 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_UART_Receive_IT+0x94>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d01f      	beq.n	80029a4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d018      	beq.n	80029a4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	613b      	str	r3, [r7, #16]
   return(result);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	623b      	str	r3, [r7, #32]
 8002992:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	69f9      	ldr	r1, [r7, #28]
 8002996:	6a3a      	ldr	r2, [r7, #32]
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	61bb      	str	r3, [r7, #24]
   return(result);
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e6      	bne.n	8002972 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	461a      	mov	r2, r3
 80029a8:	68b9      	ldr	r1, [r7, #8]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 ff66 	bl	800387c <UART_Start_Receive_IT>
 80029b0:	4603      	mov	r3, r0
 80029b2:	e000      	b.n	80029b6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3728      	adds	r7, #40	; 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40008000 	.word	0x40008000

080029c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b0ba      	sub	sp, #232	; 0xe8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80029f2:	4013      	ands	r3, r2
 80029f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11b      	bne.n	8002a38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d015      	beq.n	8002a38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d009      	beq.n	8002a38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 82e3 	beq.w	8002ff4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
      }
      return;
 8002a36:	e2dd      	b.n	8002ff4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 8123 	beq.w	8002c88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002a46:	4b8d      	ldr	r3, [pc, #564]	; (8002c7c <HAL_UART_IRQHandler+0x2b8>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a52:	4b8b      	ldr	r3, [pc, #556]	; (8002c80 <HAL_UART_IRQHandler+0x2bc>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8116 	beq.w	8002c88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d011      	beq.n	8002a8c <HAL_UART_IRQHandler+0xc8>
 8002a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00b      	beq.n	8002a8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d011      	beq.n	8002abc <HAL_UART_IRQHandler+0xf8>
 8002a98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f043 0204 	orr.w	r2, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d011      	beq.n	8002aec <HAL_UART_IRQHandler+0x128>
 8002ac8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00b      	beq.n	8002aec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae2:	f043 0202 	orr.w	r2, r3, #2
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d017      	beq.n	8002b28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002b08:	4b5c      	ldr	r3, [pc, #368]	; (8002c7c <HAL_UART_IRQHandler+0x2b8>)
 8002b0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00b      	beq.n	8002b28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2208      	movs	r2, #8
 8002b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1e:	f043 0208 	orr.w	r2, r3, #8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_UART_IRQHandler+0x196>
 8002b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00c      	beq.n	8002b5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f043 0220 	orr.w	r2, r3, #32
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8249 	beq.w	8002ff8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d013      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d005      	beq.n	8002bbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d054      	beq.n	8002c68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 ff7c 	bl	8003abc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d146      	bne.n	8002c60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1d9      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2e:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <HAL_UART_IRQHandler+0x2c0>)
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe f86c 	bl	8000d16 <HAL_DMA_Abort_IT>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d019      	beq.n	8002c78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002c52:	4610      	mov	r0, r2
 8002c54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c56:	e00f      	b.n	8002c78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7fd fc5e 	bl	800051a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5e:	e00b      	b.n	8002c78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7fd fc5a 	bl	800051a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c66:	e007      	b.n	8002c78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7fd fc56 	bl	800051a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002c76:	e1bf      	b.n	8002ff8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c78:	bf00      	nop
    return;
 8002c7a:	e1bd      	b.n	8002ff8 <HAL_UART_IRQHandler+0x634>
 8002c7c:	10000001 	.word	0x10000001
 8002c80:	04000120 	.word	0x04000120
 8002c84:	08003b87 	.word	0x08003b87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 8153 	bne.w	8002f38 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 814c 	beq.w	8002f38 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 8145 	beq.w	8002f38 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc0:	2b40      	cmp	r3, #64	; 0x40
 8002cc2:	f040 80bb 	bne.w	8002e3c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 818f 	beq.w	8002ffc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002ce4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	f080 8187 	bcs.w	8002ffc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 8087 	bne.w	8002e1a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d18:	e853 3f00 	ldrex	r3, [r3]
 8002d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d3a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1da      	bne.n	8002d0c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3308      	adds	r3, #8
 8002d76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e1      	bne.n	8002d56 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3308      	adds	r3, #8
 8002d98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	3308      	adds	r3, #8
 8002db2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002db6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002db8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e3      	bne.n	8002d92 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de8:	f023 0310 	bic.w	r3, r3, #16
 8002dec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dfc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e4      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd ff20 	bl	8000c5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f8e9 	bl	800300c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e3a:	e0df      	b.n	8002ffc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80d1 	beq.w	8003000 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002e5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80cc 	beq.w	8003000 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e4      	bne.n	8002e68 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	e853 3f00 	ldrex	r3, [r3]
 8002eac:	623b      	str	r3, [r7, #32]
   return(result);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ece:	e841 2300 	strex	r3, r2, [r1]
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e1      	bne.n	8002e9e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	e853 3f00 	ldrex	r3, [r3]
 8002efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0310 	bic.w	r3, r3, #16
 8002f02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f10:	61fb      	str	r3, [r7, #28]
 8002f12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	69b9      	ldr	r1, [r7, #24]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e4      	bne.n	8002eee <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f86b 	bl	800300c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f36:	e063      	b.n	8003000 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00e      	beq.n	8002f62 <HAL_UART_IRQHandler+0x59e>
 8002f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f001 fd0e 	bl	800497c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f60:	e051      	b.n	8003006 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d014      	beq.n	8002f98 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d105      	bne.n	8002f86 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d03a      	beq.n	8003004 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
    }
    return;
 8002f96:	e035      	b.n	8003004 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d009      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x5f4>
 8002fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 ff9c 	bl	8003eee <UART_EndTransmit_IT>
    return;
 8002fb6:	e026      	b.n	8003006 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d009      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x614>
 8002fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f001 fce5 	bl	80049a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fd6:	e016      	b.n	8003006 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d010      	beq.n	8003006 <HAL_UART_IRQHandler+0x642>
 8002fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da0c      	bge.n	8003006 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f001 fcce 	bl	800498e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ff2:	e008      	b.n	8003006 <HAL_UART_IRQHandler+0x642>
      return;
 8002ff4:	bf00      	nop
 8002ff6:	e006      	b.n	8003006 <HAL_UART_IRQHandler+0x642>
    return;
 8002ff8:	bf00      	nop
 8002ffa:	e004      	b.n	8003006 <HAL_UART_IRQHandler+0x642>
      return;
 8002ffc:	bf00      	nop
 8002ffe:	e002      	b.n	8003006 <HAL_UART_IRQHandler+0x642>
      return;
 8003000:	bf00      	nop
 8003002:	e000      	b.n	8003006 <HAL_UART_IRQHandler+0x642>
    return;
 8003004:	bf00      	nop
  }
}
 8003006:	37e8      	adds	r7, #232	; 0xe8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
	...

08003024 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003028:	b08c      	sub	sp, #48	; 0x30
 800302a:	af00      	add	r7, sp, #0
 800302c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	4313      	orrs	r3, r2
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b94      	ldr	r3, [pc, #592]	; (80032a4 <UART_SetConfig+0x280>)
 8003054:	4013      	ands	r3, r2
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800305c:	430b      	orrs	r3, r1
 800305e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a89      	ldr	r2, [pc, #548]	; (80032a8 <UART_SetConfig+0x284>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800308c:	4313      	orrs	r3, r2
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800309a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f023 010f 	bic.w	r1, r3, #15
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7a      	ldr	r2, [pc, #488]	; (80032ac <UART_SetConfig+0x288>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d127      	bne.n	8003118 <UART_SetConfig+0xf4>
 80030c8:	2003      	movs	r0, #3
 80030ca:	f7ff fb29 	bl	8002720 <LL_RCC_GetUSARTClockSource>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d81b      	bhi.n	8003110 <UART_SetConfig+0xec>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0xbc>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	08003101 	.word	0x08003101
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	08003109 	.word	0x08003109
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f6:	e080      	b.n	80031fa <UART_SetConfig+0x1d6>
 80030f8:	2302      	movs	r3, #2
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030fe:	e07c      	b.n	80031fa <UART_SetConfig+0x1d6>
 8003100:	2304      	movs	r3, #4
 8003102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003106:	e078      	b.n	80031fa <UART_SetConfig+0x1d6>
 8003108:	2308      	movs	r3, #8
 800310a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800310e:	e074      	b.n	80031fa <UART_SetConfig+0x1d6>
 8003110:	2310      	movs	r3, #16
 8003112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003116:	e070      	b.n	80031fa <UART_SetConfig+0x1d6>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a64      	ldr	r2, [pc, #400]	; (80032b0 <UART_SetConfig+0x28c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d138      	bne.n	8003194 <UART_SetConfig+0x170>
 8003122:	200c      	movs	r0, #12
 8003124:	f7ff fafc 	bl	8002720 <LL_RCC_GetUSARTClockSource>
 8003128:	4603      	mov	r3, r0
 800312a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d82c      	bhi.n	800318c <UART_SetConfig+0x168>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0x114>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800316d 	.word	0x0800316d
 800313c:	0800318d 	.word	0x0800318d
 8003140:	0800318d 	.word	0x0800318d
 8003144:	0800318d 	.word	0x0800318d
 8003148:	0800317d 	.word	0x0800317d
 800314c:	0800318d 	.word	0x0800318d
 8003150:	0800318d 	.word	0x0800318d
 8003154:	0800318d 	.word	0x0800318d
 8003158:	08003175 	.word	0x08003175
 800315c:	0800318d 	.word	0x0800318d
 8003160:	0800318d 	.word	0x0800318d
 8003164:	0800318d 	.word	0x0800318d
 8003168:	08003185 	.word	0x08003185
 800316c:	2300      	movs	r3, #0
 800316e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003172:	e042      	b.n	80031fa <UART_SetConfig+0x1d6>
 8003174:	2302      	movs	r3, #2
 8003176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317a:	e03e      	b.n	80031fa <UART_SetConfig+0x1d6>
 800317c:	2304      	movs	r3, #4
 800317e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003182:	e03a      	b.n	80031fa <UART_SetConfig+0x1d6>
 8003184:	2308      	movs	r3, #8
 8003186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318a:	e036      	b.n	80031fa <UART_SetConfig+0x1d6>
 800318c:	2310      	movs	r3, #16
 800318e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003192:	e032      	b.n	80031fa <UART_SetConfig+0x1d6>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a43      	ldr	r2, [pc, #268]	; (80032a8 <UART_SetConfig+0x284>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d12a      	bne.n	80031f4 <UART_SetConfig+0x1d0>
 800319e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80031a2:	f7ff facf 	bl	8002744 <LL_RCC_GetLPUARTClockSource>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ac:	d01a      	beq.n	80031e4 <UART_SetConfig+0x1c0>
 80031ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031b2:	d81b      	bhi.n	80031ec <UART_SetConfig+0x1c8>
 80031b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b8:	d00c      	beq.n	80031d4 <UART_SetConfig+0x1b0>
 80031ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031be:	d815      	bhi.n	80031ec <UART_SetConfig+0x1c8>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <UART_SetConfig+0x1a8>
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d008      	beq.n	80031dc <UART_SetConfig+0x1b8>
 80031ca:	e00f      	b.n	80031ec <UART_SetConfig+0x1c8>
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d2:	e012      	b.n	80031fa <UART_SetConfig+0x1d6>
 80031d4:	2302      	movs	r3, #2
 80031d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031da:	e00e      	b.n	80031fa <UART_SetConfig+0x1d6>
 80031dc:	2304      	movs	r3, #4
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e2:	e00a      	b.n	80031fa <UART_SetConfig+0x1d6>
 80031e4:	2308      	movs	r3, #8
 80031e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ea:	e006      	b.n	80031fa <UART_SetConfig+0x1d6>
 80031ec:	2310      	movs	r3, #16
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f2:	e002      	b.n	80031fa <UART_SetConfig+0x1d6>
 80031f4:	2310      	movs	r3, #16
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a2a      	ldr	r2, [pc, #168]	; (80032a8 <UART_SetConfig+0x284>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f040 80a4 	bne.w	800334e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003206:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800320a:	2b08      	cmp	r3, #8
 800320c:	d823      	bhi.n	8003256 <UART_SetConfig+0x232>
 800320e:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <UART_SetConfig+0x1f0>)
 8003210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003214:	08003239 	.word	0x08003239
 8003218:	08003257 	.word	0x08003257
 800321c:	08003241 	.word	0x08003241
 8003220:	08003257 	.word	0x08003257
 8003224:	08003247 	.word	0x08003247
 8003228:	08003257 	.word	0x08003257
 800322c:	08003257 	.word	0x08003257
 8003230:	08003257 	.word	0x08003257
 8003234:	0800324f 	.word	0x0800324f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003238:	f7fe ff8e 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 800323c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800323e:	e010      	b.n	8003262 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003240:	4b1c      	ldr	r3, [pc, #112]	; (80032b4 <UART_SetConfig+0x290>)
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003244:	e00d      	b.n	8003262 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003246:	f7fe fed3 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 800324a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800324c:	e009      	b.n	8003262 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003254:	e005      	b.n	8003262 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003260:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8137 	beq.w	80034d8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <UART_SetConfig+0x294>)
 8003270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003274:	461a      	mov	r2, r3
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	fbb3 f3f2 	udiv	r3, r3, r2
 800327c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	429a      	cmp	r2, r3
 800328c:	d305      	bcc.n	800329a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	429a      	cmp	r2, r3
 8003298:	d910      	bls.n	80032bc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80032a0:	e11a      	b.n	80034d8 <UART_SetConfig+0x4b4>
 80032a2:	bf00      	nop
 80032a4:	cfff69f3 	.word	0xcfff69f3
 80032a8:	40008000 	.word	0x40008000
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40004400 	.word	0x40004400
 80032b4:	00f42400 	.word	0x00f42400
 80032b8:	08004d1c 	.word	0x08004d1c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	2200      	movs	r2, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	60fa      	str	r2, [r7, #12]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	4a8e      	ldr	r2, [pc, #568]	; (8003504 <UART_SetConfig+0x4e0>)
 80032ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032de:	f7fc ff4b 	bl	8000178 <__aeabi_uldivmod>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	020b      	lsls	r3, r1, #8
 80032f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032f8:	0202      	lsls	r2, r0, #8
 80032fa:	6979      	ldr	r1, [r7, #20]
 80032fc:	6849      	ldr	r1, [r1, #4]
 80032fe:	0849      	lsrs	r1, r1, #1
 8003300:	2000      	movs	r0, #0
 8003302:	460c      	mov	r4, r1
 8003304:	4605      	mov	r5, r0
 8003306:	eb12 0804 	adds.w	r8, r2, r4
 800330a:	eb43 0905 	adc.w	r9, r3, r5
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	469a      	mov	sl, r3
 8003316:	4693      	mov	fp, r2
 8003318:	4652      	mov	r2, sl
 800331a:	465b      	mov	r3, fp
 800331c:	4640      	mov	r0, r8
 800331e:	4649      	mov	r1, r9
 8003320:	f7fc ff2a 	bl	8000178 <__aeabi_uldivmod>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4613      	mov	r3, r2
 800332a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003332:	d308      	bcc.n	8003346 <UART_SetConfig+0x322>
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333a:	d204      	bcs.n	8003346 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a3a      	ldr	r2, [r7, #32]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	e0c8      	b.n	80034d8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800334c:	e0c4      	b.n	80034d8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003356:	d167      	bne.n	8003428 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003358:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800335c:	2b08      	cmp	r3, #8
 800335e:	d828      	bhi.n	80033b2 <UART_SetConfig+0x38e>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <UART_SetConfig+0x344>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	0800338d 	.word	0x0800338d
 800336c:	08003395 	.word	0x08003395
 8003370:	0800339d 	.word	0x0800339d
 8003374:	080033b3 	.word	0x080033b3
 8003378:	080033a3 	.word	0x080033a3
 800337c:	080033b3 	.word	0x080033b3
 8003380:	080033b3 	.word	0x080033b3
 8003384:	080033b3 	.word	0x080033b3
 8003388:	080033ab 	.word	0x080033ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7fe fee4 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8003390:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003392:	e014      	b.n	80033be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003394:	f7fe fef2 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8003398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800339a:	e010      	b.n	80033be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800339c:	4b5a      	ldr	r3, [pc, #360]	; (8003508 <UART_SetConfig+0x4e4>)
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033a0:	e00d      	b.n	80033be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a2:	f7fe fe25 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 80033a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033a8:	e009      	b.n	80033be <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033b0:	e005      	b.n	80033be <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 8089 	beq.w	80034d8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	4a4e      	ldr	r2, [pc, #312]	; (8003504 <UART_SetConfig+0x4e0>)
 80033cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d0:	461a      	mov	r2, r3
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	441a      	add	r2, r3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d916      	bls.n	8003420 <UART_SetConfig+0x3fc>
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f8:	d212      	bcs.n	8003420 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f023 030f 	bic.w	r3, r3, #15
 8003402:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	085b      	lsrs	r3, r3, #1
 8003408:	b29b      	uxth	r3, r3
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	b29a      	uxth	r2, r3
 8003410:	8bfb      	ldrh	r3, [r7, #30]
 8003412:	4313      	orrs	r3, r2
 8003414:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	8bfa      	ldrh	r2, [r7, #30]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	e05b      	b.n	80034d8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003426:	e057      	b.n	80034d8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003428:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800342c:	2b08      	cmp	r3, #8
 800342e:	d828      	bhi.n	8003482 <UART_SetConfig+0x45e>
 8003430:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <UART_SetConfig+0x414>)
 8003432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003436:	bf00      	nop
 8003438:	0800345d 	.word	0x0800345d
 800343c:	08003465 	.word	0x08003465
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003483 	.word	0x08003483
 8003448:	08003473 	.word	0x08003473
 800344c:	08003483 	.word	0x08003483
 8003450:	08003483 	.word	0x08003483
 8003454:	08003483 	.word	0x08003483
 8003458:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7fe fe7c 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8003460:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003462:	e014      	b.n	800348e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7fe fe8a 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8003468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800346a:	e010      	b.n	800348e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800346c:	4b26      	ldr	r3, [pc, #152]	; (8003508 <UART_SetConfig+0x4e4>)
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7fe fdbd 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8003476:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003478:	e009      	b.n	800348e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003480:	e005      	b.n	800348e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800348c:	bf00      	nop
    }

    if (pclk != 0U)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d021      	beq.n	80034d8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	4a1a      	ldr	r2, [pc, #104]	; (8003504 <UART_SetConfig+0x4e0>)
 800349a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800349e:	461a      	mov	r2, r3
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	441a      	add	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	d909      	bls.n	80034d2 <UART_SetConfig+0x4ae>
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c4:	d205      	bcs.n	80034d2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60da      	str	r2, [r3, #12]
 80034d0:	e002      	b.n	80034d8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2201      	movs	r2, #1
 80034dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	2200      	movs	r2, #0
 80034f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80034f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3730      	adds	r7, #48	; 0x30
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	08004d1c 	.word	0x08004d1c
 8003508:	00f42400 	.word	0x00f42400

0800350c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00a      	beq.n	800357a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01a      	beq.n	8003622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800360a:	d10a      	bne.n	8003622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af02      	add	r7, sp, #8
 8003654:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800365e:	f7fd f9e7 	bl	8000a30 <HAL_GetTick>
 8003662:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	d10e      	bne.n	8003690 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f832 	bl	80036ea <UART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e028      	b.n	80036e2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d10e      	bne.n	80036bc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800369e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f81c 	bl	80036ea <UART_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e012      	b.n	80036e2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2220      	movs	r2, #32
 80036c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b09c      	sub	sp, #112	; 0x70
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	4613      	mov	r3, r2
 80036f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	e0a9      	b.n	8003850 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003702:	f000 80a5 	beq.w	8003850 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003706:	f7fd f993 	bl	8000a30 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003712:	429a      	cmp	r2, r3
 8003714:	d302      	bcc.n	800371c <UART_WaitOnFlagUntilTimeout+0x32>
 8003716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003718:	2b00      	cmp	r3, #0
 800371a:	d140      	bne.n	800379e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800372a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003730:	667b      	str	r3, [r7, #100]	; 0x64
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	461a      	mov	r2, r3
 8003738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800373a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800373c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003740:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1e6      	bne.n	800371c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3308      	adds	r3, #8
 8003754:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	663b      	str	r3, [r7, #96]	; 0x60
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3308      	adds	r3, #8
 800376c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800376e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003770:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003772:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003776:	e841 2300 	strex	r3, r2, [r1]
 800377a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800377c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1e5      	bne.n	800374e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e069      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d051      	beq.n	8003850 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ba:	d149      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
 80037e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e6      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	613b      	str	r3, [r7, #16]
   return(result);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3308      	adds	r3, #8
 8003816:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003818:	623a      	str	r2, [r7, #32]
 800381a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	6a3a      	ldr	r2, [r7, #32]
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	61bb      	str	r3, [r7, #24]
   return(result);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e010      	b.n	8003872 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4013      	ands	r3, r2
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	429a      	cmp	r2, r3
 800386c:	f43f af46 	beq.w	80036fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3770      	adds	r7, #112	; 0x70
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800387c:	b480      	push	{r7}
 800387e:	b0a3      	sub	sp, #140	; 0x8c
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ae:	d10e      	bne.n	80038ce <UART_Start_Receive_IT+0x52>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <UART_Start_Receive_IT+0x48>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80038be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038c2:	e02d      	b.n	8003920 <UART_Start_Receive_IT+0xa4>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038cc:	e028      	b.n	8003920 <UART_Start_Receive_IT+0xa4>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10d      	bne.n	80038f2 <UART_Start_Receive_IT+0x76>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <UART_Start_Receive_IT+0x6c>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038e6:	e01b      	b.n	8003920 <UART_Start_Receive_IT+0xa4>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	227f      	movs	r2, #127	; 0x7f
 80038ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80038f0:	e016      	b.n	8003920 <UART_Start_Receive_IT+0xa4>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fa:	d10d      	bne.n	8003918 <UART_Start_Receive_IT+0x9c>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <UART_Start_Receive_IT+0x92>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	227f      	movs	r2, #127	; 0x7f
 8003908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800390c:	e008      	b.n	8003920 <UART_Start_Receive_IT+0xa4>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	223f      	movs	r2, #63	; 0x3f
 8003912:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003916:	e003      	b.n	8003920 <UART_Start_Receive_IT+0xa4>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2222      	movs	r2, #34	; 0x22
 800392c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003954:	673a      	str	r2, [r7, #112]	; 0x70
 8003956:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003958:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800395a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800395c:	e841 2300 	strex	r3, r2, [r1]
 8003960:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1e3      	bne.n	8003930 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800396c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003970:	d14f      	bne.n	8003a12 <UART_Start_Receive_IT+0x196>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003978:	88fa      	ldrh	r2, [r7, #6]
 800397a:	429a      	cmp	r2, r3
 800397c:	d349      	bcc.n	8003a12 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003986:	d107      	bne.n	8003998 <UART_Start_Receive_IT+0x11c>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d103      	bne.n	8003998 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4a46      	ldr	r2, [pc, #280]	; (8003aac <UART_Start_Receive_IT+0x230>)
 8003994:	675a      	str	r2, [r3, #116]	; 0x74
 8003996:	e002      	b.n	800399e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a45      	ldr	r2, [pc, #276]	; (8003ab0 <UART_Start_Receive_IT+0x234>)
 800399c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01a      	beq.n	80039dc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ca:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e4      	bne.n	80039a6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3308      	adds	r3, #8
 80039fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80039fc:	64ba      	str	r2, [r7, #72]	; 0x48
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e5      	bne.n	80039dc <UART_Start_Receive_IT+0x160>
 8003a10:	e046      	b.n	8003aa0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1a:	d107      	bne.n	8003a2c <UART_Start_Receive_IT+0x1b0>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <UART_Start_Receive_IT+0x238>)
 8003a28:	675a      	str	r2, [r3, #116]	; 0x74
 8003a2a:	e002      	b.n	8003a32 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <UART_Start_Receive_IT+0x23c>)
 8003a30:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d019      	beq.n	8003a6e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e6      	bne.n	8003a3a <UART_Start_Receive_IT+0x1be>
 8003a6c:	e018      	b.n	8003aa0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f043 0320 	orr.w	r3, r3, #32
 8003a82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	461a      	mov	r2, r3
 8003a8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a8c:	623b      	str	r3, [r7, #32]
 8003a8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	69f9      	ldr	r1, [r7, #28]
 8003a92:	6a3a      	ldr	r2, [r7, #32]
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e6      	bne.n	8003a6e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	378c      	adds	r7, #140	; 0x8c
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	08004615 	.word	0x08004615
 8003ab0:	080042b5 	.word	0x080042b5
 8003ab4:	080040fd 	.word	0x080040fd
 8003ab8:	08003f45 	.word	0x08003f45

08003abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b095      	sub	sp, #84	; 0x54
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ae4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ae8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aea:	e841 2300 	strex	r3, r2, [r1]
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1e6      	bne.n	8003ac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3308      	adds	r3, #8
 8003afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	f023 0301 	bic.w	r3, r3, #1
 8003b10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3308      	adds	r3, #8
 8003b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e3      	bne.n	8003af6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d118      	bne.n	8003b68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 0310 	bic.w	r3, r3, #16
 8003b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6979      	ldr	r1, [r7, #20]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	613b      	str	r3, [r7, #16]
   return(result);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003b7c:	bf00      	nop
 8003b7e:	3754      	adds	r7, #84	; 0x54
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7fc fcb8 	bl	800051a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b08f      	sub	sp, #60	; 0x3c
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	2b21      	cmp	r3, #33	; 0x21
 8003bc2:	d14c      	bne.n	8003c5e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d132      	bne.n	8003c36 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	e853 3f00 	ldrex	r3, [r3]
 8003bdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e6      	bne.n	8003bd0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c16:	633b      	str	r3, [r7, #48]	; 0x30
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e6      	bne.n	8003c02 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c34:	e013      	b.n	8003c5e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003c5e:	bf00      	nop
 8003c60:	373c      	adds	r7, #60	; 0x3c
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b091      	sub	sp, #68	; 0x44
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	2b21      	cmp	r3, #33	; 0x21
 8003c78:	d151      	bne.n	8003d1e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d132      	bne.n	8003cec <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	e853 3f00 	ldrex	r3, [r3]
 8003c92:	623b      	str	r3, [r7, #32]
   return(result);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e6      	bne.n	8003c86 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	69b9      	ldr	r1, [r7, #24]
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003cea:	e018      	b.n	8003d1e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d00:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003d1e:	bf00      	nop
 8003d20:	3744      	adds	r7, #68	; 0x44
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b091      	sub	sp, #68	; 0x44
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	2b21      	cmp	r3, #33	; 0x21
 8003d38:	d160      	bne.n	8003dfc <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003d40:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003d42:	e057      	b.n	8003df4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d133      	bne.n	8003db8 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3308      	adds	r3, #8
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3308      	adds	r3, #8
 8003d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d70:	633a      	str	r2, [r7, #48]	; 0x30
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e5      	bne.n	8003d50 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	69b9      	ldr	r1, [r7, #24]
 8003da8:	69fa      	ldr	r2, [r7, #28]
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	617b      	str	r3, [r7, #20]
   return(result);
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e6      	bne.n	8003d84 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003db6:	e021      	b.n	8003dfc <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d013      	beq.n	8003dee <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	781a      	ldrb	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003dee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003df0:	3b01      	subs	r3, #1
 8003df2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003df4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1a4      	bne.n	8003d44 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003dfa:	e7ff      	b.n	8003dfc <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003dfc:	bf00      	nop
 8003dfe:	3744      	adds	r7, #68	; 0x44
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b091      	sub	sp, #68	; 0x44
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	2b21      	cmp	r3, #33	; 0x21
 8003e16:	d165      	bne.n	8003ee4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003e1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003e20:	e05c      	b.n	8003edc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d133      	bne.n	8003e96 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3308      	adds	r3, #8
 8003e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e76:	633b      	str	r3, [r7, #48]	; 0x30
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	61bb      	str	r3, [r7, #24]
 8003e82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6979      	ldr	r1, [r7, #20]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e6      	bne.n	8003e62 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003e94:	e026      	b.n	8003ee4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d018      	beq.n	8003ed6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebe:	1c9a      	adds	r2, r3, #2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ed6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003edc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d19f      	bne.n	8003e22 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003ee2:	e7ff      	b.n	8003ee4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003ee4:	bf00      	nop
 8003ee6:	3744      	adds	r7, #68	; 0x44
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr

08003eee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b088      	sub	sp, #32
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6979      	ldr	r1, [r7, #20]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	613b      	str	r3, [r7, #16]
   return(result);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e6      	bne.n	8003ef6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fc faf8 	bl	800052c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f3c:	bf00      	nop
 8003f3e:	3720      	adds	r7, #32
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b09c      	sub	sp, #112	; 0x70
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003f52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f5c:	2b22      	cmp	r3, #34	; 0x22
 8003f5e:	f040 80be 	bne.w	80040de <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f70:	b2d9      	uxtb	r1, r3
 8003f72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	400a      	ands	r2, r1
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 80a1 	bne.w	80040ee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fca:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fcc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e6      	bne.n	8003fac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ffe:	647a      	str	r2, [r7, #68]	; 0x44
 8004000:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e5      	bne.n	8003fde <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a33      	ldr	r2, [pc, #204]	; (80040f8 <UART_RxISR_8BIT+0x1b4>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d01f      	beq.n	8004070 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	623b      	str	r3, [r7, #32]
   return(result);
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004052:	663b      	str	r3, [r7, #96]	; 0x60
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800405c:	633b      	str	r3, [r7, #48]	; 0x30
 800405e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004064:	e841 2300 	strex	r3, r2, [r1]
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1e6      	bne.n	800403e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d12e      	bne.n	80040d6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	60fb      	str	r3, [r7, #12]
   return(result);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0310 	bic.w	r3, r3, #16
 8004092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800409c:	61fb      	str	r3, [r7, #28]
 800409e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	69b9      	ldr	r1, [r7, #24]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	617b      	str	r3, [r7, #20]
   return(result);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e6      	bne.n	800407e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b10      	cmp	r3, #16
 80040bc:	d103      	bne.n	80040c6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2210      	movs	r2, #16
 80040c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040cc:	4619      	mov	r1, r3
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fe ff9c 	bl	800300c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040d4:	e00b      	b.n	80040ee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fc fa31 	bl	800053e <HAL_UART_RxCpltCallback>
}
 80040dc:	e007      	b.n	80040ee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0208 	orr.w	r2, r2, #8
 80040ec:	619a      	str	r2, [r3, #24]
}
 80040ee:	bf00      	nop
 80040f0:	3770      	adds	r7, #112	; 0x70
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40008000 	.word	0x40008000

080040fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b09c      	sub	sp, #112	; 0x70
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800410a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004114:	2b22      	cmp	r3, #34	; 0x22
 8004116:	f040 80be 	bne.w	8004296 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800412a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800412e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004132:	4013      	ands	r3, r2
 8004134:	b29a      	uxth	r2, r3
 8004136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004138:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413e:	1c9a      	adds	r2, r3, #2
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 80a1 	bne.w	80042a6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416c:	e853 3f00 	ldrex	r3, [r3]
 8004170:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004178:	667b      	str	r3, [r7, #100]	; 0x64
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	461a      	mov	r2, r3
 8004180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004182:	657b      	str	r3, [r7, #84]	; 0x54
 8004184:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e6      	bne.n	8004164 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3308      	adds	r3, #8
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	663b      	str	r3, [r7, #96]	; 0x60
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3308      	adds	r3, #8
 80041b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041b6:	643a      	str	r2, [r7, #64]	; 0x40
 80041b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e5      	bne.n	8004196 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a33      	ldr	r2, [pc, #204]	; (80042b0 <UART_RxISR_16BIT+0x1b4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d01f      	beq.n	8004228 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d018      	beq.n	8004228 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	61fb      	str	r3, [r7, #28]
   return(result);
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800420a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004216:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e6      	bne.n	80041f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d12e      	bne.n	800428e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	60bb      	str	r3, [r7, #8]
   return(result);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f023 0310 	bic.w	r3, r3, #16
 800424a:	65bb      	str	r3, [r7, #88]	; 0x58
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6979      	ldr	r1, [r7, #20]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	613b      	str	r3, [r7, #16]
   return(result);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e6      	bne.n	8004236 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b10      	cmp	r3, #16
 8004274:	d103      	bne.n	800427e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fe fec0 	bl	800300c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800428c:	e00b      	b.n	80042a6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc f955 	bl	800053e <HAL_UART_RxCpltCallback>
}
 8004294:	e007      	b.n	80042a6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0208 	orr.w	r2, r2, #8
 80042a4:	619a      	str	r2, [r3, #24]
}
 80042a6:	bf00      	nop
 80042a8:	3770      	adds	r7, #112	; 0x70
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40008000 	.word	0x40008000

080042b4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b0ac      	sub	sp, #176	; 0xb0
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80042c2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ea:	2b22      	cmp	r3, #34	; 0x22
 80042ec:	f040 8182 	bne.w	80045f4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80042f6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80042fa:	e125      	b.n	8004548 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004306:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800430a:	b2d9      	uxtb	r1, r3
 800430c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004310:	b2da      	uxtb	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	400a      	ands	r2, r1
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800432c:	b29b      	uxth	r3, r3
 800432e:	3b01      	subs	r3, #1
 8004330:	b29a      	uxth	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	2b00      	cmp	r3, #0
 800434c:	d053      	beq.n	80043f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800434e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d011      	beq.n	800437e <UART_RxISR_8BIT_FIFOEN+0xca>
 800435a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800435e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2201      	movs	r2, #1
 800436c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800437e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d011      	beq.n	80043ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800438a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2202      	movs	r2, #2
 800439c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a4:	f043 0204 	orr.w	r2, r3, #4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d011      	beq.n	80043de <UART_RxISR_8BIT_FIFOEN+0x12a>
 80043ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00b      	beq.n	80043de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2204      	movs	r2, #4
 80043cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f043 0202 	orr.w	r2, r3, #2
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d006      	beq.n	80043f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7fc f896 	bl	800051a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 80a2 	bne.w	8004548 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800440c:	e853 3f00 	ldrex	r3, [r3]
 8004410:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004426:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004428:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800442c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e4      	bne.n	8004404 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	e853 3f00 	ldrex	r3, [r3]
 8004448:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800444a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800444c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004462:	66ba      	str	r2, [r7, #104]	; 0x68
 8004464:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004468:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800446a:	e841 2300 	strex	r3, r2, [r1]
 800446e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1e1      	bne.n	800443a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a5f      	ldr	r2, [pc, #380]	; (800460c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d021      	beq.n	80044d8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01a      	beq.n	80044d8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044c4:	657b      	str	r3, [r7, #84]	; 0x54
 80044c6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e4      	bne.n	80044a2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d130      	bne.n	8004542 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	f023 0310 	bic.w	r3, r3, #16
 80044fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004508:	643b      	str	r3, [r7, #64]	; 0x40
 800450a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800450e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e4      	bne.n	80044e6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b10      	cmp	r3, #16
 8004528:	d103      	bne.n	8004532 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2210      	movs	r2, #16
 8004530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fe fd66 	bl	800300c <HAL_UARTEx_RxEventCallback>
 8004540:	e002      	b.n	8004548 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fb fffb 	bl	800053e <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004548:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	f47f aecf 	bne.w	80042fc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004564:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004568:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800456c:	2b00      	cmp	r3, #0
 800456e:	d049      	beq.n	8004604 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004576:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800457a:	429a      	cmp	r2, r3
 800457c:	d242      	bcs.n	8004604 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3308      	adds	r3, #8
 8004584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	61fb      	str	r3, [r7, #28]
   return(result);
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3308      	adds	r3, #8
 800459e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80045a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e3      	bne.n	800457e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a15      	ldr	r2, [pc, #84]	; (8004610 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80045ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f043 0320 	orr.w	r3, r3, #32
 80045d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6979      	ldr	r1, [r7, #20]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	613b      	str	r3, [r7, #16]
   return(result);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e4      	bne.n	80045bc <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045f2:	e007      	b.n	8004604 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0208 	orr.w	r2, r2, #8
 8004602:	619a      	str	r2, [r3, #24]
}
 8004604:	bf00      	nop
 8004606:	37b0      	adds	r7, #176	; 0xb0
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40008000 	.word	0x40008000
 8004610:	08003f45 	.word	0x08003f45

08004614 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b0ae      	sub	sp, #184	; 0xb8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004622:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464a:	2b22      	cmp	r3, #34	; 0x22
 800464c:	f040 8186 	bne.w	800495c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004656:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800465a:	e129      	b.n	80048b0 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800466e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004672:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004676:	4013      	ands	r3, r2
 8004678:	b29a      	uxth	r2, r3
 800467a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800467e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	1c9a      	adds	r2, r3, #2
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80046a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d053      	beq.n	800475a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d011      	beq.n	80046e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80046be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00b      	beq.n	80046e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2201      	movs	r2, #1
 80046d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d011      	beq.n	8004712 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80046ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2202      	movs	r2, #2
 8004700:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800471e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2204      	movs	r2, #4
 8004730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f043 0202 	orr.w	r2, r3, #2
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004748:	2b00      	cmp	r3, #0
 800474a:	d006      	beq.n	800475a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fb fee4 	bl	800051a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	f040 80a4 	bne.w	80048b0 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800477c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800478a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800478e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004792:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004796:	e841 2300 	strex	r3, r2, [r1]
 800479a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800479c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1e2      	bne.n	8004768 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3308      	adds	r3, #8
 80047c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80047ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e1      	bne.n	80047a2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5f      	ldr	r2, [pc, #380]	; (8004974 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d021      	beq.n	8004840 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01a      	beq.n	8004840 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800481e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800482c:	65bb      	str	r3, [r7, #88]	; 0x58
 800482e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004832:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800483a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e4      	bne.n	800480a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004844:	2b01      	cmp	r3, #1
 8004846:	d130      	bne.n	80048aa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	f023 0310 	bic.w	r3, r3, #16
 8004862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004870:	647b      	str	r3, [r7, #68]	; 0x44
 8004872:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004878:	e841 2300 	strex	r3, r2, [r1]
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800487e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1e4      	bne.n	800484e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b10      	cmp	r3, #16
 8004890:	d103      	bne.n	800489a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2210      	movs	r2, #16
 8004898:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe fbb2 	bl	800300c <HAL_UARTEx_RxEventCallback>
 80048a8:	e002      	b.n	80048b0 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fb fe47 	bl	800053e <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80048b0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d006      	beq.n	80048c6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80048b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f aecb 	bne.w	800465c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048cc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80048d0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d049      	beq.n	800496c <UART_RxISR_16BIT_FIFOEN+0x358>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80048de:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d242      	bcs.n	800496c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3308      	adds	r3, #8
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	623b      	str	r3, [r7, #32]
   return(result);
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3308      	adds	r3, #8
 8004906:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800490a:	633a      	str	r2, [r7, #48]	; 0x30
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e3      	bne.n	80048e6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a15      	ldr	r2, [pc, #84]	; (8004978 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004922:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	60fb      	str	r3, [r7, #12]
   return(result);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f043 0320 	orr.w	r3, r3, #32
 8004938:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004946:	61fb      	str	r3, [r7, #28]
 8004948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	e841 2300 	strex	r3, r2, [r1]
 8004952:	617b      	str	r3, [r7, #20]
   return(result);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1e4      	bne.n	8004924 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800495a:	e007      	b.n	800496c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699a      	ldr	r2, [r3, #24]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0208 	orr.w	r2, r2, #8
 800496a:	619a      	str	r2, [r3, #24]
}
 800496c:	bf00      	nop
 800496e:	37b8      	adds	r7, #184	; 0xb8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40008000 	.word	0x40008000
 8004978:	080040fd 	.word	0x080040fd

0800497c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e027      	b.n	8004a18 <HAL_UARTEx_DisableFifoMode+0x66>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2224      	movs	r2, #36	; 0x24
 80049d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e02d      	b.n	8004a96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2224      	movs	r2, #36	; 0x24
 8004a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f850 	bl	8004b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e02d      	b.n	8004b12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2224      	movs	r2, #36	; 0x24
 8004ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f812 	bl	8004b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d108      	bne.n	8004b3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b3c:	e031      	b.n	8004ba2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b3e:	2308      	movs	r3, #8
 8004b40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b42:	2308      	movs	r3, #8
 8004b44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	0e5b      	lsrs	r3, r3, #25
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	0f5b      	lsrs	r3, r3, #29
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b66:	7bbb      	ldrb	r3, [r7, #14]
 8004b68:	7b3a      	ldrb	r2, [r7, #12]
 8004b6a:	4910      	ldr	r1, [pc, #64]	; (8004bac <UARTEx_SetNbDataToProcess+0x90>)
 8004b6c:	5c8a      	ldrb	r2, [r1, r2]
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b72:	7b3a      	ldrb	r2, [r7, #12]
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004b76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	7b7a      	ldrb	r2, [r7, #13]
 8004b88:	4908      	ldr	r1, [pc, #32]	; (8004bac <UARTEx_SetNbDataToProcess+0x90>)
 8004b8a:	5c8a      	ldrb	r2, [r1, r2]
 8004b8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b90:	7b7a      	ldrb	r2, [r7, #13]
 8004b92:	4907      	ldr	r1, [pc, #28]	; (8004bb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004b94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	08004d34 	.word	0x08004d34
 8004bb0:	08004d3c 	.word	0x08004d3c

08004bb4 <__libc_init_array>:
 8004bb4:	b570      	push	{r4, r5, r6, lr}
 8004bb6:	4d0d      	ldr	r5, [pc, #52]	; (8004bec <__libc_init_array+0x38>)
 8004bb8:	4c0d      	ldr	r4, [pc, #52]	; (8004bf0 <__libc_init_array+0x3c>)
 8004bba:	1b64      	subs	r4, r4, r5
 8004bbc:	10a4      	asrs	r4, r4, #2
 8004bbe:	2600      	movs	r6, #0
 8004bc0:	42a6      	cmp	r6, r4
 8004bc2:	d109      	bne.n	8004bd8 <__libc_init_array+0x24>
 8004bc4:	4d0b      	ldr	r5, [pc, #44]	; (8004bf4 <__libc_init_array+0x40>)
 8004bc6:	4c0c      	ldr	r4, [pc, #48]	; (8004bf8 <__libc_init_array+0x44>)
 8004bc8:	f000 f834 	bl	8004c34 <_init>
 8004bcc:	1b64      	subs	r4, r4, r5
 8004bce:	10a4      	asrs	r4, r4, #2
 8004bd0:	2600      	movs	r6, #0
 8004bd2:	42a6      	cmp	r6, r4
 8004bd4:	d105      	bne.n	8004be2 <__libc_init_array+0x2e>
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bdc:	4798      	blx	r3
 8004bde:	3601      	adds	r6, #1
 8004be0:	e7ee      	b.n	8004bc0 <__libc_init_array+0xc>
 8004be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be6:	4798      	blx	r3
 8004be8:	3601      	adds	r6, #1
 8004bea:	e7f2      	b.n	8004bd2 <__libc_init_array+0x1e>
 8004bec:	08004d4c 	.word	0x08004d4c
 8004bf0:	08004d4c 	.word	0x08004d4c
 8004bf4:	08004d4c 	.word	0x08004d4c
 8004bf8:	08004d50 	.word	0x08004d50

08004bfc <memset>:
 8004bfc:	4402      	add	r2, r0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d100      	bne.n	8004c06 <memset+0xa>
 8004c04:	4770      	bx	lr
 8004c06:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0a:	e7f9      	b.n	8004c00 <memset+0x4>

08004c0c <strncpy>:
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	3901      	subs	r1, #1
 8004c10:	4603      	mov	r3, r0
 8004c12:	b132      	cbz	r2, 8004c22 <strncpy+0x16>
 8004c14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004c18:	f803 4b01 	strb.w	r4, [r3], #1
 8004c1c:	3a01      	subs	r2, #1
 8004c1e:	2c00      	cmp	r4, #0
 8004c20:	d1f7      	bne.n	8004c12 <strncpy+0x6>
 8004c22:	441a      	add	r2, r3
 8004c24:	2100      	movs	r1, #0
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d100      	bne.n	8004c2c <strncpy+0x20>
 8004c2a:	bd10      	pop	{r4, pc}
 8004c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8004c30:	e7f9      	b.n	8004c26 <strncpy+0x1a>
	...

08004c34 <_init>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr

08004c40 <_fini>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr

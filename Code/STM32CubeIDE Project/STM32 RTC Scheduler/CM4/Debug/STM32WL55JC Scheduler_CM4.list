
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006410  08006410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800655c  0800655c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800655c  0800655c  0001655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006564  08006564  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006564  08006564  00016564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006568  08006568  00016568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800656c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  080065dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080065dc  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001342a  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be5  00000000  00000000  000334c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000360b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  000372a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7a1  00000000  00000000  00038378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001278c  00000000  00000000  00055b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7131  00000000  00000000  000682a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f3d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d2c  00000000  00000000  0011f428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	080063f8 	.word	0x080063f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	080063f8 	.word	0x080063f8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <calendar_init+0x18>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	2000008c 	.word	0x2000008c

0800054c <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
 8000552:	463b      	mov	r3, r7
 8000554:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 8000558:	7838      	ldrb	r0, [r7, #0]
 800055a:	7879      	ldrb	r1, [r7, #1]
 800055c:	78bc      	ldrb	r4, [r7, #2]
 800055e:	78fd      	ldrb	r5, [r7, #3]
 8000560:	793b      	ldrb	r3, [r7, #4]
 8000562:	797a      	ldrb	r2, [r7, #5]
 8000564:	9201      	str	r2, [sp, #4]
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	462b      	mov	r3, r5
 800056a:	4622      	mov	r2, r4
 800056c:	f000 fa7c 	bl	8000a68 <setDateTime>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bdb0      	pop	{r4, r5, r7, pc}

08000578 <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
 800057e:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	1c59      	adds	r1, r3, #1
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c9c      	adds	r4, r3, #2
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1cdd      	adds	r5, r3, #3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3304      	adds	r3, #4
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	3205      	adds	r2, #5
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	462b      	mov	r3, r5
 800059c:	4622      	mov	r2, r4
 800059e:	f000 faa5 	bl	8000aec <getDateTime>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bdb0      	pop	{r4, r5, r7, pc}

080005aa <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ba:	f023 0218 	bic.w	r2, r3, #24
 80005be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4013      	ands	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f8:	68fb      	ldr	r3, [r7, #12]
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_UART_ErrorCallback+0x28>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d006      	beq.n	8000624 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_UART_ErrorCallback+0x2c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d101      	bne.n	8000624 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000620:	f000 fc58 	bl	8000ed4 <uartBasic_Error_ISR>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40013800 	.word	0x40013800
 8000630:	40004400 	.word	0x40004400

08000634 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_UART_TxCpltCallback+0x28>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d006      	beq.n	8000654 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <HAL_UART_TxCpltCallback+0x2c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d101      	bne.n	8000654 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 8000650:	f000 fc34 	bl	8000ebc <uartBasic_TX_Complete_ISR>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40013800 	.word	0x40013800
 8000660:	40004400 	.word	0x40004400

08000664 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_UART_RxCpltCallback+0x28>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d006      	beq.n	8000684 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <HAL_UART_RxCpltCallback+0x2c>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d101      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000680:	f000 fc10 	bl	8000ea4 <uartBasic_RX_Complete_ISR>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40013800 	.word	0x40013800
 8000690:	40004400 	.word	0x40004400

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b095      	sub	sp, #84	; 0x54
 8000698:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fca5 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f887 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f9cf 	bl	8000a44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a6:	f000 f977 	bl	8000998 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80006aa:	f000 f8df 	bl	800086c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f001 f860 	bl	8001774 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 80006b4:	4838      	ldr	r0, [pc, #224]	; (8000798 <main+0x104>)
 80006b6:	f000 fb87 	bl	8000dc8 <uartBasic_init>

  // set calendar time
  DateTime now = {
 80006ba:	4a38      	ldr	r2, [pc, #224]	; (800079c <main+0x108>)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	8019      	strh	r1, [r3, #0]
		  .day = 7,
		  .hour = 13,
		  .minute = 45,
		  .second = 0
  };
  calendar_setDateTime(now);
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006d2:	f7ff ff3b 	bl	800054c <calendar_setDateTime>

  // initialize calendar
  calendar_init(&hrtc);
 80006d6:	4832      	ldr	r0, [pc, #200]	; (80007a0 <main+0x10c>)
 80006d8:	f7ff ff2a 	bl	8000530 <calendar_init>

  // set some events


  // begin listening for messages from desktop
  uartBasic_RX_IT();
 80006dc:	f000 fba4 	bl	8000e28 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  int timeSeconds = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  int timeMinutes = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 80006ec:	463a      	mov	r2, r7
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fbab 	bl	8000e50 <uartBasic_get_RX>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  // if message present, handle message
	  if (messageStatus == true) {
 8000700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <main+0x8c>
		  // echo back to computer
		  uartBasic_TX_IT(messageHeader, messageBody);
 8000708:	463a      	mov	r2, r7
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fb67 	bl	8000de4 <uartBasic_TX_IT>
		  messageCount++;
 8000716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000718:	3301      	adds	r3, #1
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
		  uartBasic_RX_IT();
 800071c:	f000 fb84 	bl	8000e28 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff27 	bl	8000578 <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 800072a:	463b      	mov	r3, r7
 800072c:	221c      	movs	r2, #28
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f005 f9e7 	bl	8005b04 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d:%02d:%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000736:	f897 3020 	ldrb.w	r3, [r7, #32]
 800073a:	461e      	mov	r6, r3
 800073c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000740:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000744:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000748:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800074c:	4604      	mov	r4, r0
 800074e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8000752:	4605      	mov	r5, r0
 8000754:	4638      	mov	r0, r7
 8000756:	9504      	str	r5, [sp, #16]
 8000758:	9403      	str	r4, [sp, #12]
 800075a:	9102      	str	r1, [sp, #8]
 800075c:	9201      	str	r2, [sp, #4]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	4633      	mov	r3, r6
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <main+0x110>)
 8000764:	211c      	movs	r1, #28
 8000766:	f005 f9d5 	bl	8005b14 <sniprintf>
	  uartBasic_TX_IT("TIME", messageBody);
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <main+0x114>)
 8000770:	f000 fb38 	bl	8000de4 <uartBasic_TX_IT>
	  timeSeconds++;
 8000774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000776:	3301      	adds	r3, #1
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
	  timeMinutes++;
 800077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077c:	3301      	adds	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  long int i = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
	  while (i < 65535*2)
 8000784:	e002      	b.n	800078c <main+0xf8>
		  i++;
 8000786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000788:	3301      	adds	r3, #1
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
	  while (i < 65535*2)
 800078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <main+0x118>)
 8000790:	4293      	cmp	r3, r2
 8000792:	ddf8      	ble.n	8000786 <main+0xf2>
  {
 8000794:	e7aa      	b.n	80006ec <main+0x58>
 8000796:	bf00      	nop
 8000798:	200000c8 	.word	0x200000c8
 800079c:	0800643c 	.word	0x0800643c
 80007a0:	20000090 	.word	0x20000090
 80007a4:	08006410 	.word	0x08006410
 80007a8:	08006434 	.word	0x08006434
 80007ac:	0001fffd 	.word	0x0001fffd

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09a      	sub	sp, #104	; 0x68
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2248      	movs	r2, #72	; 0x48
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 f9a0 	bl	8005b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d6:	f000 ffa5 	bl	8001724 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fee5 	bl	80005aa <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <SystemClock_Config+0xb8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007e8:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <SystemClock_Config+0xb8>)
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <SystemClock_Config+0xb8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007fc:	232c      	movs	r3, #44	; 0x2c
 80007fe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000800:	2381      	movs	r3, #129	; 0x81
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000808:	2300      	movs	r3, #0
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fa69 	bl	8001cf8 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800082c:	f000 f917 	bl	8000a5e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000830:	236f      	movs	r3, #111	; 0x6f
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fdd3 	bl	80023fc <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800085c:	f000 f8ff 	bl	8000a5e <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3768      	adds	r7, #104	; 0x68
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58000400 	.word	0x58000400

0800086c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b092      	sub	sp, #72	; 0x48
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000882:	2300      	movs	r3, #0
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	222c      	movs	r2, #44	; 0x2c
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f005 f939 	bl	8005b04 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000892:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <MX_RTC_Init+0x124>)
 8000894:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <MX_RTC_Init+0x128>)
 8000896:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000898:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <MX_RTC_Init+0x124>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800089e:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <MX_RTC_Init+0x124>)
 80008a0:	227f      	movs	r2, #127	; 0x7f
 80008a2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a4:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <MX_RTC_Init+0x124>)
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <MX_RTC_Init+0x124>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008b0:	4b37      	ldr	r3, [pc, #220]	; (8000990 <MX_RTC_Init+0x124>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008b6:	4b36      	ldr	r3, [pc, #216]	; (8000990 <MX_RTC_Init+0x124>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <MX_RTC_Init+0x124>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008c4:	4b32      	ldr	r3, [pc, #200]	; (8000990 <MX_RTC_Init+0x124>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_RTC_Init+0x124>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008d0:	482f      	ldr	r0, [pc, #188]	; (8000990 <MX_RTC_Init+0x124>)
 80008d2:	f002 fa6d 	bl	8002db0 <HAL_RTC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80008dc:	f000 f8bf 	bl	8000a5e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008fe:	2201      	movs	r2, #1
 8000900:	4619      	mov	r1, r3
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <MX_RTC_Init+0x124>)
 8000904:	f002 fad6 	bl	8002eb4 <HAL_RTC_SetTime>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800090e:	f000 f8a6 	bl	8000a5e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000912:	2301      	movs	r3, #1
 8000914:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800091e:	2301      	movs	r3, #1
 8000920:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800092a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092e:	2201      	movs	r2, #1
 8000930:	4619      	mov	r1, r3
 8000932:	4817      	ldr	r0, [pc, #92]	; (8000990 <MX_RTC_Init+0x124>)
 8000934:	f002 fbbc 	bl	80030b0 <HAL_RTC_SetDate>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 800093e:	f000 f88e 	bl	8000a5e <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000942:	2300      	movs	r3, #0
 8000944:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000946:	2300      	movs	r3, #0
 8000948:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800094a:	2300      	movs	r3, #0
 800094c:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000966:	2301      	movs	r3, #1
 8000968:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800096c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2201      	movs	r2, #1
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_RTC_Init+0x124>)
 800097a:	f002 fc6d 	bl	8003258 <HAL_RTC_SetAlarm>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000984:	f000 f86b 	bl	8000a5e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3748      	adds	r7, #72	; 0x48
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000090 	.word	0x20000090
 8000994:	40002800 	.word	0x40002800

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 800099e:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <MX_USART2_UART_Init+0xa8>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009e0:	2230      	movs	r2, #48	; 0x30
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f4:	4811      	ldr	r0, [pc, #68]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009f6:	f002 fe24 	bl	8003642 <HAL_UART_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a00:	f000 f82d 	bl	8000a5e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 8000a08:	f004 ff7b 	bl	8005902 <HAL_UARTEx_SetTxFifoThreshold>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a12:	f000 f824 	bl	8000a5e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 8000a1a:	f004 ffb0 	bl	800597e <HAL_UARTEx_SetRxFifoThreshold>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000a24:	f000 f81b 	bl	8000a5e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 8000a2a:	f004 ff32 	bl	8005892 <HAL_UARTEx_DisableFifoMode>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8000a34:	f000 f813 	bl	8000a5e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000c8 	.word	0x200000c8
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fdc3 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2004      	movs	r0, #4
 8000a50:	f7ff fdc0 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	2002      	movs	r0, #2
 8000a56:	f7ff fdbd 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a62:	b672      	cpsid	i
}
 8000a64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <Error_Handler+0x8>

08000a68 <setDateTime>:


/* Set the date and time in the RTC.
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4623      	mov	r3, r4
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71bb      	strb	r3, [r7, #6]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	717b      	strb	r3, [r7, #5]
 8000a82:	4613      	mov	r3, r2
 8000a84:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = year;
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	77fb      	strb	r3, [r7, #31]
  date.Month = month;
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	777b      	strb	r3, [r7, #29]
  date.Date = day;
 8000a8e:	797b      	ldrb	r3, [r7, #5]
 8000a90:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	773b      	strb	r3, [r7, #28]
  time.Hours = hour;
 8000a96:	793b      	ldrb	r3, [r7, #4]
 8000a98:	723b      	strb	r3, [r7, #8]
  time.Minutes = minute;
 8000a9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a9e:	727b      	strb	r3, [r7, #9]
  time.Seconds = second;
 8000aa0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000aa4:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <setDateTime+0x80>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f107 011c 	add.w	r1, r7, #28
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fafd 	bl	80030b0 <HAL_RTC_SetDate>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <setDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000ac0:	e7fe      	b.n	8000ac0 <setDateTime+0x58>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <setDateTime+0x80>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f107 0108 	add.w	r1, r7, #8
 8000aca:	2201      	movs	r2, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f002 f9f1 	bl	8002eb4 <HAL_RTC_SetTime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d002      	beq.n	8000ade <setDateTime+0x76>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000adc:	e7fe      	b.n	8000adc <setDateTime+0x74>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	3724      	adds	r7, #36	; 0x24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000015c 	.word	0x2000015c

08000aec <getDateTime>:


/* Get the time and date in the RTC.
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <getDateTime+0x88>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f107 0114 	add.w	r1, r7, #20
 8000b16:	2201      	movs	r2, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f002 fa67 	bl	8002fec <HAL_RTC_GetTime>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000b28:	e7fe      	b.n	8000b28 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <getDateTime+0x88>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f107 0110 	add.w	r1, r7, #16
 8000b32:	2201      	movs	r2, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 fb41 	bl	80031bc <HAL_RTC_GetDate>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000b44:	e7fe      	b.n	8000b44 <getDateTime+0x58>
  }

  // Return through parameters
  *year = date.Year;
 8000b46:	7cfa      	ldrb	r2, [r7, #19]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	701a      	strb	r2, [r3, #0]
  *month = date.Month;
 8000b4c:	7c7a      	ldrb	r2, [r7, #17]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	701a      	strb	r2, [r3, #0]
  *day = date.Date;
 8000b52:	7cba      	ldrb	r2, [r7, #18]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	701a      	strb	r2, [r3, #0]
  *hour = time.Hours;
 8000b58:	7d3a      	ldrb	r2, [r7, #20]
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	701a      	strb	r2, [r3, #0]
  *minute = time.Minutes;
 8000b5e:	7d7a      	ldrb	r2, [r7, #21]
 8000b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b62:	701a      	strb	r2, [r3, #0]
  *second = time.Seconds;
 8000b64:	7dba      	ldrb	r2, [r7, #22]
 8000b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b68:	701a      	strb	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000015c 	.word	0x2000015c

08000b78 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <LL_AHB2_GRP1_EnableClock>:
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4013      	ands	r3, r2
 8000bea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bec:	68fb      	ldr	r3, [r7, #12]
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b090      	sub	sp, #64	; 0x40
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	2238      	movs	r2, #56	; 0x38
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f004 ff75 	bl	8005b04 <memset>
  if(hrtc->Instance==RTC)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_RTC_MspInit+0x54>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d115      	bne.n	8000c50 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 ffa1 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c40:	f7ff ff0d 	bl	8000a5e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c44:	f7ff ff98 	bl	8000b78 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000c4c:	f7ff ffbc 	bl	8000bc8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3740      	adds	r7, #64	; 0x40
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40002800 	.word	0x40002800

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b096      	sub	sp, #88	; 0x58
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2238      	movs	r2, #56	; 0x38
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 ff41 	bl	8005b04 <memset>
  if(huart->Instance==USART2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <HAL_UART_MspInit+0x98>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d12e      	bne.n	8000cea <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c90:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000c94:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 ff6e 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ca6:	f7ff feda 	bl	8000a5e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000caa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000cae:	f7ff ff8b 	bl	8000bc8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f7ff ff70 	bl	8000b98 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000cb8:	230c      	movs	r3, #12
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc8:	2307      	movs	r3, #7
 8000cca:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fbc5 	bl	8001464 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2025      	movs	r0, #37	; 0x25
 8000ce0:	f000 facf 	bl	8001282 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ce4:	2025      	movs	r0, #37	; 0x25
 8000ce6:	f000 fae6 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3758      	adds	r7, #88	; 0x58
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3e:	f000 f9ad 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <USART2_IRQHandler+0x10>)
 8000d4e:	f002 fda9 	bl	80038a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000c8 	.word	0x200000c8

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f004 fe82 	bl	8005a94 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20008000 	.word	0x20008000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	20000160 	.word	0x20000160
 8000dc4:	200001c8 	.word	0x200001c8

08000dc8 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <uartBasic_init+0x18>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	20000168 	.word	0x20000168

08000de4 <uartBasic_TX_IT>:
/*
 *
 */
bool uartBasic_TX_IT(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <uartBasic_TX_IT+0x3c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f083 0301 	eor.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <uartBasic_TX_IT+0x32>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <uartBasic_TX_IT+0x40>)
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f89a 	bl	8000f3c <composeMessage>
		_txBuffer_full = true;
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <uartBasic_TX_IT+0x3c>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_IT();
 8000e0e:	f000 f865 	bl	8000edc <_txMessage_IT>

		// report successfully queued
		return true;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <uartBasic_TX_IT+0x34>
	}

	else
	{
		// return full buffer
		return false;
 8000e16:	2300      	movs	r3, #0
	}
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200001ac 	.word	0x200001ac
 8000e24:	2000016c 	.word	0x2000016c

08000e28 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <uartBasic_RX_IT+0x24>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f083 0301 	eor.w	r3, r3, #1
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 8000e3c:	f000 f866 	bl	8000f0c <_rxMessage_IT>

		// return success
		return true;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 8000e44:	2300      	movs	r3, #0
	}
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001ad 	.word	0x200001ad

08000e50 <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8000e50:	b5b0      	push	{r4, r5, r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <uartBasic_get_RX+0x4c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d015      	beq.n	8000e90 <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <uartBasic_get_RX+0x50>)
 8000e66:	f107 0408 	add.w	r4, r7, #8
 8000e6a:	461d      	mov	r5, r3
 8000e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <uartBasic_get_RX+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	461a      	mov	r2, r3
 8000e84:	6839      	ldr	r1, [r7, #0]
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f86e 	bl	8000f68 <decomposeMessage>

		// report successfully dequeued
		return true;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 8000e90:	2300      	movs	r3, #0
	}
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bdb0      	pop	{r4, r5, r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	200001ad 	.word	0x200001ad
 8000ea0:	2000018c 	.word	0x2000018c

08000ea4 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <uartBasic_RX_Complete_ISR+0x14>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200001ad 	.word	0x200001ad

08000ebc <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <uartBasic_TX_Complete_ISR+0x14>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200001ac 	.word	0x200001ac

08000ed4 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 8000ed8:	e7fe      	b.n	8000ed8 <uartBasic_Error_ISR+0x4>
	...

08000edc <_txMessage_IT>:

/*
 *
 */
void _txMessage_IT(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8000ee0:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <_txMessage_IT+0x24>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	4907      	ldr	r1, [pc, #28]	; (8000f04 <_txMessage_IT+0x28>)
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fbfb 	bl	80036e4 <HAL_UART_Transmit_IT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d102      	bne.n	8000efa <_txMessage_IT+0x1e>
		_txError = true;
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <_txMessage_IT+0x2c>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000168 	.word	0x20000168
 8000f04:	2000016c 	.word	0x2000016c
 8000f08:	20000164 	.word	0x20000164

08000f0c <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_rxMessage_IT+0x24>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2220      	movs	r2, #32
 8000f16:	4907      	ldr	r1, [pc, #28]	; (8000f34 <_rxMessage_IT+0x28>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fc77 	bl	800380c <HAL_UART_Receive_IT>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d102      	bne.n	8000f2a <_rxMessage_IT+0x1e>
		_rxError = true;
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <_rxMessage_IT+0x2c>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000168 	.word	0x20000168
 8000f34:	2000018c 	.word	0x2000018c
 8000f38:	20000165 	.word	0x20000165

08000f3c <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3304      	adds	r3, #4
 8000f56:	221c      	movs	r2, #28
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f004 fdc4 	bl	8005ae8 <memcpy>
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3304      	adds	r3, #4
 8000f82:	221c      	movs	r2, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	68b8      	ldr	r0, [r7, #8]
 8000f88:	f004 fdae 	bl	8005ae8 <memcpy>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f98:	f7ff fac4 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fc2:	f004 fd6d 	bl	8005aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc6:	f7ff fb65 	bl	8000694 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   r0, =_estack
 8000fcc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fd8:	0800656c 	.word	0x0800656c
  ldr r2, =_sbss
 8000fdc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fe0:	200001c4 	.word	0x200001c4

08000fe4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 f93a 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ff8:	f001 fbe2 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	4a09      	ldr	r2, [pc, #36]	; (8001024 <HAL_Init+0x3c>)
 8001000:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f810 	bl	8001028 <HAL_InitTick>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e001      	b.n	8001018 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001014:	f7ff fdf0 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001018:	79fb      	ldrb	r3, [r7, #7]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_InitTick+0x6c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d024      	beq.n	8001086 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800103c:	f001 fbc0 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8001040:	4602      	mov	r2, r0
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <HAL_InitTick+0x6c>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4619      	mov	r1, r3
 8001048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f93c 	bl	80012d2 <HAL_SYSTICK_Config>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d10f      	bne.n	8001080 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b0f      	cmp	r3, #15
 8001064:	d809      	bhi.n	800107a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001066:	2200      	movs	r2, #0
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800106e:	f000 f908 	bl	8001282 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_InitTick+0x70>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e007      	b.n	800108a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	73fb      	strb	r3, [r7, #15]
 800107e:	e004      	b.n	800108a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e001      	b.n	800108a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000008 	.word	0x20000008
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_IncTick+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a03      	ldr	r2, [pc, #12]	; (80010bc <HAL_IncTick+0x20>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	20000008 	.word	0x20000008
 80010bc:	200001b0 	.word	0x200001b0

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b02      	ldr	r3, [pc, #8]	; (80010d0 <HAL_GetTick+0x10>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	200001b0 	.word	0x200001b0

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4906      	ldr	r1, [pc, #24]	; (800116c <__NVIC_EnableIRQ+0x34>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800124c:	f7ff ff90 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff2d 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff44 	bl	800111c <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff92 	bl	80011c4 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff61 	bl	8001170 <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff37 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffa4 	bl	8001228 <SysTick_Config>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e04f      	b.n	800139c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d008      	beq.n	800131a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2204      	movs	r2, #4
 800130c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e040      	b.n	800139c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 020e 	bic.w	r2, r2, #14
 8001328:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001338:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0201 	bic.w	r2, r2, #1
 8001348:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f003 021c 	and.w	r2, r3, #28
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	2101      	movs	r1, #1
 8001358:	fa01 f202 	lsl.w	r2, r1, r2
 800135c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001366:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00c      	beq.n	800138a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800137a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800137e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001388:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d005      	beq.n	80013ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2204      	movs	r2, #4
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e047      	b.n	800145a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 020e 	bic.w	r2, r2, #14
 80013d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f003 021c 	and.w	r2, r3, #28
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	2101      	movs	r1, #1
 8001408:	fa01 f202 	lsl.w	r2, r1, r2
 800140c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001416:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00c      	beq.n	800143a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800142a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800142e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001438:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
    }
  }
  return status;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e140      	b.n	80016f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8132 	beq.w	80016f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x40>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 808c 	beq.w	80016f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015d8:	4a4e      	ldr	r2, [pc, #312]	; (8001714 <HAL_GPIO_Init+0x2b0>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	2207      	movs	r2, #7
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1bc>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a44      	ldr	r2, [pc, #272]	; (8001718 <HAL_GPIO_Init+0x2b4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1b8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a43      	ldr	r2, [pc, #268]	; (800171c <HAL_GPIO_Init+0x2b8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1b4>
 8001614:	2302      	movs	r3, #2
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1be>
 8001618:	2307      	movs	r3, #7
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1be>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1be>
 8001620:	2300      	movs	r3, #0
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001632:	4938      	ldr	r1, [pc, #224]	; (8001714 <HAL_GPIO_Init+0x2b0>)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001640:	4b37      	ldr	r3, [pc, #220]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001664:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800169a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80016ba:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 80016c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	f47f aeb7 	bne.w	8001474 <HAL_GPIO_Init+0x10>
  }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40010000 	.word	0x40010000
 8001718:	48000400 	.word	0x48000400
 800171c:	48000800 	.word	0x48000800
 8001720:	58000800 	.word	0x58000800

08001724 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_PWR_EnableBkUpAccess+0x18>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a03      	ldr	r2, [pc, #12]	; (800173c <HAL_PWR_EnableBkUpAccess+0x18>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	58000400 	.word	0x58000400

08001740 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <LL_PWR_EnableBootC2+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <LL_PWR_EnableBootC2+0x18>)
 800174a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	58000400 	.word	0x58000400

0800175c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_PWREx_GetVoltageRange+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	58000400 	.word	0x58000400

08001774 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 800177c:	f7ff ffe0 	bl	8001740 <LL_PWR_EnableBootC2>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001798:	d101      	bne.n	800179e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	58000400 	.word	0x58000400

080017ac <LL_RCC_HSE_EnableTcxo>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <LL_RCC_HSE_DisableTcxo>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017f6:	d101      	bne.n	80017fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <LL_RCC_HSE_Enable>:
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <LL_RCC_HSE_Disable>:
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <LL_RCC_HSE_IsReady>:
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001850:	d101      	bne.n	8001856 <LL_RCC_HSE_IsReady+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_RCC_HSE_IsReady+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <LL_RCC_HSI_Enable>:
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <LL_RCC_HSI_Disable>:
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <LL_RCC_HSI_IsReady>:
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018aa:	d101      	bne.n	80018b0 <LL_RCC_HSI_IsReady+0x18>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_RCC_HSI_IsReady+0x1a>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_HSI_SetCalibTrimming>:
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	061b      	lsls	r3, r3, #24
 80018d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <LL_RCC_LSE_IsReady>:
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d101      	bne.n	80018fa <LL_RCC_LSE_IsReady+0x18>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_RCC_LSE_IsReady+0x1a>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <LL_RCC_LSI_Enable>:
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <LL_RCC_LSI_Disable>:
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <LL_RCC_LSI_IsReady>:
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b02      	cmp	r3, #2
 8001956:	d101      	bne.n	800195c <LL_RCC_LSI_IsReady+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_RCC_LSI_IsReady+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <LL_RCC_MSI_Enable>:
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <LL_RCC_MSI_Disable>:
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <LL_RCC_MSI_IsReady>:
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d101      	bne.n	80019b4 <LL_RCC_MSI_IsReady+0x16>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <LL_RCC_MSI_IsReady+0x18>
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d101      	bne.n	80019d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <LL_RCC_MSI_GetRange>:
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <LL_RCC_MSI_SetCalibTrimming>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_SetSysClkSource>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_GetSysClkSource>:
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_SetAHBPrescaler>:
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <LL_RCC_SetAHB3Prescaler>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001acc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ad0:	f023 020f 	bic.w	r2, r3, #15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	091b      	lsrs	r3, r3, #4
 8001ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001adc:	4313      	orrs	r3, r2
 8001ade:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <LL_RCC_SetAPB1Prescaler>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <LL_RCC_SetAPB2Prescaler>:
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <LL_RCC_GetAHBPrescaler>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <LL_RCC_GetAHB3Prescaler>:
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr

08001b68 <LL_RCC_GetAPB1Prescaler>:
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <LL_RCC_GetAPB2Prescaler>:
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bde:	d101      	bne.n	8001be4 <LL_RCC_PLL_IsReady+0x18>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <LL_RCC_PLL_IsReady+0x1a>
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0303 	and.w	r3, r3, #3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5a:	d101      	bne.n	8001c60 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr

08001c6a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c7e:	d101      	bne.n	8001c84 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca2:	d101      	bne.n	8001ca8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001cc4:	d101      	bne.n	8001cca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ce6:	d101      	bne.n	8001cec <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e36f      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0a:	f7ff fea6 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8001d0e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	f7ff ff8f 	bl	8001c32 <LL_RCC_PLL_GetMainSource>
 8001d14:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80c4 	beq.w	8001eac <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x3e>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	2b0c      	cmp	r3, #12
 8001d2e:	d176      	bne.n	8001e1e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d173      	bne.n	8001e1e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e353      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x68>
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5e:	e006      	b.n	8001d6e <HAL_RCC_OscConfig+0x76>
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d222      	bcs.n	8001db8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fd5a 	bl	8002830 <RCC_SetFlashLatencyFromMSIRange>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e331      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d90:	f043 0308 	orr.w	r3, r3, #8
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fe2b 	bl	8001a0c <LL_RCC_MSI_SetCalibTrimming>
 8001db6:	e021      	b.n	8001dfc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dc2:	f043 0308 	orr.w	r3, r3, #8
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fe12 	bl	8001a0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fd1f 	bl	8002830 <RCC_SetFlashLatencyFromMSIRange>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e2f6      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dfc:	f000 fce0 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4aa7      	ldr	r2, [pc, #668]	; (80020a0 <HAL_RCC_OscConfig+0x3a8>)
 8001e04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001e06:	4ba7      	ldr	r3, [pc, #668]	; (80020a4 <HAL_RCC_OscConfig+0x3ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f90c 	bl	8001028 <HAL_InitTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d047      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	e2e5      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d02c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e26:	f7ff fd9e 	bl	8001966 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff f949 	bl	80010c0 <HAL_GetTick>
 8001e2e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e32:	f7ff f945 	bl	80010c0 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e2d2      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001e44:	f7ff fdab 	bl	800199e <LL_RCC_MSI_IsReady>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f1      	beq.n	8001e32 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e58:	f043 0308 	orr.w	r3, r3, #8
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fdc7 	bl	8001a0c <LL_RCC_MSI_SetCalibTrimming>
 8001e7e:	e015      	b.n	8001eac <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e80:	f7ff fd7f 	bl	8001982 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e84:	f7ff f91c 	bl	80010c0 <HAL_GetTick>
 8001e88:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e8c:	f7ff f918 	bl	80010c0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e2a5      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e9e:	f7ff fd7e 	bl	800199e <LL_RCC_MSI_IsReady>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f1      	bne.n	8001e8c <HAL_RCC_OscConfig+0x194>
 8001ea8:	e000      	b.n	8001eac <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001eaa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d058      	beq.n	8001f6a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d005      	beq.n	8001eca <HAL_RCC_OscConfig+0x1d2>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d108      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d105      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d14b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e289      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef4:	d102      	bne.n	8001efc <HAL_RCC_OscConfig+0x204>
 8001ef6:	f7ff fc86 	bl	8001806 <LL_RCC_HSE_Enable>
 8001efa:	e00d      	b.n	8001f18 <HAL_RCC_OscConfig+0x220>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001f04:	d104      	bne.n	8001f10 <HAL_RCC_OscConfig+0x218>
 8001f06:	f7ff fc51 	bl	80017ac <LL_RCC_HSE_EnableTcxo>
 8001f0a:	f7ff fc7c 	bl	8001806 <LL_RCC_HSE_Enable>
 8001f0e:	e003      	b.n	8001f18 <HAL_RCC_OscConfig+0x220>
 8001f10:	f7ff fc87 	bl	8001822 <LL_RCC_HSE_Disable>
 8001f14:	f7ff fc58 	bl	80017c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d012      	beq.n	8001f46 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff f8ce 	bl	80010c0 <HAL_GetTick>
 8001f24:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f8ca 	bl	80010c0 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e257      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f3a:	f7ff fc80 	bl	800183e <LL_RCC_HSE_IsReady>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f1      	beq.n	8001f28 <HAL_RCC_OscConfig+0x230>
 8001f44:	e011      	b.n	8001f6a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f46:	f7ff f8bb 	bl	80010c0 <HAL_GetTick>
 8001f4a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4e:	f7ff f8b7 	bl	80010c0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	; 0x64
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e244      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f60:	f7ff fc6d 	bl	800183e <LL_RCC_HSE_IsReady>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f1      	bne.n	8001f4e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d046      	beq.n	8002004 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_OscConfig+0x290>
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d10e      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d10b      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e22a      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fc8e 	bl	80018ba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f9e:	e031      	b.n	8002004 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d019      	beq.n	8001fdc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	f7ff fc5a 	bl	8001860 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f888 	bl	80010c0 <HAL_GetTick>
 8001fb0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7ff f884 	bl	80010c0 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e211      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001fc6:	f7ff fc67 	bl	8001898 <LL_RCC_HSI_IsReady>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f1      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff fc70 	bl	80018ba <LL_RCC_HSI_SetCalibTrimming>
 8001fda:	e013      	b.n	8002004 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fdc:	f7ff fc4e 	bl	800187c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f86e 	bl	80010c0 <HAL_GetTick>
 8001fe4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f86a 	bl	80010c0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1f7      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ffa:	f7ff fc4d 	bl	8001898 <LL_RCC_HSI_IsReady>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f1      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d06e      	beq.n	80020ee <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d056      	beq.n	80020c6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002020:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69da      	ldr	r2, [r3, #28]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0310 	and.w	r3, r3, #16
 800202c:	429a      	cmp	r2, r3
 800202e:	d031      	beq.n	8002094 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e1d0      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d013      	beq.n	800207a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002052:	f7ff fc67 	bl	8001924 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002056:	f7ff f833 	bl	80010c0 <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205e:	f7ff f82f 	bl	80010c0 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b11      	cmp	r3, #17
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1bc      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002070:	f7ff fc68 	bl	8001944 <LL_RCC_LSI_IsReady>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f1      	bne.n	800205e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800207a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002082:	f023 0210 	bic.w	r2, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002094:	f7ff fc36 	bl	8001904 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7ff f812 	bl	80010c0 <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800209e:	e00c      	b.n	80020ba <HAL_RCC_OscConfig+0x3c2>
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff f80a 	bl	80010c0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b11      	cmp	r3, #17
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e197      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80020ba:	f7ff fc43 	bl	8001944 <LL_RCC_LSI_IsReady>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f1      	beq.n	80020a8 <HAL_RCC_OscConfig+0x3b0>
 80020c4:	e013      	b.n	80020ee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c6:	f7ff fc2d 	bl	8001924 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7fe fff9 	bl	80010c0 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d2:	f7fe fff5 	bl	80010c0 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b11      	cmp	r3, #17
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e182      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80020e4:	f7ff fc2e 	bl	8001944 <LL_RCC_LSI_IsReady>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f1      	bne.n	80020d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80d8 	beq.w	80022ac <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80020fc:	f7ff fb44 	bl	8001788 <LL_PWR_IsEnabledBkUpAccess>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d113      	bne.n	800212e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002106:	f7ff fb0d 	bl	8001724 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe ffd9 	bl	80010c0 <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe ffd5 	bl	80010c0 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e162      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002124:	f7ff fb30 	bl	8001788 <LL_PWR_IsEnabledBkUpAccess>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f1      	beq.n	8002112 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d07b      	beq.n	800222e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	2b85      	cmp	r3, #133	; 0x85
 800213c:	d003      	beq.n	8002146 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d109      	bne.n	800215a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7fe ffb1 	bl	80010c0 <HAL_GetTick>
 800215e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002174:	e00a      	b.n	800218c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe ffa3 	bl	80010c0 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	; 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e12e      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800218c:	f7ff fba9 	bl	80018e2 <LL_RCC_LSE_IsReady>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0ef      	beq.n	8002176 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b81      	cmp	r3, #129	; 0x81
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b85      	cmp	r3, #133	; 0x85
 80021a4:	d121      	bne.n	80021ea <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a6:	f7fe ff8b 	bl	80010c0 <HAL_GetTick>
 80021aa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7fe ff7d 	bl	80010c0 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e108      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ec      	beq.n	80021c2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80021e8:	e060      	b.n	80022ac <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe ff69 	bl	80010c0 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7fe ff5b 	bl	80010c0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0e6      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ec      	bne.n	8002206 <HAL_RCC_OscConfig+0x50e>
 800222c:	e03e      	b.n	80022ac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7fe ff47 	bl	80010c0 <HAL_GetTick>
 8002232:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002240:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002248:	e00a      	b.n	8002260 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224a:	f7fe ff39 	bl	80010c0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f241 3288 	movw	r2, #5000	; 0x1388
 8002258:	4293      	cmp	r3, r2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0c4      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ec      	bne.n	800224a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002270:	f7fe ff26 	bl	80010c0 <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe ff18 	bl	80010c0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e0a3      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80022a2:	f7ff fb1e 	bl	80018e2 <LL_RCC_LSE_IsReady>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ef      	bne.n	800228c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8099 	beq.w	80023e8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d06c      	beq.n	8002396 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d14b      	bne.n	800235c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	f7ff fc74 	bl	8001bb0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fefa 	bl	80010c0 <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d0:	f7fe fef6 	bl	80010c0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b0a      	cmp	r3, #10
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e083      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80022e2:	f7ff fc73 	bl	8001bcc <LL_RCC_PLL_IsReady>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f1      	bne.n	80022d0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	4b40      	ldr	r3, [pc, #256]	; (80023f4 <HAL_RCC_OscConfig+0x6fc>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002304:	0212      	lsls	r2, r2, #8
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002312:	4311      	orrs	r1, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002318:	430a      	orrs	r2, r1
 800231a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231e:	4313      	orrs	r3, r2
 8002320:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002322:	f7ff fc37 	bl	8001b94 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7fe fec3 	bl	80010c0 <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe febf 	bl	80010c0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b0a      	cmp	r3, #10
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e04c      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002350:	f7ff fc3c 	bl	8001bcc <LL_RCC_PLL_IsReady>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f1      	beq.n	800233e <HAL_RCC_OscConfig+0x646>
 800235a:	e045      	b.n	80023e8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	f7ff fc28 	bl	8001bb0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe feae 	bl	80010c0 <HAL_GetTick>
 8002364:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe feaa 	bl	80010c0 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b0a      	cmp	r3, #10
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e037      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800237a:	f7ff fc27 	bl	8001bcc <LL_RCC_PLL_IsReady>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f1      	bne.n	8002368 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800238e:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <HAL_RCC_OscConfig+0x700>)
 8002390:	4013      	ands	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
 8002394:	e028      	b.n	80023e8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e023      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d115      	bne.n	80023e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d10e      	bne.n	80023e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	11c1808c 	.word	0x11c1808c
 80023f8:	eefefffc 	.word	0xeefefffc

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e12c      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002410:	4b98      	ldr	r3, [pc, #608]	; (8002674 <HAL_RCC_ClockConfig+0x278>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d91b      	bls.n	8002456 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241e:	4b95      	ldr	r3, [pc, #596]	; (8002674 <HAL_RCC_ClockConfig+0x278>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 0207 	bic.w	r2, r3, #7
 8002426:	4993      	ldr	r1, [pc, #588]	; (8002674 <HAL_RCC_ClockConfig+0x278>)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	4313      	orrs	r3, r2
 800242c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800242e:	f7fe fe47 	bl	80010c0 <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002434:	e008      	b.n	8002448 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002436:	f7fe fe43 	bl	80010c0 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e110      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002448:	4b8a      	ldr	r3, [pc, #552]	; (8002674 <HAL_RCC_ClockConfig+0x278>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d1ef      	bne.n	8002436 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fb02 	bl	8001a70 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800246c:	f7fe fe28 	bl	80010c0 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002474:	f7fe fe24 	bl	80010c0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0f1      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002486:	f7ff fbdf 	bl	8001c48 <LL_RCC_IsActiveFlag_HPRE>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f1      	beq.n	8002474 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0320 	and.w	r3, r3, #32
 8002498:	2b00      	cmp	r3, #0
 800249a:	d016      	beq.n	80024ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff faf8 	bl	8001a96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024a6:	f7fe fe0b 	bl	80010c0 <HAL_GetTick>
 80024aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024ae:	f7fe fe07 	bl	80010c0 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0d4      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80024c0:	f7ff fbd3 	bl	8001c6a <LL_RCC_IsActiveFlag_C2HPRE>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f1      	beq.n	80024ae <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff faf0 	bl	8001ac0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fdee 	bl	80010c0 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024e8:	f7fe fdea 	bl	80010c0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0b7      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80024fa:	f7ff fbc8 	bl	8001c8e <LL_RCC_IsActiveFlag_SHDHPRE>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f1      	beq.n	80024e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d016      	beq.n	800253e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fae9 	bl	8001aec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800251a:	f7fe fdd1 	bl	80010c0 <HAL_GetTick>
 800251e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002522:	f7fe fdcd 	bl	80010c0 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e09a      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002534:	f7ff fbbd 	bl	8001cb2 <LL_RCC_IsActiveFlag_PPRE1>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f1      	beq.n	8002522 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d017      	beq.n	800257a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fade 	bl	8001b12 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002556:	f7fe fdb3 	bl	80010c0 <HAL_GetTick>
 800255a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800255e:	f7fe fdaf 	bl	80010c0 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e07c      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002570:	f7ff fbb0 	bl	8001cd4 <LL_RCC_IsActiveFlag_PPRE2>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f1      	beq.n	800255e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d043      	beq.n	800260e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d106      	bne.n	800259c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800258e:	f7ff f956 	bl	800183e <LL_RCC_HSE_IsReady>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11e      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e066      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80025a4:	f7ff fb12 	bl	8001bcc <LL_RCC_PLL_IsReady>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d113      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e05b      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d106      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80025ba:	f7ff f9f0 	bl	800199e <LL_RCC_MSI_IsReady>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e050      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80025c8:	f7ff f966 	bl	8001898 <LL_RCC_HSI_IsReady>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e049      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fa2a 	bl	8001a34 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fd6e 	bl	80010c0 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fd6a 	bl	80010c0 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e035      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	f7ff fa2c 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8002602:	4602      	mov	r2, r0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	429a      	cmp	r2, r3
 800260c:	d1ec      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260e:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_RCC_ClockConfig+0x278>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d21b      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <HAL_RCC_ClockConfig+0x278>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 0207 	bic.w	r2, r3, #7
 8002624:	4913      	ldr	r1, [pc, #76]	; (8002674 <HAL_RCC_ClockConfig+0x278>)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800262c:	f7fe fd48 	bl	80010c0 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002632:	e008      	b.n	8002646 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002634:	f7fe fd44 	bl	80010c0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e011      	b.n	800266a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <HAL_RCC_ClockConfig+0x278>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d1ef      	bne.n	8002634 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002654:	f000 f8b4 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8002658:	4603      	mov	r3, r0
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_RCC_ClockConfig+0x27c>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_RCC_ClockConfig+0x280>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fce0 	bl	8001028 <HAL_InitTick>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	58004000 	.word	0x58004000
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268e:	f7ff f9e4 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8002692:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002694:	f7ff facd 	bl	8001c32 <LL_RCC_PLL_GetMainSource>
 8002698:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x2c>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d139      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d136      	bne.n	800271a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80026ac:	f7ff f987 	bl	80019be <LL_RCC_MSI_IsEnabledRangeSelect>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d115      	bne.n	80026e2 <HAL_RCC_GetSysClockFreq+0x62>
 80026b6:	f7ff f982 	bl	80019be <LL_RCC_MSI_IsEnabledRangeSelect>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_GetSysClockFreq+0x4e>
 80026c0:	f7ff f98d 	bl	80019de <LL_RCC_MSI_GetRange>
 80026c4:	4603      	mov	r3, r0
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	e005      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x5a>
 80026ce:	f7ff f991 	bl	80019f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80026d2:	4603      	mov	r3, r0
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	4a36      	ldr	r2, [pc, #216]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x134>)
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	e014      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x8c>
 80026e2:	f7ff f96c 	bl	80019be <LL_RCC_MSI_IsEnabledRangeSelect>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x7a>
 80026ec:	f7ff f977 	bl	80019de <LL_RCC_MSI_GetRange>
 80026f0:	4603      	mov	r3, r0
 80026f2:	091b      	lsrs	r3, r3, #4
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	e005      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x86>
 80026fa:	f7ff f97b 	bl	80019f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80026fe:	4603      	mov	r3, r0
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	4a2b      	ldr	r2, [pc, #172]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d115      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002718:	e012      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d102      	bne.n	8002726 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002720:	4b25      	ldr	r3, [pc, #148]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e00c      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d109      	bne.n	8002740 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800272c:	f7ff f85a 	bl	80017e4 <LL_RCC_HSE_IsEnabledDiv2>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e001      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800273c:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_RCC_GetSysClockFreq+0x13c>)
 800273e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002740:	f7ff f98b 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8002744:	4603      	mov	r3, r0
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d12f      	bne.n	80027aa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800274a:	f7ff fa72 	bl	8001c32 <LL_RCC_PLL_GetMainSource>
 800274e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d003      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0xde>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d003      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0xe4>
 800275c:	e00d      	b.n	800277a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002760:	60fb      	str	r3, [r7, #12]
        break;
 8002762:	e00d      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002764:	f7ff f83e 	bl	80017e4 <LL_RCC_HSE_IsEnabledDiv2>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d102      	bne.n	8002774 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002770:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002772:	e005      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002776:	60fb      	str	r3, [r7, #12]
        break;
 8002778:	e002      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	60fb      	str	r3, [r7, #12]
        break;
 800277e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002780:	f7ff fa35 	bl	8001bee <LL_RCC_PLL_GetN>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	fb03 f402 	mul.w	r4, r3, r2
 800278c:	f7ff fa46 	bl	8001c1c <LL_RCC_PLL_GetDivider>
 8002790:	4603      	mov	r3, r0
 8002792:	091b      	lsrs	r3, r3, #4
 8002794:	3301      	adds	r3, #1
 8002796:	fbb4 f4f3 	udiv	r4, r4, r3
 800279a:	f7ff fa34 	bl	8001c06 <LL_RCC_PLL_GetR>
 800279e:	4603      	mov	r3, r0
 80027a0:	0f5b      	lsrs	r3, r3, #29
 80027a2:	3301      	adds	r3, #1
 80027a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80027a8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80027aa:	697b      	ldr	r3, [r7, #20]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}
 80027b4:	080064c0 	.word	0x080064c0
 80027b8:	00f42400 	.word	0x00f42400
 80027bc:	01e84800 	.word	0x01e84800

080027c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c0:	b598      	push	{r3, r4, r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80027c4:	f7ff ff5c 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 80027c8:	4604      	mov	r4, r0
 80027ca:	f7ff f9b5 	bl	8001b38 <LL_RCC_GetAHBPrescaler>
 80027ce:	4603      	mov	r3, r0
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80027d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd98      	pop	{r3, r4, r7, pc}
 80027e4:	08006460 	.word	0x08006460

080027e8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b598      	push	{r3, r4, r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027ec:	f7ff ffe8 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4604      	mov	r4, r0
 80027f2:	f7ff f9b9 	bl	8001b68 <LL_RCC_GetAPB1Prescaler>
 80027f6:	4603      	mov	r3, r0
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	4a03      	ldr	r2, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002800:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd98      	pop	{r3, r4, r7, pc}
 8002808:	080064a0 	.word	0x080064a0

0800280c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800280c:	b598      	push	{r3, r4, r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002810:	f7ff ffd6 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8002814:	4604      	mov	r4, r0
 8002816:	f7ff f9b2 	bl	8001b7e <LL_RCC_GetAPB2Prescaler>
 800281a:	4603      	mov	r3, r0
 800281c:	0adb      	lsrs	r3, r3, #11
 800281e:	4a03      	ldr	r2, [pc, #12]	; (800282c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd98      	pop	{r3, r4, r7, pc}
 800282c:	080064a0 	.word	0x080064a0

08002830 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	4a10      	ldr	r2, [pc, #64]	; (8002884 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002846:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002848:	f7ff f981 	bl	8001b4e <LL_RCC_GetAHB3Prescaler>
 800284c:	4603      	mov	r3, r0
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	4a0c      	ldr	r2, [pc, #48]	; (8002888 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	4a09      	ldr	r2, [pc, #36]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	0c9c      	lsrs	r4, r3, #18
 800286c:	f7fe ff76 	bl	800175c <HAL_PWREx_GetVoltageRange>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	4620      	mov	r0, r4
 8002876:	f000 f80b 	bl	8002890 <RCC_SetFlashLatency>
 800287a:	4603      	mov	r3, r0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	080064c0 	.word	0x080064c0
 8002888:	08006460 	.word	0x08006460
 800288c:	431bde83 	.word	0x431bde83

08002890 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08e      	sub	sp, #56	; 0x38
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800289a:	4a3a      	ldr	r2, [pc, #232]	; (8002984 <RCC_SetFlashLatency+0xf4>)
 800289c:	f107 0320 	add.w	r3, r7, #32
 80028a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028a4:	6018      	str	r0, [r3, #0]
 80028a6:	3304      	adds	r3, #4
 80028a8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80028aa:	4a37      	ldr	r2, [pc, #220]	; (8002988 <RCC_SetFlashLatency+0xf8>)
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028b4:	6018      	str	r0, [r3, #0]
 80028b6:	3304      	adds	r3, #4
 80028b8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80028ba:	4a34      	ldr	r2, [pc, #208]	; (800298c <RCC_SetFlashLatency+0xfc>)
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80028c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d0:	d11b      	bne.n	800290a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
 80028d6:	e014      	b.n	8002902 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	3338      	adds	r3, #56	; 0x38
 80028de:	443b      	add	r3, r7
 80028e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80028e4:	461a      	mov	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d807      	bhi.n	80028fc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	3338      	adds	r3, #56	; 0x38
 80028f2:	443b      	add	r3, r7
 80028f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028fa:	e021      	b.n	8002940 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	3301      	adds	r3, #1
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	2b02      	cmp	r3, #2
 8002906:	d9e7      	bls.n	80028d8 <RCC_SetFlashLatency+0x48>
 8002908:	e01a      	b.n	8002940 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290e:	e014      	b.n	800293a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	3338      	adds	r3, #56	; 0x38
 8002916:	443b      	add	r3, r7
 8002918:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800291c:	461a      	mov	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4293      	cmp	r3, r2
 8002922:	d807      	bhi.n	8002934 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	3338      	adds	r3, #56	; 0x38
 800292a:	443b      	add	r3, r7
 800292c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002930:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002932:	e005      	b.n	8002940 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	3301      	adds	r3, #1
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	2b02      	cmp	r3, #2
 800293e:	d9e7      	bls.n	8002910 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <RCC_SetFlashLatency+0x100>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 0207 	bic.w	r2, r3, #7
 8002948:	4911      	ldr	r1, [pc, #68]	; (8002990 <RCC_SetFlashLatency+0x100>)
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002950:	f7fe fbb6 	bl	80010c0 <HAL_GetTick>
 8002954:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002956:	e008      	b.n	800296a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002958:	f7fe fbb2 	bl	80010c0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e007      	b.n	800297a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <RCC_SetFlashLatency+0x100>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002974:	429a      	cmp	r2, r3
 8002976:	d1ef      	bne.n	8002958 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3738      	adds	r7, #56	; 0x38
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	08006444 	.word	0x08006444
 8002988:	0800644c 	.word	0x0800644c
 800298c:	08006454 	.word	0x08006454
 8002990:	58004000 	.word	0x58004000

08002994 <LL_RCC_LSE_IsReady>:
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d101      	bne.n	80029ac <LL_RCC_LSE_IsReady+0x18>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <LL_RCC_LSE_IsReady+0x1a>
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <LL_RCC_SetUSARTClockSource>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	43db      	mvns	r3, r3
 80029cc:	401a      	ands	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_SetI2SClockSource>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_SetLPUARTClockSource>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a20:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_SetI2CClockSource>:
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002a52:	43db      	mvns	r3, r3
 8002a54:	401a      	ands	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <LL_RCC_SetLPTIMClockSource>:
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <LL_RCC_SetRNGClockSource>:
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_SetADCClockSource>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_SetRTCClockSource>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_GetRTCClockSource>:
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_ForceBackupDomainReset>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b72:	bf00      	nop
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
	...

08002b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d058      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002b9c:	f7fe fdc2 	bl	8001724 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ba0:	f7fe fa8e 	bl	80010c0 <HAL_GetTick>
 8002ba4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002ba6:	e009      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe fa8a 	bl	80010c0 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d902      	bls.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	74fb      	strb	r3, [r7, #19]
        break;
 8002bba:	e006      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002bbc:	4b7b      	ldr	r3, [pc, #492]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d13c      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002bd0:	f7ff ffa7 	bl	8002b22 <LL_RCC_GetRTCClockSource>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d00f      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bec:	f7ff ffa5 	bl	8002b3a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf0:	f7ff ffb3 	bl	8002b5a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d014      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fa5a 	bl	80010c0 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c10:	f7fe fa56 	bl	80010c0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d902      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	74fb      	strb	r3, [r7, #19]
            break;
 8002c26:	e004      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002c28:	f7ff feb4 	bl	8002994 <LL_RCC_LSE_IsReady>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d1ee      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff5b 	bl	8002af8 <LL_RCC_SetRTCClockSource>
 8002c42:	e004      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	74bb      	strb	r3, [r7, #18]
 8002c48:	e001      	b.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4a:	7cfb      	ldrb	r3, [r7, #19]
 8002c4c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fea9 	bl	80029b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fe9e 	bl	80029b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fec0 	bl	8002a10 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fee6 	bl	8002a72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff fedb 	bl	8002a72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fed0 	bl	8002a72 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fea9 	bl	8002a3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d004      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff fe9e 	bl	8002a3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d004      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fe93 	bl	8002a3a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d011      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fe5e 	bl	80029e6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d32:	d107      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fea5 	bl	8002aa4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d011      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fea3 	bl	8002ace <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d90:	d107      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002da2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	58000400 	.word	0x58000400

08002db0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d071      	beq.n	8002ea6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd ff14 	bl	8000c04 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002de4:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d051      	beq.n	8002e94 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002df0:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002df2:	22ca      	movs	r2, #202	; 0xca
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002df8:	2253      	movs	r2, #83	; 0x53
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fb53 	bl	80034a8 <RTC_EnterInitMode>
 8002e02:	4603      	mov	r3, r0
 8002e04:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d13f      	bne.n	8002e8c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002e0c:	4b28      	ldr	r3, [pc, #160]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e12:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e1a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e1e:	699a      	ldr	r2, [r3, #24]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	4319      	orrs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	491f      	ldr	r1, [pc, #124]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	041b      	lsls	r3, r3, #16
 8002e40:	491b      	ldr	r1, [pc, #108]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	430b      	orrs	r3, r1
 8002e58:	4915      	ldr	r1, [pc, #84]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb56 	bl	8003510 <RTC_ExitInitMode>
 8002e64:	4603      	mov	r3, r0
 8002e66:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10e      	bne.n	8002e8c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a19      	ldr	r1, [r3, #32]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4319      	orrs	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	490a      	ldr	r1, [pc, #40]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_RTC_Init+0x100>)
 8002e8e:	22ff      	movs	r2, #255	; 0xff
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
 8002e92:	e001      	b.n	8002e98 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d103      	bne.n	8002ea6 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40002800 	.word	0x40002800

08002eb4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_RTC_SetTime+0x1a>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e088      	b.n	8002fe0 <HAL_RTC_SetTime+0x12c>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ede:	4b42      	ldr	r3, [pc, #264]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002ee0:	22ca      	movs	r2, #202	; 0xca
 8002ee2:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee4:	4b40      	ldr	r3, [pc, #256]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002ee6:	2253      	movs	r2, #83	; 0x53
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fadc 	bl	80034a8 <RTC_EnterInitMode>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002ef4:	7cfb      	ldrb	r3, [r7, #19]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d15e      	bne.n	8002fb8 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8002efa:	4b3b      	ldr	r3, [pc, #236]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f06:	d057      	beq.n	8002fb8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d125      	bne.n	8002f5a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fb31 	bl	800358c <RTC_ByteToBcd2>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	785b      	ldrb	r3, [r3, #1]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fb2a 	bl	800358c <RTC_ByteToBcd2>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f3c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	789b      	ldrb	r3, [r3, #2]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fb22 	bl	800358c <RTC_ByteToBcd2>
 8002f48:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f4a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	78db      	ldrb	r3, [r3, #3]
 8002f52:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e017      	b.n	8002f8a <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f78:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f7e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	78db      	ldrb	r3, [r3, #3]
 8002f84:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f86:	4313      	orrs	r3, r2
 8002f88:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8002f8a:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002f92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002f96:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8002f98:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	68d9      	ldr	r1, [r3, #12]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	490d      	ldr	r1, [pc, #52]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 faa9 	bl	8003510 <RTC_ExitInitMode>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RTC_SetTime+0x134>)
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8002fde:	7cfb      	ldrb	r3, [r7, #19]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	40002800 	.word	0x40002800

08002fec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <HAL_RTC_GetTime+0xc0>)
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RTC_GetTime+0xc0>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800300c:	d049      	beq.n	80030a2 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800300e:	4b27      	ldr	r3, [pc, #156]	; (80030ac <HAL_RTC_GetTime+0xc0>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800301a:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_RTC_GetTime+0xc0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003022:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003026:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	0d9b      	lsrs	r3, r3, #22
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d11a      	bne.n	80030a2 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 faaa 	bl	80035ca <RTC_Bcd2ToByte>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 faa1 	bl	80035ca <RTC_Bcd2ToByte>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	789b      	ldrb	r3, [r3, #2]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fa98 	bl	80035ca <RTC_Bcd2ToByte>
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40002800 	.word	0x40002800

080030b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_RTC_SetDate+0x1a>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e071      	b.n	80031ae <HAL_RTC_SetDate+0xfe>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10e      	bne.n	80030fe <HAL_RTC_SetDate+0x4e>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	785b      	ldrb	r3, [r3, #1]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	785b      	ldrb	r3, [r3, #1]
 80030f0:	f023 0310 	bic.w	r3, r3, #16
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	330a      	adds	r3, #10
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d11c      	bne.n	800313e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fa3f 	bl	800358c <RTC_ByteToBcd2>
 800310e:	4603      	mov	r3, r0
 8003110:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa38 	bl	800358c <RTC_ByteToBcd2>
 800311c:	4603      	mov	r3, r0
 800311e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003120:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	789b      	ldrb	r3, [r3, #2]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fa30 	bl	800358c <RTC_ByteToBcd2>
 800312c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800312e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	e00e      	b.n	800315c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	78db      	ldrb	r3, [r3, #3]
 8003142:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	785b      	ldrb	r3, [r3, #1]
 8003148:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800314a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003150:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_RTC_SetDate+0x108>)
 800315e:	22ca      	movs	r2, #202	; 0xca
 8003160:	625a      	str	r2, [r3, #36]	; 0x24
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_RTC_SetDate+0x108>)
 8003164:	2253      	movs	r2, #83	; 0x53
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 f99d 	bl	80034a8 <RTC_EnterInitMode>
 800316e:	4603      	mov	r3, r0
 8003170:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003172:	7cfb      	ldrb	r3, [r7, #19]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003178:	4a0f      	ldr	r2, [pc, #60]	; (80031b8 <HAL_RTC_SetDate+0x108>)
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003180:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003184:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f9c2 	bl	8003510 <RTC_ExitInitMode>
 800318c:	4603      	mov	r3, r0
 800318e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RTC_SetDate+0x108>)
 8003192:	22ff      	movs	r2, #255	; 0xff
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003196:	7cfb      	ldrb	r3, [r7, #19]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40002800 	.word	0x40002800

080031bc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80031c8:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_RTC_GetDate+0x98>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80031d4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	0c1b      	lsrs	r3, r3, #16
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	0b5b      	lsrs	r3, r3, #13
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11a      	bne.n	800324a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	78db      	ldrb	r3, [r3, #3]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 f9d6 	bl	80035ca <RTC_Bcd2ToByte>
 800321e:	4603      	mov	r3, r0
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	785b      	ldrb	r3, [r3, #1]
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f9cd 	bl	80035ca <RTC_Bcd2ToByte>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	789b      	ldrb	r3, [r3, #2]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 f9c4 	bl	80035ca <RTC_Bcd2ToByte>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40002800 	.word	0x40002800

08003258 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_RTC_SetAlarm+0x1e>
 8003272:	2302      	movs	r3, #2
 8003274:	e0eb      	b.n	800344e <HAL_RTC_SetAlarm+0x1f6>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003286:	4b74      	ldr	r3, [pc, #464]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003296:	d06a      	beq.n	800336e <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d13a      	bne.n	8003314 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800329e:	4b6e      	ldr	r3, [pc, #440]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2200      	movs	r2, #0
 80032ae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f965 	bl	800358c <RTC_ByteToBcd2>
 80032c2:	4603      	mov	r3, r0
 80032c4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	785b      	ldrb	r3, [r3, #1]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f95e 	bl	800358c <RTC_ByteToBcd2>
 80032d0:	4603      	mov	r3, r0
 80032d2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80032d4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	789b      	ldrb	r3, [r3, #2]
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f956 	bl	800358c <RTC_ByteToBcd2>
 80032e0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80032e2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	78db      	ldrb	r3, [r3, #3]
 80032ea:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80032ec:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f948 	bl	800358c <RTC_ByteToBcd2>
 80032fc:	4603      	mov	r3, r0
 80032fe:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003300:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003308:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e02c      	b.n	800336e <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800331c:	d00d      	beq.n	800333a <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003326:	d008      	beq.n	800333a <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003328:	4b4b      	ldr	r3, [pc, #300]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2200      	movs	r2, #0
 8003338:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003346:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800334c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	78db      	ldrb	r3, [r3, #3]
 8003352:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003354:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800335c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800335e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003364:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800336e:	4b3a      	ldr	r3, [pc, #232]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003370:	22ca      	movs	r2, #202	; 0xca
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
 8003374:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003376:	2253      	movs	r2, #83	; 0x53
 8003378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	d12c      	bne.n	80033de <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8003384:	4b34      	ldr	r3, [pc, #208]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4a33      	ldr	r2, [pc, #204]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 800338a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800338e:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003392:	2201      	movs	r2, #1
 8003394:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339c:	d107      	bne.n	80033ae <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	492c      	ldr	r1, [pc, #176]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	644b      	str	r3, [r1, #68]	; 0x44
 80033ac:	e006      	b.n	80033bc <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80033ae:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80033bc:	4a26      	ldr	r2, [pc, #152]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4a20      	ldr	r2, [pc, #128]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033da:	6193      	str	r3, [r2, #24]
 80033dc:	e02b      	b.n	8003436 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033e4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80033e8:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 80033ec:	2202      	movs	r2, #2
 80033ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d107      	bne.n	8003408 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	4915      	ldr	r1, [pc, #84]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003402:	4313      	orrs	r3, r2
 8003404:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003406:	e006      	b.n	8003416 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003408:	4a13      	ldr	r2, [pc, #76]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003416:	4a10      	ldr	r2, [pc, #64]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f043 0202 	orr.w	r2, r3, #2
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003434:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_RTC_SetAlarm+0x200>)
 8003438:	22ff      	movs	r2, #255	; 0xff
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd90      	pop	{r4, r7, pc}
 8003456:	bf00      	nop
 8003458:	40002800 	.word	0x40002800

0800345c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <HAL_RTC_WaitForSynchro+0x48>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <HAL_RTC_WaitForSynchro+0x48>)
 800346a:	f023 0320 	bic.w	r3, r3, #32
 800346e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003470:	f7fd fe26 	bl	80010c0 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003476:	e009      	b.n	800348c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003478:	f7fd fe22 	bl	80010c0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003486:	d901      	bls.n	800348c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e006      	b.n	800349a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <HAL_RTC_WaitForSynchro+0x48>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ef      	beq.n	8003478 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40002800 	.word	0x40002800

080034a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <RTC_EnterInitMode+0x64>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d120      	bne.n	8003502 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <RTC_EnterInitMode+0x64>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a11      	ldr	r2, [pc, #68]	; (800350c <RTC_EnterInitMode+0x64>)
 80034c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ca:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80034cc:	f7fd fdf8 	bl	80010c0 <HAL_GetTick>
 80034d0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80034d2:	e00d      	b.n	80034f0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80034d4:	f7fd fdf4 	bl	80010c0 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e2:	d905      	bls.n	80034f0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2203      	movs	r2, #3
 80034ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <RTC_EnterInitMode+0x64>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <RTC_EnterInitMode+0x5a>
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d1e8      	bne.n	80034d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003502:	7bfb      	ldrb	r3, [r7, #15]
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40002800 	.word	0x40002800

08003510 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <RTC_ExitInitMode+0x78>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4a19      	ldr	r2, [pc, #100]	; (8003588 <RTC_ExitInitMode+0x78>)
 8003522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003526:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003528:	4b17      	ldr	r3, [pc, #92]	; (8003588 <RTC_ExitInitMode+0x78>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10c      	bne.n	800354e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff91 	bl	800345c <HAL_RTC_WaitForSynchro>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d01e      	beq.n	800357e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	e017      	b.n	800357e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <RTC_ExitInitMode+0x78>)
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <RTC_ExitInitMode+0x78>)
 8003554:	f023 0320 	bic.w	r3, r3, #32
 8003558:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ff7e 	bl	800345c <HAL_RTC_WaitForSynchro>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2203      	movs	r2, #3
 800356a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <RTC_ExitInitMode+0x78>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	4a04      	ldr	r2, [pc, #16]	; (8003588 <RTC_ExitInitMode+0x78>)
 8003578:	f043 0320 	orr.w	r3, r3, #32
 800357c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800357e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40002800 	.word	0x40002800

0800358c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800359e:	e005      	b.n	80035ac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3301      	adds	r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	3b0a      	subs	r3, #10
 80035aa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80035ac:	7afb      	ldrb	r3, [r7, #11]
 80035ae:	2b09      	cmp	r3, #9
 80035b0:	d8f6      	bhi.n	80035a0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	4313      	orrs	r3, r2
 80035be:	b2db      	uxtb	r3, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	b2db      	uxtb	r3, r3
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <LL_RCC_GetUSARTClockSource>:
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	401a      	ands	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	041b      	lsls	r3, r3, #16
 8003618:	4313      	orrs	r3, r2
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <LL_RCC_GetLPUARTClockSource>:
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800362c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003630:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4013      	ands	r3, r2
}
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr

08003642 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e042      	b.n	80036da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd faf8 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fc3d 	bl	8003f04 <UART_SetConfig>
 800368a:	4603      	mov	r3, r0
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e022      	b.n	80036da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fea5 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 ff2b 	bl	800452e <UART_CheckIdleState>
 80036d8:	4603      	mov	r3, r0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b091      	sub	sp, #68	; 0x44
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d178      	bne.n	80037ee <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <HAL_UART_Transmit_IT+0x24>
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d101      	bne.n	800370c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e071      	b.n	80037f0 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	88fa      	ldrh	r2, [r7, #6]
 8003716:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	88fa      	ldrh	r2, [r7, #6]
 800371e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2221      	movs	r2, #33	; 0x21
 8003734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800373c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003740:	d12a      	bne.n	8003798 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	d107      	bne.n	800375c <HAL_UART_Transmit_IT+0x78>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d103      	bne.n	800375c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a29      	ldr	r2, [pc, #164]	; (80037fc <HAL_UART_Transmit_IT+0x118>)
 8003758:	679a      	str	r2, [r3, #120]	; 0x78
 800375a:	e002      	b.n	8003762 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a28      	ldr	r2, [pc, #160]	; (8003800 <HAL_UART_Transmit_IT+0x11c>)
 8003760:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3308      	adds	r3, #8
 8003780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003782:	637a      	str	r2, [r7, #52]	; 0x34
 8003784:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <HAL_UART_Transmit_IT+0x7e>
 8003796:	e028      	b.n	80037ea <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a0:	d107      	bne.n	80037b2 <HAL_UART_Transmit_IT+0xce>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d103      	bne.n	80037b2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a15      	ldr	r2, [pc, #84]	; (8003804 <HAL_UART_Transmit_IT+0x120>)
 80037ae:	679a      	str	r2, [r3, #120]	; 0x78
 80037b0:	e002      	b.n	80037b8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a14      	ldr	r2, [pc, #80]	; (8003808 <HAL_UART_Transmit_IT+0x124>)
 80037b6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	613b      	str	r3, [r7, #16]
   return(result);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	69f9      	ldr	r1, [r7, #28]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e6      	bne.n	80037b8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3744      	adds	r7, #68	; 0x44
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	08004ce7 	.word	0x08004ce7
 8003800:	08004c09 	.word	0x08004c09
 8003804:	08004b49 	.word	0x08004b49
 8003808:	08004a93 	.word	0x08004a93

0800380c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003820:	2b20      	cmp	r3, #32
 8003822:	d137      	bne.n	8003894 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UART_Receive_IT+0x24>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e030      	b.n	8003896 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_UART_Receive_IT+0x94>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d01f      	beq.n	8003884 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d018      	beq.n	8003884 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	613b      	str	r3, [r7, #16]
   return(result);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	623b      	str	r3, [r7, #32]
 8003872:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	69f9      	ldr	r1, [r7, #28]
 8003876:	6a3a      	ldr	r2, [r7, #32]
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	61bb      	str	r3, [r7, #24]
   return(result);
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e6      	bne.n	8003852 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	461a      	mov	r2, r3
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 ff66 	bl	800475c <UART_Start_Receive_IT>
 8003890:	4603      	mov	r3, r0
 8003892:	e000      	b.n	8003896 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3728      	adds	r7, #40	; 0x28
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40008000 	.word	0x40008000

080038a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b0ba      	sub	sp, #232	; 0xe8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80038d2:	4013      	ands	r3, r2
 80038d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11b      	bne.n	8003918 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	f003 0320 	and.w	r3, r3, #32
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 82e3 	beq.w	8003ed4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
      }
      return;
 8003916:	e2dd      	b.n	8003ed4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8123 	beq.w	8003b68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003922:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003926:	4b8d      	ldr	r3, [pc, #564]	; (8003b5c <HAL_UART_IRQHandler+0x2b8>)
 8003928:	4013      	ands	r3, r2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800392e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003932:	4b8b      	ldr	r3, [pc, #556]	; (8003b60 <HAL_UART_IRQHandler+0x2bc>)
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8116 	beq.w	8003b68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800393c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d011      	beq.n	800396c <HAL_UART_IRQHandler+0xc8>
 8003948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800394c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00b      	beq.n	800396c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003962:	f043 0201 	orr.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800396c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d011      	beq.n	800399c <HAL_UART_IRQHandler+0xf8>
 8003978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00b      	beq.n	800399c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2202      	movs	r2, #2
 800398a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f043 0204 	orr.w	r2, r3, #4
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d011      	beq.n	80039cc <HAL_UART_IRQHandler+0x128>
 80039a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00b      	beq.n	80039cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2204      	movs	r2, #4
 80039ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	f043 0202 	orr.w	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d017      	beq.n	8003a08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d105      	bne.n	80039f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80039e8:	4b5c      	ldr	r3, [pc, #368]	; (8003b5c <HAL_UART_IRQHandler+0x2b8>)
 80039ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00b      	beq.n	8003a08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2208      	movs	r2, #8
 80039f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f043 0208 	orr.w	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d012      	beq.n	8003a3a <HAL_UART_IRQHandler+0x196>
 8003a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00c      	beq.n	8003a3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a30:	f043 0220 	orr.w	r2, r3, #32
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8249 	beq.w	8003ed8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d013      	beq.n	8003a7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a56:	f003 0320 	and.w	r3, r3, #32
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d105      	bne.n	8003a6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d005      	beq.n	8003a9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d054      	beq.n	8003b48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 ff7c 	bl	800499c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d146      	bne.n	8003b40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1d9      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d017      	beq.n	8003b38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b0e:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <HAL_UART_IRQHandler+0x2c0>)
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd fc44 	bl	80013a6 <HAL_DMA_Abort_IT>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d019      	beq.n	8003b58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003b32:	4610      	mov	r0, r2
 8003b34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b36:	e00f      	b.n	8003b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fc fd63 	bl	8000604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3e:	e00b      	b.n	8003b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fc fd5f 	bl	8000604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b46:	e007      	b.n	8003b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fc fd5b 	bl	8000604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003b56:	e1bf      	b.n	8003ed8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	bf00      	nop
    return;
 8003b5a:	e1bd      	b.n	8003ed8 <HAL_UART_IRQHandler+0x634>
 8003b5c:	10000001 	.word	0x10000001
 8003b60:	04000120 	.word	0x04000120
 8003b64:	08004a67 	.word	0x08004a67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	f040 8153 	bne.w	8003e18 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0310 	and.w	r3, r3, #16
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 814c 	beq.w	8003e18 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8145 	beq.w	8003e18 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2210      	movs	r2, #16
 8003b94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b40      	cmp	r3, #64	; 0x40
 8003ba2:	f040 80bb 	bne.w	8003d1c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 818f 	beq.w	8003edc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	f080 8187 	bcs.w	8003edc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 8087 	bne.w	8003cfa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1da      	bne.n	8003bec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3308      	adds	r3, #8
 8003c3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3308      	adds	r3, #8
 8003c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e1      	bne.n	8003c36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7c:	e853 3f00 	ldrex	r3, [r3]
 8003c80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3308      	adds	r3, #8
 8003c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e3      	bne.n	8003c72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc8:	f023 0310 	bic.w	r3, r3, #16
 8003ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cda:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cdc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e4      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fd faf8 	bl	80012ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	4619      	mov	r1, r3
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8e9 	bl	8003eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d1a:	e0df      	b.n	8003edc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80d1 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003d3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80cc 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e4      	bne.n	8003d48 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003da6:	633a      	str	r2, [r7, #48]	; 0x30
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e1      	bne.n	8003d7e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0310 	bic.w	r3, r3, #16
 8003de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e4      	bne.n	8003dce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f86b 	bl	8003eec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e16:	e063      	b.n	8003ee0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00e      	beq.n	8003e42 <HAL_UART_IRQHandler+0x59e>
 8003e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f001 fd0e 	bl	800585c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e40:	e051      	b.n	8003ee6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d014      	beq.n	8003e78 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03a      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	4798      	blx	r3
    }
    return;
 8003e76:	e035      	b.n	8003ee4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d009      	beq.n	8003e98 <HAL_UART_IRQHandler+0x5f4>
 8003e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 ff9c 	bl	8004dce <UART_EndTransmit_IT>
    return;
 8003e96:	e026      	b.n	8003ee6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x614>
 8003ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d003      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 fce5 	bl	8005880 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003eb6:	e016      	b.n	8003ee6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d010      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x642>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da0c      	bge.n	8003ee6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f001 fcce 	bl	800586e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ed2:	e008      	b.n	8003ee6 <HAL_UART_IRQHandler+0x642>
      return;
 8003ed4:	bf00      	nop
 8003ed6:	e006      	b.n	8003ee6 <HAL_UART_IRQHandler+0x642>
    return;
 8003ed8:	bf00      	nop
 8003eda:	e004      	b.n	8003ee6 <HAL_UART_IRQHandler+0x642>
      return;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <HAL_UART_IRQHandler+0x642>
      return;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_UART_IRQHandler+0x642>
    return;
 8003ee4:	bf00      	nop
  }
}
 8003ee6:	37e8      	adds	r7, #232	; 0xe8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr
	...

08003f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b08c      	sub	sp, #48	; 0x30
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b94      	ldr	r3, [pc, #592]	; (8004184 <UART_SetConfig+0x280>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a89      	ldr	r2, [pc, #548]	; (8004188 <UART_SetConfig+0x284>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d004      	beq.n	8003f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f84:	430b      	orrs	r3, r1
 8003f86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	f023 010f 	bic.w	r1, r3, #15
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a7a      	ldr	r2, [pc, #488]	; (800418c <UART_SetConfig+0x288>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d127      	bne.n	8003ff8 <UART_SetConfig+0xf4>
 8003fa8:	2003      	movs	r0, #3
 8003faa:	f7ff fb29 	bl	8003600 <LL_RCC_GetUSARTClockSource>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d81b      	bhi.n	8003ff0 <UART_SetConfig+0xec>
 8003fb8:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <UART_SetConfig+0xbc>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fe1 	.word	0x08003fe1
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003fe9 	.word	0x08003fe9
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd6:	e080      	b.n	80040da <UART_SetConfig+0x1d6>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fde:	e07c      	b.n	80040da <UART_SetConfig+0x1d6>
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe6:	e078      	b.n	80040da <UART_SetConfig+0x1d6>
 8003fe8:	2308      	movs	r3, #8
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fee:	e074      	b.n	80040da <UART_SetConfig+0x1d6>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff6:	e070      	b.n	80040da <UART_SetConfig+0x1d6>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a64      	ldr	r2, [pc, #400]	; (8004190 <UART_SetConfig+0x28c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d138      	bne.n	8004074 <UART_SetConfig+0x170>
 8004002:	200c      	movs	r0, #12
 8004004:	f7ff fafc 	bl	8003600 <LL_RCC_GetUSARTClockSource>
 8004008:	4603      	mov	r3, r0
 800400a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d82c      	bhi.n	800406c <UART_SetConfig+0x168>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0x114>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	0800404d 	.word	0x0800404d
 800401c:	0800406d 	.word	0x0800406d
 8004020:	0800406d 	.word	0x0800406d
 8004024:	0800406d 	.word	0x0800406d
 8004028:	0800405d 	.word	0x0800405d
 800402c:	0800406d 	.word	0x0800406d
 8004030:	0800406d 	.word	0x0800406d
 8004034:	0800406d 	.word	0x0800406d
 8004038:	08004055 	.word	0x08004055
 800403c:	0800406d 	.word	0x0800406d
 8004040:	0800406d 	.word	0x0800406d
 8004044:	0800406d 	.word	0x0800406d
 8004048:	08004065 	.word	0x08004065
 800404c:	2300      	movs	r3, #0
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004052:	e042      	b.n	80040da <UART_SetConfig+0x1d6>
 8004054:	2302      	movs	r3, #2
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405a:	e03e      	b.n	80040da <UART_SetConfig+0x1d6>
 800405c:	2304      	movs	r3, #4
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004062:	e03a      	b.n	80040da <UART_SetConfig+0x1d6>
 8004064:	2308      	movs	r3, #8
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406a:	e036      	b.n	80040da <UART_SetConfig+0x1d6>
 800406c:	2310      	movs	r3, #16
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004072:	e032      	b.n	80040da <UART_SetConfig+0x1d6>
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a43      	ldr	r2, [pc, #268]	; (8004188 <UART_SetConfig+0x284>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d12a      	bne.n	80040d4 <UART_SetConfig+0x1d0>
 800407e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004082:	f7ff facf 	bl	8003624 <LL_RCC_GetLPUARTClockSource>
 8004086:	4603      	mov	r3, r0
 8004088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800408c:	d01a      	beq.n	80040c4 <UART_SetConfig+0x1c0>
 800408e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004092:	d81b      	bhi.n	80040cc <UART_SetConfig+0x1c8>
 8004094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004098:	d00c      	beq.n	80040b4 <UART_SetConfig+0x1b0>
 800409a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409e:	d815      	bhi.n	80040cc <UART_SetConfig+0x1c8>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <UART_SetConfig+0x1a8>
 80040a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a8:	d008      	beq.n	80040bc <UART_SetConfig+0x1b8>
 80040aa:	e00f      	b.n	80040cc <UART_SetConfig+0x1c8>
 80040ac:	2300      	movs	r3, #0
 80040ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b2:	e012      	b.n	80040da <UART_SetConfig+0x1d6>
 80040b4:	2302      	movs	r3, #2
 80040b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ba:	e00e      	b.n	80040da <UART_SetConfig+0x1d6>
 80040bc:	2304      	movs	r3, #4
 80040be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c2:	e00a      	b.n	80040da <UART_SetConfig+0x1d6>
 80040c4:	2308      	movs	r3, #8
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ca:	e006      	b.n	80040da <UART_SetConfig+0x1d6>
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d2:	e002      	b.n	80040da <UART_SetConfig+0x1d6>
 80040d4:	2310      	movs	r3, #16
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <UART_SetConfig+0x284>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	f040 80a4 	bne.w	800422e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d823      	bhi.n	8004136 <UART_SetConfig+0x232>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0x1f0>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004137 	.word	0x08004137
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004137 	.word	0x08004137
 8004104:	08004127 	.word	0x08004127
 8004108:	08004137 	.word	0x08004137
 800410c:	08004137 	.word	0x08004137
 8004110:	08004137 	.word	0x08004137
 8004114:	0800412f 	.word	0x0800412f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7fe fb66 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800411e:	e010      	b.n	8004142 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <UART_SetConfig+0x290>)
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004124:	e00d      	b.n	8004142 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004126:	f7fe faab 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800412c:	e009      	b.n	8004142 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004134:	e005      	b.n	8004142 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8137 	beq.w	80043b8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	4a12      	ldr	r2, [pc, #72]	; (8004198 <UART_SetConfig+0x294>)
 8004150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004154:	461a      	mov	r2, r3
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	fbb3 f3f2 	udiv	r3, r3, r2
 800415c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	429a      	cmp	r2, r3
 800416c:	d305      	bcc.n	800417a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004180:	e11a      	b.n	80043b8 <UART_SetConfig+0x4b4>
 8004182:	bf00      	nop
 8004184:	cfff69f3 	.word	0xcfff69f3
 8004188:	40008000 	.word	0x40008000
 800418c:	40013800 	.word	0x40013800
 8004190:	40004400 	.word	0x40004400
 8004194:	00f42400 	.word	0x00f42400
 8004198:	08006500 	.word	0x08006500
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	2200      	movs	r2, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	60fa      	str	r2, [r7, #12]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	4a8e      	ldr	r2, [pc, #568]	; (80043e4 <UART_SetConfig+0x4e0>)
 80041aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2200      	movs	r2, #0
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041be:	f7fc f82f 	bl	8000220 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	020b      	lsls	r3, r1, #8
 80041d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041d8:	0202      	lsls	r2, r0, #8
 80041da:	6979      	ldr	r1, [r7, #20]
 80041dc:	6849      	ldr	r1, [r1, #4]
 80041de:	0849      	lsrs	r1, r1, #1
 80041e0:	2000      	movs	r0, #0
 80041e2:	460c      	mov	r4, r1
 80041e4:	4605      	mov	r5, r0
 80041e6:	eb12 0804 	adds.w	r8, r2, r4
 80041ea:	eb43 0905 	adc.w	r9, r3, r5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	469a      	mov	sl, r3
 80041f6:	4693      	mov	fp, r2
 80041f8:	4652      	mov	r2, sl
 80041fa:	465b      	mov	r3, fp
 80041fc:	4640      	mov	r0, r8
 80041fe:	4649      	mov	r1, r9
 8004200:	f7fc f80e 	bl	8000220 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4613      	mov	r3, r2
 800420a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004212:	d308      	bcc.n	8004226 <UART_SetConfig+0x322>
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421a:	d204      	bcs.n	8004226 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	60da      	str	r2, [r3, #12]
 8004224:	e0c8      	b.n	80043b8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800422c:	e0c4      	b.n	80043b8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004236:	d167      	bne.n	8004308 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800423c:	2b08      	cmp	r3, #8
 800423e:	d828      	bhi.n	8004292 <UART_SetConfig+0x38e>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <UART_SetConfig+0x344>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	0800426d 	.word	0x0800426d
 800424c:	08004275 	.word	0x08004275
 8004250:	0800427d 	.word	0x0800427d
 8004254:	08004293 	.word	0x08004293
 8004258:	08004283 	.word	0x08004283
 800425c:	08004293 	.word	0x08004293
 8004260:	08004293 	.word	0x08004293
 8004264:	08004293 	.word	0x08004293
 8004268:	0800428b 	.word	0x0800428b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800426c:	f7fe fabc 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8004270:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004272:	e014      	b.n	800429e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004274:	f7fe faca 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8004278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800427a:	e010      	b.n	800429e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800427c:	4b5a      	ldr	r3, [pc, #360]	; (80043e8 <UART_SetConfig+0x4e4>)
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004280:	e00d      	b.n	800429e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004282:	f7fe f9fd 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 8004286:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004288:	e009      	b.n	800429e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800428a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004290:	e005      	b.n	800429e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800429c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8089 	beq.w	80043b8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	4a4e      	ldr	r2, [pc, #312]	; (80043e4 <UART_SetConfig+0x4e0>)
 80042ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b8:	005a      	lsls	r2, r3, #1
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	441a      	add	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	2b0f      	cmp	r3, #15
 80042d0:	d916      	bls.n	8004300 <UART_SetConfig+0x3fc>
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d212      	bcs.n	8004300 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f023 030f 	bic.w	r3, r3, #15
 80042e2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	8bfb      	ldrh	r3, [r7, #30]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	8bfa      	ldrh	r2, [r7, #30]
 80042fc:	60da      	str	r2, [r3, #12]
 80042fe:	e05b      	b.n	80043b8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004306:	e057      	b.n	80043b8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800430c:	2b08      	cmp	r3, #8
 800430e:	d828      	bhi.n	8004362 <UART_SetConfig+0x45e>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <UART_SetConfig+0x414>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800433d 	.word	0x0800433d
 800431c:	08004345 	.word	0x08004345
 8004320:	0800434d 	.word	0x0800434d
 8004324:	08004363 	.word	0x08004363
 8004328:	08004353 	.word	0x08004353
 800432c:	08004363 	.word	0x08004363
 8004330:	08004363 	.word	0x08004363
 8004334:	08004363 	.word	0x08004363
 8004338:	0800435b 	.word	0x0800435b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800433c:	f7fe fa54 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004342:	e014      	b.n	800436e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7fe fa62 	bl	800280c <HAL_RCC_GetPCLK2Freq>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800434a:	e010      	b.n	800436e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800434c:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <UART_SetConfig+0x4e4>)
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004350:	e00d      	b.n	800436e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004352:	f7fe f995 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004358:	e009      	b.n	800436e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004360:	e005      	b.n	800436e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800436c:	bf00      	nop
    }

    if (pclk != 0U)
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d021      	beq.n	80043b8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <UART_SetConfig+0x4e0>)
 800437a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800437e:	461a      	mov	r2, r3
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	fbb3 f2f2 	udiv	r2, r3, r2
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	441a      	add	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	2b0f      	cmp	r3, #15
 800439c:	d909      	bls.n	80043b2 <UART_SetConfig+0x4ae>
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d205      	bcs.n	80043b2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	e002      	b.n	80043b8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2200      	movs	r2, #0
 80043cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80043d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3730      	adds	r7, #48	; 0x30
 80043dc:	46bd      	mov	sp, r7
 80043de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e2:	bf00      	nop
 80043e4:	08006500 	.word	0x08006500
 80043e8:	00f42400 	.word	0x00f42400

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01a      	beq.n	8004502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ea:	d10a      	bne.n	8004502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b086      	sub	sp, #24
 8004532:	af02      	add	r7, sp, #8
 8004534:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800453e:	f7fc fdbf 	bl	80010c0 <HAL_GetTick>
 8004542:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d10e      	bne.n	8004570 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004552:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f832 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e028      	b.n	80045c2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b04      	cmp	r3, #4
 800457c:	d10e      	bne.n	800459c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004582:	9300      	str	r3, [sp, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f81c 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e012      	b.n	80045c2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b09c      	sub	sp, #112	; 0x70
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	e0a9      	b.n	8004730 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e2:	f000 80a5 	beq.w	8004730 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e6:	f7fc fd6b 	bl	80010c0 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d302      	bcc.n	80045fc <UART_WaitOnFlagUntilTimeout+0x32>
 80045f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d140      	bne.n	800467e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800460a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004610:	667b      	str	r3, [r7, #100]	; 0x64
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004620:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e6      	bne.n	80045fc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3308      	adds	r3, #8
 8004634:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004638:	e853 3f00 	ldrex	r3, [r3]
 800463c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	663b      	str	r3, [r7, #96]	; 0x60
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3308      	adds	r3, #8
 800464c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800464e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800465c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e5      	bne.n	800462e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e069      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d051      	beq.n	8004730 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469a:	d149      	bne.n	8004730 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	637b      	str	r3, [r7, #52]	; 0x34
 80046c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e6      	bne.n	80046a6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3308      	adds	r3, #8
 80046de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	e853 3f00 	ldrex	r3, [r3]
 80046e6:	613b      	str	r3, [r7, #16]
   return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3308      	adds	r3, #8
 80046f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046f8:	623a      	str	r2, [r7, #32]
 80046fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	69f9      	ldr	r1, [r7, #28]
 80046fe:	6a3a      	ldr	r2, [r7, #32]
 8004700:	e841 2300 	strex	r3, r2, [r1]
 8004704:	61bb      	str	r3, [r7, #24]
   return(result);
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1e5      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e010      	b.n	8004752 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69da      	ldr	r2, [r3, #28]
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4013      	ands	r3, r2
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	461a      	mov	r2, r3
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	429a      	cmp	r2, r3
 800474c:	f43f af46 	beq.w	80045dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3770      	adds	r7, #112	; 0x70
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800475c:	b480      	push	{r7}
 800475e:	b0a3      	sub	sp, #140	; 0x8c
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478e:	d10e      	bne.n	80047ae <UART_Start_Receive_IT+0x52>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <UART_Start_Receive_IT+0x48>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800479e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047a2:	e02d      	b.n	8004800 <UART_Start_Receive_IT+0xa4>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	22ff      	movs	r2, #255	; 0xff
 80047a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047ac:	e028      	b.n	8004800 <UART_Start_Receive_IT+0xa4>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <UART_Start_Receive_IT+0x76>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d104      	bne.n	80047c8 <UART_Start_Receive_IT+0x6c>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	22ff      	movs	r2, #255	; 0xff
 80047c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047c6:	e01b      	b.n	8004800 <UART_Start_Receive_IT+0xa4>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	227f      	movs	r2, #127	; 0x7f
 80047cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047d0:	e016      	b.n	8004800 <UART_Start_Receive_IT+0xa4>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047da:	d10d      	bne.n	80047f8 <UART_Start_Receive_IT+0x9c>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d104      	bne.n	80047ee <UART_Start_Receive_IT+0x92>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	227f      	movs	r2, #127	; 0x7f
 80047e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047ec:	e008      	b.n	8004800 <UART_Start_Receive_IT+0xa4>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	223f      	movs	r2, #63	; 0x3f
 80047f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80047f6:	e003      	b.n	8004800 <UART_Start_Receive_IT+0xa4>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2222      	movs	r2, #34	; 0x22
 800480c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3308      	adds	r3, #8
 8004830:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004834:	673a      	str	r2, [r7, #112]	; 0x70
 8004836:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800483a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e3      	bne.n	8004810 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800484c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004850:	d14f      	bne.n	80048f2 <UART_Start_Receive_IT+0x196>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004858:	88fa      	ldrh	r2, [r7, #6]
 800485a:	429a      	cmp	r2, r3
 800485c:	d349      	bcc.n	80048f2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004866:	d107      	bne.n	8004878 <UART_Start_Receive_IT+0x11c>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d103      	bne.n	8004878 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a46      	ldr	r2, [pc, #280]	; (800498c <UART_Start_Receive_IT+0x230>)
 8004874:	675a      	str	r2, [r3, #116]	; 0x74
 8004876:	e002      	b.n	800487e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a45      	ldr	r2, [pc, #276]	; (8004990 <UART_Start_Receive_IT+0x234>)
 800487c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01a      	beq.n	80048bc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800489a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80048a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e4      	bne.n	8004886 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	3308      	adds	r3, #8
 80048da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80048dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80048de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e5      	bne.n	80048bc <UART_Start_Receive_IT+0x160>
 80048f0:	e046      	b.n	8004980 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fa:	d107      	bne.n	800490c <UART_Start_Receive_IT+0x1b0>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a23      	ldr	r2, [pc, #140]	; (8004994 <UART_Start_Receive_IT+0x238>)
 8004908:	675a      	str	r2, [r3, #116]	; 0x74
 800490a:	e002      	b.n	8004912 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a22      	ldr	r2, [pc, #136]	; (8004998 <UART_Start_Receive_IT+0x23c>)
 8004910:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d019      	beq.n	800494e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800492e:	677b      	str	r3, [r7, #116]	; 0x74
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
 800493a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800493e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e6      	bne.n	800491a <UART_Start_Receive_IT+0x1be>
 800494c:	e018      	b.n	8004980 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	613b      	str	r3, [r7, #16]
   return(result);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f043 0320 	orr.w	r3, r3, #32
 8004962:	67bb      	str	r3, [r7, #120]	; 0x78
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496c:	623b      	str	r3, [r7, #32]
 800496e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	69f9      	ldr	r1, [r7, #28]
 8004972:	6a3a      	ldr	r2, [r7, #32]
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	61bb      	str	r3, [r7, #24]
   return(result);
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e6      	bne.n	800494e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	378c      	adds	r7, #140	; 0x8c
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr
 800498c:	080054f5 	.word	0x080054f5
 8004990:	08005195 	.word	0x08005195
 8004994:	08004fdd 	.word	0x08004fdd
 8004998:	08004e25 	.word	0x08004e25

0800499c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b095      	sub	sp, #84	; 0x54
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c2:	643b      	str	r3, [r7, #64]	; 0x40
 80049c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e6      	bne.n	80049a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3308      	adds	r3, #8
 80049dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3308      	adds	r3, #8
 80049f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e3      	bne.n	80049d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d118      	bne.n	8004a48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f023 0310 	bic.w	r3, r3, #16
 8004a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	613b      	str	r3, [r7, #16]
   return(result);
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e6      	bne.n	8004a16 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004a5c:	bf00      	nop
 8004a5e:	3754      	adds	r7, #84	; 0x54
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr

08004a66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7fb fdbd 	bl	8000604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b08f      	sub	sp, #60	; 0x3c
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa0:	2b21      	cmp	r3, #33	; 0x21
 8004aa2:	d14c      	bne.n	8004b3e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d132      	bne.n	8004b16 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e6      	bne.n	8004ab0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af6:	633b      	str	r3, [r7, #48]	; 0x30
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6979      	ldr	r1, [r7, #20]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004b14:	e013      	b.n	8004b3e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1a:	781a      	ldrb	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004b3e:	bf00      	nop
 8004b40:	373c      	adds	r7, #60	; 0x3c
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b091      	sub	sp, #68	; 0x44
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	2b21      	cmp	r3, #33	; 0x21
 8004b58:	d151      	bne.n	8004bfe <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d132      	bne.n	8004bcc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	623b      	str	r3, [r7, #32]
   return(result);
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	633b      	str	r3, [r7, #48]	; 0x30
 8004b86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e6      	bne.n	8004b66 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bac:	637b      	str	r3, [r7, #52]	; 0x34
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb6:	61fb      	str	r3, [r7, #28]
 8004bb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bba:	69b9      	ldr	r1, [r7, #24]
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1e6      	bne.n	8004b98 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004bca:	e018      	b.n	8004bfe <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be6:	1c9a      	adds	r2, r3, #2
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004bfe:	bf00      	nop
 8004c00:	3744      	adds	r7, #68	; 0x44
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b091      	sub	sp, #68	; 0x44
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	2b21      	cmp	r3, #33	; 0x21
 8004c18:	d160      	bne.n	8004cdc <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004c22:	e057      	b.n	8004cd4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d133      	bne.n	8004c98 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c50:	633a      	str	r2, [r7, #48]	; 0x30
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e5      	bne.n	8004c30 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	69b9      	ldr	r1, [r7, #24]
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e6      	bne.n	8004c64 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004c96:	e021      	b.n	8004cdc <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d013      	beq.n	8004cce <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004cce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004cd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1a4      	bne.n	8004c24 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004cda:	e7ff      	b.n	8004cdc <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004cdc:	bf00      	nop
 8004cde:	3744      	adds	r7, #68	; 0x44
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b091      	sub	sp, #68	; 0x44
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	2b21      	cmp	r3, #33	; 0x21
 8004cf6:	d165      	bne.n	8004dc4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004cfe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d00:	e05c      	b.n	8004dbc <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d133      	bne.n	8004d76 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3308      	adds	r3, #8
 8004d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	e853 3f00 	ldrex	r3, [r3]
 8004d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d24:	637b      	str	r3, [r7, #52]	; 0x34
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e5      	bne.n	8004d0e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d56:	633b      	str	r3, [r7, #48]	; 0x30
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d64:	6979      	ldr	r1, [r7, #20]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	e841 2300 	strex	r3, r2, [r1]
 8004d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1e6      	bne.n	8004d42 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004d74:	e026      	b.n	8004dc4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d018      	beq.n	8004db6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004db6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004db8:	3b01      	subs	r3, #1
 8004dba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004dbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d19f      	bne.n	8004d02 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004dc2:	e7ff      	b.n	8004dc4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004dc4:	bf00      	nop
 8004dc6:	3744      	adds	r7, #68	; 0x44
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	61bb      	str	r3, [r7, #24]
 8004df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6979      	ldr	r1, [r7, #20]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e6      	bne.n	8004dd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fb fc0c 	bl	8000634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e1c:	bf00      	nop
 8004e1e:	3720      	adds	r7, #32
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b09c      	sub	sp, #112	; 0x70
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e32:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3c:	2b22      	cmp	r3, #34	; 0x22
 8004e3e:	f040 80be 	bne.w	8004fbe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e50:	b2d9      	uxtb	r1, r3
 8004e52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5c:	400a      	ands	r2, r1
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 80a1 	bne.w	8004fce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ede:	647a      	str	r2, [r7, #68]	; 0x44
 8004ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a33      	ldr	r2, [pc, #204]	; (8004fd8 <UART_RxISR_8BIT+0x1b4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d01f      	beq.n	8004f50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d018      	beq.n	8004f50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f32:	663b      	str	r3, [r7, #96]	; 0x60
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d12e      	bne.n	8004fb6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	69b9      	ldr	r1, [r7, #24]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	617b      	str	r3, [r7, #20]
   return(result);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d103      	bne.n	8004fa6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fe ff9c 	bl	8003eec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fb4:	e00b      	b.n	8004fce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fb fb54 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 8004fbc:	e007      	b.n	8004fce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699a      	ldr	r2, [r3, #24]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0208 	orr.w	r2, r2, #8
 8004fcc:	619a      	str	r2, [r3, #24]
}
 8004fce:	bf00      	nop
 8004fd0:	3770      	adds	r7, #112	; 0x70
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40008000 	.word	0x40008000

08004fdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b09c      	sub	sp, #112	; 0x70
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004fea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff4:	2b22      	cmp	r3, #34	; 0x22
 8004ff6:	f040 80be 	bne.w	8005176 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005008:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800500a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800500e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005012:	4013      	ands	r3, r2
 8005014:	b29a      	uxth	r2, r3
 8005016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005018:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800501e:	1c9a      	adds	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 80a1 	bne.w	8005186 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800504c:	e853 3f00 	ldrex	r3, [r3]
 8005050:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005058:	667b      	str	r3, [r7, #100]	; 0x64
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005062:	657b      	str	r3, [r7, #84]	; 0x54
 8005064:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005066:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800506a:	e841 2300 	strex	r3, r2, [r1]
 800506e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1e6      	bne.n	8005044 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	663b      	str	r3, [r7, #96]	; 0x60
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3308      	adds	r3, #8
 8005094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005096:	643a      	str	r2, [r7, #64]	; 0x40
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800509c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800509e:	e841 2300 	strex	r3, r2, [r1]
 80050a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1e5      	bne.n	8005076 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a33      	ldr	r2, [pc, #204]	; (8005190 <UART_RxISR_16BIT+0x1b4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d01f      	beq.n	8005108 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d018      	beq.n	8005108 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e6      	bne.n	80050d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d12e      	bne.n	800516e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	60bb      	str	r3, [r7, #8]
   return(result);
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f023 0310 	bic.w	r3, r3, #16
 800512a:	65bb      	str	r3, [r7, #88]	; 0x58
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6979      	ldr	r1, [r7, #20]
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	613b      	str	r3, [r7, #16]
   return(result);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e6      	bne.n	8005116 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b10      	cmp	r3, #16
 8005154:	d103      	bne.n	800515e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2210      	movs	r2, #16
 800515c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005164:	4619      	mov	r1, r3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fe fec0 	bl	8003eec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800516c:	e00b      	b.n	8005186 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fb fa78 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 8005174:	e007      	b.n	8005186 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0208 	orr.w	r2, r2, #8
 8005184:	619a      	str	r2, [r3, #24]
}
 8005186:	bf00      	nop
 8005188:	3770      	adds	r7, #112	; 0x70
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40008000 	.word	0x40008000

08005194 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b0ac      	sub	sp, #176	; 0xb0
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80051a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ca:	2b22      	cmp	r3, #34	; 0x22
 80051cc:	f040 8182 	bne.w	80054d4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80051d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051da:	e125      	b.n	8005428 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80051e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80051ea:	b2d9      	uxtb	r1, r3
 80051ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f6:	400a      	ands	r2, r1
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b00      	cmp	r3, #0
 800522c:	d053      	beq.n	80052d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800522e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d011      	beq.n	800525e <UART_RxISR_8BIT_FIFOEN+0xca>
 800523a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2201      	movs	r2, #1
 800524c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	f043 0201 	orr.w	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800525e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d011      	beq.n	800528e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800526a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2202      	movs	r2, #2
 800527c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	f043 0204 	orr.w	r2, r3, #4
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800528e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d011      	beq.n	80052be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800529a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2204      	movs	r2, #4
 80052ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	f043 0202 	orr.w	r2, r3, #2
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7fb f99b 	bl	8000604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f040 80a2 	bne.w	8005428 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80052f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005306:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005308:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800530c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800530e:	e841 2300 	strex	r3, r2, [r1]
 8005312:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1e4      	bne.n	80052e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3308      	adds	r3, #8
 8005320:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800532a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800532c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3308      	adds	r3, #8
 800533e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005342:	66ba      	str	r2, [r7, #104]	; 0x68
 8005344:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005348:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e1      	bne.n	800531a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a5f      	ldr	r2, [pc, #380]	; (80054ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d021      	beq.n	80053b8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d01a      	beq.n	80053b8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005396:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053a4:	657b      	str	r3, [r7, #84]	; 0x54
 80053a6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80053aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e4      	bne.n	8005382 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d130      	bne.n	8005422 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ce:	e853 3f00 	ldrex	r3, [r3]
 80053d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d6:	f023 0310 	bic.w	r3, r3, #16
 80053da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	461a      	mov	r2, r3
 80053e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053e8:	643b      	str	r3, [r7, #64]	; 0x40
 80053ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e4      	bne.n	80053c6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b10      	cmp	r3, #16
 8005408:	d103      	bne.n	8005412 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2210      	movs	r2, #16
 8005410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fe fd66 	bl	8003eec <HAL_UARTEx_RxEventCallback>
 8005420:	e002      	b.n	8005428 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fb f91e 	bl	8000664 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005428:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800542c:	2b00      	cmp	r3, #0
 800542e:	d006      	beq.n	800543e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005430:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f aecf 	bne.w	80051dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005444:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005448:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800544c:	2b00      	cmp	r3, #0
 800544e:	d049      	beq.n	80054e4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005456:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800545a:	429a      	cmp	r2, r3
 800545c:	d242      	bcs.n	80054e4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3308      	adds	r3, #8
 8005464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	61fb      	str	r3, [r7, #28]
   return(result);
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3308      	adds	r3, #8
 800547e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800548a:	e841 2300 	strex	r3, r2, [r1]
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1e3      	bne.n	800545e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a15      	ldr	r2, [pc, #84]	; (80054f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800549a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f043 0320 	orr.w	r3, r3, #32
 80054b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6979      	ldr	r1, [r7, #20]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	613b      	str	r3, [r7, #16]
   return(result);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e4      	bne.n	800549c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054d2:	e007      	b.n	80054e4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f042 0208 	orr.w	r2, r2, #8
 80054e2:	619a      	str	r2, [r3, #24]
}
 80054e4:	bf00      	nop
 80054e6:	37b0      	adds	r7, #176	; 0xb0
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40008000 	.word	0x40008000
 80054f0:	08004e25 	.word	0x08004e25

080054f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b0ae      	sub	sp, #184	; 0xb8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005502:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800552a:	2b22      	cmp	r3, #34	; 0x22
 800552c:	f040 8186 	bne.w	800583c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005536:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800553a:	e129      	b.n	8005790 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800554e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005552:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005556:	4013      	ands	r3, r2
 8005558:	b29a      	uxth	r2, r3
 800555a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800555e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005564:	1c9a      	adds	r2, r3, #2
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	2b00      	cmp	r3, #0
 8005590:	d053      	beq.n	800563a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005592:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d011      	beq.n	80055c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800559e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2201      	movs	r2, #1
 80055b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	f043 0201 	orr.w	r2, r3, #1
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d011      	beq.n	80055f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80055ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2202      	movs	r2, #2
 80055e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e8:	f043 0204 	orr.w	r2, r3, #4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d011      	beq.n	8005622 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80055fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00b      	beq.n	8005622 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2204      	movs	r2, #4
 8005610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f043 0202 	orr.w	r2, r3, #2
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005628:	2b00      	cmp	r3, #0
 800562a:	d006      	beq.n	800563a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7fa ffe9 	bl	8000604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	f040 80a4 	bne.w	8005790 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800566a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800566e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005672:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800567c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e2      	bne.n	8005648 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3308      	adds	r3, #8
 80056a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80056aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e1      	bne.n	8005682 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a5f      	ldr	r2, [pc, #380]	; (8005854 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d021      	beq.n	8005720 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01a      	beq.n	8005720 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800570c:	65bb      	str	r3, [r7, #88]	; 0x58
 800570e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800571a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e4      	bne.n	80056ea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d130      	bne.n	800578a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	f023 0310 	bic.w	r3, r3, #16
 8005742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005750:	647b      	str	r3, [r7, #68]	; 0x44
 8005752:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800575e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e4      	bne.n	800572e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b10      	cmp	r3, #16
 8005770:	d103      	bne.n	800577a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2210      	movs	r2, #16
 8005778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7fe fbb2 	bl	8003eec <HAL_UARTEx_RxEventCallback>
 8005788:	e002      	b.n	8005790 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fa ff6a 	bl	8000664 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005790:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005794:	2b00      	cmp	r3, #0
 8005796:	d006      	beq.n	80057a6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f47f aecb 	bne.w	800553c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057ac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80057b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d049      	beq.n	800584c <UART_RxISR_16BIT_FIFOEN+0x358>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d242      	bcs.n	800584c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3308      	adds	r3, #8
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	623b      	str	r3, [r7, #32]
   return(result);
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3308      	adds	r3, #8
 80057e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80057ea:	633a      	str	r2, [r7, #48]	; 0x30
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e3      	bne.n	80057c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a15      	ldr	r2, [pc, #84]	; (8005858 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005802:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	60fb      	str	r3, [r7, #12]
   return(result);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f043 0320 	orr.w	r3, r3, #32
 8005818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	461a      	mov	r2, r3
 8005822:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	69b9      	ldr	r1, [r7, #24]
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	617b      	str	r3, [r7, #20]
   return(result);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e4      	bne.n	8005804 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800583a:	e007      	b.n	800584c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0208 	orr.w	r2, r2, #8
 800584a:	619a      	str	r2, [r3, #24]
}
 800584c:	bf00      	nop
 800584e:	37b8      	adds	r7, #184	; 0xb8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40008000 	.word	0x40008000
 8005858:	08004fdd 	.word	0x08004fdd

0800585c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005876:	bf00      	nop
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e027      	b.n	80058f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2224      	movs	r2, #36	; 0x24
 80058b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0201 	bic.w	r2, r2, #1
 80058ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr

08005902 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005916:	2302      	movs	r3, #2
 8005918:	e02d      	b.n	8005976 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2224      	movs	r2, #36	; 0x24
 8005926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f850 	bl	80059fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800598e:	2b01      	cmp	r3, #1
 8005990:	d101      	bne.n	8005996 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005992:	2302      	movs	r3, #2
 8005994:	e02d      	b.n	80059f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2224      	movs	r2, #36	; 0x24
 80059a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f812 	bl	80059fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2220      	movs	r2, #32
 80059e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d108      	bne.n	8005a1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a1c:	e031      	b.n	8005a82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a1e:	2308      	movs	r3, #8
 8005a20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a22:	2308      	movs	r3, #8
 8005a24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	0e5b      	lsrs	r3, r3, #25
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	0f5b      	lsrs	r3, r3, #29
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	7b3a      	ldrb	r2, [r7, #12]
 8005a4a:	4910      	ldr	r1, [pc, #64]	; (8005a8c <UARTEx_SetNbDataToProcess+0x90>)
 8005a4c:	5c8a      	ldrb	r2, [r1, r2]
 8005a4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a52:	7b3a      	ldrb	r2, [r7, #12]
 8005a54:	490e      	ldr	r1, [pc, #56]	; (8005a90 <UARTEx_SetNbDataToProcess+0x94>)
 8005a56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a58:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	7b7a      	ldrb	r2, [r7, #13]
 8005a68:	4908      	ldr	r1, [pc, #32]	; (8005a8c <UARTEx_SetNbDataToProcess+0x90>)
 8005a6a:	5c8a      	ldrb	r2, [r1, r2]
 8005a6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a70:	7b7a      	ldrb	r2, [r7, #13]
 8005a72:	4907      	ldr	r1, [pc, #28]	; (8005a90 <UARTEx_SetNbDataToProcess+0x94>)
 8005a74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a76:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	08006518 	.word	0x08006518
 8005a90:	08006520 	.word	0x08006520

08005a94 <__errno>:
 8005a94:	4b01      	ldr	r3, [pc, #4]	; (8005a9c <__errno+0x8>)
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c

08005aa0 <__libc_init_array>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4d0d      	ldr	r5, [pc, #52]	; (8005ad8 <__libc_init_array+0x38>)
 8005aa4:	4c0d      	ldr	r4, [pc, #52]	; (8005adc <__libc_init_array+0x3c>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	2600      	movs	r6, #0
 8005aac:	42a6      	cmp	r6, r4
 8005aae:	d109      	bne.n	8005ac4 <__libc_init_array+0x24>
 8005ab0:	4d0b      	ldr	r5, [pc, #44]	; (8005ae0 <__libc_init_array+0x40>)
 8005ab2:	4c0c      	ldr	r4, [pc, #48]	; (8005ae4 <__libc_init_array+0x44>)
 8005ab4:	f000 fca0 	bl	80063f8 <_init>
 8005ab8:	1b64      	subs	r4, r4, r5
 8005aba:	10a4      	asrs	r4, r4, #2
 8005abc:	2600      	movs	r6, #0
 8005abe:	42a6      	cmp	r6, r4
 8005ac0:	d105      	bne.n	8005ace <__libc_init_array+0x2e>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac8:	4798      	blx	r3
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7ee      	b.n	8005aac <__libc_init_array+0xc>
 8005ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad2:	4798      	blx	r3
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	e7f2      	b.n	8005abe <__libc_init_array+0x1e>
 8005ad8:	08006564 	.word	0x08006564
 8005adc:	08006564 	.word	0x08006564
 8005ae0:	08006564 	.word	0x08006564
 8005ae4:	08006568 	.word	0x08006568

08005ae8 <memcpy>:
 8005ae8:	440a      	add	r2, r1
 8005aea:	4291      	cmp	r1, r2
 8005aec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005af0:	d100      	bne.n	8005af4 <memcpy+0xc>
 8005af2:	4770      	bx	lr
 8005af4:	b510      	push	{r4, lr}
 8005af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005afa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005afe:	4291      	cmp	r1, r2
 8005b00:	d1f9      	bne.n	8005af6 <memcpy+0xe>
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <memset>:
 8005b04:	4402      	add	r2, r0
 8005b06:	4603      	mov	r3, r0
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d100      	bne.n	8005b0e <memset+0xa>
 8005b0c:	4770      	bx	lr
 8005b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b12:	e7f9      	b.n	8005b08 <memset+0x4>

08005b14 <sniprintf>:
 8005b14:	b40c      	push	{r2, r3}
 8005b16:	b530      	push	{r4, r5, lr}
 8005b18:	4b17      	ldr	r3, [pc, #92]	; (8005b78 <sniprintf+0x64>)
 8005b1a:	1e0c      	subs	r4, r1, #0
 8005b1c:	681d      	ldr	r5, [r3, #0]
 8005b1e:	b09d      	sub	sp, #116	; 0x74
 8005b20:	da08      	bge.n	8005b34 <sniprintf+0x20>
 8005b22:	238b      	movs	r3, #139	; 0x8b
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b2a:	b01d      	add	sp, #116	; 0x74
 8005b2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b30:	b002      	add	sp, #8
 8005b32:	4770      	bx	lr
 8005b34:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b3c:	bf14      	ite	ne
 8005b3e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005b42:	4623      	moveq	r3, r4
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	9307      	str	r3, [sp, #28]
 8005b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b4c:	9002      	str	r0, [sp, #8]
 8005b4e:	9006      	str	r0, [sp, #24]
 8005b50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b56:	ab21      	add	r3, sp, #132	; 0x84
 8005b58:	a902      	add	r1, sp, #8
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	f000 f869 	bl	8005c34 <_svfiprintf_r>
 8005b62:	1c43      	adds	r3, r0, #1
 8005b64:	bfbc      	itt	lt
 8005b66:	238b      	movlt	r3, #139	; 0x8b
 8005b68:	602b      	strlt	r3, [r5, #0]
 8005b6a:	2c00      	cmp	r4, #0
 8005b6c:	d0dd      	beq.n	8005b2a <sniprintf+0x16>
 8005b6e:	9b02      	ldr	r3, [sp, #8]
 8005b70:	2200      	movs	r2, #0
 8005b72:	701a      	strb	r2, [r3, #0]
 8005b74:	e7d9      	b.n	8005b2a <sniprintf+0x16>
 8005b76:	bf00      	nop
 8005b78:	2000000c 	.word	0x2000000c

08005b7c <__ssputs_r>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	688e      	ldr	r6, [r1, #8]
 8005b82:	429e      	cmp	r6, r3
 8005b84:	4682      	mov	sl, r0
 8005b86:	460c      	mov	r4, r1
 8005b88:	4690      	mov	r8, r2
 8005b8a:	461f      	mov	r7, r3
 8005b8c:	d838      	bhi.n	8005c00 <__ssputs_r+0x84>
 8005b8e:	898a      	ldrh	r2, [r1, #12]
 8005b90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b94:	d032      	beq.n	8005bfc <__ssputs_r+0x80>
 8005b96:	6825      	ldr	r5, [r4, #0]
 8005b98:	6909      	ldr	r1, [r1, #16]
 8005b9a:	eba5 0901 	sub.w	r9, r5, r1
 8005b9e:	6965      	ldr	r5, [r4, #20]
 8005ba0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ba8:	3301      	adds	r3, #1
 8005baa:	444b      	add	r3, r9
 8005bac:	106d      	asrs	r5, r5, #1
 8005bae:	429d      	cmp	r5, r3
 8005bb0:	bf38      	it	cc
 8005bb2:	461d      	movcc	r5, r3
 8005bb4:	0553      	lsls	r3, r2, #21
 8005bb6:	d531      	bpl.n	8005c1c <__ssputs_r+0xa0>
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f000 fb53 	bl	8006264 <_malloc_r>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	b950      	cbnz	r0, 8005bd8 <__ssputs_r+0x5c>
 8005bc2:	230c      	movs	r3, #12
 8005bc4:	f8ca 3000 	str.w	r3, [sl]
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bce:	81a3      	strh	r3, [r4, #12]
 8005bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd8:	6921      	ldr	r1, [r4, #16]
 8005bda:	464a      	mov	r2, r9
 8005bdc:	f7ff ff84 	bl	8005ae8 <memcpy>
 8005be0:	89a3      	ldrh	r3, [r4, #12]
 8005be2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005be6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bea:	81a3      	strh	r3, [r4, #12]
 8005bec:	6126      	str	r6, [r4, #16]
 8005bee:	6165      	str	r5, [r4, #20]
 8005bf0:	444e      	add	r6, r9
 8005bf2:	eba5 0509 	sub.w	r5, r5, r9
 8005bf6:	6026      	str	r6, [r4, #0]
 8005bf8:	60a5      	str	r5, [r4, #8]
 8005bfa:	463e      	mov	r6, r7
 8005bfc:	42be      	cmp	r6, r7
 8005bfe:	d900      	bls.n	8005c02 <__ssputs_r+0x86>
 8005c00:	463e      	mov	r6, r7
 8005c02:	6820      	ldr	r0, [r4, #0]
 8005c04:	4632      	mov	r2, r6
 8005c06:	4641      	mov	r1, r8
 8005c08:	f000 faa8 	bl	800615c <memmove>
 8005c0c:	68a3      	ldr	r3, [r4, #8]
 8005c0e:	1b9b      	subs	r3, r3, r6
 8005c10:	60a3      	str	r3, [r4, #8]
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	4433      	add	r3, r6
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	e7db      	b.n	8005bd4 <__ssputs_r+0x58>
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	f000 fb95 	bl	800634c <_realloc_r>
 8005c22:	4606      	mov	r6, r0
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d1e1      	bne.n	8005bec <__ssputs_r+0x70>
 8005c28:	6921      	ldr	r1, [r4, #16]
 8005c2a:	4650      	mov	r0, sl
 8005c2c:	f000 fab0 	bl	8006190 <_free_r>
 8005c30:	e7c7      	b.n	8005bc2 <__ssputs_r+0x46>
	...

08005c34 <_svfiprintf_r>:
 8005c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c38:	4698      	mov	r8, r3
 8005c3a:	898b      	ldrh	r3, [r1, #12]
 8005c3c:	061b      	lsls	r3, r3, #24
 8005c3e:	b09d      	sub	sp, #116	; 0x74
 8005c40:	4607      	mov	r7, r0
 8005c42:	460d      	mov	r5, r1
 8005c44:	4614      	mov	r4, r2
 8005c46:	d50e      	bpl.n	8005c66 <_svfiprintf_r+0x32>
 8005c48:	690b      	ldr	r3, [r1, #16]
 8005c4a:	b963      	cbnz	r3, 8005c66 <_svfiprintf_r+0x32>
 8005c4c:	2140      	movs	r1, #64	; 0x40
 8005c4e:	f000 fb09 	bl	8006264 <_malloc_r>
 8005c52:	6028      	str	r0, [r5, #0]
 8005c54:	6128      	str	r0, [r5, #16]
 8005c56:	b920      	cbnz	r0, 8005c62 <_svfiprintf_r+0x2e>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c60:	e0d1      	b.n	8005e06 <_svfiprintf_r+0x1d2>
 8005c62:	2340      	movs	r3, #64	; 0x40
 8005c64:	616b      	str	r3, [r5, #20]
 8005c66:	2300      	movs	r3, #0
 8005c68:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6a:	2320      	movs	r3, #32
 8005c6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c74:	2330      	movs	r3, #48	; 0x30
 8005c76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005e20 <_svfiprintf_r+0x1ec>
 8005c7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c7e:	f04f 0901 	mov.w	r9, #1
 8005c82:	4623      	mov	r3, r4
 8005c84:	469a      	mov	sl, r3
 8005c86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c8a:	b10a      	cbz	r2, 8005c90 <_svfiprintf_r+0x5c>
 8005c8c:	2a25      	cmp	r2, #37	; 0x25
 8005c8e:	d1f9      	bne.n	8005c84 <_svfiprintf_r+0x50>
 8005c90:	ebba 0b04 	subs.w	fp, sl, r4
 8005c94:	d00b      	beq.n	8005cae <_svfiprintf_r+0x7a>
 8005c96:	465b      	mov	r3, fp
 8005c98:	4622      	mov	r2, r4
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	f7ff ff6d 	bl	8005b7c <__ssputs_r>
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	f000 80aa 	beq.w	8005dfc <_svfiprintf_r+0x1c8>
 8005ca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005caa:	445a      	add	r2, fp
 8005cac:	9209      	str	r2, [sp, #36]	; 0x24
 8005cae:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80a2 	beq.w	8005dfc <_svfiprintf_r+0x1c8>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cc2:	f10a 0a01 	add.w	sl, sl, #1
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	9307      	str	r3, [sp, #28]
 8005cca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cce:	931a      	str	r3, [sp, #104]	; 0x68
 8005cd0:	4654      	mov	r4, sl
 8005cd2:	2205      	movs	r2, #5
 8005cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd8:	4851      	ldr	r0, [pc, #324]	; (8005e20 <_svfiprintf_r+0x1ec>)
 8005cda:	f7fa fa51 	bl	8000180 <memchr>
 8005cde:	9a04      	ldr	r2, [sp, #16]
 8005ce0:	b9d8      	cbnz	r0, 8005d1a <_svfiprintf_r+0xe6>
 8005ce2:	06d0      	lsls	r0, r2, #27
 8005ce4:	bf44      	itt	mi
 8005ce6:	2320      	movmi	r3, #32
 8005ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cec:	0711      	lsls	r1, r2, #28
 8005cee:	bf44      	itt	mi
 8005cf0:	232b      	movmi	r3, #43	; 0x2b
 8005cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cf6:	f89a 3000 	ldrb.w	r3, [sl]
 8005cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfc:	d015      	beq.n	8005d2a <_svfiprintf_r+0xf6>
 8005cfe:	9a07      	ldr	r2, [sp, #28]
 8005d00:	4654      	mov	r4, sl
 8005d02:	2000      	movs	r0, #0
 8005d04:	f04f 0c0a 	mov.w	ip, #10
 8005d08:	4621      	mov	r1, r4
 8005d0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d0e:	3b30      	subs	r3, #48	; 0x30
 8005d10:	2b09      	cmp	r3, #9
 8005d12:	d94e      	bls.n	8005db2 <_svfiprintf_r+0x17e>
 8005d14:	b1b0      	cbz	r0, 8005d44 <_svfiprintf_r+0x110>
 8005d16:	9207      	str	r2, [sp, #28]
 8005d18:	e014      	b.n	8005d44 <_svfiprintf_r+0x110>
 8005d1a:	eba0 0308 	sub.w	r3, r0, r8
 8005d1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d22:	4313      	orrs	r3, r2
 8005d24:	9304      	str	r3, [sp, #16]
 8005d26:	46a2      	mov	sl, r4
 8005d28:	e7d2      	b.n	8005cd0 <_svfiprintf_r+0x9c>
 8005d2a:	9b03      	ldr	r3, [sp, #12]
 8005d2c:	1d19      	adds	r1, r3, #4
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	9103      	str	r1, [sp, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bfbb      	ittet	lt
 8005d36:	425b      	neglt	r3, r3
 8005d38:	f042 0202 	orrlt.w	r2, r2, #2
 8005d3c:	9307      	strge	r3, [sp, #28]
 8005d3e:	9307      	strlt	r3, [sp, #28]
 8005d40:	bfb8      	it	lt
 8005d42:	9204      	strlt	r2, [sp, #16]
 8005d44:	7823      	ldrb	r3, [r4, #0]
 8005d46:	2b2e      	cmp	r3, #46	; 0x2e
 8005d48:	d10c      	bne.n	8005d64 <_svfiprintf_r+0x130>
 8005d4a:	7863      	ldrb	r3, [r4, #1]
 8005d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d4e:	d135      	bne.n	8005dbc <_svfiprintf_r+0x188>
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	1d1a      	adds	r2, r3, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	9203      	str	r2, [sp, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bfb8      	it	lt
 8005d5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d60:	3402      	adds	r4, #2
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005e24 <_svfiprintf_r+0x1f0>
 8005d68:	7821      	ldrb	r1, [r4, #0]
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	4650      	mov	r0, sl
 8005d6e:	f7fa fa07 	bl	8000180 <memchr>
 8005d72:	b140      	cbz	r0, 8005d86 <_svfiprintf_r+0x152>
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	eba0 000a 	sub.w	r0, r0, sl
 8005d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8005d7e:	9b04      	ldr	r3, [sp, #16]
 8005d80:	4303      	orrs	r3, r0
 8005d82:	3401      	adds	r4, #1
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8a:	4827      	ldr	r0, [pc, #156]	; (8005e28 <_svfiprintf_r+0x1f4>)
 8005d8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d90:	2206      	movs	r2, #6
 8005d92:	f7fa f9f5 	bl	8000180 <memchr>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	d038      	beq.n	8005e0c <_svfiprintf_r+0x1d8>
 8005d9a:	4b24      	ldr	r3, [pc, #144]	; (8005e2c <_svfiprintf_r+0x1f8>)
 8005d9c:	bb1b      	cbnz	r3, 8005de6 <_svfiprintf_r+0x1b2>
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	3307      	adds	r3, #7
 8005da2:	f023 0307 	bic.w	r3, r3, #7
 8005da6:	3308      	adds	r3, #8
 8005da8:	9303      	str	r3, [sp, #12]
 8005daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dac:	4433      	add	r3, r6
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
 8005db0:	e767      	b.n	8005c82 <_svfiprintf_r+0x4e>
 8005db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005db6:	460c      	mov	r4, r1
 8005db8:	2001      	movs	r0, #1
 8005dba:	e7a5      	b.n	8005d08 <_svfiprintf_r+0xd4>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	3401      	adds	r4, #1
 8005dc0:	9305      	str	r3, [sp, #20]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	f04f 0c0a 	mov.w	ip, #10
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dce:	3a30      	subs	r2, #48	; 0x30
 8005dd0:	2a09      	cmp	r2, #9
 8005dd2:	d903      	bls.n	8005ddc <_svfiprintf_r+0x1a8>
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0c5      	beq.n	8005d64 <_svfiprintf_r+0x130>
 8005dd8:	9105      	str	r1, [sp, #20]
 8005dda:	e7c3      	b.n	8005d64 <_svfiprintf_r+0x130>
 8005ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005de0:	4604      	mov	r4, r0
 8005de2:	2301      	movs	r3, #1
 8005de4:	e7f0      	b.n	8005dc8 <_svfiprintf_r+0x194>
 8005de6:	ab03      	add	r3, sp, #12
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	462a      	mov	r2, r5
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <_svfiprintf_r+0x1fc>)
 8005dee:	a904      	add	r1, sp, #16
 8005df0:	4638      	mov	r0, r7
 8005df2:	f3af 8000 	nop.w
 8005df6:	1c42      	adds	r2, r0, #1
 8005df8:	4606      	mov	r6, r0
 8005dfa:	d1d6      	bne.n	8005daa <_svfiprintf_r+0x176>
 8005dfc:	89ab      	ldrh	r3, [r5, #12]
 8005dfe:	065b      	lsls	r3, r3, #25
 8005e00:	f53f af2c 	bmi.w	8005c5c <_svfiprintf_r+0x28>
 8005e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e06:	b01d      	add	sp, #116	; 0x74
 8005e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0c:	ab03      	add	r3, sp, #12
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	462a      	mov	r2, r5
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <_svfiprintf_r+0x1fc>)
 8005e14:	a904      	add	r1, sp, #16
 8005e16:	4638      	mov	r0, r7
 8005e18:	f000 f87a 	bl	8005f10 <_printf_i>
 8005e1c:	e7eb      	b.n	8005df6 <_svfiprintf_r+0x1c2>
 8005e1e:	bf00      	nop
 8005e20:	08006528 	.word	0x08006528
 8005e24:	0800652e 	.word	0x0800652e
 8005e28:	08006532 	.word	0x08006532
 8005e2c:	00000000 	.word	0x00000000
 8005e30:	08005b7d 	.word	0x08005b7d

08005e34 <_printf_common>:
 8005e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e38:	4616      	mov	r6, r2
 8005e3a:	4699      	mov	r9, r3
 8005e3c:	688a      	ldr	r2, [r1, #8]
 8005e3e:	690b      	ldr	r3, [r1, #16]
 8005e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e44:	4293      	cmp	r3, r2
 8005e46:	bfb8      	it	lt
 8005e48:	4613      	movlt	r3, r2
 8005e4a:	6033      	str	r3, [r6, #0]
 8005e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e50:	4607      	mov	r7, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	b10a      	cbz	r2, 8005e5a <_printf_common+0x26>
 8005e56:	3301      	adds	r3, #1
 8005e58:	6033      	str	r3, [r6, #0]
 8005e5a:	6823      	ldr	r3, [r4, #0]
 8005e5c:	0699      	lsls	r1, r3, #26
 8005e5e:	bf42      	ittt	mi
 8005e60:	6833      	ldrmi	r3, [r6, #0]
 8005e62:	3302      	addmi	r3, #2
 8005e64:	6033      	strmi	r3, [r6, #0]
 8005e66:	6825      	ldr	r5, [r4, #0]
 8005e68:	f015 0506 	ands.w	r5, r5, #6
 8005e6c:	d106      	bne.n	8005e7c <_printf_common+0x48>
 8005e6e:	f104 0a19 	add.w	sl, r4, #25
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	6832      	ldr	r2, [r6, #0]
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	dc26      	bgt.n	8005eca <_printf_common+0x96>
 8005e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e80:	1e13      	subs	r3, r2, #0
 8005e82:	6822      	ldr	r2, [r4, #0]
 8005e84:	bf18      	it	ne
 8005e86:	2301      	movne	r3, #1
 8005e88:	0692      	lsls	r2, r2, #26
 8005e8a:	d42b      	bmi.n	8005ee4 <_printf_common+0xb0>
 8005e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e90:	4649      	mov	r1, r9
 8005e92:	4638      	mov	r0, r7
 8005e94:	47c0      	blx	r8
 8005e96:	3001      	adds	r0, #1
 8005e98:	d01e      	beq.n	8005ed8 <_printf_common+0xa4>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	68e5      	ldr	r5, [r4, #12]
 8005e9e:	6832      	ldr	r2, [r6, #0]
 8005ea0:	f003 0306 	and.w	r3, r3, #6
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	bf08      	it	eq
 8005ea8:	1aad      	subeq	r5, r5, r2
 8005eaa:	68a3      	ldr	r3, [r4, #8]
 8005eac:	6922      	ldr	r2, [r4, #16]
 8005eae:	bf0c      	ite	eq
 8005eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005eb4:	2500      	movne	r5, #0
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	bfc4      	itt	gt
 8005eba:	1a9b      	subgt	r3, r3, r2
 8005ebc:	18ed      	addgt	r5, r5, r3
 8005ebe:	2600      	movs	r6, #0
 8005ec0:	341a      	adds	r4, #26
 8005ec2:	42b5      	cmp	r5, r6
 8005ec4:	d11a      	bne.n	8005efc <_printf_common+0xc8>
 8005ec6:	2000      	movs	r0, #0
 8005ec8:	e008      	b.n	8005edc <_printf_common+0xa8>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4652      	mov	r2, sl
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4638      	mov	r0, r7
 8005ed2:	47c0      	blx	r8
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d103      	bne.n	8005ee0 <_printf_common+0xac>
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee0:	3501      	adds	r5, #1
 8005ee2:	e7c6      	b.n	8005e72 <_printf_common+0x3e>
 8005ee4:	18e1      	adds	r1, r4, r3
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	2030      	movs	r0, #48	; 0x30
 8005eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005eee:	4422      	add	r2, r4
 8005ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ef8:	3302      	adds	r3, #2
 8005efa:	e7c7      	b.n	8005e8c <_printf_common+0x58>
 8005efc:	2301      	movs	r3, #1
 8005efe:	4622      	mov	r2, r4
 8005f00:	4649      	mov	r1, r9
 8005f02:	4638      	mov	r0, r7
 8005f04:	47c0      	blx	r8
 8005f06:	3001      	adds	r0, #1
 8005f08:	d0e6      	beq.n	8005ed8 <_printf_common+0xa4>
 8005f0a:	3601      	adds	r6, #1
 8005f0c:	e7d9      	b.n	8005ec2 <_printf_common+0x8e>
	...

08005f10 <_printf_i>:
 8005f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f14:	7e0f      	ldrb	r7, [r1, #24]
 8005f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f18:	2f78      	cmp	r7, #120	; 0x78
 8005f1a:	4691      	mov	r9, r2
 8005f1c:	4680      	mov	r8, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	469a      	mov	sl, r3
 8005f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f26:	d807      	bhi.n	8005f38 <_printf_i+0x28>
 8005f28:	2f62      	cmp	r7, #98	; 0x62
 8005f2a:	d80a      	bhi.n	8005f42 <_printf_i+0x32>
 8005f2c:	2f00      	cmp	r7, #0
 8005f2e:	f000 80d8 	beq.w	80060e2 <_printf_i+0x1d2>
 8005f32:	2f58      	cmp	r7, #88	; 0x58
 8005f34:	f000 80a3 	beq.w	800607e <_printf_i+0x16e>
 8005f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f40:	e03a      	b.n	8005fb8 <_printf_i+0xa8>
 8005f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f46:	2b15      	cmp	r3, #21
 8005f48:	d8f6      	bhi.n	8005f38 <_printf_i+0x28>
 8005f4a:	a101      	add	r1, pc, #4	; (adr r1, 8005f50 <_printf_i+0x40>)
 8005f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f50:	08005fa9 	.word	0x08005fa9
 8005f54:	08005fbd 	.word	0x08005fbd
 8005f58:	08005f39 	.word	0x08005f39
 8005f5c:	08005f39 	.word	0x08005f39
 8005f60:	08005f39 	.word	0x08005f39
 8005f64:	08005f39 	.word	0x08005f39
 8005f68:	08005fbd 	.word	0x08005fbd
 8005f6c:	08005f39 	.word	0x08005f39
 8005f70:	08005f39 	.word	0x08005f39
 8005f74:	08005f39 	.word	0x08005f39
 8005f78:	08005f39 	.word	0x08005f39
 8005f7c:	080060c9 	.word	0x080060c9
 8005f80:	08005fed 	.word	0x08005fed
 8005f84:	080060ab 	.word	0x080060ab
 8005f88:	08005f39 	.word	0x08005f39
 8005f8c:	08005f39 	.word	0x08005f39
 8005f90:	080060eb 	.word	0x080060eb
 8005f94:	08005f39 	.word	0x08005f39
 8005f98:	08005fed 	.word	0x08005fed
 8005f9c:	08005f39 	.word	0x08005f39
 8005fa0:	08005f39 	.word	0x08005f39
 8005fa4:	080060b3 	.word	0x080060b3
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	1d1a      	adds	r2, r3, #4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	602a      	str	r2, [r5, #0]
 8005fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e0a3      	b.n	8006104 <_printf_i+0x1f4>
 8005fbc:	6820      	ldr	r0, [r4, #0]
 8005fbe:	6829      	ldr	r1, [r5, #0]
 8005fc0:	0606      	lsls	r6, r0, #24
 8005fc2:	f101 0304 	add.w	r3, r1, #4
 8005fc6:	d50a      	bpl.n	8005fde <_printf_i+0xce>
 8005fc8:	680e      	ldr	r6, [r1, #0]
 8005fca:	602b      	str	r3, [r5, #0]
 8005fcc:	2e00      	cmp	r6, #0
 8005fce:	da03      	bge.n	8005fd8 <_printf_i+0xc8>
 8005fd0:	232d      	movs	r3, #45	; 0x2d
 8005fd2:	4276      	negs	r6, r6
 8005fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd8:	485e      	ldr	r0, [pc, #376]	; (8006154 <_printf_i+0x244>)
 8005fda:	230a      	movs	r3, #10
 8005fdc:	e019      	b.n	8006012 <_printf_i+0x102>
 8005fde:	680e      	ldr	r6, [r1, #0]
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fe6:	bf18      	it	ne
 8005fe8:	b236      	sxthne	r6, r6
 8005fea:	e7ef      	b.n	8005fcc <_printf_i+0xbc>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	6820      	ldr	r0, [r4, #0]
 8005ff0:	1d19      	adds	r1, r3, #4
 8005ff2:	6029      	str	r1, [r5, #0]
 8005ff4:	0601      	lsls	r1, r0, #24
 8005ff6:	d501      	bpl.n	8005ffc <_printf_i+0xec>
 8005ff8:	681e      	ldr	r6, [r3, #0]
 8005ffa:	e002      	b.n	8006002 <_printf_i+0xf2>
 8005ffc:	0646      	lsls	r6, r0, #25
 8005ffe:	d5fb      	bpl.n	8005ff8 <_printf_i+0xe8>
 8006000:	881e      	ldrh	r6, [r3, #0]
 8006002:	4854      	ldr	r0, [pc, #336]	; (8006154 <_printf_i+0x244>)
 8006004:	2f6f      	cmp	r7, #111	; 0x6f
 8006006:	bf0c      	ite	eq
 8006008:	2308      	moveq	r3, #8
 800600a:	230a      	movne	r3, #10
 800600c:	2100      	movs	r1, #0
 800600e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006012:	6865      	ldr	r5, [r4, #4]
 8006014:	60a5      	str	r5, [r4, #8]
 8006016:	2d00      	cmp	r5, #0
 8006018:	bfa2      	ittt	ge
 800601a:	6821      	ldrge	r1, [r4, #0]
 800601c:	f021 0104 	bicge.w	r1, r1, #4
 8006020:	6021      	strge	r1, [r4, #0]
 8006022:	b90e      	cbnz	r6, 8006028 <_printf_i+0x118>
 8006024:	2d00      	cmp	r5, #0
 8006026:	d04d      	beq.n	80060c4 <_printf_i+0x1b4>
 8006028:	4615      	mov	r5, r2
 800602a:	fbb6 f1f3 	udiv	r1, r6, r3
 800602e:	fb03 6711 	mls	r7, r3, r1, r6
 8006032:	5dc7      	ldrb	r7, [r0, r7]
 8006034:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006038:	4637      	mov	r7, r6
 800603a:	42bb      	cmp	r3, r7
 800603c:	460e      	mov	r6, r1
 800603e:	d9f4      	bls.n	800602a <_printf_i+0x11a>
 8006040:	2b08      	cmp	r3, #8
 8006042:	d10b      	bne.n	800605c <_printf_i+0x14c>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	07de      	lsls	r6, r3, #31
 8006048:	d508      	bpl.n	800605c <_printf_i+0x14c>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	6861      	ldr	r1, [r4, #4]
 800604e:	4299      	cmp	r1, r3
 8006050:	bfde      	ittt	le
 8006052:	2330      	movle	r3, #48	; 0x30
 8006054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006058:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800605c:	1b52      	subs	r2, r2, r5
 800605e:	6122      	str	r2, [r4, #16]
 8006060:	f8cd a000 	str.w	sl, [sp]
 8006064:	464b      	mov	r3, r9
 8006066:	aa03      	add	r2, sp, #12
 8006068:	4621      	mov	r1, r4
 800606a:	4640      	mov	r0, r8
 800606c:	f7ff fee2 	bl	8005e34 <_printf_common>
 8006070:	3001      	adds	r0, #1
 8006072:	d14c      	bne.n	800610e <_printf_i+0x1fe>
 8006074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006078:	b004      	add	sp, #16
 800607a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800607e:	4835      	ldr	r0, [pc, #212]	; (8006154 <_printf_i+0x244>)
 8006080:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006084:	6829      	ldr	r1, [r5, #0]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	f851 6b04 	ldr.w	r6, [r1], #4
 800608c:	6029      	str	r1, [r5, #0]
 800608e:	061d      	lsls	r5, r3, #24
 8006090:	d514      	bpl.n	80060bc <_printf_i+0x1ac>
 8006092:	07df      	lsls	r7, r3, #31
 8006094:	bf44      	itt	mi
 8006096:	f043 0320 	orrmi.w	r3, r3, #32
 800609a:	6023      	strmi	r3, [r4, #0]
 800609c:	b91e      	cbnz	r6, 80060a6 <_printf_i+0x196>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f023 0320 	bic.w	r3, r3, #32
 80060a4:	6023      	str	r3, [r4, #0]
 80060a6:	2310      	movs	r3, #16
 80060a8:	e7b0      	b.n	800600c <_printf_i+0xfc>
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	f043 0320 	orr.w	r3, r3, #32
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	2378      	movs	r3, #120	; 0x78
 80060b4:	4828      	ldr	r0, [pc, #160]	; (8006158 <_printf_i+0x248>)
 80060b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060ba:	e7e3      	b.n	8006084 <_printf_i+0x174>
 80060bc:	0659      	lsls	r1, r3, #25
 80060be:	bf48      	it	mi
 80060c0:	b2b6      	uxthmi	r6, r6
 80060c2:	e7e6      	b.n	8006092 <_printf_i+0x182>
 80060c4:	4615      	mov	r5, r2
 80060c6:	e7bb      	b.n	8006040 <_printf_i+0x130>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	6826      	ldr	r6, [r4, #0]
 80060cc:	6961      	ldr	r1, [r4, #20]
 80060ce:	1d18      	adds	r0, r3, #4
 80060d0:	6028      	str	r0, [r5, #0]
 80060d2:	0635      	lsls	r5, r6, #24
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	d501      	bpl.n	80060dc <_printf_i+0x1cc>
 80060d8:	6019      	str	r1, [r3, #0]
 80060da:	e002      	b.n	80060e2 <_printf_i+0x1d2>
 80060dc:	0670      	lsls	r0, r6, #25
 80060de:	d5fb      	bpl.n	80060d8 <_printf_i+0x1c8>
 80060e0:	8019      	strh	r1, [r3, #0]
 80060e2:	2300      	movs	r3, #0
 80060e4:	6123      	str	r3, [r4, #16]
 80060e6:	4615      	mov	r5, r2
 80060e8:	e7ba      	b.n	8006060 <_printf_i+0x150>
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	1d1a      	adds	r2, r3, #4
 80060ee:	602a      	str	r2, [r5, #0]
 80060f0:	681d      	ldr	r5, [r3, #0]
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	2100      	movs	r1, #0
 80060f6:	4628      	mov	r0, r5
 80060f8:	f7fa f842 	bl	8000180 <memchr>
 80060fc:	b108      	cbz	r0, 8006102 <_printf_i+0x1f2>
 80060fe:	1b40      	subs	r0, r0, r5
 8006100:	6060      	str	r0, [r4, #4]
 8006102:	6863      	ldr	r3, [r4, #4]
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	2300      	movs	r3, #0
 8006108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800610c:	e7a8      	b.n	8006060 <_printf_i+0x150>
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	462a      	mov	r2, r5
 8006112:	4649      	mov	r1, r9
 8006114:	4640      	mov	r0, r8
 8006116:	47d0      	blx	sl
 8006118:	3001      	adds	r0, #1
 800611a:	d0ab      	beq.n	8006074 <_printf_i+0x164>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	079b      	lsls	r3, r3, #30
 8006120:	d413      	bmi.n	800614a <_printf_i+0x23a>
 8006122:	68e0      	ldr	r0, [r4, #12]
 8006124:	9b03      	ldr	r3, [sp, #12]
 8006126:	4298      	cmp	r0, r3
 8006128:	bfb8      	it	lt
 800612a:	4618      	movlt	r0, r3
 800612c:	e7a4      	b.n	8006078 <_printf_i+0x168>
 800612e:	2301      	movs	r3, #1
 8006130:	4632      	mov	r2, r6
 8006132:	4649      	mov	r1, r9
 8006134:	4640      	mov	r0, r8
 8006136:	47d0      	blx	sl
 8006138:	3001      	adds	r0, #1
 800613a:	d09b      	beq.n	8006074 <_printf_i+0x164>
 800613c:	3501      	adds	r5, #1
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	9903      	ldr	r1, [sp, #12]
 8006142:	1a5b      	subs	r3, r3, r1
 8006144:	42ab      	cmp	r3, r5
 8006146:	dcf2      	bgt.n	800612e <_printf_i+0x21e>
 8006148:	e7eb      	b.n	8006122 <_printf_i+0x212>
 800614a:	2500      	movs	r5, #0
 800614c:	f104 0619 	add.w	r6, r4, #25
 8006150:	e7f5      	b.n	800613e <_printf_i+0x22e>
 8006152:	bf00      	nop
 8006154:	08006539 	.word	0x08006539
 8006158:	0800654a 	.word	0x0800654a

0800615c <memmove>:
 800615c:	4288      	cmp	r0, r1
 800615e:	b510      	push	{r4, lr}
 8006160:	eb01 0402 	add.w	r4, r1, r2
 8006164:	d902      	bls.n	800616c <memmove+0x10>
 8006166:	4284      	cmp	r4, r0
 8006168:	4623      	mov	r3, r4
 800616a:	d807      	bhi.n	800617c <memmove+0x20>
 800616c:	1e43      	subs	r3, r0, #1
 800616e:	42a1      	cmp	r1, r4
 8006170:	d008      	beq.n	8006184 <memmove+0x28>
 8006172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800617a:	e7f8      	b.n	800616e <memmove+0x12>
 800617c:	4402      	add	r2, r0
 800617e:	4601      	mov	r1, r0
 8006180:	428a      	cmp	r2, r1
 8006182:	d100      	bne.n	8006186 <memmove+0x2a>
 8006184:	bd10      	pop	{r4, pc}
 8006186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800618a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800618e:	e7f7      	b.n	8006180 <memmove+0x24>

08006190 <_free_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4605      	mov	r5, r0
 8006194:	2900      	cmp	r1, #0
 8006196:	d041      	beq.n	800621c <_free_r+0x8c>
 8006198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619c:	1f0c      	subs	r4, r1, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfb8      	it	lt
 80061a2:	18e4      	addlt	r4, r4, r3
 80061a4:	f000 f912 	bl	80063cc <__malloc_lock>
 80061a8:	4a1d      	ldr	r2, [pc, #116]	; (8006220 <_free_r+0x90>)
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	b933      	cbnz	r3, 80061bc <_free_r+0x2c>
 80061ae:	6063      	str	r3, [r4, #4]
 80061b0:	6014      	str	r4, [r2, #0]
 80061b2:	4628      	mov	r0, r5
 80061b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b8:	f000 b90e 	b.w	80063d8 <__malloc_unlock>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d908      	bls.n	80061d2 <_free_r+0x42>
 80061c0:	6820      	ldr	r0, [r4, #0]
 80061c2:	1821      	adds	r1, r4, r0
 80061c4:	428b      	cmp	r3, r1
 80061c6:	bf01      	itttt	eq
 80061c8:	6819      	ldreq	r1, [r3, #0]
 80061ca:	685b      	ldreq	r3, [r3, #4]
 80061cc:	1809      	addeq	r1, r1, r0
 80061ce:	6021      	streq	r1, [r4, #0]
 80061d0:	e7ed      	b.n	80061ae <_free_r+0x1e>
 80061d2:	461a      	mov	r2, r3
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	b10b      	cbz	r3, 80061dc <_free_r+0x4c>
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d9fa      	bls.n	80061d2 <_free_r+0x42>
 80061dc:	6811      	ldr	r1, [r2, #0]
 80061de:	1850      	adds	r0, r2, r1
 80061e0:	42a0      	cmp	r0, r4
 80061e2:	d10b      	bne.n	80061fc <_free_r+0x6c>
 80061e4:	6820      	ldr	r0, [r4, #0]
 80061e6:	4401      	add	r1, r0
 80061e8:	1850      	adds	r0, r2, r1
 80061ea:	4283      	cmp	r3, r0
 80061ec:	6011      	str	r1, [r2, #0]
 80061ee:	d1e0      	bne.n	80061b2 <_free_r+0x22>
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	6053      	str	r3, [r2, #4]
 80061f6:	4401      	add	r1, r0
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	e7da      	b.n	80061b2 <_free_r+0x22>
 80061fc:	d902      	bls.n	8006204 <_free_r+0x74>
 80061fe:	230c      	movs	r3, #12
 8006200:	602b      	str	r3, [r5, #0]
 8006202:	e7d6      	b.n	80061b2 <_free_r+0x22>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	1821      	adds	r1, r4, r0
 8006208:	428b      	cmp	r3, r1
 800620a:	bf04      	itt	eq
 800620c:	6819      	ldreq	r1, [r3, #0]
 800620e:	685b      	ldreq	r3, [r3, #4]
 8006210:	6063      	str	r3, [r4, #4]
 8006212:	bf04      	itt	eq
 8006214:	1809      	addeq	r1, r1, r0
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	6054      	str	r4, [r2, #4]
 800621a:	e7ca      	b.n	80061b2 <_free_r+0x22>
 800621c:	bd38      	pop	{r3, r4, r5, pc}
 800621e:	bf00      	nop
 8006220:	200001b4 	.word	0x200001b4

08006224 <sbrk_aligned>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	4e0e      	ldr	r6, [pc, #56]	; (8006260 <sbrk_aligned+0x3c>)
 8006228:	460c      	mov	r4, r1
 800622a:	6831      	ldr	r1, [r6, #0]
 800622c:	4605      	mov	r5, r0
 800622e:	b911      	cbnz	r1, 8006236 <sbrk_aligned+0x12>
 8006230:	f000 f8bc 	bl	80063ac <_sbrk_r>
 8006234:	6030      	str	r0, [r6, #0]
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f8b7 	bl	80063ac <_sbrk_r>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	d00a      	beq.n	8006258 <sbrk_aligned+0x34>
 8006242:	1cc4      	adds	r4, r0, #3
 8006244:	f024 0403 	bic.w	r4, r4, #3
 8006248:	42a0      	cmp	r0, r4
 800624a:	d007      	beq.n	800625c <sbrk_aligned+0x38>
 800624c:	1a21      	subs	r1, r4, r0
 800624e:	4628      	mov	r0, r5
 8006250:	f000 f8ac 	bl	80063ac <_sbrk_r>
 8006254:	3001      	adds	r0, #1
 8006256:	d101      	bne.n	800625c <sbrk_aligned+0x38>
 8006258:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800625c:	4620      	mov	r0, r4
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	200001b8 	.word	0x200001b8

08006264 <_malloc_r>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	1ccd      	adds	r5, r1, #3
 800626a:	f025 0503 	bic.w	r5, r5, #3
 800626e:	3508      	adds	r5, #8
 8006270:	2d0c      	cmp	r5, #12
 8006272:	bf38      	it	cc
 8006274:	250c      	movcc	r5, #12
 8006276:	2d00      	cmp	r5, #0
 8006278:	4607      	mov	r7, r0
 800627a:	db01      	blt.n	8006280 <_malloc_r+0x1c>
 800627c:	42a9      	cmp	r1, r5
 800627e:	d905      	bls.n	800628c <_malloc_r+0x28>
 8006280:	230c      	movs	r3, #12
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	2600      	movs	r6, #0
 8006286:	4630      	mov	r0, r6
 8006288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800628c:	4e2e      	ldr	r6, [pc, #184]	; (8006348 <_malloc_r+0xe4>)
 800628e:	f000 f89d 	bl	80063cc <__malloc_lock>
 8006292:	6833      	ldr	r3, [r6, #0]
 8006294:	461c      	mov	r4, r3
 8006296:	bb34      	cbnz	r4, 80062e6 <_malloc_r+0x82>
 8006298:	4629      	mov	r1, r5
 800629a:	4638      	mov	r0, r7
 800629c:	f7ff ffc2 	bl	8006224 <sbrk_aligned>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	4604      	mov	r4, r0
 80062a4:	d14d      	bne.n	8006342 <_malloc_r+0xde>
 80062a6:	6834      	ldr	r4, [r6, #0]
 80062a8:	4626      	mov	r6, r4
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	d140      	bne.n	8006330 <_malloc_r+0xcc>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	4631      	mov	r1, r6
 80062b2:	4638      	mov	r0, r7
 80062b4:	eb04 0803 	add.w	r8, r4, r3
 80062b8:	f000 f878 	bl	80063ac <_sbrk_r>
 80062bc:	4580      	cmp	r8, r0
 80062be:	d13a      	bne.n	8006336 <_malloc_r+0xd2>
 80062c0:	6821      	ldr	r1, [r4, #0]
 80062c2:	3503      	adds	r5, #3
 80062c4:	1a6d      	subs	r5, r5, r1
 80062c6:	f025 0503 	bic.w	r5, r5, #3
 80062ca:	3508      	adds	r5, #8
 80062cc:	2d0c      	cmp	r5, #12
 80062ce:	bf38      	it	cc
 80062d0:	250c      	movcc	r5, #12
 80062d2:	4629      	mov	r1, r5
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ffa5 	bl	8006224 <sbrk_aligned>
 80062da:	3001      	adds	r0, #1
 80062dc:	d02b      	beq.n	8006336 <_malloc_r+0xd2>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	442b      	add	r3, r5
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	e00e      	b.n	8006304 <_malloc_r+0xa0>
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	1b52      	subs	r2, r2, r5
 80062ea:	d41e      	bmi.n	800632a <_malloc_r+0xc6>
 80062ec:	2a0b      	cmp	r2, #11
 80062ee:	d916      	bls.n	800631e <_malloc_r+0xba>
 80062f0:	1961      	adds	r1, r4, r5
 80062f2:	42a3      	cmp	r3, r4
 80062f4:	6025      	str	r5, [r4, #0]
 80062f6:	bf18      	it	ne
 80062f8:	6059      	strne	r1, [r3, #4]
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	bf08      	it	eq
 80062fe:	6031      	streq	r1, [r6, #0]
 8006300:	5162      	str	r2, [r4, r5]
 8006302:	604b      	str	r3, [r1, #4]
 8006304:	4638      	mov	r0, r7
 8006306:	f104 060b 	add.w	r6, r4, #11
 800630a:	f000 f865 	bl	80063d8 <__malloc_unlock>
 800630e:	f026 0607 	bic.w	r6, r6, #7
 8006312:	1d23      	adds	r3, r4, #4
 8006314:	1af2      	subs	r2, r6, r3
 8006316:	d0b6      	beq.n	8006286 <_malloc_r+0x22>
 8006318:	1b9b      	subs	r3, r3, r6
 800631a:	50a3      	str	r3, [r4, r2]
 800631c:	e7b3      	b.n	8006286 <_malloc_r+0x22>
 800631e:	6862      	ldr	r2, [r4, #4]
 8006320:	42a3      	cmp	r3, r4
 8006322:	bf0c      	ite	eq
 8006324:	6032      	streq	r2, [r6, #0]
 8006326:	605a      	strne	r2, [r3, #4]
 8006328:	e7ec      	b.n	8006304 <_malloc_r+0xa0>
 800632a:	4623      	mov	r3, r4
 800632c:	6864      	ldr	r4, [r4, #4]
 800632e:	e7b2      	b.n	8006296 <_malloc_r+0x32>
 8006330:	4634      	mov	r4, r6
 8006332:	6876      	ldr	r6, [r6, #4]
 8006334:	e7b9      	b.n	80062aa <_malloc_r+0x46>
 8006336:	230c      	movs	r3, #12
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	4638      	mov	r0, r7
 800633c:	f000 f84c 	bl	80063d8 <__malloc_unlock>
 8006340:	e7a1      	b.n	8006286 <_malloc_r+0x22>
 8006342:	6025      	str	r5, [r4, #0]
 8006344:	e7de      	b.n	8006304 <_malloc_r+0xa0>
 8006346:	bf00      	nop
 8006348:	200001b4 	.word	0x200001b4

0800634c <_realloc_r>:
 800634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	4680      	mov	r8, r0
 8006352:	4614      	mov	r4, r2
 8006354:	460e      	mov	r6, r1
 8006356:	b921      	cbnz	r1, 8006362 <_realloc_r+0x16>
 8006358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800635c:	4611      	mov	r1, r2
 800635e:	f7ff bf81 	b.w	8006264 <_malloc_r>
 8006362:	b92a      	cbnz	r2, 8006370 <_realloc_r+0x24>
 8006364:	f7ff ff14 	bl	8006190 <_free_r>
 8006368:	4625      	mov	r5, r4
 800636a:	4628      	mov	r0, r5
 800636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006370:	f000 f838 	bl	80063e4 <_malloc_usable_size_r>
 8006374:	4284      	cmp	r4, r0
 8006376:	4607      	mov	r7, r0
 8006378:	d802      	bhi.n	8006380 <_realloc_r+0x34>
 800637a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800637e:	d812      	bhi.n	80063a6 <_realloc_r+0x5a>
 8006380:	4621      	mov	r1, r4
 8006382:	4640      	mov	r0, r8
 8006384:	f7ff ff6e 	bl	8006264 <_malloc_r>
 8006388:	4605      	mov	r5, r0
 800638a:	2800      	cmp	r0, #0
 800638c:	d0ed      	beq.n	800636a <_realloc_r+0x1e>
 800638e:	42bc      	cmp	r4, r7
 8006390:	4622      	mov	r2, r4
 8006392:	4631      	mov	r1, r6
 8006394:	bf28      	it	cs
 8006396:	463a      	movcs	r2, r7
 8006398:	f7ff fba6 	bl	8005ae8 <memcpy>
 800639c:	4631      	mov	r1, r6
 800639e:	4640      	mov	r0, r8
 80063a0:	f7ff fef6 	bl	8006190 <_free_r>
 80063a4:	e7e1      	b.n	800636a <_realloc_r+0x1e>
 80063a6:	4635      	mov	r5, r6
 80063a8:	e7df      	b.n	800636a <_realloc_r+0x1e>
	...

080063ac <_sbrk_r>:
 80063ac:	b538      	push	{r3, r4, r5, lr}
 80063ae:	4d06      	ldr	r5, [pc, #24]	; (80063c8 <_sbrk_r+0x1c>)
 80063b0:	2300      	movs	r3, #0
 80063b2:	4604      	mov	r4, r0
 80063b4:	4608      	mov	r0, r1
 80063b6:	602b      	str	r3, [r5, #0]
 80063b8:	f7fa fcd0 	bl	8000d5c <_sbrk>
 80063bc:	1c43      	adds	r3, r0, #1
 80063be:	d102      	bne.n	80063c6 <_sbrk_r+0x1a>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b103      	cbz	r3, 80063c6 <_sbrk_r+0x1a>
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	bd38      	pop	{r3, r4, r5, pc}
 80063c8:	200001bc 	.word	0x200001bc

080063cc <__malloc_lock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__malloc_lock+0x8>)
 80063ce:	f000 b811 	b.w	80063f4 <__retarget_lock_acquire_recursive>
 80063d2:	bf00      	nop
 80063d4:	200001c0 	.word	0x200001c0

080063d8 <__malloc_unlock>:
 80063d8:	4801      	ldr	r0, [pc, #4]	; (80063e0 <__malloc_unlock+0x8>)
 80063da:	f000 b80c 	b.w	80063f6 <__retarget_lock_release_recursive>
 80063de:	bf00      	nop
 80063e0:	200001c0 	.word	0x200001c0

080063e4 <_malloc_usable_size_r>:
 80063e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063e8:	1f18      	subs	r0, r3, #4
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bfbc      	itt	lt
 80063ee:	580b      	ldrlt	r3, [r1, r0]
 80063f0:	18c0      	addlt	r0, r0, r3
 80063f2:	4770      	bx	lr

080063f4 <__retarget_lock_acquire_recursive>:
 80063f4:	4770      	bx	lr

080063f6 <__retarget_lock_release_recursive>:
 80063f6:	4770      	bx	lr

080063f8 <_init>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr

08006404 <_fini>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

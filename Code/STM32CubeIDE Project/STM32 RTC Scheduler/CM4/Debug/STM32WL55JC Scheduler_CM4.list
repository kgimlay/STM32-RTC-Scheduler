
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004de8  08004de8  00014de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004edc  08004edc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004edc  08004edc  00014edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ee4  08004ee4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee4  08004ee4  00014ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ee8  08004ee8  00014ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08004ef8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08004ef8  00020220  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b7b  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267d  00000000  00000000  00030bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00033230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  000342a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c138  00000000  00000000  00035238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc5b  00000000  00000000  00051370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000affb7  00000000  00000000  00060fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110f82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  00110fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004dd0 	.word	0x08004dd0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08004dd0 	.word	0x08004dd0

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <initDesktopCommunication>:


/*
 *
 */
void initDesktopCommunication(UART_HandleTypeDef* uartHandle) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <initDesktopCommunication+0x28>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6013      	str	r3, [r2, #0]
	uartQueue_init(&(_process_queue));
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <initDesktopCommunication+0x2c>)
 8000498:	f000 fa77 	bl	800098a <uartQueue_init>
	uartQueue_init(&(_report_queue));
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <initDesktopCommunication+0x30>)
 800049e:	f000 fa74 	bl	800098a <uartQueue_init>

	// set isInit flag
	_isInit = true;
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <initDesktopCommunication+0x34>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	20000030 	.word	0x20000030
 80004b8:	200000bc 	.word	0x200000bc
 80004bc:	20000028 	.word	0x20000028

080004c0 <startDesktopAppCommunication>:


/*
 *
 */
void startDesktopAppCommunication(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	_rxMessage_IT();
 80004c4:	f000 f83e 	bl	8000544 <_rxMessage_IT>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <deskAppRxCompleteISR>:


/*
 *
 */
void deskAppRxCompleteISR(void) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	// check if queue is not full
	if (!uartQueue_isFull(&_process_queue))
 80004d0:	480c      	ldr	r0, [pc, #48]	; (8000504 <deskAppRxCompleteISR+0x38>)
 80004d2:	f000 fab9 	bl	8000a48 <uartQueue_isFull>
 80004d6:	4603      	mov	r3, r0
 80004d8:	f083 0301 	eor.w	r3, r3, #1
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d004      	beq.n	80004ec <deskAppRxCompleteISR+0x20>
	{
		// add message to process queue
		uartQueue_enqueue(&_process_queue, _rxBuffer);
 80004e2:	4909      	ldr	r1, [pc, #36]	; (8000508 <deskAppRxCompleteISR+0x3c>)
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <deskAppRxCompleteISR+0x38>)
 80004e6:	f000 fa7e 	bl	80009e6 <uartQueue_enqueue>
 80004ea:	e006      	b.n	80004fa <deskAppRxCompleteISR+0x2e>
	}

	// queue is full, report to desktop application to pause transmissions
	else
	{
		strncpy(_txBuffer, "\nBUFFER FULL!\n\n", UART_MESSAGE_SIZE);
 80004ec:	2220      	movs	r2, #32
 80004ee:	4907      	ldr	r1, [pc, #28]	; (800050c <deskAppRxCompleteISR+0x40>)
 80004f0:	4807      	ldr	r0, [pc, #28]	; (8000510 <deskAppRxCompleteISR+0x44>)
 80004f2:	f004 fc59 	bl	8004da8 <strncpy>
		_txMessage_IT();
 80004f6:	f000 f80d 	bl	8000514 <_txMessage_IT>
	}

	// begin receiving again
	_rxMessage_IT();
 80004fa:	f000 f823 	bl	8000544 <_rxMessage_IT>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000030 	.word	0x20000030
 8000508:	20000168 	.word	0x20000168
 800050c:	08004de8 	.word	0x08004de8
 8000510:	20000148 	.word	0x20000148

08000514 <_txMessage_IT>:


/*
 *
 */
void _txMessage_IT(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_txMessage_IT+0x24>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2220      	movs	r2, #32
 800051e:	4907      	ldr	r1, [pc, #28]	; (800053c <_txMessage_IT+0x28>)
 8000520:	4618      	mov	r0, r3
 8000522:	f002 fa2f 	bl	8002984 <HAL_UART_Transmit_IT>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d102      	bne.n	8000532 <_txMessage_IT+0x1e>
		_txError = true;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <_txMessage_IT+0x2c>)
 800052e:	2201      	movs	r2, #1
 8000530:	701a      	strb	r2, [r3, #0]
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000148 	.word	0x20000148
 8000540:	20000029 	.word	0x20000029

08000544 <_rxMessage_IT>:


/*
 *
 */
void _rxMessage_IT(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <_rxMessage_IT+0x24>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2220      	movs	r2, #32
 800054e:	4907      	ldr	r1, [pc, #28]	; (800056c <_rxMessage_IT+0x28>)
 8000550:	4618      	mov	r0, r3
 8000552:	f002 faab 	bl	8002aac <HAL_UART_Receive_IT>
 8000556:	4603      	mov	r3, r0
 8000558:	2b01      	cmp	r3, #1
 800055a:	d102      	bne.n	8000562 <_rxMessage_IT+0x1e>
		_rxError = true;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <_rxMessage_IT+0x2c>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000168 	.word	0x20000168
 8000570:	2000002a 	.word	0x2000002a

08000574 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800057c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000584:	f023 0218 	bic.w	r2, r3, #24
 8000588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4313      	orrs	r3, r2
 8000590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr

0800059e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059e:	b480      	push	{r7}
 80005a0:	b085      	sub	sp, #20
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b083      	sub	sp, #12
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	(void)0;  // no operation
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
	// if UART rx on UART2 (for desktop app communication)
	deskAppRxCompleteISR();
 80005fa:	f7ff ff67 	bl	80004cc <deskAppRxCompleteISR>
//	(void)0;  // no operation
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fa64 	bl	8000ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f810 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8be 	bl	8000794 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f866 	bl	80006e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 fe21 	bl	8001264 <HAL_PWREx_ReleaseCore>
//
//  if (HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, UART_MESSAGE_SIZE) != HAL_OK)
//	  Error_Handler();

  // initialize the desktop communication module (doesn't establish connection!)
  initDesktopCommunication(&huart2);
 8000622:	4803      	ldr	r0, [pc, #12]	; (8000630 <main+0x28>)
 8000624:	f7ff ff30 	bl	8000488 <initDesktopCommunication>

  // begin listening for messages from desktop
  startDesktopAppCommunication();
 8000628:	f7ff ff4a 	bl	80004c0 <startDesktopAppCommunication>

  while (1)
 800062c:	e7fe      	b.n	800062c <main+0x24>
 800062e:	bf00      	nop
 8000630:	20000188 	.word	0x20000188

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09a      	sub	sp, #104	; 0x68
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2248      	movs	r2, #72	; 0x48
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fba8 	bl	8004d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800065a:	f000 fddb 	bl	8001214 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800065e:	2000      	movs	r0, #0
 8000660:	f7ff ff88 	bl	8000574 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xb0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800066c:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <SystemClock_Config+0xb0>)
 800066e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <SystemClock_Config+0xb0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000680:	2324      	movs	r3, #36	; 0x24
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000684:	2381      	movs	r3, #129	; 0x81
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800068c:	2300      	movs	r3, #0
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000690:	2360      	movs	r3, #96	; 0x60
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f8a3 	bl	80017e8 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006a8:	f000 f881 	bl	80007ae <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 80006ac:	236f      	movs	r3, #111	; 0x6f
 80006ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 fc0d 	bl	8001eec <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80006d8:	f000 f869 	bl	80007ae <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3768      	adds	r7, #104	; 0x68
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58000400 	.word	0x58000400

080006e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <MX_USART2_UART_Init+0xa4>)
 80006ee:	4a28      	ldr	r2, [pc, #160]	; (8000790 <MX_USART2_UART_Init+0xa8>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <MX_USART2_UART_Init+0xa4>)
 80006f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <MX_USART2_UART_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000708:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800070c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000710:	220c      	movs	r2, #12
 8000712:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_USART2_UART_Init+0xa4>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_USART2_UART_Init+0xa4>)
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000738:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_USART2_UART_Init+0xa4>)
 800073c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000740:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000744:	f002 f8cd 	bl	80028e2 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800074e:	f000 f82e 	bl	80007ae <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000752:	2100      	movs	r1, #0
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000756:	f004 fa24 	bl	8004ba2 <HAL_UARTEx_SetTxFifoThreshold>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000760:	f000 f825 	bl	80007ae <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000768:	f004 fa59 	bl	8004c1e <HAL_UARTEx_SetRxFifoThreshold>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000772:	f000 f81c 	bl	80007ae <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_USART2_UART_Init+0xa4>)
 8000778:	f004 f9db 	bl	8004b32 <HAL_UARTEx_DisableFifoMode>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000782:	f000 f814 	bl	80007ae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000188 	.word	0x20000188
 8000790:	40004400 	.word	0x40004400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff ff00 	bl	800059e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	2004      	movs	r0, #4
 80007a0:	f7ff fefd 	bl	800059e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	2002      	movs	r0, #2
 80007a6:	f7ff fefa 	bl	800059e <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}

080007ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b2:	b672      	cpsid	i
}
 80007b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <Error_Handler+0x8>

080007b8 <LL_AHB2_GRP1_EnableClock>:
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007dc:	68fb      	ldr	r3, [r7, #12]
}
 80007de:	bf00      	nop
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bc80      	pop	{r7}
 80007e6:	4770      	bx	lr

080007e8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000804:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b096      	sub	sp, #88	; 0x58
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2238      	movs	r2, #56	; 0x38
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f004 faa7 	bl	8004d98 <memset>
  if(huart->Instance==USART2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <HAL_UART_MspInit+0x98>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d12e      	bne.n	80008b2 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000854:	2302      	movs	r3, #2
 8000856:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000858:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800085c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4618      	mov	r0, r3
 8000864:	f001 ff02 	bl	800266c <HAL_RCCEx_PeriphCLKConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800086e:	f7ff ff9e 	bl	80007ae <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000872:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000876:	f7ff ffb7 	bl	80007e8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff9c 	bl	80007b8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000880:	230c      	movs	r3, #12
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000890:	2307      	movs	r3, #7
 8000892:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f000 fb59 	bl	8000f54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2025      	movs	r0, #37	; 0x25
 80008a8:	f000 fa63 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008ac:	2025      	movs	r0, #37	; 0x25
 80008ae:	f000 fa7a 	bl	8000da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b2:	bf00      	nop
 80008b4:	3758      	adds	r7, #88	; 0x58
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40004400 	.word	0x40004400

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f941 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <USART2_IRQHandler+0x10>)
 8000916:	f002 f915 	bl	8002b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000188 	.word	0x20000188

08000924 <nextIdx>:


/*
 * Private helper to calculate next index in circular queue.
 */
uint8_t nextIdx(uint8_t index) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	return (index + 1) % QUEUE_SIZE;
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	3301      	adds	r3, #1
 8000932:	425a      	negs	r2, r3
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	f002 0203 	and.w	r2, r2, #3
 800093c:	bf58      	it	pl
 800093e:	4253      	negpl	r3, r2
 8000940:	b2db      	uxtb	r3, r3
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <_enqueue>:

/*
 * Private helper to enqueue a message to the queue.
 */
void _enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	// copy the message to the queue and increment the rear pointer
	memcpy(queue->_queue[queue->_rear], message, QUEUE_BUFFER_SIZE*sizeof(char));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	015b      	lsls	r3, r3, #5
 800095c:	3308      	adds	r3, #8
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	3304      	adds	r3, #4
 8000964:	2220      	movs	r2, #32
 8000966:	6839      	ldr	r1, [r7, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f004 fa07 	bl	8004d7c <memcpy>
	queue->_rear = nextIdx(queue->_rear);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ffd5 	bl	8000924 <nextIdx>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	609a      	str	r2, [r3, #8]
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <uartQueue_init>:

/*
 * Initializes a UART_Queue structure.
 * Call before attempting to operate on the queue.
 */
void uartQueue_init(UART_Queue* queue) {
 800098a:	b480      	push	{r7}
 800098c:	b085      	sub	sp, #20
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	// operation variables
	int row, col;

	// reset all operation variables
	queue->_isEmpty = true;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
	queue->_front = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
	queue->_rear = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]

	// ensure that the queue messages are empty
	for (row = 0; row < QUEUE_SIZE; row++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	e014      	b.n	80009d4 <uartQueue_init+0x4a>
		for (col = 0; col < QUEUE_BUFFER_SIZE; col++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	e00b      	b.n	80009c8 <uartQueue_init+0x3e>
			queue->_queue[row][col] = '\0';
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	015b      	lsls	r3, r3, #5
 80009b6:	441a      	add	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4413      	add	r3, r2
 80009bc:	330c      	adds	r3, #12
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
		for (col = 0; col < QUEUE_BUFFER_SIZE; col++)
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	2b1f      	cmp	r3, #31
 80009cc:	ddf0      	ble.n	80009b0 <uartQueue_init+0x26>
	for (row = 0; row < QUEUE_SIZE; row++)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3301      	adds	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b03      	cmp	r3, #3
 80009d8:	dde7      	ble.n	80009aa <uartQueue_init+0x20>
}
 80009da:	bf00      	nop
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <uartQueue_enqueue>:

/*
 * Enqueue a message.
 * Return success if enqueueing successful, or full if the queue is full.
 */
UART_QUEUE_STATUS uartQueue_enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (uartQueue_isEmpty(queue)) {
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f000 f81d 	bl	8000a30 <uartQueue_isEmpty>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d008      	beq.n	8000a0e <uartQueue_enqueue+0x28>
		// set not empty
		queue->_isEmpty = false;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]

		// enqueue
		_enqueue(queue, message);
 8000a02:	6839      	ldr	r1, [r7, #0]
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ffa1 	bl	800094c <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e00c      	b.n	8000a28 <uartQueue_enqueue+0x42>
	}

	// case that queue is full
	else if (uartQueue_isFull(queue)) {
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f81a 	bl	8000a48 <uartQueue_isFull>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <uartQueue_enqueue+0x38>
		// report
		return UART_QUEUE_FULL;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e004      	b.n	8000a28 <uartQueue_enqueue+0x42>
	}

	// queue is not full, enqueue
	else {
		// enqueue
		_enqueue(queue, message);
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff ff93 	bl	800094c <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000a26:	2300      	movs	r3, #0
	}
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <uartQueue_isEmpty>:
}

/*
 *
 */
bool uartQueue_isEmpty(UART_Queue* queue) {
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	return (queue->_isEmpty);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr

08000a48 <uartQueue_isFull>:

/*
 * Helper to check if a queue is empty.
 */
bool uartQueue_isFull(UART_Queue* queue) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	return (!uartQueue_isEmpty(queue) && queue->_front == queue->_rear);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ffed 	bl	8000a30 <uartQueue_isEmpty>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f083 0301 	eor.w	r3, r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d007      	beq.n	8000a72 <uartQueue_isFull+0x2a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d101      	bne.n	8000a72 <uartQueue_isFull+0x2a>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <uartQueue_isFull+0x2c>
 8000a72:	2300      	movs	r3, #0
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	b2db      	uxtb	r3, r3
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a84:	480d      	ldr	r0, [pc, #52]	; (8000abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a88:	f7ff fcf8 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ab2:	f004 f93f 	bl	8004d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ab6:	f7ff fda7 	bl	8000608 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   r0, =_estack
 8000abc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac8:	08004eec 	.word	0x08004eec
  ldr r2, =_sbss
 8000acc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ad0:	20000220 	.word	0x20000220

08000ad4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 f93a 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ae8:	f001 fbe2 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 8000aec:	4603      	mov	r3, r0
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <HAL_Init+0x3c>)
 8000af0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f810 	bl	8000b18 <HAL_InitTick>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	71fb      	strb	r3, [r7, #7]
 8000b02:	e001      	b.n	8000b08 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b04:	f7ff fe88 	bl	8000818 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000000 	.word	0x20000000

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d024      	beq.n	8000b76 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b2c:	f001 fbc0 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 8000b30:	4602      	mov	r2, r0
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_InitTick+0x6c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 f93c 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d10f      	bne.n	8000b70 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	d809      	bhi.n	8000b6a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b56:	2200      	movs	r2, #0
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5e:	f000 f908 	bl	8000d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b62:	4a09      	ldr	r2, [pc, #36]	; (8000b88 <HAL_InitTick+0x70>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e004      	b.n	8000b7a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e001      	b.n	8000b7a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a03      	ldr	r2, [pc, #12]	; (8000bac <HAL_IncTick+0x20>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	2000021c 	.word	0x2000021c

08000bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	2000021c 	.word	0x2000021c

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4906      	ldr	r1, [pc, #24]	; (8000c5c <__NVIC_EnableIRQ+0x34>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f7ff ff90 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff2d 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff44 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff92 	bl	8000cb4 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff61 	bl	8000c60 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff37 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa4 	bl	8000d18 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e04f      	b.n	8000e8c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d008      	beq.n	8000e0a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e040      	b.n	8000e8c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 020e 	bic.w	r2, r2, #14
 8000e18:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 0201 	bic.w	r2, r2, #1
 8000e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f003 021c 	and.w	r2, r3, #28
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	2101      	movs	r1, #1
 8000e48:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e56:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00c      	beq.n	8000e7a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e6e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e78:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d005      	beq.n	8000eba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e047      	b.n	8000f4a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 020e 	bic.w	r2, r2, #14
 8000ec8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0201 	bic.w	r2, r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ee8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f003 021c 	and.w	r2, r3, #28
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8000efc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f06:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00c      	beq.n	8000f2a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f28:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	4798      	blx	r3
    }
  }
  return status;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f62:	e140      	b.n	80011e6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f70:	4013      	ands	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8132 	beq.w	80011e0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d005      	beq.n	8000f94 <HAL_GPIO_Init+0x40>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	f003 0201 	and.w	r2, r3, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d017      	beq.n	8001032 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d123      	bne.n	8001086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	08da      	lsrs	r2, r3, #3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3208      	adds	r2, #8
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0203 	and.w	r2, r3, #3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 808c 	beq.w	80011e0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x2b0>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	2207      	movs	r2, #7
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010f2:	d00d      	beq.n	8001110 <HAL_GPIO_Init+0x1bc>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a44      	ldr	r2, [pc, #272]	; (8001208 <HAL_GPIO_Init+0x2b4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d007      	beq.n	800110c <HAL_GPIO_Init+0x1b8>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a43      	ldr	r2, [pc, #268]	; (800120c <HAL_GPIO_Init+0x2b8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d101      	bne.n	8001108 <HAL_GPIO_Init+0x1b4>
 8001104:	2302      	movs	r3, #2
 8001106:	e004      	b.n	8001112 <HAL_GPIO_Init+0x1be>
 8001108:	2307      	movs	r3, #7
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x1be>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <HAL_GPIO_Init+0x1be>
 8001110:	2300      	movs	r3, #0
 8001112:	697a      	ldr	r2, [r7, #20]
 8001114:	f002 0203 	and.w	r2, r2, #3
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	4093      	lsls	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001122:	4938      	ldr	r1, [pc, #224]	; (8001204 <HAL_GPIO_Init+0x2b0>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001130:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800117e:	4a24      	ldr	r2, [pc, #144]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 8001186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800118a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80011aa:	4a19      	ldr	r2, [pc, #100]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 80011b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011b8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	fa22 f303 	lsr.w	r3, r2, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f47f aeb7 	bne.w	8000f64 <HAL_GPIO_Init+0x10>
  }
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40010000 	.word	0x40010000
 8001208:	48000400 	.word	0x48000400
 800120c:	48000800 	.word	0x48000800
 8001210:	58000800 	.word	0x58000800

08001214 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_PWR_EnableBkUpAccess+0x18>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_PWR_EnableBkUpAccess+0x18>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	58000400 	.word	0x58000400

08001230 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <LL_PWR_EnableBootC2+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4a03      	ldr	r2, [pc, #12]	; (8001248 <LL_PWR_EnableBootC2+0x18>)
 800123a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123e:	60d3      	str	r3, [r2, #12]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	58000400 	.word	0x58000400

0800124c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001250:	4b03      	ldr	r3, [pc, #12]	; (8001260 <HAL_PWREx_GetVoltageRange+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	58000400 	.word	0x58000400

08001264 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 800126c:	f7ff ffe0 	bl	8001230 <LL_PWR_EnableBootC2>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001288:	d101      	bne.n	800128e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	58000400 	.word	0x58000400

0800129c <LL_RCC_HSE_EnableTcxo>:
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80012a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <LL_RCC_HSE_DisableTcxo>:
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80012bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80012d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012e6:	d101      	bne.n	80012ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80012e8:	2301      	movs	r3, #1
 80012ea:	e000      	b.n	80012ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr

080012f6 <LL_RCC_HSE_Enable>:
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80012fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <LL_RCC_HSE_Disable>:
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <LL_RCC_HSE_IsReady>:
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001340:	d101      	bne.n	8001346 <LL_RCC_HSE_IsReady+0x18>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <LL_RCC_HSE_IsReady+0x1a>
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <LL_RCC_HSI_Enable>:
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800135e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <LL_RCC_HSI_Disable>:
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800137a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <LL_RCC_HSI_IsReady>:
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139a:	d101      	bne.n	80013a0 <LL_RCC_HSI_IsReady+0x18>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <LL_RCC_HSI_IsReady+0x1a>
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <LL_RCC_HSI_SetCalibTrimming>:
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80013b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	061b      	lsls	r3, r3, #24
 80013c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d101      	bne.n	80013ea <LL_RCC_LSE_IsReady+0x18>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_RCC_LSE_IsReady+0x1a>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b02      	cmp	r3, #2
 8001446:	d101      	bne.n	800144c <LL_RCC_LSI_IsReady+0x18>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <LL_RCC_LSI_IsReady+0x1a>
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6013      	str	r3, [r2, #0]
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	6013      	str	r3, [r2, #0]
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b02      	cmp	r3, #2
 800149e:	d101      	bne.n	80014a4 <LL_RCC_MSI_IsReady+0x16>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <LL_RCC_MSI_IsReady+0x18>
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80014b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b08      	cmp	r3, #8
 80014be:	d101      	bne.n	80014c4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr

080014ce <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80014d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80014e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr

08001586 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800158e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001592:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001596:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80015b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015c0:	f023 020f 	bic.w	r2, r3, #15
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	091b      	lsrs	r3, r3, #4
 80015c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015cc:	4313      	orrs	r3, r2
 80015ce:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001614:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800164a:	011b      	lsls	r3, r3, #4
 800164c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80016a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016ce:	d101      	bne.n	80016d4 <LL_RCC_PLL_IsReady+0x18>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <LL_RCC_PLL_IsReady+0x1a>
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0303 	and.w	r3, r3, #3
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174a:	d101      	bne.n	8001750 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800176e:	d101      	bne.n	8001774 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800178a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001792:	d101      	bne.n	8001798 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017b4:	d101      	bne.n	80017ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017d6:	d101      	bne.n	80017dc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017e8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e36f      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fa:	f7ff fea6 	bl	800154a <LL_RCC_GetSysClkSource>
 80017fe:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001800:	f7ff ff8f 	bl	8001722 <LL_RCC_PLL_GetMainSource>
 8001804:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 80c4 	beq.w	800199c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_RCC_OscConfig+0x3e>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d176      	bne.n	800190e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d173      	bne.n	800190e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e353      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x68>
 8001844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800184e:	e006      	b.n	800185e <HAL_RCC_OscConfig+0x76>
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800185e:	4293      	cmp	r3, r2
 8001860:	d222      	bcs.n	80018a8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fd5a 	bl	8002320 <RCC_SetFlashLatencyFromMSIRange>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e331      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe2b 	bl	80014fc <LL_RCC_MSI_SetCalibTrimming>
 80018a6:	e021      	b.n	80018ec <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b2:	f043 0308 	orr.w	r3, r3, #8
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fe12 	bl	80014fc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fd1f 	bl	8002320 <RCC_SetFlashLatencyFromMSIRange>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e2f6      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80018ec:	f000 fce0 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4aa7      	ldr	r2, [pc, #668]	; (8001b90 <HAL_RCC_OscConfig+0x3a8>)
 80018f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80018f6:	4ba7      	ldr	r3, [pc, #668]	; (8001b94 <HAL_RCC_OscConfig+0x3ac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f90c 	bl	8000b18 <HAL_InitTick>
 8001900:	4603      	mov	r3, r0
 8001902:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001904:	7cfb      	ldrb	r3, [r7, #19]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d047      	beq.n	800199a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800190a:	7cfb      	ldrb	r3, [r7, #19]
 800190c:	e2e5      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d02c      	beq.n	8001970 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001916:	f7ff fd9e 	bl	8001456 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800191a:	f7ff f949 	bl	8000bb0 <HAL_GetTick>
 800191e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001922:	f7ff f945 	bl	8000bb0 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e2d2      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001934:	f7ff fdab 	bl	800148e <LL_RCC_MSI_IsReady>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f1      	beq.n	8001922 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fdc7 	bl	80014fc <LL_RCC_MSI_SetCalibTrimming>
 800196e:	e015      	b.n	800199c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001970:	f7ff fd7f 	bl	8001472 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001974:	f7ff f91c 	bl	8000bb0 <HAL_GetTick>
 8001978:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800197c:	f7ff f918 	bl	8000bb0 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e2a5      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800198e:	f7ff fd7e 	bl	800148e <LL_RCC_MSI_IsReady>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f1      	bne.n	800197c <HAL_RCC_OscConfig+0x194>
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800199a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d058      	beq.n	8001a5a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x1d2>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d108      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d105      	bne.n	80019c6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d14b      	bne.n	8001a5a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e289      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d102      	bne.n	80019ec <HAL_RCC_OscConfig+0x204>
 80019e6:	f7ff fc86 	bl	80012f6 <LL_RCC_HSE_Enable>
 80019ea:	e00d      	b.n	8001a08 <HAL_RCC_OscConfig+0x220>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80019f4:	d104      	bne.n	8001a00 <HAL_RCC_OscConfig+0x218>
 80019f6:	f7ff fc51 	bl	800129c <LL_RCC_HSE_EnableTcxo>
 80019fa:	f7ff fc7c 	bl	80012f6 <LL_RCC_HSE_Enable>
 80019fe:	e003      	b.n	8001a08 <HAL_RCC_OscConfig+0x220>
 8001a00:	f7ff fc87 	bl	8001312 <LL_RCC_HSE_Disable>
 8001a04:	f7ff fc58 	bl	80012b8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d012      	beq.n	8001a36 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7ff f8ce 	bl	8000bb0 <HAL_GetTick>
 8001a14:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7ff f8ca 	bl	8000bb0 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e257      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a2a:	f7ff fc80 	bl	800132e <LL_RCC_HSE_IsReady>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f1      	beq.n	8001a18 <HAL_RCC_OscConfig+0x230>
 8001a34:	e011      	b.n	8001a5a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff f8bb 	bl	8000bb0 <HAL_GetTick>
 8001a3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f8b7 	bl	8000bb0 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e244      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a50:	f7ff fc6d 	bl	800132e <LL_RCC_HSE_IsReady>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f1      	bne.n	8001a3e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d046      	beq.n	8001af4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x290>
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d10e      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d10b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e22a      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fc8e 	bl	80013aa <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a8e:	e031      	b.n	8001af4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d019      	beq.n	8001acc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a98:	f7ff fc5a 	bl	8001350 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f888 	bl	8000bb0 <HAL_GetTick>
 8001aa0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f884 	bl	8000bb0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e211      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ab6:	f7ff fc67 	bl	8001388 <LL_RCC_HSI_IsReady>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0f1      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fc70 	bl	80013aa <LL_RCC_HSI_SetCalibTrimming>
 8001aca:	e013      	b.n	8001af4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001acc:	f7ff fc4e 	bl	800136c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f86e 	bl	8000bb0 <HAL_GetTick>
 8001ad4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f86a 	bl	8000bb0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1f7      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001aea:	f7ff fc4d 	bl	8001388 <LL_RCC_HSI_IsReady>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f1      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d06e      	beq.n	8001bde <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d056      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b10:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d031      	beq.n	8001b84 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e1d0      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d013      	beq.n	8001b6a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b42:	f7ff fc67 	bl	8001414 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b46:	f7ff f833 	bl	8000bb0 <HAL_GetTick>
 8001b4a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4e:	f7ff f82f 	bl	8000bb0 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b11      	cmp	r3, #17
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1bc      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b60:	f7ff fc68 	bl	8001434 <LL_RCC_LSI_IsReady>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f1      	bne.n	8001b4e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	f023 0210 	bic.w	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b84:	f7ff fc36 	bl	80013f4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff f812 	bl	8000bb0 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001b8e:	e00c      	b.n	8001baa <HAL_RCC_OscConfig+0x3c2>
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b98:	f7ff f80a 	bl	8000bb0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b11      	cmp	r3, #17
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e197      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001baa:	f7ff fc43 	bl	8001434 <LL_RCC_LSI_IsReady>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f1      	beq.n	8001b98 <HAL_RCC_OscConfig+0x3b0>
 8001bb4:	e013      	b.n	8001bde <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb6:	f7ff fc2d 	bl	8001414 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bba:	f7fe fff9 	bl	8000bb0 <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7fe fff5 	bl	8000bb0 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b11      	cmp	r3, #17
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e182      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001bd4:	f7ff fc2e 	bl	8001434 <LL_RCC_LSI_IsReady>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f1      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80d8 	beq.w	8001d9c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001bec:	f7ff fb44 	bl	8001278 <LL_PWR_IsEnabledBkUpAccess>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d113      	bne.n	8001c1e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001bf6:	f7ff fb0d 	bl	8001214 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfa:	f7fe ffd9 	bl	8000bb0 <HAL_GetTick>
 8001bfe:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c02:	f7fe ffd5 	bl	8000bb0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e162      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c14:	f7ff fb30 	bl	8001278 <LL_PWR_IsEnabledBkUpAccess>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f1      	beq.n	8001c02 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d07b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b85      	cmp	r3, #133	; 0x85
 8001c2c:	d003      	beq.n	8001c36 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b05      	cmp	r3, #5
 8001c34:	d109      	bne.n	8001c4a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe ffb1 	bl	8000bb0 <HAL_GetTick>
 8001c4e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c64:	e00a      	b.n	8001c7c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7fe ffa3 	bl	8000bb0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e12e      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c7c:	f7ff fba9 	bl	80013d2 <LL_RCC_LSE_IsReady>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0ef      	beq.n	8001c66 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b81      	cmp	r3, #129	; 0x81
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b85      	cmp	r3, #133	; 0x85
 8001c94:	d121      	bne.n	8001cda <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7fe ff8b 	bl	8000bb0 <HAL_GetTick>
 8001c9a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7fe ff7d 	bl	8000bb0 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e108      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ec      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001cd8:	e060      	b.n	8001d9c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe ff69 	bl	8000bb0 <HAL_GetTick>
 8001cde:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe ff5b 	bl	8000bb0 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0e6      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ec      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x50e>
 8001d1c:	e03e      	b.n	8001d9c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe ff47 	bl	8000bb0 <HAL_GetTick>
 8001d22:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7fe ff39 	bl	8000bb0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0c4      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ec      	bne.n	8001d3a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d60:	f7fe ff26 	bl	8000bb0 <HAL_GetTick>
 8001d64:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7fe ff18 	bl	8000bb0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0a3      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d92:	f7ff fb1e 	bl	80013d2 <LL_RCC_LSE_IsReady>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ef      	bne.n	8001d7c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8099 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	2b0c      	cmp	r3, #12
 8001daa:	d06c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d14b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db4:	f7ff fc74 	bl	80016a0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe fefa 	bl	8000bb0 <HAL_GetTick>
 8001dbc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7fe fef6 	bl	8000bb0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b0a      	cmp	r3, #10
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e083      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dd2:	f7ff fc73 	bl	80016bc <LL_RCC_PLL_IsReady>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f1      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_RCC_OscConfig+0x6fc>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dee:	4311      	orrs	r1, r2
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001df4:	0212      	lsls	r2, r2, #8
 8001df6:	4311      	orrs	r1, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e12:	f7ff fc37 	bl	8001684 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7fe fec3 	bl	8000bb0 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe febf 	bl	8000bb0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b0a      	cmp	r3, #10
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e04c      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e40:	f7ff fc3c 	bl	80016bc <LL_RCC_PLL_IsReady>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f1      	beq.n	8001e2e <HAL_RCC_OscConfig+0x646>
 8001e4a:	e045      	b.n	8001ed8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4c:	f7ff fc28 	bl	80016a0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7fe feae 	bl	8000bb0 <HAL_GetTick>
 8001e54:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7fe feaa 	bl	8000bb0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b0a      	cmp	r3, #10
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e037      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e6a:	f7ff fc27 	bl	80016bc <LL_RCC_PLL_IsReady>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f1      	bne.n	8001e58 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_OscConfig+0x700>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
 8001e84:	e028      	b.n	8001ed8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e023      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	f003 0203 	and.w	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d115      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	11c1808c 	.word	0x11c1808c
 8001ee8:	eefefffc 	.word	0xeefefffc

08001eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e12c      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b98      	ldr	r3, [pc, #608]	; (8002164 <HAL_RCC_ClockConfig+0x278>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d91b      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b95      	ldr	r3, [pc, #596]	; (8002164 <HAL_RCC_ClockConfig+0x278>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 0207 	bic.w	r2, r3, #7
 8001f16:	4993      	ldr	r1, [pc, #588]	; (8002164 <HAL_RCC_ClockConfig+0x278>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f1e:	f7fe fe47 	bl	8000bb0 <HAL_GetTick>
 8001f22:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f26:	f7fe fe43 	bl	8000bb0 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e110      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f38:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <HAL_RCC_ClockConfig+0x278>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d016      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fb02 	bl	8001560 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f5c:	f7fe fe28 	bl	8000bb0 <HAL_GetTick>
 8001f60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f64:	f7fe fe24 	bl	8000bb0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0f1      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f76:	f7ff fbdf 	bl	8001738 <LL_RCC_IsActiveFlag_HPRE>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f1      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d016      	beq.n	8001fba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff faf8 	bl	8001586 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f96:	f7fe fe0b 	bl	8000bb0 <HAL_GetTick>
 8001f9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f9e:	f7fe fe07 	bl	8000bb0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0d4      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001fb0:	f7ff fbd3 	bl	800175a <LL_RCC_IsActiveFlag_C2HPRE>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f1      	beq.n	8001f9e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d016      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff faf0 	bl	80015b0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fd0:	f7fe fdee 	bl	8000bb0 <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fd8:	f7fe fdea 	bl	8000bb0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0b7      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fea:	f7ff fbc8 	bl	800177e <LL_RCC_IsActiveFlag_SHDHPRE>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f1      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d016      	beq.n	800202e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fae9 	bl	80015dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800200a:	f7fe fdd1 	bl	8000bb0 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002012:	f7fe fdcd 	bl	8000bb0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e09a      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002024:	f7ff fbbd 	bl	80017a2 <LL_RCC_IsActiveFlag_PPRE1>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f1      	beq.n	8002012 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d017      	beq.n	800206a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fade 	bl	8001602 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002046:	f7fe fdb3 	bl	8000bb0 <HAL_GetTick>
 800204a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800204e:	f7fe fdaf 	bl	8000bb0 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e07c      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002060:	f7ff fbb0 	bl	80017c4 <LL_RCC_IsActiveFlag_PPRE2>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f1      	beq.n	800204e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d043      	beq.n	80020fe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d106      	bne.n	800208c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800207e:	f7ff f956 	bl	800132e <LL_RCC_HSE_IsReady>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d11e      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e066      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002094:	f7ff fb12 	bl	80016bc <LL_RCC_PLL_IsReady>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d113      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e05b      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80020aa:	f7ff f9f0 	bl	800148e <LL_RCC_MSI_IsReady>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d108      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e050      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80020b8:	f7ff f966 	bl	8001388 <LL_RCC_HSI_IsReady>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e049      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fa2a 	bl	8001524 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d0:	f7fe fd6e 	bl	8000bb0 <HAL_GetTick>
 80020d4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	e00a      	b.n	80020ee <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d8:	f7fe fd6a 	bl	8000bb0 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e035      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	f7ff fa2c 	bl	800154a <LL_RCC_GetSysClkSource>
 80020f2:	4602      	mov	r2, r0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d1ec      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020fe:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_RCC_ClockConfig+0x278>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d21b      	bcs.n	8002144 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <HAL_RCC_ClockConfig+0x278>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 0207 	bic.w	r2, r3, #7
 8002114:	4913      	ldr	r1, [pc, #76]	; (8002164 <HAL_RCC_ClockConfig+0x278>)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800211c:	f7fe fd48 	bl	8000bb0 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	e008      	b.n	8002136 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002124:	f7fe fd44 	bl	8000bb0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e011      	b.n	800215a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_ClockConfig+0x278>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d1ef      	bne.n	8002124 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002144:	f000 f8b4 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 8002148:	4603      	mov	r3, r0
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_RCC_ClockConfig+0x27c>)
 800214c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <HAL_RCC_ClockConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fce0 	bl	8000b18 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	58004000 	.word	0x58004000
 8002168:	20000000 	.word	0x20000000
 800216c:	20000004 	.word	0x20000004

08002170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217e:	f7ff f9e4 	bl	800154a <LL_RCC_GetSysClkSource>
 8002182:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002184:	f7ff facd 	bl	8001722 <LL_RCC_PLL_GetMainSource>
 8002188:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x2c>
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d139      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d136      	bne.n	800220a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800219c:	f7ff f987 	bl	80014ae <LL_RCC_MSI_IsEnabledRangeSelect>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d115      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0x62>
 80021a6:	f7ff f982 	bl	80014ae <LL_RCC_MSI_IsEnabledRangeSelect>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d106      	bne.n	80021be <HAL_RCC_GetSysClockFreq+0x4e>
 80021b0:	f7ff f98d 	bl	80014ce <LL_RCC_MSI_GetRange>
 80021b4:	4603      	mov	r3, r0
 80021b6:	0a1b      	lsrs	r3, r3, #8
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	e005      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x5a>
 80021be:	f7ff f991 	bl	80014e4 <LL_RCC_MSI_GetRangeAfterStandby>
 80021c2:	4603      	mov	r3, r0
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	4a36      	ldr	r2, [pc, #216]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x134>)
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	e014      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x8c>
 80021d2:	f7ff f96c 	bl	80014ae <LL_RCC_MSI_IsEnabledRangeSelect>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d106      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x7a>
 80021dc:	f7ff f977 	bl	80014ce <LL_RCC_MSI_GetRange>
 80021e0:	4603      	mov	r3, r0
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	e005      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x86>
 80021ea:	f7ff f97b 	bl	80014e4 <LL_RCC_MSI_GetRangeAfterStandby>
 80021ee:	4603      	mov	r3, r0
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x134>)
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d115      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002208:	e012      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d102      	bne.n	8002216 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002210:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e00c      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d109      	bne.n	8002230 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800221c:	f7ff f85a 	bl	80012d4 <LL_RCC_HSE_IsEnabledDiv2>
 8002220:	4603      	mov	r3, r0
 8002222:	2b01      	cmp	r3, #1
 8002224:	d102      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e001      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800222c:	4b1f      	ldr	r3, [pc, #124]	; (80022ac <HAL_RCC_GetSysClockFreq+0x13c>)
 800222e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002230:	f7ff f98b 	bl	800154a <LL_RCC_GetSysClkSource>
 8002234:	4603      	mov	r3, r0
 8002236:	2b0c      	cmp	r3, #12
 8002238:	d12f      	bne.n	800229a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800223a:	f7ff fa72 	bl	8001722 <LL_RCC_PLL_GetMainSource>
 800223e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0xde>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d003      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0xe4>
 800224c:	e00d      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002250:	60fb      	str	r3, [r7, #12]
        break;
 8002252:	e00d      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002254:	f7ff f83e 	bl	80012d4 <LL_RCC_HSE_IsEnabledDiv2>
 8002258:	4603      	mov	r3, r0
 800225a:	2b01      	cmp	r3, #1
 800225c:	d102      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002260:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002266:	60fb      	str	r3, [r7, #12]
        break;
 8002268:	e002      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	60fb      	str	r3, [r7, #12]
        break;
 800226e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002270:	f7ff fa35 	bl	80016de <LL_RCC_PLL_GetN>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	fb03 f402 	mul.w	r4, r3, r2
 800227c:	f7ff fa46 	bl	800170c <LL_RCC_PLL_GetDivider>
 8002280:	4603      	mov	r3, r0
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	3301      	adds	r3, #1
 8002286:	fbb4 f4f3 	udiv	r4, r4, r3
 800228a:	f7ff fa34 	bl	80016f6 <LL_RCC_PLL_GetR>
 800228e:	4603      	mov	r3, r0
 8002290:	0f5b      	lsrs	r3, r3, #29
 8002292:	3301      	adds	r3, #1
 8002294:	fbb4 f3f3 	udiv	r3, r4, r3
 8002298:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800229a:	697b      	ldr	r3, [r7, #20]
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd90      	pop	{r4, r7, pc}
 80022a4:	08004e74 	.word	0x08004e74
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	01e84800 	.word	0x01e84800

080022b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b0:	b598      	push	{r3, r4, r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80022b4:	f7ff ff5c 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 80022b8:	4604      	mov	r4, r0
 80022ba:	f7ff f9b5 	bl	8001628 <LL_RCC_GetAHBPrescaler>
 80022be:	4603      	mov	r3, r0
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	4a03      	ldr	r2, [pc, #12]	; (80022d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd98      	pop	{r3, r4, r7, pc}
 80022d4:	08004e14 	.word	0x08004e14

080022d8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d8:	b598      	push	{r3, r4, r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022dc:	f7ff ffe8 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 80022e0:	4604      	mov	r4, r0
 80022e2:	f7ff f9b9 	bl	8001658 <LL_RCC_GetAPB1Prescaler>
 80022e6:	4603      	mov	r3, r0
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd98      	pop	{r3, r4, r7, pc}
 80022f8:	08004e54 	.word	0x08004e54

080022fc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b598      	push	{r3, r4, r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002300:	f7ff ffd6 	bl	80022b0 <HAL_RCC_GetHCLKFreq>
 8002304:	4604      	mov	r4, r0
 8002306:	f7ff f9b2 	bl	800166e <LL_RCC_GetAPB2Prescaler>
 800230a:	4603      	mov	r3, r0
 800230c:	0adb      	lsrs	r3, r3, #11
 800230e:	4a03      	ldr	r2, [pc, #12]	; (800231c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd98      	pop	{r3, r4, r7, pc}
 800231c:	08004e54 	.word	0x08004e54

08002320 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	4a10      	ldr	r2, [pc, #64]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002338:	f7ff f981 	bl	800163e <LL_RCC_GetAHB3Prescaler>
 800233c:	4603      	mov	r3, r0
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4a0c      	ldr	r2, [pc, #48]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002350:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0c9c      	lsrs	r4, r3, #18
 800235c:	f7fe ff76 	bl	800124c <HAL_PWREx_GetVoltageRange>
 8002360:	4603      	mov	r3, r0
 8002362:	4619      	mov	r1, r3
 8002364:	4620      	mov	r0, r4
 8002366:	f000 f80b 	bl	8002380 <RCC_SetFlashLatency>
 800236a:	4603      	mov	r3, r0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}
 8002374:	08004e74 	.word	0x08004e74
 8002378:	08004e14 	.word	0x08004e14
 800237c:	431bde83 	.word	0x431bde83

08002380 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08e      	sub	sp, #56	; 0x38
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800238a:	4a3a      	ldr	r2, [pc, #232]	; (8002474 <RCC_SetFlashLatency+0xf4>)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002394:	6018      	str	r0, [r3, #0]
 8002396:	3304      	adds	r3, #4
 8002398:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800239a:	4a37      	ldr	r2, [pc, #220]	; (8002478 <RCC_SetFlashLatency+0xf8>)
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023a4:	6018      	str	r0, [r3, #0]
 80023a6:	3304      	adds	r3, #4
 80023a8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80023aa:	4a34      	ldr	r2, [pc, #208]	; (800247c <RCC_SetFlashLatency+0xfc>)
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80023b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d11b      	bne.n	80023fa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
 80023c6:	e014      	b.n	80023f2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	3338      	adds	r3, #56	; 0x38
 80023ce:	443b      	add	r3, r7
 80023d0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80023d4:	461a      	mov	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4293      	cmp	r3, r2
 80023da:	d807      	bhi.n	80023ec <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	3338      	adds	r3, #56	; 0x38
 80023e2:	443b      	add	r3, r7
 80023e4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023ea:	e021      	b.n	8002430 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	3301      	adds	r3, #1
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d9e7      	bls.n	80023c8 <RCC_SetFlashLatency+0x48>
 80023f8:	e01a      	b.n	8002430 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fe:	e014      	b.n	800242a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	3338      	adds	r3, #56	; 0x38
 8002406:	443b      	add	r3, r7
 8002408:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800240c:	461a      	mov	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4293      	cmp	r3, r2
 8002412:	d807      	bhi.n	8002424 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	3338      	adds	r3, #56	; 0x38
 800241a:	443b      	add	r3, r7
 800241c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002422:	e005      	b.n	8002430 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	3301      	adds	r3, #1
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	2b02      	cmp	r3, #2
 800242e:	d9e7      	bls.n	8002400 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <RCC_SetFlashLatency+0x100>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 0207 	bic.w	r2, r3, #7
 8002438:	4911      	ldr	r1, [pc, #68]	; (8002480 <RCC_SetFlashLatency+0x100>)
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002440:	f7fe fbb6 	bl	8000bb0 <HAL_GetTick>
 8002444:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002446:	e008      	b.n	800245a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002448:	f7fe fbb2 	bl	8000bb0 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e007      	b.n	800246a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <RCC_SetFlashLatency+0x100>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002464:	429a      	cmp	r2, r3
 8002466:	d1ef      	bne.n	8002448 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3738      	adds	r7, #56	; 0x38
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	08004df8 	.word	0x08004df8
 8002478:	08004e00 	.word	0x08004e00
 800247c:	08004e08 	.word	0x08004e08
 8002480:	58004000 	.word	0x58004000

08002484 <LL_RCC_LSE_IsReady>:
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b02      	cmp	r3, #2
 8002496:	d101      	bne.n	800249c <LL_RCC_LSE_IsReady+0x18>
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <LL_RCC_LSE_IsReady+0x1a>
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <LL_RCC_SetUSARTClockSource>:
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	43db      	mvns	r3, r3
 80024bc:	401a      	ands	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c6:	4313      	orrs	r3, r2
 80024c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <LL_RCC_SetI2SClockSource>:
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <LL_RCC_SetLPUARTClockSource>:
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002514:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <LL_RCC_SetI2CClockSource>:
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002542:	43db      	mvns	r3, r3
 8002544:	401a      	ands	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800254e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <LL_RCC_SetLPTIMClockSource>:
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	43db      	mvns	r3, r3
 800257a:	401a      	ands	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <LL_RCC_SetRNGClockSource>:
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80025a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <LL_RCC_SetADCClockSource>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80025c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <LL_RCC_SetRTCClockSource>:
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80025f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr

08002612 <LL_RCC_GetRTCClockSource>:
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <LL_RCC_ForceBackupDomainReset>:
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_RCC_ReleaseBackupDomainReset>:
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800265a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr
	...

0800266c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002678:	2300      	movs	r3, #0
 800267a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800267c:	2300      	movs	r3, #0
 800267e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d058      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800268c:	f7fe fdc2 	bl	8001214 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002690:	f7fe fa8e 	bl	8000bb0 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002696:	e009      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7fe fa8a 	bl	8000bb0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d902      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	74fb      	strb	r3, [r7, #19]
        break;
 80026aa:	e006      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80026ac:	4b7b      	ldr	r3, [pc, #492]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b8:	d1ee      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d13c      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80026c0:	f7ff ffa7 	bl	8002612 <LL_RCC_GetRTCClockSource>
 80026c4:	4602      	mov	r2, r0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d00f      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026da:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026dc:	f7ff ffa5 	bl	800262a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e0:	f7ff ffb3 	bl	800264a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d014      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fa5a 	bl	8000bb0 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80026fe:	e00b      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe fa56 	bl	8000bb0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d902      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	74fb      	strb	r3, [r7, #19]
            break;
 8002716:	e004      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002718:	f7ff feb4 	bl	8002484 <LL_RCC_LSE_IsReady>
 800271c:	4603      	mov	r3, r0
 800271e:	2b01      	cmp	r3, #1
 8002720:	d1ee      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002722:	7cfb      	ldrb	r3, [r7, #19]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d105      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff5b 	bl	80025e8 <LL_RCC_SetRTCClockSource>
 8002732:	e004      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	74bb      	strb	r3, [r7, #18]
 8002738:	e001      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d004      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fea9 	bl	80024a6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fe9e 	bl	80024a6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d004      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fec0 	bl	8002500 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fee6 	bl	8002562 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d004      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fedb 	bl	8002562 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d004      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fed0 	bl	8002562 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fea9 	bl	800252a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d004      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fe9e 	bl	800252a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fe93 	bl	800252a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b00      	cmp	r3, #0
 800280e:	d011      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fe5e 	bl	80024d6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002822:	d107      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002832:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d010      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fea5 	bl	8002594 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	2b00      	cmp	r3, #0
 8002850:	d107      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002860:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fea3 	bl	80025be <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002880:	d107      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002890:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002892:	7cbb      	ldrb	r3, [r7, #18]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	58000400 	.word	0x58000400

080028a0 <LL_RCC_GetUSARTClockSource>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80028a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	4313      	orrs	r3, r2
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <LL_RCC_GetLPUARTClockSource>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4013      	ands	r3, r2
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e042      	b.n	800297a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fd ff8c 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2224      	movs	r2, #36	; 0x24
 8002910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fc3d 	bl	80031a4 <UART_SetConfig>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e022      	b.n	800297a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fea5 	bl	800368c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002950:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002960:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 ff2b 	bl	80037ce <UART_CheckIdleState>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002984:	b480      	push	{r7}
 8002986:	b091      	sub	sp, #68	; 0x44
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	2b20      	cmp	r3, #32
 800299a:	d178      	bne.n	8002a8e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Transmit_IT+0x24>
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e071      	b.n	8002a90 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	88fa      	ldrh	r2, [r7, #6]
 80029b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2221      	movs	r2, #33	; 0x21
 80029d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e0:	d12a      	bne.n	8002a38 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ea:	d107      	bne.n	80029fc <HAL_UART_Transmit_IT+0x78>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_UART_Transmit_IT+0x118>)
 80029f8:	679a      	str	r2, [r3, #120]	; 0x78
 80029fa:	e002      	b.n	8002a02 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_UART_Transmit_IT+0x11c>)
 8002a00:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3308      	adds	r3, #8
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3308      	adds	r3, #8
 8002a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a22:	637a      	str	r2, [r7, #52]	; 0x34
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2a:	e841 2300 	strex	r3, r2, [r1]
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1e5      	bne.n	8002a02 <HAL_UART_Transmit_IT+0x7e>
 8002a36:	e028      	b.n	8002a8a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a40:	d107      	bne.n	8002a52 <HAL_UART_Transmit_IT+0xce>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <HAL_UART_Transmit_IT+0x120>)
 8002a4e:	679a      	str	r2, [r3, #120]	; 0x78
 8002a50:	e002      	b.n	8002a58 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_UART_Transmit_IT+0x124>)
 8002a56:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	613b      	str	r3, [r7, #16]
   return(result);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a76:	623b      	str	r3, [r7, #32]
 8002a78:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	69f9      	ldr	r1, [r7, #28]
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e6      	bne.n	8002a58 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e000      	b.n	8002a90 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002a8e:	2302      	movs	r3, #2
  }
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3744      	adds	r7, #68	; 0x44
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	08003f87 	.word	0x08003f87
 8002aa0:	08003ea9 	.word	0x08003ea9
 8002aa4:	08003de9 	.word	0x08003de9
 8002aa8:	08003d33 	.word	0x08003d33

08002aac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d137      	bne.n	8002b34 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_UART_Receive_IT+0x24>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e030      	b.n	8002b36 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_UART_Receive_IT+0x94>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d01f      	beq.n	8002b24 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d018      	beq.n	8002b24 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	e853 3f00 	ldrex	r3, [r3]
 8002afe:	613b      	str	r3, [r7, #16]
   return(result);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	69f9      	ldr	r1, [r7, #28]
 8002b16:	6a3a      	ldr	r2, [r7, #32]
 8002b18:	e841 2300 	strex	r3, r2, [r1]
 8002b1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e6      	bne.n	8002af2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	461a      	mov	r2, r3
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 ff66 	bl	80039fc <UART_Start_Receive_IT>
 8002b30:	4603      	mov	r3, r0
 8002b32:	e000      	b.n	8002b36 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40008000 	.word	0x40008000

08002b44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b0ba      	sub	sp, #232	; 0xe8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b72:	4013      	ands	r3, r2
 8002b74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11b      	bne.n	8002bb8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d015      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d105      	bne.n	8002ba4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d009      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 82e3 	beq.w	8003174 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
      }
      return;
 8002bb6:	e2dd      	b.n	8003174 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8123 	beq.w	8002e08 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002bc2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002bc6:	4b8d      	ldr	r3, [pc, #564]	; (8002dfc <HAL_UART_IRQHandler+0x2b8>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002bce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002bd2:	4b8b      	ldr	r3, [pc, #556]	; (8002e00 <HAL_UART_IRQHandler+0x2bc>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8116 	beq.w	8002e08 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d011      	beq.n	8002c0c <HAL_UART_IRQHandler+0xc8>
 8002be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d011      	beq.n	8002c3c <HAL_UART_IRQHandler+0xf8>
 8002c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00b      	beq.n	8002c3c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c32:	f043 0204 	orr.w	r2, r3, #4
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d011      	beq.n	8002c6c <HAL_UART_IRQHandler+0x128>
 8002c48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2204      	movs	r2, #4
 8002c5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d017      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002c84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002c88:	4b5c      	ldr	r3, [pc, #368]	; (8002dfc <HAL_UART_IRQHandler+0x2b8>)
 8002c8a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2208      	movs	r2, #8
 8002c96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9e:	f043 0208 	orr.w	r2, r3, #8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d012      	beq.n	8002cda <HAL_UART_IRQHandler+0x196>
 8002cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00c      	beq.n	8002cda <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 8249 	beq.w	8003178 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d013      	beq.n	8002d1a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d005      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d054      	beq.n	8002de8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 ff7c 	bl	8003c3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d146      	bne.n	8002de0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3308      	adds	r3, #8
 8002d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3308      	adds	r3, #8
 8002d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1d9      	bne.n	8002d52 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d017      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dae:	4a15      	ldr	r2, [pc, #84]	; (8002e04 <HAL_UART_IRQHandler+0x2c0>)
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe f86c 	bl	8000e96 <HAL_DMA_Abort_IT>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d019      	beq.n	8002df8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002dd2:	4610      	mov	r0, r2
 8002dd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd6:	e00f      	b.n	8002df8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7fd fbf8 	bl	80005ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dde:	e00b      	b.n	8002df8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fd fbf4 	bl	80005ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002de6:	e007      	b.n	8002df8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fd fbf0 	bl	80005ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002df6:	e1bf      	b.n	8003178 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df8:	bf00      	nop
    return;
 8002dfa:	e1bd      	b.n	8003178 <HAL_UART_IRQHandler+0x634>
 8002dfc:	10000001 	.word	0x10000001
 8002e00:	04000120 	.word	0x04000120
 8002e04:	08003d07 	.word	0x08003d07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 8153 	bne.w	80030b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 814c 	beq.w	80030b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8145 	beq.w	80030b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	f040 80bb 	bne.w	8002fbc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 818f 	beq.w	800317c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	f080 8187 	bcs.w	800317c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 8087 	bne.w	8002f9a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e98:	e853 3f00 	ldrex	r3, [r3]
 8002e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ec2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1da      	bne.n	8002e8c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3308      	adds	r3, #8
 8002edc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee0:	e853 3f00 	ldrex	r3, [r3]
 8002ee4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002efa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002efe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e1      	bne.n	8002ed6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3308      	adds	r3, #8
 8002f18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3308      	adds	r3, #8
 8002f32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f3e:	e841 2300 	strex	r3, r2, [r1]
 8002f42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e3      	bne.n	8002f12 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f60:	e853 3f00 	ldrex	r3, [r3]
 8002f64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f68:	f023 0310 	bic.w	r3, r3, #16
 8002f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f82:	e841 2300 	strex	r3, r2, [r1]
 8002f86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1e4      	bne.n	8002f58 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd ff20 	bl	8000dda <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f8e9 	bl	800318c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fba:	e0df      	b.n	800317c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80d1 	beq.w	8003180 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002fde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80cc 	beq.w	8003180 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	e853 3f00 	ldrex	r3, [r3]
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
 800300c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e4      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3308      	adds	r3, #8
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	623b      	str	r3, [r7, #32]
   return(result);
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3308      	adds	r3, #8
 8003042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003046:	633a      	str	r2, [r7, #48]	; 0x30
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800304c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304e:	e841 2300 	strex	r3, r2, [r1]
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1e1      	bne.n	800301e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	60fb      	str	r3, [r7, #12]
   return(result);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0310 	bic.w	r3, r3, #16
 8003082:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003094:	69b9      	ldr	r1, [r7, #24]
 8003096:	69fa      	ldr	r2, [r7, #28]
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	617b      	str	r3, [r7, #20]
   return(result);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e4      	bne.n	800306e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030ae:	4619      	mov	r1, r3
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f86b 	bl	800318c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030b6:	e063      	b.n	8003180 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00e      	beq.n	80030e2 <HAL_UART_IRQHandler+0x59e>
 80030c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f001 fd0e 	bl	8004afc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030e0:	e051      	b.n	8003186 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d014      	beq.n	8003118 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80030ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80030fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800310a:	2b00      	cmp	r3, #0
 800310c:	d03a      	beq.n	8003184 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
    }
    return;
 8003116:	e035      	b.n	8003184 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d009      	beq.n	8003138 <HAL_UART_IRQHandler+0x5f4>
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 ff9c 	bl	800406e <UART_EndTransmit_IT>
    return;
 8003136:	e026      	b.n	8003186 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800313c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d009      	beq.n	8003158 <HAL_UART_IRQHandler+0x614>
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003148:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f001 fce5 	bl	8004b20 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003156:	e016      	b.n	8003186 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_UART_IRQHandler+0x642>
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003168:	2b00      	cmp	r3, #0
 800316a:	da0c      	bge.n	8003186 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f001 fcce 	bl	8004b0e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003172:	e008      	b.n	8003186 <HAL_UART_IRQHandler+0x642>
      return;
 8003174:	bf00      	nop
 8003176:	e006      	b.n	8003186 <HAL_UART_IRQHandler+0x642>
    return;
 8003178:	bf00      	nop
 800317a:	e004      	b.n	8003186 <HAL_UART_IRQHandler+0x642>
      return;
 800317c:	bf00      	nop
 800317e:	e002      	b.n	8003186 <HAL_UART_IRQHandler+0x642>
      return;
 8003180:	bf00      	nop
 8003182:	e000      	b.n	8003186 <HAL_UART_IRQHandler+0x642>
    return;
 8003184:	bf00      	nop
  }
}
 8003186:	37e8      	adds	r7, #232	; 0xe8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr
	...

080031a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a8:	b08c      	sub	sp, #48	; 0x30
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	431a      	orrs	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b94      	ldr	r3, [pc, #592]	; (8003424 <UART_SetConfig+0x280>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031dc:	430b      	orrs	r3, r1
 80031de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a89      	ldr	r2, [pc, #548]	; (8003428 <UART_SetConfig+0x284>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320c:	4313      	orrs	r3, r2
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800321a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003224:	430b      	orrs	r3, r1
 8003226:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f023 010f 	bic.w	r1, r3, #15
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7a      	ldr	r2, [pc, #488]	; (800342c <UART_SetConfig+0x288>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d127      	bne.n	8003298 <UART_SetConfig+0xf4>
 8003248:	2003      	movs	r0, #3
 800324a:	f7ff fb29 	bl	80028a0 <LL_RCC_GetUSARTClockSource>
 800324e:	4603      	mov	r3, r0
 8003250:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003254:	2b03      	cmp	r3, #3
 8003256:	d81b      	bhi.n	8003290 <UART_SetConfig+0xec>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <UART_SetConfig+0xbc>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003271 	.word	0x08003271
 8003264:	08003281 	.word	0x08003281
 8003268:	08003279 	.word	0x08003279
 800326c:	08003289 	.word	0x08003289
 8003270:	2301      	movs	r3, #1
 8003272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003276:	e080      	b.n	800337a <UART_SetConfig+0x1d6>
 8003278:	2302      	movs	r3, #2
 800327a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800327e:	e07c      	b.n	800337a <UART_SetConfig+0x1d6>
 8003280:	2304      	movs	r3, #4
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003286:	e078      	b.n	800337a <UART_SetConfig+0x1d6>
 8003288:	2308      	movs	r3, #8
 800328a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800328e:	e074      	b.n	800337a <UART_SetConfig+0x1d6>
 8003290:	2310      	movs	r3, #16
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003296:	e070      	b.n	800337a <UART_SetConfig+0x1d6>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a64      	ldr	r2, [pc, #400]	; (8003430 <UART_SetConfig+0x28c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d138      	bne.n	8003314 <UART_SetConfig+0x170>
 80032a2:	200c      	movs	r0, #12
 80032a4:	f7ff fafc 	bl	80028a0 <LL_RCC_GetUSARTClockSource>
 80032a8:	4603      	mov	r3, r0
 80032aa:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d82c      	bhi.n	800330c <UART_SetConfig+0x168>
 80032b2:	a201      	add	r2, pc, #4	; (adr r2, 80032b8 <UART_SetConfig+0x114>)
 80032b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b8:	080032ed 	.word	0x080032ed
 80032bc:	0800330d 	.word	0x0800330d
 80032c0:	0800330d 	.word	0x0800330d
 80032c4:	0800330d 	.word	0x0800330d
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	0800330d 	.word	0x0800330d
 80032d0:	0800330d 	.word	0x0800330d
 80032d4:	0800330d 	.word	0x0800330d
 80032d8:	080032f5 	.word	0x080032f5
 80032dc:	0800330d 	.word	0x0800330d
 80032e0:	0800330d 	.word	0x0800330d
 80032e4:	0800330d 	.word	0x0800330d
 80032e8:	08003305 	.word	0x08003305
 80032ec:	2300      	movs	r3, #0
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032f2:	e042      	b.n	800337a <UART_SetConfig+0x1d6>
 80032f4:	2302      	movs	r3, #2
 80032f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032fa:	e03e      	b.n	800337a <UART_SetConfig+0x1d6>
 80032fc:	2304      	movs	r3, #4
 80032fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003302:	e03a      	b.n	800337a <UART_SetConfig+0x1d6>
 8003304:	2308      	movs	r3, #8
 8003306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800330a:	e036      	b.n	800337a <UART_SetConfig+0x1d6>
 800330c:	2310      	movs	r3, #16
 800330e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003312:	e032      	b.n	800337a <UART_SetConfig+0x1d6>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a43      	ldr	r2, [pc, #268]	; (8003428 <UART_SetConfig+0x284>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d12a      	bne.n	8003374 <UART_SetConfig+0x1d0>
 800331e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003322:	f7ff facf 	bl	80028c4 <LL_RCC_GetLPUARTClockSource>
 8003326:	4603      	mov	r3, r0
 8003328:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800332c:	d01a      	beq.n	8003364 <UART_SetConfig+0x1c0>
 800332e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003332:	d81b      	bhi.n	800336c <UART_SetConfig+0x1c8>
 8003334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003338:	d00c      	beq.n	8003354 <UART_SetConfig+0x1b0>
 800333a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333e:	d815      	bhi.n	800336c <UART_SetConfig+0x1c8>
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <UART_SetConfig+0x1a8>
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003348:	d008      	beq.n	800335c <UART_SetConfig+0x1b8>
 800334a:	e00f      	b.n	800336c <UART_SetConfig+0x1c8>
 800334c:	2300      	movs	r3, #0
 800334e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003352:	e012      	b.n	800337a <UART_SetConfig+0x1d6>
 8003354:	2302      	movs	r3, #2
 8003356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800335a:	e00e      	b.n	800337a <UART_SetConfig+0x1d6>
 800335c:	2304      	movs	r3, #4
 800335e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003362:	e00a      	b.n	800337a <UART_SetConfig+0x1d6>
 8003364:	2308      	movs	r3, #8
 8003366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800336a:	e006      	b.n	800337a <UART_SetConfig+0x1d6>
 800336c:	2310      	movs	r3, #16
 800336e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003372:	e002      	b.n	800337a <UART_SetConfig+0x1d6>
 8003374:	2310      	movs	r3, #16
 8003376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a2a      	ldr	r2, [pc, #168]	; (8003428 <UART_SetConfig+0x284>)
 8003380:	4293      	cmp	r3, r2
 8003382:	f040 80a4 	bne.w	80034ce <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800338a:	2b08      	cmp	r3, #8
 800338c:	d823      	bhi.n	80033d6 <UART_SetConfig+0x232>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <UART_SetConfig+0x1f0>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033d7 	.word	0x080033d7
 800339c:	080033c1 	.word	0x080033c1
 80033a0:	080033d7 	.word	0x080033d7
 80033a4:	080033c7 	.word	0x080033c7
 80033a8:	080033d7 	.word	0x080033d7
 80033ac:	080033d7 	.word	0x080033d7
 80033b0:	080033d7 	.word	0x080033d7
 80033b4:	080033cf 	.word	0x080033cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7fe ff8e 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033be:	e010      	b.n	80033e2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c0:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <UART_SetConfig+0x290>)
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033c4:	e00d      	b.n	80033e2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c6:	f7fe fed3 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033cc:	e009      	b.n	80033e2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033d4:	e005      	b.n	80033e2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8137 	beq.w	8003658 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	4a12      	ldr	r2, [pc, #72]	; (8003438 <UART_SetConfig+0x294>)
 80033f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f4:	461a      	mov	r2, r3
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	429a      	cmp	r2, r3
 800340c:	d305      	bcc.n	800341a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	429a      	cmp	r2, r3
 8003418:	d910      	bls.n	800343c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003420:	e11a      	b.n	8003658 <UART_SetConfig+0x4b4>
 8003422:	bf00      	nop
 8003424:	cfff69f3 	.word	0xcfff69f3
 8003428:	40008000 	.word	0x40008000
 800342c:	40013800 	.word	0x40013800
 8003430:	40004400 	.word	0x40004400
 8003434:	00f42400 	.word	0x00f42400
 8003438:	08004eb4 	.word	0x08004eb4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	2200      	movs	r2, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	60fa      	str	r2, [r7, #12]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	4a8e      	ldr	r2, [pc, #568]	; (8003684 <UART_SetConfig+0x4e0>)
 800344a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800344e:	b29b      	uxth	r3, r3
 8003450:	2200      	movs	r2, #0
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800345a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800345e:	f7fc fe8b 	bl	8000178 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4610      	mov	r0, r2
 8003468:	4619      	mov	r1, r3
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	020b      	lsls	r3, r1, #8
 8003474:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003478:	0202      	lsls	r2, r0, #8
 800347a:	6979      	ldr	r1, [r7, #20]
 800347c:	6849      	ldr	r1, [r1, #4]
 800347e:	0849      	lsrs	r1, r1, #1
 8003480:	2000      	movs	r0, #0
 8003482:	460c      	mov	r4, r1
 8003484:	4605      	mov	r5, r0
 8003486:	eb12 0804 	adds.w	r8, r2, r4
 800348a:	eb43 0905 	adc.w	r9, r3, r5
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	469a      	mov	sl, r3
 8003496:	4693      	mov	fp, r2
 8003498:	4652      	mov	r2, sl
 800349a:	465b      	mov	r3, fp
 800349c:	4640      	mov	r0, r8
 800349e:	4649      	mov	r1, r9
 80034a0:	f7fc fe6a 	bl	8000178 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4613      	mov	r3, r2
 80034aa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034b2:	d308      	bcc.n	80034c6 <UART_SetConfig+0x322>
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ba:	d204      	bcs.n	80034c6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	e0c8      	b.n	8003658 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034cc:	e0c4      	b.n	8003658 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d6:	d167      	bne.n	80035a8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80034d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d828      	bhi.n	8003532 <UART_SetConfig+0x38e>
 80034e0:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <UART_SetConfig+0x344>)
 80034e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e6:	bf00      	nop
 80034e8:	0800350d 	.word	0x0800350d
 80034ec:	08003515 	.word	0x08003515
 80034f0:	0800351d 	.word	0x0800351d
 80034f4:	08003533 	.word	0x08003533
 80034f8:	08003523 	.word	0x08003523
 80034fc:	08003533 	.word	0x08003533
 8003500:	08003533 	.word	0x08003533
 8003504:	08003533 	.word	0x08003533
 8003508:	0800352b 	.word	0x0800352b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800350c:	f7fe fee4 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 8003510:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003512:	e014      	b.n	800353e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003514:	f7fe fef2 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 8003518:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800351a:	e010      	b.n	800353e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800351c:	4b5a      	ldr	r3, [pc, #360]	; (8003688 <UART_SetConfig+0x4e4>)
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003520:	e00d      	b.n	800353e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003522:	f7fe fe25 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 8003526:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003528:	e009      	b.n	800353e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003530:	e005      	b.n	800353e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800353c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8089 	beq.w	8003658 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	4a4e      	ldr	r2, [pc, #312]	; (8003684 <UART_SetConfig+0x4e0>)
 800354c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003550:	461a      	mov	r2, r3
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	fbb3 f3f2 	udiv	r3, r3, r2
 8003558:	005a      	lsls	r2, r3, #1
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	085b      	lsrs	r3, r3, #1
 8003560:	441a      	add	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	fbb2 f3f3 	udiv	r3, r2, r3
 800356a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b0f      	cmp	r3, #15
 8003570:	d916      	bls.n	80035a0 <UART_SetConfig+0x3fc>
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d212      	bcs.n	80035a0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f023 030f 	bic.w	r3, r3, #15
 8003582:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	085b      	lsrs	r3, r3, #1
 8003588:	b29b      	uxth	r3, r3
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	b29a      	uxth	r2, r3
 8003590:	8bfb      	ldrh	r3, [r7, #30]
 8003592:	4313      	orrs	r3, r2
 8003594:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	8bfa      	ldrh	r2, [r7, #30]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	e05b      	b.n	8003658 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035a6:	e057      	b.n	8003658 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d828      	bhi.n	8003602 <UART_SetConfig+0x45e>
 80035b0:	a201      	add	r2, pc, #4	; (adr r2, 80035b8 <UART_SetConfig+0x414>)
 80035b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b6:	bf00      	nop
 80035b8:	080035dd 	.word	0x080035dd
 80035bc:	080035e5 	.word	0x080035e5
 80035c0:	080035ed 	.word	0x080035ed
 80035c4:	08003603 	.word	0x08003603
 80035c8:	080035f3 	.word	0x080035f3
 80035cc:	08003603 	.word	0x08003603
 80035d0:	08003603 	.word	0x08003603
 80035d4:	08003603 	.word	0x08003603
 80035d8:	080035fb 	.word	0x080035fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035dc:	f7fe fe7c 	bl	80022d8 <HAL_RCC_GetPCLK1Freq>
 80035e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035e2:	e014      	b.n	800360e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e4:	f7fe fe8a 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80035e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035ea:	e010      	b.n	800360e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ec:	4b26      	ldr	r3, [pc, #152]	; (8003688 <UART_SetConfig+0x4e4>)
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035f0:	e00d      	b.n	800360e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f2:	f7fe fdbd 	bl	8002170 <HAL_RCC_GetSysClockFreq>
 80035f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035f8:	e009      	b.n	800360e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003600:	e005      	b.n	800360e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800360c:	bf00      	nop
    }

    if (pclk != 0U)
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d021      	beq.n	8003658 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <UART_SetConfig+0x4e0>)
 800361a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800361e:	461a      	mov	r2, r3
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	fbb3 f2f2 	udiv	r2, r3, r2
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	085b      	lsrs	r3, r3, #1
 800362c:	441a      	add	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	d909      	bls.n	8003652 <UART_SetConfig+0x4ae>
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d205      	bcs.n	8003652 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	b29a      	uxth	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	e002      	b.n	8003658 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2201      	movs	r2, #1
 800365c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2201      	movs	r2, #1
 8003664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2200      	movs	r2, #0
 800366c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003674:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003678:	4618      	mov	r0, r3
 800367a:	3730      	adds	r7, #48	; 0x30
 800367c:	46bd      	mov	sp, r7
 800367e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003682:	bf00      	nop
 8003684:	08004eb4 	.word	0x08004eb4
 8003688:	00f42400 	.word	0x00f42400

0800368c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01a      	beq.n	80037a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800378a:	d10a      	bne.n	80037a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  }
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af02      	add	r7, sp, #8
 80037d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037de:	f7fd f9e7 	bl	8000bb0 <HAL_GetTick>
 80037e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d10e      	bne.n	8003810 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f832 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e028      	b.n	8003862 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b04      	cmp	r3, #4
 800381c:	d10e      	bne.n	800383c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800381e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f81c 	bl	800386a <UART_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e012      	b.n	8003862 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b09c      	sub	sp, #112	; 0x70
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	603b      	str	r3, [r7, #0]
 8003876:	4613      	mov	r3, r2
 8003878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387a:	e0a9      	b.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800387e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003882:	f000 80a5 	beq.w	80039d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fd f993 	bl	8000bb0 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <UART_WaitOnFlagUntilTimeout+0x32>
 8003896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003898:	2b00      	cmp	r3, #0
 800389a:	d140      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038b0:	667b      	str	r3, [r7, #100]	; 0x64
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e6      	bne.n	800389c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3308      	adds	r3, #8
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	663b      	str	r3, [r7, #96]	; 0x60
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3308      	adds	r3, #8
 80038ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80038f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e5      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2220      	movs	r2, #32
 8003906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e069      	b.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d051      	beq.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800393a:	d149      	bne.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003944:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800395a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
 8003966:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800396a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e6      	bne.n	8003946 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	e853 3f00 	ldrex	r3, [r3]
 8003986:	613b      	str	r3, [r7, #16]
   return(result);
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3308      	adds	r3, #8
 8003996:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003998:	623a      	str	r2, [r7, #32]
 800399a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399c:	69f9      	ldr	r1, [r7, #28]
 800399e:	6a3a      	ldr	r2, [r7, #32]
 80039a0:	e841 2300 	strex	r3, r2, [r1]
 80039a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1e5      	bne.n	8003978 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e010      	b.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	4013      	ands	r3, r2
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	429a      	cmp	r2, r3
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	f43f af46 	beq.w	800387c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3770      	adds	r7, #112	; 0x70
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b0a3      	sub	sp, #140	; 0x8c
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	68ba      	ldr	r2, [r7, #8]
 8003a0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	88fa      	ldrh	r2, [r7, #6]
 8003a14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2e:	d10e      	bne.n	8003a4e <UART_Start_Receive_IT+0x52>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <UART_Start_Receive_IT+0x48>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a42:	e02d      	b.n	8003aa0 <UART_Start_Receive_IT+0xa4>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a4c:	e028      	b.n	8003aa0 <UART_Start_Receive_IT+0xa4>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <UART_Start_Receive_IT+0x76>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <UART_Start_Receive_IT+0x6c>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	22ff      	movs	r2, #255	; 0xff
 8003a62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a66:	e01b      	b.n	8003aa0 <UART_Start_Receive_IT+0xa4>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	227f      	movs	r2, #127	; 0x7f
 8003a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a70:	e016      	b.n	8003aa0 <UART_Start_Receive_IT+0xa4>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7a:	d10d      	bne.n	8003a98 <UART_Start_Receive_IT+0x9c>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <UART_Start_Receive_IT+0x92>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	227f      	movs	r2, #127	; 0x7f
 8003a88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a8c:	e008      	b.n	8003aa0 <UART_Start_Receive_IT+0xa4>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	223f      	movs	r2, #63	; 0x3f
 8003a92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a96:	e003      	b.n	8003aa0 <UART_Start_Receive_IT+0xa4>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2222      	movs	r2, #34	; 0x22
 8003aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003ad4:	673a      	str	r2, [r7, #112]	; 0x70
 8003ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003ada:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e3      	bne.n	8003ab0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af0:	d14f      	bne.n	8003b92 <UART_Start_Receive_IT+0x196>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d349      	bcc.n	8003b92 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b06:	d107      	bne.n	8003b18 <UART_Start_Receive_IT+0x11c>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4a46      	ldr	r2, [pc, #280]	; (8003c2c <UART_Start_Receive_IT+0x230>)
 8003b14:	675a      	str	r2, [r3, #116]	; 0x74
 8003b16:	e002      	b.n	8003b1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4a45      	ldr	r2, [pc, #276]	; (8003c30 <UART_Start_Receive_IT+0x234>)
 8003b1c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01a      	beq.n	8003b5c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b4a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e4      	bne.n	8003b26 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3308      	adds	r3, #8
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b66:	e853 3f00 	ldrex	r3, [r3]
 8003b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3308      	adds	r3, #8
 8003b7a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003b7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e5      	bne.n	8003b5c <UART_Start_Receive_IT+0x160>
 8003b90:	e046      	b.n	8003c20 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9a:	d107      	bne.n	8003bac <UART_Start_Receive_IT+0x1b0>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d103      	bne.n	8003bac <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a23      	ldr	r2, [pc, #140]	; (8003c34 <UART_Start_Receive_IT+0x238>)
 8003ba8:	675a      	str	r2, [r3, #116]	; 0x74
 8003baa:	e002      	b.n	8003bb2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <UART_Start_Receive_IT+0x23c>)
 8003bb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d019      	beq.n	8003bee <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003bce:	677b      	str	r3, [r7, #116]	; 0x74
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003bda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_Start_Receive_IT+0x1be>
 8003bec:	e018      	b.n	8003c20 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f043 0320 	orr.w	r3, r3, #32
 8003c02:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	69f9      	ldr	r1, [r7, #28]
 8003c12:	6a3a      	ldr	r2, [r7, #32]
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	378c      	adds	r7, #140	; 0x8c
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	08004795 	.word	0x08004795
 8003c30:	08004435 	.word	0x08004435
 8003c34:	0800427d 	.word	0x0800427d
 8003c38:	080040c5 	.word	0x080040c5

08003c3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b095      	sub	sp, #84	; 0x54
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c62:	643b      	str	r3, [r7, #64]	; 0x40
 8003c64:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e6      	bne.n	8003c44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3308      	adds	r3, #8
 8003c98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e3      	bne.n	8003c76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d118      	bne.n	8003ce8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f023 0310 	bic.w	r3, r3, #16
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6979      	ldr	r1, [r7, #20]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	e841 2300 	strex	r3, r2, [r1]
 8003ce0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1e6      	bne.n	8003cb6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003cfc:	bf00      	nop
 8003cfe:	3754      	adds	r7, #84	; 0x54
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b084      	sub	sp, #16
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7fc fc52 	bl	80005ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b08f      	sub	sp, #60	; 0x3c
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	2b21      	cmp	r3, #33	; 0x21
 8003d42:	d14c      	bne.n	8003dde <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d132      	bne.n	8003db6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d70:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e6      	bne.n	8003d50 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	61bb      	str	r3, [r7, #24]
 8003da2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6979      	ldr	r1, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	613b      	str	r3, [r7, #16]
   return(result);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003db4:	e013      	b.n	8003dde <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003dde:	bf00      	nop
 8003de0:	373c      	adds	r7, #60	; 0x3c
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b091      	sub	sp, #68	; 0x44
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	2b21      	cmp	r3, #33	; 0x21
 8003df8:	d151      	bne.n	8003e9e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d132      	bne.n	8003e6c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	623b      	str	r3, [r7, #32]
   return(result);
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	633b      	str	r3, [r7, #48]	; 0x30
 8003e26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e56:	61fb      	str	r3, [r7, #28]
 8003e58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	617b      	str	r3, [r7, #20]
   return(result);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e6      	bne.n	8003e38 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e6a:	e018      	b.n	8003e9e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e70:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e80:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e86:	1c9a      	adds	r2, r3, #2
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003e9e:	bf00      	nop
 8003ea0:	3744      	adds	r7, #68	; 0x44
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b091      	sub	sp, #68	; 0x44
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	2b21      	cmp	r3, #33	; 0x21
 8003eb8:	d160      	bne.n	8003f7c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ec0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ec2:	e057      	b.n	8003f74 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d133      	bne.n	8003f38 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	623b      	str	r3, [r7, #32]
   return(result);
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef0:	633a      	str	r2, [r7, #48]	; 0x30
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	69b9      	ldr	r1, [r7, #24]
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e6      	bne.n	8003f04 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003f36:	e021      	b.n	8003f7c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d013      	beq.n	8003f6e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f70:	3b01      	subs	r3, #1
 8003f72:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1a4      	bne.n	8003ec4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003f7a:	e7ff      	b.n	8003f7c <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003f7c:	bf00      	nop
 8003f7e:	3744      	adds	r7, #68	; 0x44
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b091      	sub	sp, #68	; 0x44
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	2b21      	cmp	r3, #33	; 0x21
 8003f96:	d165      	bne.n	8004064 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003f9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fa0:	e05c      	b.n	800405c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d133      	bne.n	8004016 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6979      	ldr	r1, [r7, #20]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	613b      	str	r3, [r7, #16]
   return(result);
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004014:	e026      	b.n	8004064 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d018      	beq.n	8004056 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004028:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004038:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403e:	1c9a      	adds	r2, r3, #2
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004056:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004058:	3b01      	subs	r3, #1
 800405a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800405c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800405e:	2b00      	cmp	r3, #0
 8004060:	d19f      	bne.n	8003fa2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004062:	e7ff      	b.n	8004064 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004064:	bf00      	nop
 8004066:	3744      	adds	r7, #68	; 0x44
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr

0800406e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b088      	sub	sp, #32
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	60bb      	str	r3, [r7, #8]
   return(result);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6979      	ldr	r1, [r7, #20]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	613b      	str	r3, [r7, #16]
   return(result);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7fc fa92 	bl	80005e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040bc:	bf00      	nop
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b09c      	sub	sp, #112	; 0x70
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80040d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040dc:	2b22      	cmp	r3, #34	; 0x22
 80040de:	f040 80be 	bne.w	800425e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80040f0:	b2d9      	uxtb	r1, r3
 80040f2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	400a      	ands	r2, r1
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 80a1 	bne.w	800426e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800413a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800413c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004140:	66bb      	str	r3, [r7, #104]	; 0x68
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800414a:	65bb      	str	r3, [r7, #88]	; 0x58
 800414c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e6      	bne.n	800412c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800416e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	667b      	str	r3, [r7, #100]	; 0x64
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800417e:	647a      	str	r2, [r7, #68]	; 0x44
 8004180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800418c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e5      	bne.n	800415e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <UART_RxISR_8BIT+0x1b4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d01f      	beq.n	80041f0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d018      	beq.n	80041f0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	623b      	str	r3, [r7, #32]
   return(result);
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041d2:	663b      	str	r3, [r7, #96]	; 0x60
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041dc:	633b      	str	r3, [r7, #48]	; 0x30
 80041de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e6      	bne.n	80041be <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d12e      	bne.n	8004256 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60fb      	str	r3, [r7, #12]
   return(result);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0310 	bic.w	r3, r3, #16
 8004212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	69b9      	ldr	r1, [r7, #24]
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	617b      	str	r3, [r7, #20]
   return(result);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e6      	bne.n	80041fe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b10      	cmp	r3, #16
 800423c:	d103      	bne.n	8004246 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2210      	movs	r2, #16
 8004244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800424c:	4619      	mov	r1, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fe ff9c 	bl	800318c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004254:	e00b      	b.n	800426e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc f9cb 	bl	80005f2 <HAL_UART_RxCpltCallback>
}
 800425c:	e007      	b.n	800426e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0208 	orr.w	r2, r2, #8
 800426c:	619a      	str	r2, [r3, #24]
}
 800426e:	bf00      	nop
 8004270:	3770      	adds	r7, #112	; 0x70
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40008000 	.word	0x40008000

0800427c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b09c      	sub	sp, #112	; 0x70
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800428a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004294:	2b22      	cmp	r3, #34	; 0x22
 8004296:	f040 80be 	bne.w	8004416 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80042ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80042b2:	4013      	ands	r3, r2
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042be:	1c9a      	adds	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 80a1 	bne.w	8004426 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80042f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f8:	667b      	str	r3, [r7, #100]	; 0x64
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004302:	657b      	str	r3, [r7, #84]	; 0x54
 8004304:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3308      	adds	r3, #8
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004320:	e853 3f00 	ldrex	r3, [r3]
 8004324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	663b      	str	r3, [r7, #96]	; 0x60
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004336:	643a      	str	r2, [r7, #64]	; 0x40
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800433c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e5      	bne.n	8004316 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a33      	ldr	r2, [pc, #204]	; (8004430 <UART_RxISR_16BIT+0x1b4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d01f      	beq.n	80043a8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d018      	beq.n	80043a8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	61fb      	str	r3, [r7, #28]
   return(result);
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800438a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004396:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800439a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e6      	bne.n	8004376 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d12e      	bne.n	800440e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f023 0310 	bic.w	r3, r3, #16
 80043ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6979      	ldr	r1, [r7, #20]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	613b      	str	r3, [r7, #16]
   return(result);
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b10      	cmp	r3, #16
 80043f4:	d103      	bne.n	80043fe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe fec0 	bl	800318c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800440c:	e00b      	b.n	8004426 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc f8ef 	bl	80005f2 <HAL_UART_RxCpltCallback>
}
 8004414:	e007      	b.n	8004426 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0208 	orr.w	r2, r2, #8
 8004424:	619a      	str	r2, [r3, #24]
}
 8004426:	bf00      	nop
 8004428:	3770      	adds	r7, #112	; 0x70
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40008000 	.word	0x40008000

08004434 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b0ac      	sub	sp, #176	; 0xb0
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004442:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800446a:	2b22      	cmp	r3, #34	; 0x22
 800446c:	f040 8182 	bne.w	8004774 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004476:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800447a:	e125      	b.n	80046c8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004486:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800448a:	b2d9      	uxtb	r1, r3
 800448c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004490:	b2da      	uxtb	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	400a      	ands	r2, r1
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80044c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d053      	beq.n	8004576 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d011      	beq.n	80044fe <UART_RxISR_8BIT_FIFOEN+0xca>
 80044da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d011      	beq.n	800452e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800450a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2202      	movs	r2, #2
 800451c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004524:	f043 0204 	orr.w	r2, r3, #4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800452e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d011      	beq.n	800455e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800453a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00b      	beq.n	800455e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2204      	movs	r2, #4
 800454c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004564:	2b00      	cmp	r3, #0
 8004566:	d006      	beq.n	8004576 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fc f830 	bl	80005ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	f040 80a2 	bne.w	80046c8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045a8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80045ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80045b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e4      	bne.n	8004584 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3308      	adds	r3, #8
 80045c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80045ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	3308      	adds	r3, #8
 80045de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045e2:	66ba      	str	r2, [r7, #104]	; 0x68
 80045e4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80045e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80045f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e1      	bne.n	80045ba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5f      	ldr	r2, [pc, #380]	; (800478c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d021      	beq.n	8004658 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01a      	beq.n	8004658 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004644:	657b      	str	r3, [r7, #84]	; 0x54
 8004646:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800464a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e4      	bne.n	8004622 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d130      	bne.n	80046c2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	f023 0310 	bic.w	r3, r3, #16
 800467a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004688:	643b      	str	r3, [r7, #64]	; 0x40
 800468a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800468e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e4      	bne.n	8004666 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d103      	bne.n	80046b2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2210      	movs	r2, #16
 80046b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fe fd66 	bl	800318c <HAL_UARTEx_RxEventCallback>
 80046c0:	e002      	b.n	80046c8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fb ff95 	bl	80005f2 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80046c8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d006      	beq.n	80046de <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80046d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046d4:	f003 0320 	and.w	r3, r3, #32
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f47f aecf 	bne.w	800447c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046e4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80046e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d049      	beq.n	8004784 <UART_RxISR_8BIT_FIFOEN+0x350>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80046f6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d242      	bcs.n	8004784 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3308      	adds	r3, #8
 8004704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	61fb      	str	r3, [r7, #28]
   return(result);
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	3308      	adds	r3, #8
 800471e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e3      	bne.n	80046fe <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a15      	ldr	r2, [pc, #84]	; (8004790 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800473a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	60bb      	str	r3, [r7, #8]
   return(result);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f043 0320 	orr.w	r3, r3, #32
 8004750:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6979      	ldr	r1, [r7, #20]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	613b      	str	r3, [r7, #16]
   return(result);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e4      	bne.n	800473c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004772:	e007      	b.n	8004784 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699a      	ldr	r2, [r3, #24]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0208 	orr.w	r2, r2, #8
 8004782:	619a      	str	r2, [r3, #24]
}
 8004784:	bf00      	nop
 8004786:	37b0      	adds	r7, #176	; 0xb0
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40008000 	.word	0x40008000
 8004790:	080040c5 	.word	0x080040c5

08004794 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b0ae      	sub	sp, #184	; 0xb8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80047a2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69db      	ldr	r3, [r3, #28]
 80047ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ca:	2b22      	cmp	r3, #34	; 0x22
 80047cc:	f040 8186 	bne.w	8004adc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80047d6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047da:	e129      	b.n	8004a30 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80047ee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80047f2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80047f6:	4013      	ands	r3, r2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004804:	1c9a      	adds	r2, r3, #2
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	2b00      	cmp	r3, #0
 8004830:	d053      	beq.n	80048da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004832:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d011      	beq.n	8004862 <UART_RxISR_16BIT_FIFOEN+0xce>
 800483e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2201      	movs	r2, #1
 8004850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004862:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d011      	beq.n	8004892 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800486e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2202      	movs	r2, #2
 8004880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f043 0204 	orr.w	r2, r3, #4
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004892:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d011      	beq.n	80048c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800489e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2204      	movs	r2, #4
 80048b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b8:	f043 0202 	orr.w	r2, r3, #2
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d006      	beq.n	80048da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fb fe7e 	bl	80005ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 80a4 	bne.w	8004a30 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800490a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800490e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004916:	e841 2300 	strex	r3, r2, [r1]
 800491a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800491c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1e2      	bne.n	80048e8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3308      	adds	r3, #8
 8004946:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800494a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800494c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004950:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e1      	bne.n	8004922 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a5f      	ldr	r2, [pc, #380]	; (8004af4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d021      	beq.n	80049c0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01a      	beq.n	80049c0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800499e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80049ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e4      	bne.n	800498a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d130      	bne.n	8004a2a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	f023 0310 	bic.w	r3, r3, #16
 80049e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
 80049f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e4      	bne.n	80049ce <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b10      	cmp	r3, #16
 8004a10:	d103      	bne.n	8004a1a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2210      	movs	r2, #16
 8004a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fe fbb2 	bl	800318c <HAL_UARTEx_RxEventCallback>
 8004a28:	e002      	b.n	8004a30 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fb fde1 	bl	80005f2 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a30:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d006      	beq.n	8004a46 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004a38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f47f aecb 	bne.w	80047dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a4c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a50:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d049      	beq.n	8004aec <UART_RxISR_16BIT_FIFOEN+0x358>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a5e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d242      	bcs.n	8004aec <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	623b      	str	r3, [r7, #32]
   return(result);
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e3      	bne.n	8004a66 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004aa2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f043 0320 	orr.w	r3, r3, #32
 8004ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	69b9      	ldr	r1, [r7, #24]
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e4      	bne.n	8004aa4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ada:	e007      	b.n	8004aec <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0208 	orr.w	r2, r2, #8
 8004aea:	619a      	str	r2, [r3, #24]
}
 8004aec:	bf00      	nop
 8004aee:	37b8      	adds	r7, #184	; 0xb8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40008000 	.word	0x40008000
 8004af8:	0800427d 	.word	0x0800427d

08004afc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr

08004b0e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr

08004b32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e027      	b.n	8004b98 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	; 0x24
 8004b54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e02d      	b.n	8004c16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2224      	movs	r2, #36	; 0x24
 8004bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f850 	bl	8004c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2220      	movs	r2, #32
 8004c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e02d      	b.n	8004c92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2224      	movs	r2, #36	; 0x24
 8004c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f812 	bl	8004c9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d108      	bne.n	8004cbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cbc:	e031      	b.n	8004d22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cc2:	2308      	movs	r3, #8
 8004cc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	0e5b      	lsrs	r3, r3, #25
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	f003 0307 	and.w	r3, r3, #7
 8004cd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	0f5b      	lsrs	r3, r3, #29
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ce6:	7bbb      	ldrb	r3, [r7, #14]
 8004ce8:	7b3a      	ldrb	r2, [r7, #12]
 8004cea:	4910      	ldr	r1, [pc, #64]	; (8004d2c <UARTEx_SetNbDataToProcess+0x90>)
 8004cec:	5c8a      	ldrb	r2, [r1, r2]
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cf2:	7b3a      	ldrb	r2, [r7, #12]
 8004cf4:	490e      	ldr	r1, [pc, #56]	; (8004d30 <UARTEx_SetNbDataToProcess+0x94>)
 8004cf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	7b7a      	ldrb	r2, [r7, #13]
 8004d08:	4908      	ldr	r1, [pc, #32]	; (8004d2c <UARTEx_SetNbDataToProcess+0x90>)
 8004d0a:	5c8a      	ldrb	r2, [r1, r2]
 8004d0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d10:	7b7a      	ldrb	r2, [r7, #13]
 8004d12:	4907      	ldr	r1, [pc, #28]	; (8004d30 <UARTEx_SetNbDataToProcess+0x94>)
 8004d14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d16:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d22:	bf00      	nop
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	08004ecc 	.word	0x08004ecc
 8004d30:	08004ed4 	.word	0x08004ed4

08004d34 <__libc_init_array>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	4d0d      	ldr	r5, [pc, #52]	; (8004d6c <__libc_init_array+0x38>)
 8004d38:	4c0d      	ldr	r4, [pc, #52]	; (8004d70 <__libc_init_array+0x3c>)
 8004d3a:	1b64      	subs	r4, r4, r5
 8004d3c:	10a4      	asrs	r4, r4, #2
 8004d3e:	2600      	movs	r6, #0
 8004d40:	42a6      	cmp	r6, r4
 8004d42:	d109      	bne.n	8004d58 <__libc_init_array+0x24>
 8004d44:	4d0b      	ldr	r5, [pc, #44]	; (8004d74 <__libc_init_array+0x40>)
 8004d46:	4c0c      	ldr	r4, [pc, #48]	; (8004d78 <__libc_init_array+0x44>)
 8004d48:	f000 f842 	bl	8004dd0 <_init>
 8004d4c:	1b64      	subs	r4, r4, r5
 8004d4e:	10a4      	asrs	r4, r4, #2
 8004d50:	2600      	movs	r6, #0
 8004d52:	42a6      	cmp	r6, r4
 8004d54:	d105      	bne.n	8004d62 <__libc_init_array+0x2e>
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5c:	4798      	blx	r3
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7ee      	b.n	8004d40 <__libc_init_array+0xc>
 8004d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d66:	4798      	blx	r3
 8004d68:	3601      	adds	r6, #1
 8004d6a:	e7f2      	b.n	8004d52 <__libc_init_array+0x1e>
 8004d6c:	08004ee4 	.word	0x08004ee4
 8004d70:	08004ee4 	.word	0x08004ee4
 8004d74:	08004ee4 	.word	0x08004ee4
 8004d78:	08004ee8 	.word	0x08004ee8

08004d7c <memcpy>:
 8004d7c:	440a      	add	r2, r1
 8004d7e:	4291      	cmp	r1, r2
 8004d80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d84:	d100      	bne.n	8004d88 <memcpy+0xc>
 8004d86:	4770      	bx	lr
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d92:	4291      	cmp	r1, r2
 8004d94:	d1f9      	bne.n	8004d8a <memcpy+0xe>
 8004d96:	bd10      	pop	{r4, pc}

08004d98 <memset>:
 8004d98:	4402      	add	r2, r0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d100      	bne.n	8004da2 <memset+0xa>
 8004da0:	4770      	bx	lr
 8004da2:	f803 1b01 	strb.w	r1, [r3], #1
 8004da6:	e7f9      	b.n	8004d9c <memset+0x4>

08004da8 <strncpy>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	3901      	subs	r1, #1
 8004dac:	4603      	mov	r3, r0
 8004dae:	b132      	cbz	r2, 8004dbe <strncpy+0x16>
 8004db0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004db4:	f803 4b01 	strb.w	r4, [r3], #1
 8004db8:	3a01      	subs	r2, #1
 8004dba:	2c00      	cmp	r4, #0
 8004dbc:	d1f7      	bne.n	8004dae <strncpy+0x6>
 8004dbe:	441a      	add	r2, r3
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d100      	bne.n	8004dc8 <strncpy+0x20>
 8004dc6:	bd10      	pop	{r4, pc}
 8004dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8004dcc:	e7f9      	b.n	8004dc2 <strncpy+0x1a>
	...

08004dd0 <_init>:
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dd2:	bf00      	nop
 8004dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd6:	bc08      	pop	{r3}
 8004dd8:	469e      	mov	lr, r3
 8004dda:	4770      	bx	lr

08004ddc <_fini>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	bf00      	nop
 8004de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004de2:	bc08      	pop	{r3}
 8004de4:	469e      	mov	lr, r3
 8004de6:	4770      	bx	lr

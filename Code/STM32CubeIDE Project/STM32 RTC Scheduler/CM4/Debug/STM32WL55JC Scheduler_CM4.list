
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005178  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c4  080053c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  2000000c  080053d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  080053d8  00020520  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f0e  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002723  00000000  00000000  00030f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00034708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c27d  00000000  00000000  000356c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010266  00000000  00000000  0005193d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afff0  00000000  00000000  00061ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111b93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004424  00000000  00000000  00111be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08005298 	.word	0x08005298

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08005298 	.word	0x08005298

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <initDesktopCommunication>:


/*
 *
 */
void initDesktopCommunication(UART_HandleTypeDef* uartHandle) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <initDesktopCommunication+0x28>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6013      	str	r3, [r2, #0]
	uartQueue_init(&(_process_queue));
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <initDesktopCommunication+0x2c>)
 8000498:	f000 fc0f 	bl	8000cba <uartQueue_init>
	uartQueue_init(&(_report_queue));
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <initDesktopCommunication+0x30>)
 800049e:	f000 fc0c 	bl	8000cba <uartQueue_init>

	// set isInit flag
	_isInit = true;
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <initDesktopCommunication+0x34>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	20000030 	.word	0x20000030
 80004b8:	2000023c 	.word	0x2000023c
 80004bc:	20000028 	.word	0x20000028

080004c0 <reportToDesktopApp>:
/*
 *
 */
REPORT_QUEUE_STATUS reportToDesktopApp(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// Compose header and body into one message
	composeMessage(header, body, message);
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	461a      	mov	r2, r3
 80004d0:	6839      	ldr	r1, [r7, #0]
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 fb6a 	bl	8000bac <composeMessage>

	// if the queue is not full
	if (!uartQueue_isFull(&_report_queue))
 80004d8:	481d      	ldr	r0, [pc, #116]	; (8000550 <reportToDesktopApp+0x90>)
 80004da:	f000 fc62 	bl	8000da2 <uartQueue_isFull>
 80004de:	4603      	mov	r3, r0
 80004e0:	f083 0301 	eor.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d02d      	beq.n	8000546 <reportToDesktopApp+0x86>
	{
		// disable IRQs from UART to prevent race condition
		if (_uartHandle->Instance == USART1)
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <reportToDesktopApp+0x94>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a19      	ldr	r2, [pc, #100]	; (8000558 <reportToDesktopApp+0x98>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d103      	bne.n	80004fe <reportToDesktopApp+0x3e>
			HAL_NVIC_DisableIRQ(USART1_IRQn);
 80004f6:	2024      	movs	r0, #36	; 0x24
 80004f8:	f000 fe33 	bl	8001162 <HAL_NVIC_DisableIRQ>
 80004fc:	e008      	b.n	8000510 <reportToDesktopApp+0x50>
		else if (_uartHandle->Instance == USART2)
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <reportToDesktopApp+0x94>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a15      	ldr	r2, [pc, #84]	; (800055c <reportToDesktopApp+0x9c>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d102      	bne.n	8000510 <reportToDesktopApp+0x50>
			HAL_NVIC_DisableIRQ(USART2_IRQn);
 800050a:	2025      	movs	r0, #37	; 0x25
 800050c:	f000 fe29 	bl	8001162 <HAL_NVIC_DisableIRQ>

		// queue into report queue
		uartQueue_enqueue(&_report_queue, message);
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	4619      	mov	r1, r3
 8000516:	480e      	ldr	r0, [pc, #56]	; (8000550 <reportToDesktopApp+0x90>)
 8000518:	f000 fbfd 	bl	8000d16 <uartQueue_enqueue>

		// enable UART IRQs
		if (_uartHandle->Instance == USART1)
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <reportToDesktopApp+0x94>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <reportToDesktopApp+0x98>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d103      	bne.n	8000530 <reportToDesktopApp+0x70>
			HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000528:	2024      	movs	r0, #36	; 0x24
 800052a:	f000 fe0c 	bl	8001146 <HAL_NVIC_EnableIRQ>
 800052e:	e008      	b.n	8000542 <reportToDesktopApp+0x82>
		else if (_uartHandle->Instance == USART2)
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <reportToDesktopApp+0x94>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <reportToDesktopApp+0x9c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d102      	bne.n	8000542 <reportToDesktopApp+0x82>
			HAL_NVIC_EnableIRQ(USART2_IRQn);
 800053c:	2025      	movs	r0, #37	; 0x25
 800053e:	f000 fe02 	bl	8001146 <HAL_NVIC_EnableIRQ>

		// report successfully queued
		return REPORT_QUEUED;
 8000542:	2300      	movs	r3, #0
 8000544:	e000      	b.n	8000548 <reportToDesktopApp+0x88>
	}

	// report queue is full
	else
	{
		return REPORT_FULL;
 8000546:	2301      	movs	r3, #1
	}
}
 8000548:	4618      	mov	r0, r3
 800054a:	3728      	adds	r7, #40	; 0x28
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000023c 	.word	0x2000023c
 8000554:	2000002c 	.word	0x2000002c
 8000558:	40013800 	.word	0x40013800
 800055c:	40004400 	.word	0x40004400

08000560 <retrieveFromDesktopApp>:
/*
 *
 */
PROCESS_QUEUE_STATUS retrieveFromDesktopApp(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (!uartQueue_isEmpty(&_process_queue))
 800056a:	4821      	ldr	r0, [pc, #132]	; (80005f0 <retrieveFromDesktopApp+0x90>)
 800056c:	f000 fc0d 	bl	8000d8a <uartQueue_isEmpty>
 8000570:	4603      	mov	r3, r0
 8000572:	f083 0301 	eor.w	r3, r3, #1
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b00      	cmp	r3, #0
 800057a:	d034      	beq.n	80005e6 <retrieveFromDesktopApp+0x86>
	{
		// disable IRQs from UART to prevent race condition
		if (_uartHandle->Instance == USART1)
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <retrieveFromDesktopApp+0x94>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <retrieveFromDesktopApp+0x98>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d103      	bne.n	8000590 <retrieveFromDesktopApp+0x30>
			HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000588:	2024      	movs	r0, #36	; 0x24
 800058a:	f000 fdea 	bl	8001162 <HAL_NVIC_DisableIRQ>
 800058e:	e008      	b.n	80005a2 <retrieveFromDesktopApp+0x42>
		else if (_uartHandle->Instance == USART2)
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <retrieveFromDesktopApp+0x94>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a19      	ldr	r2, [pc, #100]	; (80005fc <retrieveFromDesktopApp+0x9c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d102      	bne.n	80005a2 <retrieveFromDesktopApp+0x42>
			HAL_NVIC_DisableIRQ(USART2_IRQn);
 800059c:	2025      	movs	r0, #37	; 0x25
 800059e:	f000 fde0 	bl	8001162 <HAL_NVIC_DisableIRQ>

		// retrieve message from process queue
		uartQueue_dequeue(&_process_queue, message);
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4619      	mov	r1, r3
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <retrieveFromDesktopApp+0x90>)
 80005aa:	f000 fbd9 	bl	8000d60 <uartQueue_dequeue>

		// enable UART IRQs
		if (_uartHandle->Instance == USART1)
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <retrieveFromDesktopApp+0x94>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <retrieveFromDesktopApp+0x98>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d103      	bne.n	80005c2 <retrieveFromDesktopApp+0x62>
			HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005ba:	2024      	movs	r0, #36	; 0x24
 80005bc:	f000 fdc3 	bl	8001146 <HAL_NVIC_EnableIRQ>
 80005c0:	e008      	b.n	80005d4 <retrieveFromDesktopApp+0x74>
		else if (_uartHandle->Instance == USART2)
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <retrieveFromDesktopApp+0x94>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0c      	ldr	r2, [pc, #48]	; (80005fc <retrieveFromDesktopApp+0x9c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d102      	bne.n	80005d4 <retrieveFromDesktopApp+0x74>
			HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005ce:	2025      	movs	r0, #37	; 0x25
 80005d0:	f000 fdb9 	bl	8001146 <HAL_NVIC_EnableIRQ>

		// decompose header and body from message
		decomposeMessage(header, body, message);
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	461a      	mov	r2, r3
 80005da:	6839      	ldr	r1, [r7, #0]
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 fafb 	bl	8000bd8 <decomposeMessage>

		// report successfully dequeued
		return PROCESS_DEQUEUED;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e000      	b.n	80005e8 <retrieveFromDesktopApp+0x88>

	// report queue is empty
	else
	{
		// report empty
		return PROCESS_EMPTY;
 80005e6:	2301      	movs	r3, #1
	}
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3728      	adds	r7, #40	; 0x28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000030 	.word	0x20000030
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	40013800 	.word	0x40013800
 80005fc:	40004400 	.word	0x40004400

08000600 <checkRxTxError>:


/*
 *
 */
bool checkRxTxError(void) {
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
	return (_rxError || _txError);
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <checkRxTxError+0x2c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d104      	bne.n	8000618 <checkRxTxError+0x18>
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <checkRxTxError+0x30>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <checkRxTxError+0x1c>
 8000618:	2301      	movs	r3, #1
 800061a:	e000      	b.n	800061e <checkRxTxError+0x1e>
 800061c:	2300      	movs	r3, #0
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	2000002a 	.word	0x2000002a
 8000630:	20000029 	.word	0x20000029

08000634 <flushReportQueue>:


/*
 *
 */
void flushReportQueue(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	// while the report queue is not empty
	while (!uartQueue_isEmpty(&_report_queue))
 8000638:	e005      	b.n	8000646 <flushReportQueue+0x12>
	{
		// pop message from report queue and place in tx buffer
		uartQueue_dequeue(&_report_queue, _txBuffer);
 800063a:	4909      	ldr	r1, [pc, #36]	; (8000660 <flushReportQueue+0x2c>)
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <flushReportQueue+0x30>)
 800063e:	f000 fb8f 	bl	8000d60 <uartQueue_dequeue>

		// send message to computer
		_txMessage_Poll();
 8000642:	f000 f879 	bl	8000738 <_txMessage_Poll>
	while (!uartQueue_isEmpty(&_report_queue))
 8000646:	4807      	ldr	r0, [pc, #28]	; (8000664 <flushReportQueue+0x30>)
 8000648:	f000 fb9f 	bl	8000d8a <uartQueue_isEmpty>
 800064c:	4603      	mov	r3, r0
 800064e:	f083 0301 	eor.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f0      	bne.n	800063a <flushReportQueue+0x6>
	}
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000448 	.word	0x20000448
 8000664:	2000023c 	.word	0x2000023c

08000668 <startDesktopAppCommunication>:


/*
 *
 */
void startDesktopAppCommunication(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	_rxMessage_IT();
 800066c:	f000 f84c 	bl	8000708 <_rxMessage_IT>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <deskAppRxCompleteISR>:


/*
 *
 */
void deskAppRxCompleteISR(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	// check if queue is not full
	if (!uartQueue_isFull(&_process_queue))
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <deskAppRxCompleteISR+0x38>)
 800067a:	f000 fb92 	bl	8000da2 <uartQueue_isFull>
 800067e:	4603      	mov	r3, r0
 8000680:	f083 0301 	eor.w	r3, r3, #1
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d004      	beq.n	8000694 <deskAppRxCompleteISR+0x20>
	{
		// add message to process queue
		uartQueue_enqueue(&_process_queue, _rxBuffer);
 800068a:	4909      	ldr	r1, [pc, #36]	; (80006b0 <deskAppRxCompleteISR+0x3c>)
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <deskAppRxCompleteISR+0x38>)
 800068e:	f000 fb42 	bl	8000d16 <uartQueue_enqueue>
 8000692:	e006      	b.n	80006a2 <deskAppRxCompleteISR+0x2e>

	// queue is full, report to desktop application to pause transmissions
	else
	{
		// todo: replace with something better
		composeMessage("FULL", " BUFFER FULL!\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0", _txBuffer);
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <deskAppRxCompleteISR+0x40>)
 8000696:	4908      	ldr	r1, [pc, #32]	; (80006b8 <deskAppRxCompleteISR+0x44>)
 8000698:	4808      	ldr	r0, [pc, #32]	; (80006bc <deskAppRxCompleteISR+0x48>)
 800069a:	f000 fa87 	bl	8000bac <composeMessage>
		_txMessage_IT();
 800069e:	f000 f81b 	bl	80006d8 <_txMessage_IT>
	}

	// begin receiving again
	_rxMessage_IT();
 80006a2:	f000 f831 	bl	8000708 <_rxMessage_IT>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000030 	.word	0x20000030
 80006b0:	20000468 	.word	0x20000468
 80006b4:	20000448 	.word	0x20000448
 80006b8:	080052b0 	.word	0x080052b0
 80006bc:	080052d0 	.word	0x080052d0

080006c0 <deskAppTxCompleteISR>:


/*
 *
 */
void deskAppTxCompleteISR(void) {
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <deskAppErrorISR>:


/*
 *
 */
void deskAppErrorISR(void) {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <_txMessage_IT>:


/*
 *
 */
void _txMessage_IT(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <_txMessage_IT+0x24>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2220      	movs	r2, #32
 80006e2:	4907      	ldr	r1, [pc, #28]	; (8000700 <_txMessage_IT+0x28>)
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fbb1 	bl	8002e4c <HAL_UART_Transmit_IT>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d102      	bne.n	80006f6 <_txMessage_IT+0x1e>
		_txError = true;
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <_txMessage_IT+0x2c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	20000448 	.word	0x20000448
 8000704:	20000029 	.word	0x20000029

08000708 <_rxMessage_IT>:


/*
 *
 */
void _rxMessage_IT(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <_rxMessage_IT+0x24>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2220      	movs	r2, #32
 8000712:	4907      	ldr	r1, [pc, #28]	; (8000730 <_rxMessage_IT+0x28>)
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fc2d 	bl	8002f74 <HAL_UART_Receive_IT>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d102      	bne.n	8000726 <_rxMessage_IT+0x1e>
		_rxError = true;
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <_rxMessage_IT+0x2c>)
 8000722:	2201      	movs	r2, #1
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000002c 	.word	0x2000002c
 8000730:	20000468 	.word	0x20000468
 8000734:	2000002a 	.word	0x2000002a

08000738 <_txMessage_Poll>:


/*
 *
 */
void _txMessage_Poll(void) {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <_txMessage_Poll+0x24>)
 800073e:	6818      	ldr	r0, [r3, #0]
 8000740:	23fa      	movs	r3, #250	; 0xfa
 8000742:	2220      	movs	r2, #32
 8000744:	4906      	ldr	r1, [pc, #24]	; (8000760 <_txMessage_Poll+0x28>)
 8000746:	f002 fafa 	bl	8002d3e <HAL_UART_Transmit>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d102      	bne.n	8000756 <_txMessage_Poll+0x1e>
		_txError = true;
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <_txMessage_Poll+0x2c>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000002c 	.word	0x2000002c
 8000760:	20000448 	.word	0x20000448
 8000764:	20000029 	.word	0x20000029

08000768 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000778:	f023 0218 	bic.w	r2, r3, #24
 800077c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000792:	b480      	push	{r7}
 8000794:	b085      	sub	sp, #20
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800079a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4013      	ands	r3, r2
 80007b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	bf00      	nop
 80007ba:	3714      	adds	r7, #20
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a06      	ldr	r2, [pc, #24]	; (80007ec <HAL_UART_ErrorCallback+0x28>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d006      	beq.n	80007e4 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a05      	ldr	r2, [pc, #20]	; (80007f0 <HAL_UART_ErrorCallback+0x2c>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d101      	bne.n	80007e4 <HAL_UART_ErrorCallback+0x20>
		deskAppErrorISR();
 80007e0:	f7ff ff74 	bl	80006cc <deskAppErrorISR>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40013800 	.word	0x40013800
 80007f0:	40004400 	.word	0x40004400

080007f4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_UART_TxCpltCallback+0x28>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d006      	beq.n	8000814 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <HAL_UART_TxCpltCallback+0x2c>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d101      	bne.n	8000814 <HAL_UART_TxCpltCallback+0x20>
		deskAppTxCompleteISR();
 8000810:	f7ff ff56 	bl	80006c0 <deskAppTxCompleteISR>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40013800 	.word	0x40013800
 8000820:	40004400 	.word	0x40004400

08000824 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <HAL_UART_RxCpltCallback+0x28>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d006      	beq.n	8000844 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a05      	ldr	r2, [pc, #20]	; (8000850 <HAL_UART_RxCpltCallback+0x2c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d101      	bne.n	8000844 <HAL_UART_RxCpltCallback+0x20>
		deskAppRxCompleteISR();
 8000840:	f7ff ff18 	bl	8000674 <deskAppRxCompleteISR>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40013800 	.word	0x40013800
 8000850:	40004400 	.word	0x40004400

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	; 0x28
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085a:	f000 fae9 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085e:	f000 f82d 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000862:	f000 f8db 	bl	8000a1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000866:	f000 f883 	bl	8000970 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fed8 	bl	8001620 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  initDesktopCommunication(&huart2);
 8000870:	4811      	ldr	r0, [pc, #68]	; (80008b8 <main+0x64>)
 8000872:	f7ff fe09 	bl	8000488 <initDesktopCommunication>

  // begin listening for messages from desktop
  startDesktopAppCommunication();
 8000876:	f7ff fef7 	bl	8000668 <startDesktopAppCommunication>
  char messageBody[UART_MESSAGE_BODY_SIZE];
  PROCESS_QUEUE_STATUS messageStatus;
  while (1)
  {
	  // check if there was an error in rx or tx
	  if (checkRxTxError())
 800087a:	f7ff fec1 	bl	8000600 <checkRxTxError>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d000      	beq.n	8000886 <main+0x32>
		  while (1) {}
 8000884:	e7fe      	b.n	8000884 <main+0x30>

	  // flush the report queue
	  flushReportQueue();
 8000886:	f7ff fed5 	bl	8000634 <flushReportQueue>

	  // check for message in the process queue
	  messageStatus = retrieveFromDesktopApp(messageHeader, messageBody);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe64 	bl	8000560 <retrieveFromDesktopApp>
 8000898:	4603      	mov	r3, r0
 800089a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  // if message present, handle message
	  if (messageStatus == PROCESS_DEQUEUED) {
 800089e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d1e9      	bne.n	800087a <main+0x26>
		  // echo back to computer
		  reportToDesktopApp(messageHeader, messageBody);
 80008a6:	1d3a      	adds	r2, r7, #4
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4611      	mov	r1, r2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe06 	bl	80004c0 <reportToDesktopApp>
	  if (checkRxTxError())
 80008b4:	e7e1      	b.n	800087a <main+0x26>
 80008b6:	bf00      	nop
 80008b8:	20000488 	.word	0x20000488

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09a      	sub	sp, #104	; 0x68
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2248      	movs	r2, #72	; 0x48
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fcc8 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	615a      	str	r2, [r3, #20]
 80008e0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008e2:	f000 fe75 	bl	80015d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff ff3e 	bl	8000768 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <SystemClock_Config+0xb0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008f4:	4a1d      	ldr	r2, [pc, #116]	; (800096c <SystemClock_Config+0xb0>)
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <SystemClock_Config+0xb0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000908:	2324      	movs	r3, #36	; 0x24
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800090c:	2381      	movs	r3, #129	; 0x81
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000914:	2300      	movs	r3, #0
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000918:	2360      	movs	r3, #96	; 0x60
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4618      	mov	r0, r3
 8000926:	f001 f93d 	bl	8001ba4 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000930:	f000 f881 	bl	8000a36 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000934:	236f      	movs	r3, #111	; 0x6f
 8000936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fca7 	bl	80022a8 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000960:	f000 f869 	bl	8000a36 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3768      	adds	r7, #104	; 0x68
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58000400 	.word	0x58000400

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000976:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <MX_USART2_UART_Init+0xa8>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800097a:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 800097c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000990:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000994:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000998:	220c      	movs	r2, #12
 800099a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009b6:	2230      	movs	r2, #48	; 0x30
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009c0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c8:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009cc:	f002 f967 	bl	8002c9e <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009d6:	f000 f82e 	bl	8000a36 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009de:	f004 fb44 	bl	800506a <HAL_UARTEx_SetTxFifoThreshold>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009e8:	f000 f825 	bl	8000a36 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	2100      	movs	r1, #0
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 80009f0:	f004 fb79 	bl	80050e6 <HAL_UARTEx_SetRxFifoThreshold>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80009fa:	f000 f81c 	bl	8000a36 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0xa4>)
 8000a00:	f004 fafb 	bl	8004ffa <HAL_UARTEx_DisableFifoMode>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000a0a:	f000 f814 	bl	8000a36 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000488 	.word	0x20000488
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff feb6 	bl	8000792 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	2004      	movs	r0, #4
 8000a28:	f7ff feb3 	bl	8000792 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f7ff feb0 	bl	8000792 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3a:	b672      	cpsid	i
}
 8000a3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <Error_Handler+0x8>

08000a40 <LL_AHB2_GRP1_EnableClock>:
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4013      	ands	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a64:	68fb      	ldr	r3, [r7, #12]
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a94:	68fb      	ldr	r3, [r7, #12]
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	; 0x58
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2238      	movs	r2, #56	; 0x38
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 fbc7 	bl	8005260 <memset>
  if(huart->Instance==USART2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <HAL_UART_MspInit+0x98>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d12e      	bne.n	8000b3a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000ae4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 ff9c 	bl	8002a28 <HAL_RCCEx_PeriphCLKConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000af6:	f7ff ff9e 	bl	8000a36 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000afe:	f7ff ffb7 	bl	8000a70 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff ff9c 	bl	8000a40 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 fbf3 	bl	8001310 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2025      	movs	r0, #37	; 0x25
 8000b30:	f000 faef 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b34:	2025      	movs	r0, #37	; 0x25
 8000b36:	f000 fb06 	bl	8001146 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b3a:	bf00      	nop
 8000b3c:	3758      	adds	r7, #88	; 0x58
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40004400 	.word	0x40004400

08000b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <NMI_Handler+0x4>

08000b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <HardFault_Handler+0x4>

08000b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <MemManage_Handler+0x4>

08000b5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5e:	e7fe      	b.n	8000b5e <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bc80      	pop	{r7}
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 f9a9 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <USART2_IRQHandler+0x10>)
 8000b9e:	f002 fa35 	bl	800300c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000488 	.word	0x20000488

08000bac <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	221c      	movs	r2, #28
 8000bc8:	68b9      	ldr	r1, [r7, #8]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f004 fb3a 	bl	8005244 <memcpy>
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	221c      	movs	r2, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	68b8      	ldr	r0, [r7, #8]
 8000bf8:	f004 fb24 	bl	8005244 <memcpy>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <nextIdx>:


/*
 * Private helper to calculate next index in circular queue.
 */
uint8_t nextIdx(uint8_t index) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	return (index + 1) % QUEUE_SIZE;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	3301      	adds	r3, #1
 8000c12:	425a      	negs	r2, r3
 8000c14:	f003 030f 	and.w	r3, r3, #15
 8000c18:	f002 020f 	and.w	r2, r2, #15
 8000c1c:	bf58      	it	pl
 8000c1e:	4253      	negpl	r3, r2
 8000c20:	b2db      	uxtb	r3, r3
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <_enqueue>:

/*
 * Private helper to enqueue a message to the queue.
 */
void _enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
	// copy the message to the queue and increment the rear pointer
	memcpy(queue->_queue[queue->_rear], message, QUEUE_BUFFER_SIZE*sizeof(char));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	015b      	lsls	r3, r3, #5
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	3304      	adds	r3, #4
 8000c44:	2220      	movs	r2, #32
 8000c46:	6839      	ldr	r1, [r7, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 fafb 	bl	8005244 <memcpy>
	queue->_rear = nextIdx(queue->_rear);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffd5 	bl	8000c04 <nextIdx>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	609a      	str	r2, [r3, #8]
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_dequeue>:

/*
 * Private helper to dequeue a message from the queue.
 */
void _dequeue(UART_Queue* queue, char messageBuffer[QUEUE_BUFFER_SIZE]) {
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
	// copy message from  the queue and increment the front pointer
	strncpy(messageBuffer, queue->_queue[queue->_front], QUEUE_BUFFER_SIZE);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	015b      	lsls	r3, r3, #5
 8000c7a:	3308      	adds	r3, #8
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	3304      	adds	r3, #4
 8000c82:	2220      	movs	r2, #32
 8000c84:	4619      	mov	r1, r3
 8000c86:	6838      	ldr	r0, [r7, #0]
 8000c88:	f004 faf2 	bl	8005270 <strncpy>
	queue->_front = nextIdx(queue->_front);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ffb6 	bl	8000c04 <nextIdx>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	605a      	str	r2, [r3, #4]

	// set isEmpty flag if necessary
	if (queue->_front == queue->_rear)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d102      	bne.n	8000cb2 <_dequeue+0x48>
		queue->_isEmpty = true;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	701a      	strb	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <uartQueue_init>:

/*
 * Initializes a UART_Queue structure.
 * Call before attempting to operate on the queue.
 */
void uartQueue_init(UART_Queue* queue) {
 8000cba:	b480      	push	{r7}
 8000cbc:	b085      	sub	sp, #20
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	// operation variables
	int row, col;

	// reset all operation variables
	queue->_isEmpty = true;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
	queue->_front = 0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
	queue->_rear = 0;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]

	// ensure that the queue messages are empty
	for (row = 0; row < QUEUE_SIZE; row++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	e014      	b.n	8000d04 <uartQueue_init+0x4a>
		for (col = 0; col < QUEUE_BUFFER_SIZE; col++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	e00b      	b.n	8000cf8 <uartQueue_init+0x3e>
			queue->_queue[row][col] = '\0';
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	015b      	lsls	r3, r3, #5
 8000ce6:	441a      	add	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4413      	add	r3, r2
 8000cec:	330c      	adds	r3, #12
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
		for (col = 0; col < QUEUE_BUFFER_SIZE; col++)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b1f      	cmp	r3, #31
 8000cfc:	ddf0      	ble.n	8000ce0 <uartQueue_init+0x26>
	for (row = 0; row < QUEUE_SIZE; row++)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b0f      	cmp	r3, #15
 8000d08:	dde7      	ble.n	8000cda <uartQueue_init+0x20>
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <uartQueue_enqueue>:

/*
 * Enqueue a message.
 * Return success if enqueueing successful, or full if the queue is full.
 */
UART_QUEUE_STATUS uartQueue_enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (uartQueue_isEmpty(queue)) {
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f000 f832 	bl	8000d8a <uartQueue_isEmpty>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d008      	beq.n	8000d3e <uartQueue_enqueue+0x28>
		// set not empty
		queue->_isEmpty = false;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]

		// enqueue
		_enqueue(queue, message);
 8000d32:	6839      	ldr	r1, [r7, #0]
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff79 	bl	8000c2c <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e00c      	b.n	8000d58 <uartQueue_enqueue+0x42>
	}

	// case that queue is full
	else if (uartQueue_isFull(queue)) {
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f82f 	bl	8000da2 <uartQueue_isFull>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <uartQueue_enqueue+0x38>
		// report
		return UART_QUEUE_FULL;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e004      	b.n	8000d58 <uartQueue_enqueue+0x42>
	}

	// queue is not full, enqueue
	else {
		// enqueue
		_enqueue(queue, message);
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff6b 	bl	8000c2c <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000d56:	2300      	movs	r3, #0
	}
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <uartQueue_dequeue>:
/*
 * Dequeue a message.
 * Return success and message if message present, or empty and null if queue
 * is empty.
 */
UART_QUEUE_STATUS uartQueue_dequeue(UART_Queue* queue, char messageBuffer[QUEUE_BUFFER_SIZE]) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (queue->_isEmpty) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <uartQueue_dequeue+0x18>
		return UART_QUEUE_EMPTY;
 8000d74:	2302      	movs	r3, #2
 8000d76:	e004      	b.n	8000d82 <uartQueue_dequeue+0x22>
	}

	// case that queue is not empty
	else {
		_dequeue(queue, messageBuffer);
 8000d78:	6839      	ldr	r1, [r7, #0]
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff75 	bl	8000c6a <_dequeue>
		return UART_QUEUE_OKAY;
 8000d80:	2300      	movs	r3, #0
	}
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <uartQueue_isEmpty>:

/*
 *
 */
bool uartQueue_isEmpty(UART_Queue* queue) {
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
	return (queue->_isEmpty);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <uartQueue_isFull>:

/*
 * Helper to check if a queue is empty.
 */
bool uartQueue_isFull(UART_Queue* queue) {
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return (!uartQueue_isEmpty(queue) && queue->_front == queue->_rear);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffed 	bl	8000d8a <uartQueue_isEmpty>
 8000db0:	4603      	mov	r3, r0
 8000db2:	f083 0301 	eor.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <uartQueue_isFull+0x2a>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685a      	ldr	r2, [r3, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d101      	bne.n	8000dcc <uartQueue_isFull+0x2a>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e000      	b.n	8000dce <uartQueue_isFull+0x2c>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de0:	f7ff fb4c 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0a:	f004 f9f7 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0e:	f7ff fd21 	bl	8000854 <main>

08000e12 <LoopForever>:

LoopForever:
    b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   r0, =_estack
 8000e14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e20:	080053cc 	.word	0x080053cc
  ldr r2, =_sbss
 8000e24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e28:	20000520 	.word	0x20000520

08000e2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f000 f95e 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e40:	f001 fc14 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <HAL_Init+0x3c>)
 8000e48:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f810 	bl	8000e70 <HAL_InitTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	e001      	b.n	8000e60 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5c:	f7ff fe20 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e60:	79fb      	ldrb	r3, [r7, #7]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000000 	.word	0x20000000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d024      	beq.n	8000ece <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e84:	f001 fbf2 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_InitTick+0x6c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e94:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f96e 	bl	800117e <HAL_SYSTICK_Config>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10f      	bne.n	8000ec8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d809      	bhi.n	8000ec2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb6:	f000 f92c 	bl	8001112 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_InitTick+0x70>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	e007      	b.n	8000ed2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e004      	b.n	8000ed2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e001      	b.n	8000ed2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000004 	.word	0x20000004

08000ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x1c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <HAL_IncTick+0x20>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	20000008 	.word	0x20000008
 8000f04:	2000051c 	.word	0x2000051c

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	; (8000f18 <HAL_GetTick+0x10>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr
 8000f18:	2000051c 	.word	0x2000051c

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4906      	ldr	r1, [pc, #24]	; (8000fb4 <__NVIC_EnableIRQ+0x34>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db12      	blt.n	8000ff0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	490a      	ldr	r1, [pc, #40]	; (8000ffc <__NVIC_DisableIRQ+0x44>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	3320      	adds	r3, #32
 8000fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe4:	f3bf 8f4f 	dsb	sy
}
 8000fe8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fea:	f3bf 8f6f 	isb	sy
}
 8000fee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010dc:	f7ff ff90 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff09 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001120:	f7ff ff20 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 8001124:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	6978      	ldr	r0, [r7, #20]
 800112c:	f7ff ff92 	bl	8001054 <NVIC_EncodePriority>
 8001130:	4602      	mov	r2, r0
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff61 	bl	8001000 <__NVIC_SetPriority>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	4603      	mov	r3, r0
 800114e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff13 	bl	8000f80 <__NVIC_EnableIRQ>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff21 	bl	8000fb8 <__NVIC_DisableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ff96 	bl	80010b8 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e04f      	b.n	8001248 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d008      	beq.n	80011c6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2204      	movs	r2, #4
 80011b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e040      	b.n	8001248 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 020e 	bic.w	r2, r2, #14
 80011d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f003 021c 	and.w	r2, r3, #28
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	2101      	movs	r1, #1
 8001204:	fa01 f202 	lsl.w	r2, r1, r2
 8001208:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001212:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00c      	beq.n	8001236 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800122a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001234:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d005      	beq.n	8001276 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2204      	movs	r2, #4
 800126e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e047      	b.n	8001306 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 020e 	bic.w	r2, r2, #14
 8001284:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0201 	bic.w	r2, r2, #1
 8001294:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f003 021c 	and.w	r2, r3, #28
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f202 	lsl.w	r2, r1, r2
 80012b8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012c2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00c      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012e4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
    }
  }
  return status;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001310:	b480      	push	{r7}
 8001312:	b087      	sub	sp, #28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131e:	e140      	b.n	80015a2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2101      	movs	r1, #1
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	4013      	ands	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8132 	beq.w	800159c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d005      	beq.n	8001350 <HAL_GPIO_Init+0x40>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d130      	bne.n	80013b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001386:	2201      	movs	r2, #1
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43db      	mvns	r3, r3
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	4013      	ands	r3, r2
 8001394:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	091b      	lsrs	r3, r3, #4
 800139c:	f003 0201 	and.w	r2, r3, #1
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d017      	beq.n	80013ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d123      	bne.n	8001442 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f003 0203 	and.w	r2, r3, #3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 808c 	beq.w	800159c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001484:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	2207      	movs	r2, #7
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014ae:	d00d      	beq.n	80014cc <HAL_GPIO_Init+0x1bc>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a44      	ldr	r2, [pc, #272]	; (80015c4 <HAL_GPIO_Init+0x2b4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d007      	beq.n	80014c8 <HAL_GPIO_Init+0x1b8>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a43      	ldr	r2, [pc, #268]	; (80015c8 <HAL_GPIO_Init+0x2b8>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d101      	bne.n	80014c4 <HAL_GPIO_Init+0x1b4>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e004      	b.n	80014ce <HAL_GPIO_Init+0x1be>
 80014c4:	2307      	movs	r3, #7
 80014c6:	e002      	b.n	80014ce <HAL_GPIO_Init+0x1be>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_GPIO_Init+0x1be>
 80014cc:	2300      	movs	r3, #0
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	f002 0203 	and.w	r2, r2, #3
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	4093      	lsls	r3, r2
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014de:	4938      	ldr	r1, [pc, #224]	; (80015c0 <HAL_GPIO_Init+0x2b0>)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ec:	4b37      	ldr	r3, [pc, #220]	; (80015cc <HAL_GPIO_Init+0x2bc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001510:	4a2e      	ldr	r2, [pc, #184]	; (80015cc <HAL_GPIO_Init+0x2bc>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_GPIO_Init+0x2bc>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800153a:	4a24      	ldr	r2, [pc, #144]	; (80015cc <HAL_GPIO_Init+0x2bc>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_GPIO_Init+0x2bc>)
 8001542:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001546:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001566:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_GPIO_Init+0x2bc>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_GPIO_Init+0x2bc>)
 8001570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001574:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_GPIO_Init+0x2bc>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f47f aeb7 	bne.w	8001320 <HAL_GPIO_Init+0x10>
  }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40010000 	.word	0x40010000
 80015c4:	48000400 	.word	0x48000400
 80015c8:	48000800 	.word	0x48000800
 80015cc:	58000800 	.word	0x58000800

080015d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80015da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	58000400 	.word	0x58000400

080015ec <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <LL_PWR_EnableBootC2+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <LL_PWR_EnableBootC2+0x18>)
 80015f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	58000400 	.word	0x58000400

08001608 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_PWREx_GetVoltageRange+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	58000400 	.word	0x58000400

08001620 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001628:	f7ff ffe0 	bl	80015ec <LL_PWR_EnableBootC2>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001644:	d101      	bne.n	800164a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	58000400 	.word	0x58000400

08001658 <LL_RCC_HSE_EnableTcxo>:
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001666:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166a:	6013      	str	r3, [r2, #0]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <LL_RCC_HSE_DisableTcxo>:
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001682:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016a2:	d101      	bne.n	80016a8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <LL_RCC_HSE_Enable>:
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <LL_RCC_HSE_Disable>:
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <LL_RCC_HSE_IsReady>:
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80016ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016fc:	d101      	bne.n	8001702 <LL_RCC_HSE_IsReady+0x18>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <LL_RCC_HSE_IsReady+0x1a>
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <LL_RCC_HSI_Enable>:
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800171a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <LL_RCC_HSI_Disable>:
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <LL_RCC_HSI_IsReady>:
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001756:	d101      	bne.n	800175c <LL_RCC_HSI_IsReady+0x18>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_RCC_HSI_IsReady+0x1a>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	061b      	lsls	r3, r3, #24
 800177c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d101      	bne.n	80017a6 <LL_RCC_LSE_IsReady+0x18>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LL_RCC_LSE_IsReady+0x1a>
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b02      	cmp	r3, #2
 8001802:	d101      	bne.n	8001808 <LL_RCC_LSI_IsReady+0x18>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <LL_RCC_LSI_IsReady+0x1a>
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6013      	str	r3, [r2, #0]
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b02      	cmp	r3, #2
 800185a:	d101      	bne.n	8001860 <LL_RCC_MSI_IsReady+0x16>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <LL_RCC_MSI_IsReady+0x18>
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	bc80      	pop	{r7}
 8001868:	4770      	bx	lr

0800186a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800186e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b08      	cmp	r3, #8
 800187a:	d101      	bne.n	8001880 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80018a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 0203 	bic.w	r2, r3, #3
 80018f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4313      	orrs	r3, r2
 800195e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800197c:	f023 020f 	bic.w	r2, r3, #15
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001988:	4313      	orrs	r3, r2
 800198a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a02:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr

08001a2a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a8a:	d101      	bne.n	8001a90 <LL_RCC_PLL_IsReady+0x18>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <LL_RCC_PLL_IsReady+0x1a>
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b06:	d101      	bne.n	8001b0c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b2a:	d101      	bne.n	8001b30 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d101      	bne.n	8001b54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b70:	d101      	bne.n	8001b76 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b92:	d101      	bne.n	8001b98 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e36f      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	f7ff fea6 	bl	8001906 <LL_RCC_GetSysClkSource>
 8001bba:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bbc:	f7ff ff8f 	bl	8001ade <LL_RCC_PLL_GetMainSource>
 8001bc0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80c4 	beq.w	8001d58 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d005      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3e>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b0c      	cmp	r3, #12
 8001bda:	d176      	bne.n	8001cca <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d173      	bne.n	8001cca <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e353      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d005      	beq.n	8001c0c <HAL_RCC_OscConfig+0x68>
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0a:	e006      	b.n	8001c1a <HAL_RCC_OscConfig+0x76>
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d222      	bcs.n	8001c64 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fd5a 	bl	80026dc <RCC_SetFlashLatencyFromMSIRange>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e331      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fe2b 	bl	80018b8 <LL_RCC_MSI_SetCalibTrimming>
 8001c62:	e021      	b.n	8001ca8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fe12 	bl	80018b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fd1f 	bl	80026dc <RCC_SetFlashLatencyFromMSIRange>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e2f6      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ca8:	f000 fce0 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4aa7      	ldr	r2, [pc, #668]	; (8001f4c <HAL_RCC_OscConfig+0x3a8>)
 8001cb0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001cb2:	4ba7      	ldr	r3, [pc, #668]	; (8001f50 <HAL_RCC_OscConfig+0x3ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f8da 	bl	8000e70 <HAL_InitTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001cc0:	7cfb      	ldrb	r3, [r7, #19]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d047      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001cc6:	7cfb      	ldrb	r3, [r7, #19]
 8001cc8:	e2e5      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02c      	beq.n	8001d2c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd2:	f7ff fd9e 	bl	8001812 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff f917 	bl	8000f08 <HAL_GetTick>
 8001cda:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cde:	f7ff f913 	bl	8000f08 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e2d2      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cf0:	f7ff fdab 	bl	800184a <LL_RCC_MSI_IsReady>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f1      	beq.n	8001cde <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fdc7 	bl	80018b8 <LL_RCC_MSI_SetCalibTrimming>
 8001d2a:	e015      	b.n	8001d58 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d2c:	f7ff fd7f 	bl	800182e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d30:	f7ff f8ea 	bl	8000f08 <HAL_GetTick>
 8001d34:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d38:	f7ff f8e6 	bl	8000f08 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e2a5      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d4a:	f7ff fd7e 	bl	800184a <LL_RCC_MSI_IsReady>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f1      	bne.n	8001d38 <HAL_RCC_OscConfig+0x194>
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d56:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d058      	beq.n	8001e16 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x1d2>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	2b0c      	cmp	r3, #12
 8001d6e:	d108      	bne.n	8001d82 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d14b      	bne.n	8001e16 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e289      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0x204>
 8001da2:	f7ff fc86 	bl	80016b2 <LL_RCC_HSE_Enable>
 8001da6:	e00d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x220>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001db0:	d104      	bne.n	8001dbc <HAL_RCC_OscConfig+0x218>
 8001db2:	f7ff fc51 	bl	8001658 <LL_RCC_HSE_EnableTcxo>
 8001db6:	f7ff fc7c 	bl	80016b2 <LL_RCC_HSE_Enable>
 8001dba:	e003      	b.n	8001dc4 <HAL_RCC_OscConfig+0x220>
 8001dbc:	f7ff fc87 	bl	80016ce <LL_RCC_HSE_Disable>
 8001dc0:	f7ff fc58 	bl	8001674 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d012      	beq.n	8001df2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f89c 	bl	8000f08 <HAL_GetTick>
 8001dd0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd4:	f7ff f898 	bl	8000f08 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b64      	cmp	r3, #100	; 0x64
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e257      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001de6:	f7ff fc80 	bl	80016ea <LL_RCC_HSE_IsReady>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f1      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x230>
 8001df0:	e011      	b.n	8001e16 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff f889 	bl	8000f08 <HAL_GetTick>
 8001df6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfa:	f7ff f885 	bl	8000f08 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	; 0x64
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e244      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e0c:	f7ff fc6d 	bl	80016ea <LL_RCC_HSE_IsReady>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f1      	bne.n	8001dfa <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d046      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_OscConfig+0x290>
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d10e      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d10b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e22a      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fc8e 	bl	8001766 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e4a:	e031      	b.n	8001eb0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d019      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e54:	f7ff fc5a 	bl	800170c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff f856 	bl	8000f08 <HAL_GetTick>
 8001e5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff f852 	bl	8000f08 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e211      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e72:	f7ff fc67 	bl	8001744 <LL_RCC_HSI_IsReady>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f1      	beq.n	8001e60 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fc70 	bl	8001766 <LL_RCC_HSI_SetCalibTrimming>
 8001e86:	e013      	b.n	8001eb0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e88:	f7ff fc4e 	bl	8001728 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff f83c 	bl	8000f08 <HAL_GetTick>
 8001e90:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e94:	f7ff f838 	bl	8000f08 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1f7      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ea6:	f7ff fc4d 	bl	8001744 <LL_RCC_HSI_IsReady>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f1      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d06e      	beq.n	8001f9a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d056      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d031      	beq.n	8001f40 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e1d0      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d013      	beq.n	8001f26 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001efe:	f7ff fc67 	bl	80017d0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f02:	f7ff f801 	bl	8000f08 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7fe fffd 	bl	8000f08 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b11      	cmp	r3, #17
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1bc      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f1c:	f7ff fc68 	bl	80017f0 <LL_RCC_LSI_IsReady>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f1      	bne.n	8001f0a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2e:	f023 0210 	bic.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f40:	f7ff fc36 	bl	80017b0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f44:	f7fe ffe0 	bl	8000f08 <HAL_GetTick>
 8001f48:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f4a:	e00c      	b.n	8001f66 <HAL_RCC_OscConfig+0x3c2>
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7fe ffd8 	bl	8000f08 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b11      	cmp	r3, #17
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e197      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f66:	f7ff fc43 	bl	80017f0 <LL_RCC_LSI_IsReady>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f1      	beq.n	8001f54 <HAL_RCC_OscConfig+0x3b0>
 8001f70:	e013      	b.n	8001f9a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f72:	f7ff fc2d 	bl	80017d0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f76:	f7fe ffc7 	bl	8000f08 <HAL_GetTick>
 8001f7a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7e:	f7fe ffc3 	bl	8000f08 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b11      	cmp	r3, #17
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e182      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f90:	f7ff fc2e 	bl	80017f0 <LL_RCC_LSI_IsReady>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f1      	bne.n	8001f7e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80d8 	beq.w	8002158 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fa8:	f7ff fb44 	bl	8001634 <LL_PWR_IsEnabledBkUpAccess>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d113      	bne.n	8001fda <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001fb2:	f7ff fb0d 	bl	80015d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb6:	f7fe ffa7 	bl	8000f08 <HAL_GetTick>
 8001fba:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fbe:	f7fe ffa3 	bl	8000f08 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e162      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fd0:	f7ff fb30 	bl	8001634 <LL_PWR_IsEnabledBkUpAccess>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f1      	beq.n	8001fbe <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d07b      	beq.n	80020da <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b85      	cmp	r3, #133	; 0x85
 8001fe8:	d003      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d109      	bne.n	8002006 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002006:	f7fe ff7f 	bl	8000f08 <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002020:	e00a      	b.n	8002038 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002022:	f7fe ff71 	bl	8000f08 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002030:	4293      	cmp	r3, r2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e12e      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002038:	f7ff fba9 	bl	800178e <LL_RCC_LSE_IsReady>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0ef      	beq.n	8002022 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b81      	cmp	r3, #129	; 0x81
 8002048:	d003      	beq.n	8002052 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b85      	cmp	r3, #133	; 0x85
 8002050:	d121      	bne.n	8002096 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe ff59 	bl	8000f08 <HAL_GetTick>
 8002056:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7fe ff4b 	bl	8000f08 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e108      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ec      	beq.n	800206e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002094:	e060      	b.n	8002158 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe ff37 	bl	8000f08 <HAL_GetTick>
 800209a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7fe ff29 	bl	8000f08 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0e6      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1ec      	bne.n	80020b2 <HAL_RCC_OscConfig+0x50e>
 80020d8:	e03e      	b.n	8002158 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7fe ff15 	bl	8000f08 <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f6:	f7fe ff07 	bl	8000f08 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	f241 3288 	movw	r2, #5000	; 0x1388
 8002104:	4293      	cmp	r3, r2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e0c4      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002114:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ec      	bne.n	80020f6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe fef4 	bl	8000f08 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7fe fee6 	bl	8000f08 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0a3      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800214e:	f7ff fb1e 	bl	800178e <LL_RCC_LSE_IsReady>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ef      	bne.n	8002138 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8099 	beq.w	8002294 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	2b0c      	cmp	r3, #12
 8002166:	d06c      	beq.n	8002242 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	2b02      	cmp	r3, #2
 800216e:	d14b      	bne.n	8002208 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002170:	f7ff fc74 	bl	8001a5c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7fe fec8 	bl	8000f08 <HAL_GetTick>
 8002178:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe fec4 	bl	8000f08 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b0a      	cmp	r3, #10
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e083      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800218e:	f7ff fc73 	bl	8001a78 <LL_RCC_PLL_IsReady>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f1      	bne.n	800217c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_RCC_OscConfig+0x6fc>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021b0:	0212      	lsls	r2, r2, #8
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021be:	4311      	orrs	r1, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021c4:	430a      	orrs	r2, r1
 80021c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ce:	f7ff fc37 	bl	8001a40 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe fe91 	bl	8000f08 <HAL_GetTick>
 80021e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7fe fe8d 	bl	8000f08 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b0a      	cmp	r3, #10
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e04c      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80021fc:	f7ff fc3c 	bl	8001a78 <LL_RCC_PLL_IsReady>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f1      	beq.n	80021ea <HAL_RCC_OscConfig+0x646>
 8002206:	e045      	b.n	8002294 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	f7ff fc28 	bl	8001a5c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe fe7c 	bl	8000f08 <HAL_GetTick>
 8002210:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe fe78 	bl	8000f08 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b0a      	cmp	r3, #10
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e037      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002226:	f7ff fc27 	bl	8001a78 <LL_RCC_PLL_IsReady>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f1      	bne.n	8002214 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_RCC_OscConfig+0x700>)
 800223c:	4013      	ands	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
 8002240:	e028      	b.n	8002294 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e023      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800224e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	429a      	cmp	r2, r3
 8002262:	d115      	bne.n	8002290 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	429a      	cmp	r2, r3
 8002270:	d10e      	bne.n	8002290 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	429a      	cmp	r2, r3
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	11c1808c 	.word	0x11c1808c
 80022a4:	eefefffc 	.word	0xeefefffc

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e12c      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b98      	ldr	r3, [pc, #608]	; (8002520 <HAL_RCC_ClockConfig+0x278>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d91b      	bls.n	8002302 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b95      	ldr	r3, [pc, #596]	; (8002520 <HAL_RCC_ClockConfig+0x278>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 0207 	bic.w	r2, r3, #7
 80022d2:	4993      	ldr	r1, [pc, #588]	; (8002520 <HAL_RCC_ClockConfig+0x278>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022da:	f7fe fe15 	bl	8000f08 <HAL_GetTick>
 80022de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022e2:	f7fe fe11 	bl	8000f08 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e110      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f4:	4b8a      	ldr	r3, [pc, #552]	; (8002520 <HAL_RCC_ClockConfig+0x278>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d1ef      	bne.n	80022e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d016      	beq.n	800233c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fb02 	bl	800191c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002318:	f7fe fdf6 	bl	8000f08 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002320:	f7fe fdf2 	bl	8000f08 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0f1      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002332:	f7ff fbdf 	bl	8001af4 <LL_RCC_IsActiveFlag_HPRE>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f1      	beq.n	8002320 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d016      	beq.n	8002376 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff faf8 	bl	8001942 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002352:	f7fe fdd9 	bl	8000f08 <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800235a:	f7fe fdd5 	bl	8000f08 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0d4      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800236c:	f7ff fbd3 	bl	8001b16 <LL_RCC_IsActiveFlag_C2HPRE>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f1      	beq.n	800235a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff faf0 	bl	800196c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800238c:	f7fe fdbc 	bl	8000f08 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002394:	f7fe fdb8 	bl	8000f08 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e0b7      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023a6:	f7ff fbc8 	bl	8001b3a <LL_RCC_IsActiveFlag_SHDHPRE>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f1      	beq.n	8002394 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d016      	beq.n	80023ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fae9 	bl	8001998 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023c6:	f7fe fd9f 	bl	8000f08 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ce:	f7fe fd9b 	bl	8000f08 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e09a      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023e0:	f7ff fbbd 	bl	8001b5e <LL_RCC_IsActiveFlag_PPRE1>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0f1      	beq.n	80023ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d017      	beq.n	8002426 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fade 	bl	80019be <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002402:	f7fe fd81 	bl	8000f08 <HAL_GetTick>
 8002406:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800240a:	f7fe fd7d 	bl	8000f08 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e07c      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800241c:	f7ff fbb0 	bl	8001b80 <LL_RCC_IsActiveFlag_PPRE2>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f1      	beq.n	800240a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d043      	beq.n	80024ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d106      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800243a:	f7ff f956 	bl	80016ea <LL_RCC_HSE_IsReady>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d11e      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e066      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d106      	bne.n	800245e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002450:	f7ff fb12 	bl	8001a78 <LL_RCC_PLL_IsReady>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e05b      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002466:	f7ff f9f0 	bl	800184a <LL_RCC_MSI_IsReady>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d108      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e050      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002474:	f7ff f966 	bl	8001744 <LL_RCC_HSI_IsReady>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e049      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fa2a 	bl	80018e0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7fe fd3c 	bl	8000f08 <HAL_GetTick>
 8002490:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fd38 	bl	8000f08 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e035      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	f7ff fa2c 	bl	8001906 <LL_RCC_GetSysClkSource>
 80024ae:	4602      	mov	r2, r0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d1ec      	bne.n	8002494 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x278>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d21b      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HAL_RCC_ClockConfig+0x278>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 0207 	bic.w	r2, r3, #7
 80024d0:	4913      	ldr	r1, [pc, #76]	; (8002520 <HAL_RCC_ClockConfig+0x278>)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fd16 	bl	8000f08 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024e0:	f7fe fd12 	bl	8000f08 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e011      	b.n	8002516 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x278>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1ef      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002500:	f000 f8b4 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8002504:	4603      	mov	r3, r0
 8002506:	4a07      	ldr	r2, [pc, #28]	; (8002524 <HAL_RCC_ClockConfig+0x27c>)
 8002508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800250a:	4b07      	ldr	r3, [pc, #28]	; (8002528 <HAL_RCC_ClockConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fcae 	bl	8000e70 <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	58004000 	.word	0x58004000
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253a:	f7ff f9e4 	bl	8001906 <LL_RCC_GetSysClkSource>
 800253e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002540:	f7ff facd 	bl	8001ade <LL_RCC_PLL_GetMainSource>
 8002544:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x2c>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d139      	bne.n	80025c6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d136      	bne.n	80025c6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002558:	f7ff f987 	bl	800186a <LL_RCC_MSI_IsEnabledRangeSelect>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d115      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x62>
 8002562:	f7ff f982 	bl	800186a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002566:	4603      	mov	r3, r0
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x4e>
 800256c:	f7ff f98d 	bl	800188a <LL_RCC_MSI_GetRange>
 8002570:	4603      	mov	r3, r0
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	e005      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x5a>
 800257a:	f7ff f991 	bl	80018a0 <LL_RCC_MSI_GetRangeAfterStandby>
 800257e:	4603      	mov	r3, r0
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a36      	ldr	r2, [pc, #216]	; (8002660 <HAL_RCC_GetSysClockFreq+0x134>)
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	e014      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x8c>
 800258e:	f7ff f96c 	bl	800186a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002592:	4603      	mov	r3, r0
 8002594:	2b01      	cmp	r3, #1
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0x7a>
 8002598:	f7ff f977 	bl	800188a <LL_RCC_MSI_GetRange>
 800259c:	4603      	mov	r3, r0
 800259e:	091b      	lsrs	r3, r3, #4
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	e005      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0x86>
 80025a6:	f7ff f97b 	bl	80018a0 <LL_RCC_MSI_GetRangeAfterStandby>
 80025aa:	4603      	mov	r3, r0
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <HAL_RCC_GetSysClockFreq+0x134>)
 80025b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d115      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025c4:	e012      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_GetSysClockFreq+0x138>)
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e00c      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d109      	bne.n	80025ec <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025d8:	f7ff f85a 	bl	8001690 <LL_RCC_HSE_IsEnabledDiv2>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCC_GetSysClockFreq+0x138>)
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	e001      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025e8:	4b1f      	ldr	r3, [pc, #124]	; (8002668 <HAL_RCC_GetSysClockFreq+0x13c>)
 80025ea:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ec:	f7ff f98b 	bl	8001906 <LL_RCC_GetSysClkSource>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b0c      	cmp	r3, #12
 80025f4:	d12f      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80025f6:	f7ff fa72 	bl	8001ade <LL_RCC_PLL_GetMainSource>
 80025fa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d003      	beq.n	800260a <HAL_RCC_GetSysClockFreq+0xde>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d003      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0xe4>
 8002608:	e00d      	b.n	8002626 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800260a:	4b16      	ldr	r3, [pc, #88]	; (8002664 <HAL_RCC_GetSysClockFreq+0x138>)
 800260c:	60fb      	str	r3, [r7, #12]
        break;
 800260e:	e00d      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002610:	f7ff f83e 	bl	8001690 <LL_RCC_HSE_IsEnabledDiv2>
 8002614:	4603      	mov	r3, r0
 8002616:	2b01      	cmp	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800261a:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_RCC_GetSysClockFreq+0x138>)
 800261c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800261e:	e005      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002622:	60fb      	str	r3, [r7, #12]
        break;
 8002624:	e002      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	60fb      	str	r3, [r7, #12]
        break;
 800262a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800262c:	f7ff fa35 	bl	8001a9a <LL_RCC_PLL_GetN>
 8002630:	4602      	mov	r2, r0
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	fb03 f402 	mul.w	r4, r3, r2
 8002638:	f7ff fa46 	bl	8001ac8 <LL_RCC_PLL_GetDivider>
 800263c:	4603      	mov	r3, r0
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	3301      	adds	r3, #1
 8002642:	fbb4 f4f3 	udiv	r4, r4, r3
 8002646:	f7ff fa34 	bl	8001ab2 <LL_RCC_PLL_GetR>
 800264a:	4603      	mov	r3, r0
 800264c:	0f5b      	lsrs	r3, r3, #29
 800264e:	3301      	adds	r3, #1
 8002650:	fbb4 f3f3 	udiv	r3, r4, r3
 8002654:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002656:	697b      	ldr	r3, [r7, #20]
}
 8002658:	4618      	mov	r0, r3
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd90      	pop	{r4, r7, pc}
 8002660:	08005354 	.word	0x08005354
 8002664:	00f42400 	.word	0x00f42400
 8002668:	01e84800 	.word	0x01e84800

0800266c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b598      	push	{r3, r4, r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002670:	f7ff ff5c 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8002674:	4604      	mov	r4, r0
 8002676:	f7ff f9b5 	bl	80019e4 <LL_RCC_GetAHBPrescaler>
 800267a:	4603      	mov	r3, r0
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	4a03      	ldr	r2, [pc, #12]	; (8002690 <HAL_RCC_GetHCLKFreq+0x24>)
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	bd98      	pop	{r3, r4, r7, pc}
 8002690:	080052f4 	.word	0x080052f4

08002694 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b598      	push	{r3, r4, r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002698:	f7ff ffe8 	bl	800266c <HAL_RCC_GetHCLKFreq>
 800269c:	4604      	mov	r4, r0
 800269e:	f7ff f9b9 	bl	8001a14 <LL_RCC_GetAPB1Prescaler>
 80026a2:	4603      	mov	r3, r0
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd98      	pop	{r3, r4, r7, pc}
 80026b4:	08005334 	.word	0x08005334

080026b8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b598      	push	{r3, r4, r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026bc:	f7ff ffd6 	bl	800266c <HAL_RCC_GetHCLKFreq>
 80026c0:	4604      	mov	r4, r0
 80026c2:	f7ff f9b2 	bl	8001a2a <LL_RCC_GetAPB2Prescaler>
 80026c6:	4603      	mov	r3, r0
 80026c8:	0adb      	lsrs	r3, r3, #11
 80026ca:	4a03      	ldr	r2, [pc, #12]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd98      	pop	{r3, r4, r7, pc}
 80026d8:	08005334 	.word	0x08005334

080026dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	091b      	lsrs	r3, r3, #4
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	4a10      	ldr	r2, [pc, #64]	; (8002730 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80026ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80026f4:	f7ff f981 	bl	80019fa <LL_RCC_GetAHB3Prescaler>
 80026f8:	4603      	mov	r3, r0
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4a09      	ldr	r2, [pc, #36]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0c9c      	lsrs	r4, r3, #18
 8002718:	f7fe ff76 	bl	8001608 <HAL_PWREx_GetVoltageRange>
 800271c:	4603      	mov	r3, r0
 800271e:	4619      	mov	r1, r3
 8002720:	4620      	mov	r0, r4
 8002722:	f000 f80b 	bl	800273c <RCC_SetFlashLatency>
 8002726:	4603      	mov	r3, r0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bd90      	pop	{r4, r7, pc}
 8002730:	08005354 	.word	0x08005354
 8002734:	080052f4 	.word	0x080052f4
 8002738:	431bde83 	.word	0x431bde83

0800273c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08e      	sub	sp, #56	; 0x38
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002746:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <RCC_SetFlashLatency+0xf4>)
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002750:	6018      	str	r0, [r3, #0]
 8002752:	3304      	adds	r3, #4
 8002754:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002756:	4a37      	ldr	r2, [pc, #220]	; (8002834 <RCC_SetFlashLatency+0xf8>)
 8002758:	f107 0318 	add.w	r3, r7, #24
 800275c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002760:	6018      	str	r0, [r3, #0]
 8002762:	3304      	adds	r3, #4
 8002764:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002766:	4a34      	ldr	r2, [pc, #208]	; (8002838 <RCC_SetFlashLatency+0xfc>)
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	ca07      	ldmia	r2, {r0, r1, r2}
 800276e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002772:	2300      	movs	r3, #0
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277c:	d11b      	bne.n	80027b6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800277e:	2300      	movs	r3, #0
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
 8002782:	e014      	b.n	80027ae <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	3338      	adds	r3, #56	; 0x38
 800278a:	443b      	add	r3, r7
 800278c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002790:	461a      	mov	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	3338      	adds	r3, #56	; 0x38
 800279e:	443b      	add	r3, r7
 80027a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027a6:	e021      	b.n	80027ec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	3301      	adds	r3, #1
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
 80027ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d9e7      	bls.n	8002784 <RCC_SetFlashLatency+0x48>
 80027b4:	e01a      	b.n	80027ec <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ba:	e014      	b.n	80027e6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	3338      	adds	r3, #56	; 0x38
 80027c2:	443b      	add	r3, r7
 80027c4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80027c8:	461a      	mov	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d807      	bhi.n	80027e0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	3338      	adds	r3, #56	; 0x38
 80027d6:	443b      	add	r3, r7
 80027d8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027de:	e005      	b.n	80027ec <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	3301      	adds	r3, #1
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d9e7      	bls.n	80027bc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027ec:	4b13      	ldr	r3, [pc, #76]	; (800283c <RCC_SetFlashLatency+0x100>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f023 0207 	bic.w	r2, r3, #7
 80027f4:	4911      	ldr	r1, [pc, #68]	; (800283c <RCC_SetFlashLatency+0x100>)
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	4313      	orrs	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027fc:	f7fe fb84 	bl	8000f08 <HAL_GetTick>
 8002800:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002802:	e008      	b.n	8002816 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002804:	f7fe fb80 	bl	8000f08 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e007      	b.n	8002826 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <RCC_SetFlashLatency+0x100>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002820:	429a      	cmp	r2, r3
 8002822:	d1ef      	bne.n	8002804 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3738      	adds	r7, #56	; 0x38
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	080052d8 	.word	0x080052d8
 8002834:	080052e0 	.word	0x080052e0
 8002838:	080052e8 	.word	0x080052e8
 800283c:	58004000 	.word	0x58004000

08002840 <LL_RCC_LSE_IsReady>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b02      	cmp	r3, #2
 8002852:	d101      	bne.n	8002858 <LL_RCC_LSE_IsReady+0x18>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <LL_RCC_LSE_IsReady+0x1a>
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <LL_RCC_SetUSARTClockSource>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	43db      	mvns	r3, r3
 8002878:	401a      	ands	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <LL_RCC_SetI2SClockSource>:
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800289a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <LL_RCC_SetLPUARTClockSource>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr

080028e6 <LL_RCC_SetI2CClockSource>:
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80028fe:	43db      	mvns	r3, r3
 8002900:	401a      	ands	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800290a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <LL_RCC_SetLPTIMClockSource>:
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	041b      	lsls	r3, r3, #16
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <LL_RCC_SetRNGClockSource>:
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <LL_RCC_SetADCClockSource>:
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800298e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_RCC_SetRTCClockSource>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <LL_RCC_GetRTCClockSource>:
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80029d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_ForceBackupDomainReset>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002a34:	2300      	movs	r3, #0
 8002a36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a38:	2300      	movs	r3, #0
 8002a3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d058      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a48:	f7fe fdc2 	bl	80015d0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fa5c 	bl	8000f08 <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a52:	e009      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a54:	f7fe fa58 	bl	8000f08 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d902      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	74fb      	strb	r3, [r7, #19]
        break;
 8002a66:	e006      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a68:	4b7b      	ldr	r3, [pc, #492]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a74:	d1ee      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d13c      	bne.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002a7c:	f7ff ffa7 	bl	80029ce <LL_RCC_GetRTCClockSource>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d00f      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a96:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a98:	f7ff ffa5 	bl	80029e6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9c:	f7ff ffb3 	bl	8002a06 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d014      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fa28 	bl	8000f08 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe fa24 	bl	8000f08 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d902      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ad2:	e004      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002ad4:	f7ff feb4 	bl	8002840 <LL_RCC_LSE_IsReady>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d1ee      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff ff5b 	bl	80029a4 <LL_RCC_SetRTCClockSource>
 8002aee:	e004      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
 8002af4:	e001      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fea9 	bl	8002862 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fe9e 	bl	8002862 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fec0 	bl	80028bc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fee6 	bl	800291e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fedb 	bl	800291e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fed0 	bl	800291e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fea9 	bl	80028e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d004      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fe9e 	bl	80028e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fe93 	bl	80028e6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d011      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fe5e 	bl	8002892 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fea5 	bl	8002950 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d011      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fea3 	bl	800297a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002c4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	58000400 	.word	0x58000400

08002c5c <LL_RCC_GetUSARTClockSource>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	4313      	orrs	r3, r2
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_GetLPUARTClockSource>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4013      	ands	r3, r2
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e042      	b.n	8002d36 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fef2 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fcc3 	bl	800366c <UART_SetConfig>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e022      	b.n	8002d36 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 ff2b 	bl	8003b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0201 	orr.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 ffb1 	bl	8003c96 <UART_CheckIdleState>
 8002d34:	4603      	mov	r3, r0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b08a      	sub	sp, #40	; 0x28
 8002d42:	af02      	add	r7, sp, #8
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d173      	bne.n	8002e40 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_UART_Transmit+0x26>
 8002d5e:	88fb      	ldrh	r3, [r7, #6]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e06c      	b.n	8002e42 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2221      	movs	r2, #33	; 0x21
 8002d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d78:	f7fe f8c6 	bl	8000f08 <HAL_GetTick>
 8002d7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	88fa      	ldrh	r2, [r7, #6]
 8002d82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d96:	d108      	bne.n	8002daa <HAL_UART_Transmit+0x6c>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d104      	bne.n	8002daa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	e003      	b.n	8002db2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db2:	e02c      	b.n	8002e0e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 ffb7 	bl	8003d32 <UART_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e039      	b.n	8002e42 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10b      	bne.n	8002dec <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	3302      	adds	r3, #2
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	e007      	b.n	8002dfc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1cc      	bne.n	8002db4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2140      	movs	r1, #64	; 0x40
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 ff84 	bl	8003d32 <UART_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e006      	b.n	8002e42 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	e000      	b.n	8002e42 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002e40:	2302      	movs	r3, #2
  }
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b091      	sub	sp, #68	; 0x44
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	4613      	mov	r3, r2
 8002e58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d178      	bne.n	8002f56 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_UART_Transmit_IT+0x24>
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e071      	b.n	8002f58 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2221      	movs	r2, #33	; 0x21
 8002e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ea8:	d12a      	bne.n	8002f00 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb2:	d107      	bne.n	8002ec4 <HAL_UART_Transmit_IT+0x78>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <HAL_UART_Transmit_IT+0x118>)
 8002ec0:	679a      	str	r2, [r3, #120]	; 0x78
 8002ec2:	e002      	b.n	8002eca <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <HAL_UART_Transmit_IT+0x11c>)
 8002ec8:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3308      	adds	r3, #8
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed4:	e853 3f00 	ldrex	r3, [r3]
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3308      	adds	r3, #8
 8002ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eea:	637a      	str	r2, [r7, #52]	; 0x34
 8002eec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e5      	bne.n	8002eca <HAL_UART_Transmit_IT+0x7e>
 8002efe:	e028      	b.n	8002f52 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f08:	d107      	bne.n	8002f1a <HAL_UART_Transmit_IT+0xce>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d103      	bne.n	8002f1a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a15      	ldr	r2, [pc, #84]	; (8002f6c <HAL_UART_Transmit_IT+0x120>)
 8002f16:	679a      	str	r2, [r3, #120]	; 0x78
 8002f18:	e002      	b.n	8002f20 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a14      	ldr	r2, [pc, #80]	; (8002f70 <HAL_UART_Transmit_IT+0x124>)
 8002f1e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3e:	623b      	str	r3, [r7, #32]
 8002f40:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	69f9      	ldr	r1, [r7, #28]
 8002f44:	6a3a      	ldr	r2, [r7, #32]
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e6      	bne.n	8002f20 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3744      	adds	r7, #68	; 0x44
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	0800444f 	.word	0x0800444f
 8002f68:	08004371 	.word	0x08004371
 8002f6c:	080042b1 	.word	0x080042b1
 8002f70:	080041fb 	.word	0x080041fb

08002f74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d137      	bne.n	8002ffc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_UART_Receive_IT+0x24>
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e030      	b.n	8002ffe <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_UART_Receive_IT+0x94>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d01f      	beq.n	8002fec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d018      	beq.n	8002fec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	623b      	str	r3, [r7, #32]
 8002fda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	69f9      	ldr	r1, [r7, #28]
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e6      	bne.n	8002fba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 ff66 	bl	8003ec4 <UART_Start_Receive_IT>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	e000      	b.n	8002ffe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
  }
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40008000 	.word	0x40008000

0800300c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0ba      	sub	sp, #232	; 0xe8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003036:	f640 030f 	movw	r3, #2063	; 0x80f
 800303a:	4013      	ands	r3, r2
 800303c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11b      	bne.n	8003080 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d015      	beq.n	8003080 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b00      	cmp	r3, #0
 800305e:	d105      	bne.n	800306c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 82e3 	beq.w	800363c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
      }
      return;
 800307e:	e2dd      	b.n	800363c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8123 	beq.w	80032d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800308a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800308e:	4b8d      	ldr	r3, [pc, #564]	; (80032c4 <HAL_UART_IRQHandler+0x2b8>)
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800309a:	4b8b      	ldr	r3, [pc, #556]	; (80032c8 <HAL_UART_IRQHandler+0x2bc>)
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8116 	beq.w	80032d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d011      	beq.n	80030d4 <HAL_UART_IRQHandler+0xc8>
 80030b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2201      	movs	r2, #1
 80030c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d011      	beq.n	8003104 <HAL_UART_IRQHandler+0xf8>
 80030e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2202      	movs	r2, #2
 80030f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d011      	beq.n	8003134 <HAL_UART_IRQHandler+0x128>
 8003110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00b      	beq.n	8003134 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2204      	movs	r2, #4
 8003122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003144:	f003 0320 	and.w	r3, r3, #32
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800314c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003150:	4b5c      	ldr	r3, [pc, #368]	; (80032c4 <HAL_UART_IRQHandler+0x2b8>)
 8003152:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2208      	movs	r2, #8
 800315e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f043 0208 	orr.w	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <HAL_UART_IRQHandler+0x196>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00c      	beq.n	80031a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8249 	beq.w	8003640 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d013      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d105      	bne.n	80031d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d005      	beq.n	8003206 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003202:	2b00      	cmp	r3, #0
 8003204:	d054      	beq.n	80032b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 ff7c 	bl	8004104 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	d146      	bne.n	80032a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3308      	adds	r3, #8
 8003220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003228:	e853 3f00 	ldrex	r3, [r3]
 800322c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3308      	adds	r3, #8
 8003242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003246:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800324a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800325e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1d9      	bne.n	800321a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326c:	2b00      	cmp	r3, #0
 800326e:	d017      	beq.n	80032a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003276:	4a15      	ldr	r2, [pc, #84]	; (80032cc <HAL_UART_IRQHandler+0x2c0>)
 8003278:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd ffe6 	bl	8001252 <HAL_DMA_Abort_IT>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d019      	beq.n	80032c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800329a:	4610      	mov	r0, r2
 800329c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329e:	e00f      	b.n	80032c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fd fa8f 	bl	80007c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a6:	e00b      	b.n	80032c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7fd fa8b 	bl	80007c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ae:	e007      	b.n	80032c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fd fa87 	bl	80007c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80032be:	e1bf      	b.n	8003640 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	bf00      	nop
    return;
 80032c2:	e1bd      	b.n	8003640 <HAL_UART_IRQHandler+0x634>
 80032c4:	10000001 	.word	0x10000001
 80032c8:	04000120 	.word	0x04000120
 80032cc:	080041cf 	.word	0x080041cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	f040 8153 	bne.w	8003580 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 814c 	beq.w	8003580 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8145 	beq.w	8003580 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2210      	movs	r2, #16
 80032fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	f040 80bb 	bne.w	8003484 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800331c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 818f 	beq.w	8003644 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800332c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003330:	429a      	cmp	r2, r3
 8003332:	f080 8187 	bcs.w	8003644 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800333c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 8087 	bne.w	8003462 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800336c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800337e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003382:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800338a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800338e:	e841 2300 	strex	r3, r2, [r1]
 8003392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1da      	bne.n	8003354 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3308      	adds	r3, #8
 80033a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3308      	adds	r3, #8
 80033be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e1      	bne.n	800339e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3308      	adds	r3, #8
 80033e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3308      	adds	r3, #8
 80033fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800340c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e3      	bne.n	80033da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800342e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003430:	f023 0310 	bic.w	r3, r3, #16
 8003434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	461a      	mov	r2, r3
 800343e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003442:	65bb      	str	r3, [r7, #88]	; 0x58
 8003444:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344a:	e841 2300 	strex	r3, r2, [r1]
 800344e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1e4      	bne.n	8003420 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fe9a 	bl	8001196 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003474:	b29b      	uxth	r3, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f8e9 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003482:	e0df      	b.n	8003644 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003490:	b29b      	uxth	r3, r3
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80d1 	beq.w	8003648 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80034a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80cc 	beq.w	8003648 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034d2:	647b      	str	r3, [r7, #68]	; 0x44
 80034d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e4      	bne.n	80034b0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3308      	adds	r3, #8
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	623b      	str	r3, [r7, #32]
   return(result);
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3308      	adds	r3, #8
 800350a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800350e:	633a      	str	r2, [r7, #48]	; 0x30
 8003510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003516:	e841 2300 	strex	r3, r2, [r1]
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1e1      	bne.n	80034e6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	60fb      	str	r3, [r7, #12]
   return(result);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0310 	bic.w	r3, r3, #16
 800354a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355c:	69b9      	ldr	r1, [r7, #24]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	e841 2300 	strex	r3, r2, [r1]
 8003564:	617b      	str	r3, [r7, #20]
   return(result);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1e4      	bne.n	8003536 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003576:	4619      	mov	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 f86b 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800357e:	e063      	b.n	8003648 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00e      	beq.n	80035aa <HAL_UART_IRQHandler+0x59e>
 800358c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f001 fd0e 	bl	8004fc4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035a8:	e051      	b.n	800364e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d014      	beq.n	80035e0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80035b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d105      	bne.n	80035ce <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80035c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d03a      	beq.n	800364c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
    }
    return;
 80035de:	e035      	b.n	800364c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_UART_IRQHandler+0x5f4>
 80035ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 ff9c 	bl	8004536 <UART_EndTransmit_IT>
    return;
 80035fe:	e026      	b.n	800364e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <HAL_UART_IRQHandler+0x614>
 800360c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003610:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f001 fce5 	bl	8004fe8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800361e:	e016      	b.n	800364e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d010      	beq.n	800364e <HAL_UART_IRQHandler+0x642>
 800362c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003630:	2b00      	cmp	r3, #0
 8003632:	da0c      	bge.n	800364e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f001 fcce 	bl	8004fd6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800363a:	e008      	b.n	800364e <HAL_UART_IRQHandler+0x642>
      return;
 800363c:	bf00      	nop
 800363e:	e006      	b.n	800364e <HAL_UART_IRQHandler+0x642>
    return;
 8003640:	bf00      	nop
 8003642:	e004      	b.n	800364e <HAL_UART_IRQHandler+0x642>
      return;
 8003644:	bf00      	nop
 8003646:	e002      	b.n	800364e <HAL_UART_IRQHandler+0x642>
      return;
 8003648:	bf00      	nop
 800364a:	e000      	b.n	800364e <HAL_UART_IRQHandler+0x642>
    return;
 800364c:	bf00      	nop
  }
}
 800364e:	37e8      	adds	r7, #232	; 0xe8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
	...

0800366c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b08c      	sub	sp, #48	; 0x30
 8003672:	af00      	add	r7, sp, #0
 8003674:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	431a      	orrs	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	431a      	orrs	r2, r3
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	4313      	orrs	r3, r2
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b94      	ldr	r3, [pc, #592]	; (80038ec <UART_SetConfig+0x280>)
 800369c:	4013      	ands	r3, r2
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a89      	ldr	r2, [pc, #548]	; (80038f0 <UART_SetConfig+0x284>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d4:	4313      	orrs	r3, r2
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80036e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f023 010f 	bic.w	r1, r3, #15
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a7a      	ldr	r2, [pc, #488]	; (80038f4 <UART_SetConfig+0x288>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d127      	bne.n	8003760 <UART_SetConfig+0xf4>
 8003710:	2003      	movs	r0, #3
 8003712:	f7ff faa3 	bl	8002c5c <LL_RCC_GetUSARTClockSource>
 8003716:	4603      	mov	r3, r0
 8003718:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800371c:	2b03      	cmp	r3, #3
 800371e:	d81b      	bhi.n	8003758 <UART_SetConfig+0xec>
 8003720:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <UART_SetConfig+0xbc>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	08003739 	.word	0x08003739
 800372c:	08003749 	.word	0x08003749
 8003730:	08003741 	.word	0x08003741
 8003734:	08003751 	.word	0x08003751
 8003738:	2301      	movs	r3, #1
 800373a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373e:	e080      	b.n	8003842 <UART_SetConfig+0x1d6>
 8003740:	2302      	movs	r3, #2
 8003742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003746:	e07c      	b.n	8003842 <UART_SetConfig+0x1d6>
 8003748:	2304      	movs	r3, #4
 800374a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374e:	e078      	b.n	8003842 <UART_SetConfig+0x1d6>
 8003750:	2308      	movs	r3, #8
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003756:	e074      	b.n	8003842 <UART_SetConfig+0x1d6>
 8003758:	2310      	movs	r3, #16
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800375e:	e070      	b.n	8003842 <UART_SetConfig+0x1d6>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a64      	ldr	r2, [pc, #400]	; (80038f8 <UART_SetConfig+0x28c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d138      	bne.n	80037dc <UART_SetConfig+0x170>
 800376a:	200c      	movs	r0, #12
 800376c:	f7ff fa76 	bl	8002c5c <LL_RCC_GetUSARTClockSource>
 8003770:	4603      	mov	r3, r0
 8003772:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d82c      	bhi.n	80037d4 <UART_SetConfig+0x168>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <UART_SetConfig+0x114>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037b5 	.word	0x080037b5
 8003784:	080037d5 	.word	0x080037d5
 8003788:	080037d5 	.word	0x080037d5
 800378c:	080037d5 	.word	0x080037d5
 8003790:	080037c5 	.word	0x080037c5
 8003794:	080037d5 	.word	0x080037d5
 8003798:	080037d5 	.word	0x080037d5
 800379c:	080037d5 	.word	0x080037d5
 80037a0:	080037bd 	.word	0x080037bd
 80037a4:	080037d5 	.word	0x080037d5
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	080037cd 	.word	0x080037cd
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ba:	e042      	b.n	8003842 <UART_SetConfig+0x1d6>
 80037bc:	2302      	movs	r3, #2
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c2:	e03e      	b.n	8003842 <UART_SetConfig+0x1d6>
 80037c4:	2304      	movs	r3, #4
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ca:	e03a      	b.n	8003842 <UART_SetConfig+0x1d6>
 80037cc:	2308      	movs	r3, #8
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037d2:	e036      	b.n	8003842 <UART_SetConfig+0x1d6>
 80037d4:	2310      	movs	r3, #16
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037da:	e032      	b.n	8003842 <UART_SetConfig+0x1d6>
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a43      	ldr	r2, [pc, #268]	; (80038f0 <UART_SetConfig+0x284>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d12a      	bne.n	800383c <UART_SetConfig+0x1d0>
 80037e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80037ea:	f7ff fa49 	bl	8002c80 <LL_RCC_GetLPUARTClockSource>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037f4:	d01a      	beq.n	800382c <UART_SetConfig+0x1c0>
 80037f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037fa:	d81b      	bhi.n	8003834 <UART_SetConfig+0x1c8>
 80037fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003800:	d00c      	beq.n	800381c <UART_SetConfig+0x1b0>
 8003802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003806:	d815      	bhi.n	8003834 <UART_SetConfig+0x1c8>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <UART_SetConfig+0x1a8>
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003810:	d008      	beq.n	8003824 <UART_SetConfig+0x1b8>
 8003812:	e00f      	b.n	8003834 <UART_SetConfig+0x1c8>
 8003814:	2300      	movs	r3, #0
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800381a:	e012      	b.n	8003842 <UART_SetConfig+0x1d6>
 800381c:	2302      	movs	r3, #2
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003822:	e00e      	b.n	8003842 <UART_SetConfig+0x1d6>
 8003824:	2304      	movs	r3, #4
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800382a:	e00a      	b.n	8003842 <UART_SetConfig+0x1d6>
 800382c:	2308      	movs	r3, #8
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003832:	e006      	b.n	8003842 <UART_SetConfig+0x1d6>
 8003834:	2310      	movs	r3, #16
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383a:	e002      	b.n	8003842 <UART_SetConfig+0x1d6>
 800383c:	2310      	movs	r3, #16
 800383e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2a      	ldr	r2, [pc, #168]	; (80038f0 <UART_SetConfig+0x284>)
 8003848:	4293      	cmp	r3, r2
 800384a:	f040 80a4 	bne.w	8003996 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800384e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003852:	2b08      	cmp	r3, #8
 8003854:	d823      	bhi.n	800389e <UART_SetConfig+0x232>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <UART_SetConfig+0x1f0>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	08003881 	.word	0x08003881
 8003860:	0800389f 	.word	0x0800389f
 8003864:	08003889 	.word	0x08003889
 8003868:	0800389f 	.word	0x0800389f
 800386c:	0800388f 	.word	0x0800388f
 8003870:	0800389f 	.word	0x0800389f
 8003874:	0800389f 	.word	0x0800389f
 8003878:	0800389f 	.word	0x0800389f
 800387c:	08003897 	.word	0x08003897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003880:	f7fe ff08 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003886:	e010      	b.n	80038aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003888:	4b1c      	ldr	r3, [pc, #112]	; (80038fc <UART_SetConfig+0x290>)
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800388c:	e00d      	b.n	80038aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800388e:	f7fe fe4d 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003892:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003894:	e009      	b.n	80038aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800389c:	e005      	b.n	80038aa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8137 	beq.w	8003b20 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <UART_SetConfig+0x294>)
 80038b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038bc:	461a      	mov	r2, r3
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d305      	bcc.n	80038e2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d910      	bls.n	8003904 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038e8:	e11a      	b.n	8003b20 <UART_SetConfig+0x4b4>
 80038ea:	bf00      	nop
 80038ec:	cfff69f3 	.word	0xcfff69f3
 80038f0:	40008000 	.word	0x40008000
 80038f4:	40013800 	.word	0x40013800
 80038f8:	40004400 	.word	0x40004400
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	08005394 	.word	0x08005394
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	2200      	movs	r2, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	60fa      	str	r2, [r7, #12]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	4a8e      	ldr	r2, [pc, #568]	; (8003b4c <UART_SetConfig+0x4e0>)
 8003912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003916:	b29b      	uxth	r3, r3
 8003918:	2200      	movs	r2, #0
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003922:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003926:	f7fc fc27 	bl	8000178 <__aeabi_uldivmod>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	020b      	lsls	r3, r1, #8
 800393c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003940:	0202      	lsls	r2, r0, #8
 8003942:	6979      	ldr	r1, [r7, #20]
 8003944:	6849      	ldr	r1, [r1, #4]
 8003946:	0849      	lsrs	r1, r1, #1
 8003948:	2000      	movs	r0, #0
 800394a:	460c      	mov	r4, r1
 800394c:	4605      	mov	r5, r0
 800394e:	eb12 0804 	adds.w	r8, r2, r4
 8003952:	eb43 0905 	adc.w	r9, r3, r5
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	469a      	mov	sl, r3
 800395e:	4693      	mov	fp, r2
 8003960:	4652      	mov	r2, sl
 8003962:	465b      	mov	r3, fp
 8003964:	4640      	mov	r0, r8
 8003966:	4649      	mov	r1, r9
 8003968:	f7fc fc06 	bl	8000178 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800397a:	d308      	bcc.n	800398e <UART_SetConfig+0x322>
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003982:	d204      	bcs.n	800398e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	e0c8      	b.n	8003b20 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003994:	e0c4      	b.n	8003b20 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399e:	d167      	bne.n	8003a70 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80039a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d828      	bhi.n	80039fa <UART_SetConfig+0x38e>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0x344>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039d5 	.word	0x080039d5
 80039b4:	080039dd 	.word	0x080039dd
 80039b8:	080039e5 	.word	0x080039e5
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039eb 	.word	0x080039eb
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039fb 	.word	0x080039fb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039d4:	f7fe fe5e 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 80039d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039da:	e014      	b.n	8003a06 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe fe6c 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 80039e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039e2:	e010      	b.n	8003a06 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b5a      	ldr	r3, [pc, #360]	; (8003b50 <UART_SetConfig+0x4e4>)
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039e8:	e00d      	b.n	8003a06 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7fe fd9f 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80039ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039f0:	e009      	b.n	8003a06 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039f8:	e005      	b.n	8003a06 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8089 	beq.w	8003b20 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	4a4e      	ldr	r2, [pc, #312]	; (8003b4c <UART_SetConfig+0x4e0>)
 8003a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a20:	005a      	lsls	r2, r3, #1
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	441a      	add	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	2b0f      	cmp	r3, #15
 8003a38:	d916      	bls.n	8003a68 <UART_SetConfig+0x3fc>
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a40:	d212      	bcs.n	8003a68 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f023 030f 	bic.w	r3, r3, #15
 8003a4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	8bfb      	ldrh	r3, [r7, #30]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	8bfa      	ldrh	r2, [r7, #30]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	e05b      	b.n	8003b20 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a6e:	e057      	b.n	8003b20 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d828      	bhi.n	8003aca <UART_SetConfig+0x45e>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <UART_SetConfig+0x414>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003aa5 	.word	0x08003aa5
 8003a84:	08003aad 	.word	0x08003aad
 8003a88:	08003ab5 	.word	0x08003ab5
 8003a8c:	08003acb 	.word	0x08003acb
 8003a90:	08003abb 	.word	0x08003abb
 8003a94:	08003acb 	.word	0x08003acb
 8003a98:	08003acb 	.word	0x08003acb
 8003a9c:	08003acb 	.word	0x08003acb
 8003aa0:	08003ac3 	.word	0x08003ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aa4:	f7fe fdf6 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8003aa8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aaa:	e014      	b.n	8003ad6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aac:	f7fe fe04 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ab2:	e010      	b.n	8003ad6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ab4:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <UART_SetConfig+0x4e4>)
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ab8:	e00d      	b.n	8003ad6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aba:	f7fe fd37 	bl	800252c <HAL_RCC_GetSysClockFreq>
 8003abe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ac0:	e009      	b.n	8003ad6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ac8:	e005      	b.n	8003ad6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ad4:	bf00      	nop
    }

    if (pclk != 0U)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d021      	beq.n	8003b20 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	; (8003b4c <UART_SetConfig+0x4e0>)
 8003ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	fbb3 f2f2 	udiv	r2, r3, r2
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	441a      	add	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	d909      	bls.n	8003b1a <UART_SetConfig+0x4ae>
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0c:	d205      	bcs.n	8003b1a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60da      	str	r2, [r3, #12]
 8003b18:	e002      	b.n	8003b20 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3730      	adds	r7, #48	; 0x30
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4a:	bf00      	nop
 8003b4c:	08005394 	.word	0x08005394
 8003b50:	00f42400 	.word	0x00f42400

08003b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01a      	beq.n	8003c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d10a      	bne.n	8003c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr

08003c96 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af02      	add	r7, sp, #8
 8003c9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca6:	f7fd f92f 	bl	8000f08 <HAL_GetTick>
 8003caa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d10e      	bne.n	8003cd8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f832 	bl	8003d32 <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e028      	b.n	8003d2a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d10e      	bne.n	8003d04 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 f81c 	bl	8003d32 <UART_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e012      	b.n	8003d2a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b09c      	sub	sp, #112	; 0x70
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	603b      	str	r3, [r7, #0]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d42:	e0a9      	b.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4a:	f000 80a5 	beq.w	8003e98 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fd f8db 	bl	8000f08 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d140      	bne.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d78:	667b      	str	r3, [r7, #100]	; 0x64
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d84:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e6      	bne.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3308      	adds	r3, #8
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	663b      	str	r3, [r7, #96]	; 0x60
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003db6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003db8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e5      	bne.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e069      	b.n	8003eba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d051      	beq.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e02:	d149      	bne.n	8003e98 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3308      	adds	r3, #8
 8003e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e60:	623a      	str	r2, [r7, #32]
 8003e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	69f9      	ldr	r1, [r7, #28]
 8003e66:	6a3a      	ldr	r2, [r7, #32]
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e010      	b.n	8003eba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69da      	ldr	r2, [r3, #28]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	f43f af46 	beq.w	8003d44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3770      	adds	r7, #112	; 0x70
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b0a3      	sub	sp, #140	; 0x8c
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	88fa      	ldrh	r2, [r7, #6]
 8003ee4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef6:	d10e      	bne.n	8003f16 <UART_Start_Receive_IT+0x52>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d105      	bne.n	8003f0c <UART_Start_Receive_IT+0x48>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f0a:	e02d      	b.n	8003f68 <UART_Start_Receive_IT+0xa4>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	22ff      	movs	r2, #255	; 0xff
 8003f10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f14:	e028      	b.n	8003f68 <UART_Start_Receive_IT+0xa4>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <UART_Start_Receive_IT+0x76>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <UART_Start_Receive_IT+0x6c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f2e:	e01b      	b.n	8003f68 <UART_Start_Receive_IT+0xa4>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	227f      	movs	r2, #127	; 0x7f
 8003f34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f38:	e016      	b.n	8003f68 <UART_Start_Receive_IT+0xa4>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f42:	d10d      	bne.n	8003f60 <UART_Start_Receive_IT+0x9c>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <UART_Start_Receive_IT+0x92>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	227f      	movs	r2, #127	; 0x7f
 8003f50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f54:	e008      	b.n	8003f68 <UART_Start_Receive_IT+0xa4>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	223f      	movs	r2, #63	; 0x3f
 8003f5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f5e:	e003      	b.n	8003f68 <UART_Start_Receive_IT+0xa4>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	; 0x22
 8003f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f82:	e853 3f00 	ldrex	r3, [r3]
 8003f86:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3308      	adds	r3, #8
 8003f98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f9c:	673a      	str	r2, [r7, #112]	; 0x70
 8003f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003fa2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e3      	bne.n	8003f78 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb8:	d14f      	bne.n	800405a <UART_Start_Receive_IT+0x196>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d349      	bcc.n	800405a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fce:	d107      	bne.n	8003fe0 <UART_Start_Receive_IT+0x11c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d103      	bne.n	8003fe0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a46      	ldr	r2, [pc, #280]	; (80040f4 <UART_Start_Receive_IT+0x230>)
 8003fdc:	675a      	str	r2, [r3, #116]	; 0x74
 8003fde:	e002      	b.n	8003fe6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4a45      	ldr	r2, [pc, #276]	; (80040f8 <UART_Start_Receive_IT+0x234>)
 8003fe4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01a      	beq.n	8004024 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004002:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004012:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004016:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800401e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e4      	bne.n	8003fee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3308      	adds	r3, #8
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004044:	64ba      	str	r2, [r7, #72]	; 0x48
 8004046:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800404a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e5      	bne.n	8004024 <UART_Start_Receive_IT+0x160>
 8004058:	e046      	b.n	80040e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d107      	bne.n	8004074 <UART_Start_Receive_IT+0x1b0>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a23      	ldr	r2, [pc, #140]	; (80040fc <UART_Start_Receive_IT+0x238>)
 8004070:	675a      	str	r2, [r3, #116]	; 0x74
 8004072:	e002      	b.n	800407a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a22      	ldr	r2, [pc, #136]	; (8004100 <UART_Start_Receive_IT+0x23c>)
 8004078:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d019      	beq.n	80040b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004096:	677b      	str	r3, [r7, #116]	; 0x74
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
 80040a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e6      	bne.n	8004082 <UART_Start_Receive_IT+0x1be>
 80040b4:	e018      	b.n	80040e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	613b      	str	r3, [r7, #16]
   return(result);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f043 0320 	orr.w	r3, r3, #32
 80040ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	6a3a      	ldr	r2, [r7, #32]
 80040dc:	e841 2300 	strex	r3, r2, [r1]
 80040e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e6      	bne.n	80040b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	378c      	adds	r7, #140	; 0x8c
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	08004c5d 	.word	0x08004c5d
 80040f8:	080048fd 	.word	0x080048fd
 80040fc:	08004745 	.word	0x08004745
 8004100:	0800458d 	.word	0x0800458d

08004104 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b095      	sub	sp, #84	; 0x54
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412a:	643b      	str	r3, [r7, #64]	; 0x40
 800412c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004130:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e6      	bne.n	800410c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	61fb      	str	r3, [r7, #28]
   return(result);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	64bb      	str	r3, [r7, #72]	; 0x48
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e3      	bne.n	800413e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d118      	bne.n	80041b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	60bb      	str	r3, [r7, #8]
   return(result);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f023 0310 	bic.w	r3, r3, #16
 8004192:	647b      	str	r3, [r7, #68]	; 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	613b      	str	r3, [r7, #16]
   return(result);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e6      	bne.n	800417e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80041c4:	bf00      	nop
 80041c6:	3754      	adds	r7, #84	; 0x54
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bc80      	pop	{r7}
 80041cc:	4770      	bx	lr

080041ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f7fc fae9 	bl	80007c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b08f      	sub	sp, #60	; 0x3c
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	2b21      	cmp	r3, #33	; 0x21
 800420a:	d14c      	bne.n	80042a6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d132      	bne.n	800427e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	61fb      	str	r3, [r7, #28]
   return(result);
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004238:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800423c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e6      	bne.n	8004218 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	60bb      	str	r3, [r7, #8]
   return(result);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6979      	ldr	r1, [r7, #20]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	613b      	str	r3, [r7, #16]
   return(result);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e6      	bne.n	800424a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800427c:	e013      	b.n	80042a6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	781a      	ldrb	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80042a6:	bf00      	nop
 80042a8:	373c      	adds	r7, #60	; 0x3c
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr

080042b0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b091      	sub	sp, #68	; 0x44
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042be:	2b21      	cmp	r3, #33	; 0x21
 80042c0:	d151      	bne.n	8004366 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d132      	bne.n	8004334 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	623b      	str	r3, [r7, #32]
   return(result);
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	461a      	mov	r2, r3
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
 80042ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e6      	bne.n	80042ce <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	60fb      	str	r3, [r7, #12]
   return(result);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004314:	637b      	str	r3, [r7, #52]	; 0x34
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	69b9      	ldr	r1, [r7, #24]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	617b      	str	r3, [r7, #20]
   return(result);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e6      	bne.n	8004300 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004332:	e018      	b.n	8004366 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004338:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800433a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004348:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004366:	bf00      	nop
 8004368:	3744      	adds	r7, #68	; 0x44
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b091      	sub	sp, #68	; 0x44
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	2b21      	cmp	r3, #33	; 0x21
 8004380:	d160      	bne.n	8004444 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004388:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800438a:	e057      	b.n	800443c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d133      	bne.n	8004400 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	623b      	str	r3, [r7, #32]
   return(result);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043b8:	633a      	str	r2, [r7, #48]	; 0x30
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	69b9      	ldr	r1, [r7, #24]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	617b      	str	r3, [r7, #20]
   return(result);
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e6      	bne.n	80043cc <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80043fe:	e021      	b.n	8004444 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	781a      	ldrb	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004436:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004438:	3b01      	subs	r3, #1
 800443a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800443c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1a4      	bne.n	800438c <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004442:	e7ff      	b.n	8004444 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004444:	bf00      	nop
 8004446:	3744      	adds	r7, #68	; 0x44
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b091      	sub	sp, #68	; 0x44
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	2b21      	cmp	r3, #33	; 0x21
 800445e:	d165      	bne.n	800452c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004466:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004468:	e05c      	b.n	8004524 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d133      	bne.n	80044de <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3308      	adds	r3, #8
 800447c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	61fb      	str	r3, [r7, #28]
   return(result);
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3308      	adds	r3, #8
 8004494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800449c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e5      	bne.n	8004476 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6979      	ldr	r1, [r7, #20]
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	613b      	str	r3, [r7, #16]
   return(result);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80044dc:	e026      	b.n	800452c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d018      	beq.n	800451e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	461a      	mov	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004500:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	1c9a      	adds	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800451e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004520:	3b01      	subs	r3, #1
 8004522:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004524:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004526:	2b00      	cmp	r3, #0
 8004528:	d19f      	bne.n	800446a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800452a:	e7ff      	b.n	800452c <UART_TxISR_16BIT_FIFOEN+0xde>
 800452c:	bf00      	nop
 800452e:	3744      	adds	r7, #68	; 0x44
 8004530:	46bd      	mov	sp, r7
 8004532:	bc80      	pop	{r7}
 8004534:	4770      	bx	lr

08004536 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	e853 3f00 	ldrex	r3, [r3]
 800454a:	60bb      	str	r3, [r7, #8]
   return(result);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	461a      	mov	r2, r3
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004560:	6979      	ldr	r1, [r7, #20]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	e841 2300 	strex	r3, r2, [r1]
 8004568:	613b      	str	r3, [r7, #16]
   return(result);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1e6      	bne.n	800453e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc f938 	bl	80007f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004584:	bf00      	nop
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b09c      	sub	sp, #112	; 0x70
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800459a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a4:	2b22      	cmp	r3, #34	; 0x22
 80045a6:	f040 80be 	bne.w	8004726 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045b4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045b8:	b2d9      	uxtb	r1, r3
 80045ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	400a      	ands	r2, r1
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f040 80a1 	bne.w	8004736 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004608:	66bb      	str	r3, [r7, #104]	; 0x68
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004612:	65bb      	str	r3, [r7, #88]	; 0x58
 8004614:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e6      	bne.n	80045f4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	667b      	str	r3, [r7, #100]	; 0x64
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004646:	647a      	str	r2, [r7, #68]	; 0x44
 8004648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800464c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a33      	ldr	r2, [pc, #204]	; (8004740 <UART_RxISR_8BIT+0x1b4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d01f      	beq.n	80046b8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	e853 3f00 	ldrex	r3, [r3]
 8004692:	623b      	str	r3, [r7, #32]
   return(result);
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800469a:	663b      	str	r3, [r7, #96]	; 0x60
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
 80046a6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e6      	bne.n	8004686 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d12e      	bne.n	800471e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e8:	69b9      	ldr	r1, [r7, #24]
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	e841 2300 	strex	r3, r2, [r1]
 80046f0:	617b      	str	r3, [r7, #20]
   return(result);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e6      	bne.n	80046c6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b10      	cmp	r3, #16
 8004704:	d103      	bne.n	800470e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2210      	movs	r2, #16
 800470c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fe ff9c 	bl	8003654 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800471c:	e00b      	b.n	8004736 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc f880 	bl	8000824 <HAL_UART_RxCpltCallback>
}
 8004724:	e007      	b.n	8004736 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0208 	orr.w	r2, r2, #8
 8004734:	619a      	str	r2, [r3, #24]
}
 8004736:	bf00      	nop
 8004738:	3770      	adds	r7, #112	; 0x70
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40008000 	.word	0x40008000

08004744 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b09c      	sub	sp, #112	; 0x70
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004752:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	2b22      	cmp	r3, #34	; 0x22
 800475e:	f040 80be 	bne.w	80048de <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004772:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004776:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800477a:	4013      	ands	r3, r2
 800477c:	b29a      	uxth	r2, r3
 800477e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004780:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f040 80a1 	bne.w	80048ee <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80047ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c0:	667b      	str	r3, [r7, #100]	; 0x64
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ca:	657b      	str	r3, [r7, #84]	; 0x54
 80047cc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e6      	bne.n	80047ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	663b      	str	r3, [r7, #96]	; 0x60
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3308      	adds	r3, #8
 80047fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047fe:	643a      	str	r2, [r7, #64]	; 0x40
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e5      	bne.n	80047de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a33      	ldr	r2, [pc, #204]	; (80048f8 <UART_RxISR_16BIT+0x1b4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d01f      	beq.n	8004870 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d018      	beq.n	8004870 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6a3b      	ldr	r3, [r7, #32]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	61fb      	str	r3, [r7, #28]
   return(result);
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d12e      	bne.n	80048d6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	60bb      	str	r3, [r7, #8]
   return(result);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	65bb      	str	r3, [r7, #88]	; 0x58
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e6      	bne.n	800487e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b10      	cmp	r3, #16
 80048bc:	d103      	bne.n	80048c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2210      	movs	r2, #16
 80048c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fe fec0 	bl	8003654 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048d4:	e00b      	b.n	80048ee <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fb ffa4 	bl	8000824 <HAL_UART_RxCpltCallback>
}
 80048dc:	e007      	b.n	80048ee <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0208 	orr.w	r2, r2, #8
 80048ec:	619a      	str	r2, [r3, #24]
}
 80048ee:	bf00      	nop
 80048f0:	3770      	adds	r7, #112	; 0x70
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40008000 	.word	0x40008000

080048fc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b0ac      	sub	sp, #176	; 0xb0
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800490a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004932:	2b22      	cmp	r3, #34	; 0x22
 8004934:	f040 8182 	bne.w	8004c3c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800493e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004942:	e125      	b.n	8004b90 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800494e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004952:	b2d9      	uxtb	r1, r3
 8004954:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004958:	b2da      	uxtb	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	400a      	ands	r2, r1
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800498a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	2b00      	cmp	r3, #0
 8004994:	d053      	beq.n	8004a3e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004996:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d011      	beq.n	80049c6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80049a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2201      	movs	r2, #1
 80049b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f043 0201 	orr.w	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d011      	beq.n	80049f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80049d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00b      	beq.n	80049f6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2202      	movs	r2, #2
 80049e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	f043 0204 	orr.w	r2, r3, #4
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d011      	beq.n	8004a26 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2204      	movs	r2, #4
 8004a14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f043 0202 	orr.w	r2, r3, #2
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d006      	beq.n	8004a3e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7fb fec7 	bl	80007c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 80a2 	bne.w	8004b90 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a70:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004a74:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e4      	bne.n	8004a4c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aaa:	66ba      	str	r2, [r7, #104]	; 0x68
 8004aac:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004ab0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e1      	bne.n	8004a82 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a5f      	ldr	r2, [pc, #380]	; (8004c54 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d021      	beq.n	8004b20 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01a      	beq.n	8004b20 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004afa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b0e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e4      	bne.n	8004aea <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d130      	bne.n	8004b8a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b50:	643b      	str	r3, [r7, #64]	; 0x40
 8004b52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e4      	bne.n	8004b2e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0310 	and.w	r3, r3, #16
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d103      	bne.n	8004b7a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2210      	movs	r2, #16
 8004b78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fe fd66 	bl	8003654 <HAL_UARTEx_RxEventCallback>
 8004b88:	e002      	b.n	8004b90 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fb fe4a 	bl	8000824 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b90:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d006      	beq.n	8004ba6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004b98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f47f aecf 	bne.w	8004944 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004bb0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d049      	beq.n	8004c4c <UART_RxISR_8BIT_FIFOEN+0x350>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bbe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d242      	bcs.n	8004c4c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3308      	adds	r3, #8
 8004bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3308      	adds	r3, #8
 8004be6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e3      	bne.n	8004bc6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004c02:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f043 0320 	orr.w	r3, r3, #32
 8004c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c26:	61bb      	str	r3, [r7, #24]
 8004c28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6979      	ldr	r1, [r7, #20]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	613b      	str	r3, [r7, #16]
   return(result);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e4      	bne.n	8004c04 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c3a:	e007      	b.n	8004c4c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699a      	ldr	r2, [r3, #24]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0208 	orr.w	r2, r2, #8
 8004c4a:	619a      	str	r2, [r3, #24]
}
 8004c4c:	bf00      	nop
 8004c4e:	37b0      	adds	r7, #176	; 0xb0
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40008000 	.word	0x40008000
 8004c58:	0800458d 	.word	0x0800458d

08004c5c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b0ae      	sub	sp, #184	; 0xb8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004c6a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c92:	2b22      	cmp	r3, #34	; 0x22
 8004c94:	f040 8186 	bne.w	8004fa4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c9e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ca2:	e129      	b.n	8004ef8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004cb6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004cba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	1c9a      	adds	r2, r3, #2
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d053      	beq.n	8004da2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d011      	beq.n	8004d2a <UART_RxISR_16BIT_FIFOEN+0xce>
 8004d06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00b      	beq.n	8004d2a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2201      	movs	r2, #1
 8004d18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f043 0201 	orr.w	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d011      	beq.n	8004d5a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004d36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2202      	movs	r2, #2
 8004d48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f043 0204 	orr.w	r2, r3, #4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d011      	beq.n	8004d8a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00b      	beq.n	8004d8a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2204      	movs	r2, #4
 8004d78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	f043 0202 	orr.w	r2, r3, #2
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d006      	beq.n	8004da2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fb fd15 	bl	80007c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f040 80a4 	bne.w	8004ef8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004dbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dd6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e2      	bne.n	8004db0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004e12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e1      	bne.n	8004dea <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a5f      	ldr	r2, [pc, #380]	; (8004fbc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d021      	beq.n	8004e88 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d01a      	beq.n	8004e88 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e74:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e7c:	e841 2300 	strex	r3, r2, [r1]
 8004e80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e4      	bne.n	8004e52 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d130      	bne.n	8004ef2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea6:	f023 0310 	bic.w	r3, r3, #16
 8004eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e4      	bne.n	8004e96 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d103      	bne.n	8004ee2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2210      	movs	r2, #16
 8004ee0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fe fbb2 	bl	8003654 <HAL_UARTEx_RxEventCallback>
 8004ef0:	e002      	b.n	8004ef8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fb fc96 	bl	8000824 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ef8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f aecb 	bne.w	8004ca4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f14:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f18:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d049      	beq.n	8004fb4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004f26:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d242      	bcs.n	8004fb4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3308      	adds	r3, #8
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004f52:	633a      	str	r2, [r7, #48]	; 0x30
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e3      	bne.n	8004f2e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004f6a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f043 0320 	orr.w	r3, r3, #32
 8004f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	69b9      	ldr	r1, [r7, #24]
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e4      	bne.n	8004f6c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fa2:	e007      	b.n	8004fb4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0208 	orr.w	r2, r2, #8
 8004fb2:	619a      	str	r2, [r3, #24]
}
 8004fb4:	bf00      	nop
 8004fb6:	37b8      	adds	r7, #184	; 0xb8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40008000 	.word	0x40008000
 8004fc0:	08004745 	.word	0x08004745

08004fc4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr

08004ffa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_UARTEx_DisableFifoMode+0x16>
 800500c:	2302      	movs	r3, #2
 800500e:	e027      	b.n	8005060 <HAL_UARTEx_DisableFifoMode+0x66>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2224      	movs	r2, #36	; 0x24
 800501c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800503e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800507e:	2302      	movs	r3, #2
 8005080:	e02d      	b.n	80050de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2224      	movs	r2, #36	; 0x24
 800508e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0201 	bic.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f850 	bl	8005164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e02d      	b.n	800515a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2224      	movs	r2, #36	; 0x24
 800510a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f812 	bl	8005164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005170:	2b00      	cmp	r3, #0
 8005172:	d108      	bne.n	8005186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005184:	e031      	b.n	80051ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005186:	2308      	movs	r3, #8
 8005188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800518a:	2308      	movs	r3, #8
 800518c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	0e5b      	lsrs	r3, r3, #25
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	0f5b      	lsrs	r3, r3, #29
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051ae:	7bbb      	ldrb	r3, [r7, #14]
 80051b0:	7b3a      	ldrb	r2, [r7, #12]
 80051b2:	4910      	ldr	r1, [pc, #64]	; (80051f4 <UARTEx_SetNbDataToProcess+0x90>)
 80051b4:	5c8a      	ldrb	r2, [r1, r2]
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051ba:	7b3a      	ldrb	r2, [r7, #12]
 80051bc:	490e      	ldr	r1, [pc, #56]	; (80051f8 <UARTEx_SetNbDataToProcess+0x94>)
 80051be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
 80051ce:	7b7a      	ldrb	r2, [r7, #13]
 80051d0:	4908      	ldr	r1, [pc, #32]	; (80051f4 <UARTEx_SetNbDataToProcess+0x90>)
 80051d2:	5c8a      	ldrb	r2, [r1, r2]
 80051d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051d8:	7b7a      	ldrb	r2, [r7, #13]
 80051da:	4907      	ldr	r1, [pc, #28]	; (80051f8 <UARTEx_SetNbDataToProcess+0x94>)
 80051dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051de:	fb93 f3f2 	sdiv	r3, r3, r2
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	080053ac 	.word	0x080053ac
 80051f8:	080053b4 	.word	0x080053b4

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	4d0d      	ldr	r5, [pc, #52]	; (8005234 <__libc_init_array+0x38>)
 8005200:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <__libc_init_array+0x3c>)
 8005202:	1b64      	subs	r4, r4, r5
 8005204:	10a4      	asrs	r4, r4, #2
 8005206:	2600      	movs	r6, #0
 8005208:	42a6      	cmp	r6, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	4d0b      	ldr	r5, [pc, #44]	; (800523c <__libc_init_array+0x40>)
 800520e:	4c0c      	ldr	r4, [pc, #48]	; (8005240 <__libc_init_array+0x44>)
 8005210:	f000 f842 	bl	8005298 <_init>
 8005214:	1b64      	subs	r4, r4, r5
 8005216:	10a4      	asrs	r4, r4, #2
 8005218:	2600      	movs	r6, #0
 800521a:	42a6      	cmp	r6, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	f855 3b04 	ldr.w	r3, [r5], #4
 8005224:	4798      	blx	r3
 8005226:	3601      	adds	r6, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	f855 3b04 	ldr.w	r3, [r5], #4
 800522e:	4798      	blx	r3
 8005230:	3601      	adds	r6, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	080053c4 	.word	0x080053c4
 8005238:	080053c4 	.word	0x080053c4
 800523c:	080053c4 	.word	0x080053c4
 8005240:	080053c8 	.word	0x080053c8

08005244 <memcpy>:
 8005244:	440a      	add	r2, r1
 8005246:	4291      	cmp	r1, r2
 8005248:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800524c:	d100      	bne.n	8005250 <memcpy+0xc>
 800524e:	4770      	bx	lr
 8005250:	b510      	push	{r4, lr}
 8005252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800525a:	4291      	cmp	r1, r2
 800525c:	d1f9      	bne.n	8005252 <memcpy+0xe>
 800525e:	bd10      	pop	{r4, pc}

08005260 <memset>:
 8005260:	4402      	add	r2, r0
 8005262:	4603      	mov	r3, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	f803 1b01 	strb.w	r1, [r3], #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <strncpy>:
 8005270:	b510      	push	{r4, lr}
 8005272:	3901      	subs	r1, #1
 8005274:	4603      	mov	r3, r0
 8005276:	b132      	cbz	r2, 8005286 <strncpy+0x16>
 8005278:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800527c:	f803 4b01 	strb.w	r4, [r3], #1
 8005280:	3a01      	subs	r2, #1
 8005282:	2c00      	cmp	r4, #0
 8005284:	d1f7      	bne.n	8005276 <strncpy+0x6>
 8005286:	441a      	add	r2, r3
 8005288:	2100      	movs	r1, #0
 800528a:	4293      	cmp	r3, r2
 800528c:	d100      	bne.n	8005290 <strncpy+0x20>
 800528e:	bd10      	pop	{r4, pc}
 8005290:	f803 1b01 	strb.w	r1, [r3], #1
 8005294:	e7f9      	b.n	800528a <strncpy+0x1a>
	...

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr

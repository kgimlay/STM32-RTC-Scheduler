
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000516c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053a0  080053a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  080053b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080053b4  00020220  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f5f  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274c  00000000  00000000  00030f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  000336e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00034788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c27d  00000000  00000000  00035740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001026a  00000000  00000000  000519bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afffb  00000000  00000000  00061c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004424  00000000  00000000  00111c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800528c 	.word	0x0800528c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	0800528c 	.word	0x0800528c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <initDesktopCommunication>:


/*
 *
 */
void initDesktopCommunication(UART_HandleTypeDef* uartHandle) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000490:	4a07      	ldr	r2, [pc, #28]	; (80004b0 <initDesktopCommunication+0x28>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6013      	str	r3, [r2, #0]
	uartQueue_init(&(_process_queue));
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <initDesktopCommunication+0x2c>)
 8000498:	f000 fc09 	bl	8000cae <uartQueue_init>
	uartQueue_init(&(_report_queue));
 800049c:	4806      	ldr	r0, [pc, #24]	; (80004b8 <initDesktopCommunication+0x30>)
 800049e:	f000 fc06 	bl	8000cae <uartQueue_init>

	// set isInit flag
	_isInit = true;
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <initDesktopCommunication+0x34>)
 80004a4:	2201      	movs	r2, #1
 80004a6:	701a      	strb	r2, [r3, #0]
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000002c 	.word	0x2000002c
 80004b4:	20000030 	.word	0x20000030
 80004b8:	200000bc 	.word	0x200000bc
 80004bc:	20000028 	.word	0x20000028

080004c0 <reportToDesktopApp>:
/*
 *
 */
REPORT_QUEUE_STATUS reportToDesktopApp(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	UART_QUEUE_STATUS queueStatus;
	char message[UART_MESSAGE_SIZE];

	// Compose header and body into one message
	composeMessage(header, body, message);
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	461a      	mov	r2, r3
 80004d0:	6839      	ldr	r1, [r7, #0]
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 fb64 	bl	8000ba0 <composeMessage>

	// disable IRQs from UART to prevent race condition
	if (_uartHandle->Instance == USART1)
 80004d8:	4b1c      	ldr	r3, [pc, #112]	; (800054c <reportToDesktopApp+0x8c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <reportToDesktopApp+0x90>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d103      	bne.n	80004ec <reportToDesktopApp+0x2c>
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 80004e4:	2024      	movs	r0, #36	; 0x24
 80004e6:	f000 fe36 	bl	8001156 <HAL_NVIC_DisableIRQ>
 80004ea:	e008      	b.n	80004fe <reportToDesktopApp+0x3e>
	else if (_uartHandle->Instance == USART2)
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <reportToDesktopApp+0x8c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <reportToDesktopApp+0x94>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d102      	bne.n	80004fe <reportToDesktopApp+0x3e>
		HAL_NVIC_DisableIRQ(USART2_IRQn);
 80004f8:	2025      	movs	r0, #37	; 0x25
 80004fa:	f000 fe2c 	bl	8001156 <HAL_NVIC_DisableIRQ>

	// queue into report queue
	queueStatus = uartQueue_enqueue(&(_report_queue), message);
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	4619      	mov	r1, r3
 8000504:	4814      	ldr	r0, [pc, #80]	; (8000558 <reportToDesktopApp+0x98>)
 8000506:	f000 fc00 	bl	8000d0a <uartQueue_enqueue>
 800050a:	4603      	mov	r3, r0
 800050c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// enable UART IRQs
	if (_uartHandle->Instance == USART1)
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <reportToDesktopApp+0x8c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <reportToDesktopApp+0x90>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d103      	bne.n	8000524 <reportToDesktopApp+0x64>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 800051c:	2024      	movs	r0, #36	; 0x24
 800051e:	f000 fe0c 	bl	800113a <HAL_NVIC_EnableIRQ>
 8000522:	e008      	b.n	8000536 <reportToDesktopApp+0x76>
	else if (_uartHandle->Instance == USART2)
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <reportToDesktopApp+0x8c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <reportToDesktopApp+0x94>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d102      	bne.n	8000536 <reportToDesktopApp+0x76>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000530:	2025      	movs	r0, #37	; 0x25
 8000532:	f000 fe02 	bl	800113a <HAL_NVIC_EnableIRQ>

	// report status of queue operation
	if (queueStatus == UART_QUEUE_FULL)
 8000536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800053a:	2b01      	cmp	r3, #1
 800053c:	d101      	bne.n	8000542 <reportToDesktopApp+0x82>
	{
		return REPORT_FULL;}
 800053e:	2301      	movs	r3, #1
 8000540:	e000      	b.n	8000544 <reportToDesktopApp+0x84>
	else
	{
		return REPORT_QUEUED;
 8000542:	2300      	movs	r3, #0
	}
}
 8000544:	4618      	mov	r0, r3
 8000546:	3730      	adds	r7, #48	; 0x30
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000002c 	.word	0x2000002c
 8000550:	40013800 	.word	0x40013800
 8000554:	40004400 	.word	0x40004400
 8000558:	200000bc 	.word	0x200000bc

0800055c <retrieveFromDesktopApp>:
/*
 *
 */
PROCESS_QUEUE_STATUS retrieveFromDesktopApp(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08c      	sub	sp, #48	; 0x30
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
	UART_QUEUE_STATUS queueStatus;
	char message[UART_MESSAGE_SIZE];

	// disable IRQs from UART to prevent race condition
	if (_uartHandle->Instance == USART1)
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <retrieveFromDesktopApp+0x8c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a1f      	ldr	r2, [pc, #124]	; (80005ec <retrieveFromDesktopApp+0x90>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d103      	bne.n	800057a <retrieveFromDesktopApp+0x1e>
		HAL_NVIC_DisableIRQ(USART1_IRQn);
 8000572:	2024      	movs	r0, #36	; 0x24
 8000574:	f000 fdef 	bl	8001156 <HAL_NVIC_DisableIRQ>
 8000578:	e008      	b.n	800058c <retrieveFromDesktopApp+0x30>
	else if (_uartHandle->Instance == USART2)
 800057a:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <retrieveFromDesktopApp+0x8c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <retrieveFromDesktopApp+0x94>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d102      	bne.n	800058c <retrieveFromDesktopApp+0x30>
		HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000586:	2025      	movs	r0, #37	; 0x25
 8000588:	f000 fde5 	bl	8001156 <HAL_NVIC_DisableIRQ>

	// retrieve message from process queue
	queueStatus = uartQueue_dequeue(&(_process_queue), message);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	4619      	mov	r1, r3
 8000592:	4818      	ldr	r0, [pc, #96]	; (80005f4 <retrieveFromDesktopApp+0x98>)
 8000594:	f000 fbde 	bl	8000d54 <uartQueue_dequeue>
 8000598:	4603      	mov	r3, r0
 800059a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// enable UART IRQs
	if (_uartHandle->Instance == USART1)
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <retrieveFromDesktopApp+0x8c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a11      	ldr	r2, [pc, #68]	; (80005ec <retrieveFromDesktopApp+0x90>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d103      	bne.n	80005b2 <retrieveFromDesktopApp+0x56>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005aa:	2024      	movs	r0, #36	; 0x24
 80005ac:	f000 fdc5 	bl	800113a <HAL_NVIC_EnableIRQ>
 80005b0:	e008      	b.n	80005c4 <retrieveFromDesktopApp+0x68>
	else if (_uartHandle->Instance == USART2)
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <retrieveFromDesktopApp+0x8c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <retrieveFromDesktopApp+0x94>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d102      	bne.n	80005c4 <retrieveFromDesktopApp+0x68>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005be:	2025      	movs	r0, #37	; 0x25
 80005c0:	f000 fdbb 	bl	800113a <HAL_NVIC_EnableIRQ>

	// check that queue wasn't empty
	if (queueStatus == UART_QUEUE_EMPTY)
 80005c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d101      	bne.n	80005d0 <retrieveFromDesktopApp+0x74>
	{
		return PROCESS_EMPTY;
 80005cc:	2301      	movs	r3, #1
 80005ce:	e007      	b.n	80005e0 <retrieveFromDesktopApp+0x84>
	}
	else
	{
		// decompose header and body from message
		decomposeMessage(header, body, message);
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	461a      	mov	r2, r3
 80005d6:	6839      	ldr	r1, [r7, #0]
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 faf7 	bl	8000bcc <decomposeMessage>

		// report status
		return PROCESS_DEQUEUED;
 80005de:	2300      	movs	r3, #0
	}
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3730      	adds	r7, #48	; 0x30
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	40013800 	.word	0x40013800
 80005f0:	40004400 	.word	0x40004400
 80005f4:	20000030 	.word	0x20000030

080005f8 <checkRxTxError>:


/*
 *
 */
bool checkRxTxError(void) {
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	return (_rxError || _txError);
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <checkRxTxError+0x2c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d104      	bne.n	8000610 <checkRxTxError+0x18>
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <checkRxTxError+0x30>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <checkRxTxError+0x1c>
 8000610:	2301      	movs	r3, #1
 8000612:	e000      	b.n	8000616 <checkRxTxError+0x1e>
 8000614:	2300      	movs	r3, #0
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	2000002a 	.word	0x2000002a
 8000628:	20000029 	.word	0x20000029

0800062c <flushReportQueue>:


/*
 *
 */
void flushReportQueue(void) {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	// while the report queue is not empty
	while (!uartQueue_isEmpty(&_report_queue))
 8000630:	e005      	b.n	800063e <flushReportQueue+0x12>
	{
		// pop message from report queue and place in tx buffer
		uartQueue_dequeue(&_report_queue, _txBuffer);
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <flushReportQueue+0x2c>)
 8000634:	4809      	ldr	r0, [pc, #36]	; (800065c <flushReportQueue+0x30>)
 8000636:	f000 fb8d 	bl	8000d54 <uartQueue_dequeue>

		// send message to computer
		_txMessage_Poll();
 800063a:	f000 f877 	bl	800072c <_txMessage_Poll>
	while (!uartQueue_isEmpty(&_report_queue))
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <flushReportQueue+0x30>)
 8000640:	f000 fb9d 	bl	8000d7e <uartQueue_isEmpty>
 8000644:	4603      	mov	r3, r0
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1f0      	bne.n	8000632 <flushReportQueue+0x6>
	}
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000148 	.word	0x20000148
 800065c:	200000bc 	.word	0x200000bc

08000660 <startDesktopAppCommunication>:


/*
 *
 */
void startDesktopAppCommunication(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	_rxMessage_IT();
 8000664:	f000 f84a 	bl	80006fc <_rxMessage_IT>
}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <deskAppRxCompleteISR>:


/*
 *
 */
void deskAppRxCompleteISR(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	// check if queue is not full
	if (!uartQueue_isFull(&_process_queue))
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <deskAppRxCompleteISR+0x38>)
 8000672:	f000 fb90 	bl	8000d96 <uartQueue_isFull>
 8000676:	4603      	mov	r3, r0
 8000678:	f083 0301 	eor.w	r3, r3, #1
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <deskAppRxCompleteISR+0x20>
	{
		// add message to process queue
		uartQueue_enqueue(&_process_queue, _rxBuffer);
 8000682:	4909      	ldr	r1, [pc, #36]	; (80006a8 <deskAppRxCompleteISR+0x3c>)
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <deskAppRxCompleteISR+0x38>)
 8000686:	f000 fb40 	bl	8000d0a <uartQueue_enqueue>
 800068a:	e006      	b.n	800069a <deskAppRxCompleteISR+0x2e>

	// queue is full, report to desktop application to pause transmissions
	else
	{
		// todo: replace with something better
		strncpy(_txBuffer, "\nBUFFER FULL!\n\n", UART_MESSAGE_SIZE);
 800068c:	2220      	movs	r2, #32
 800068e:	4907      	ldr	r1, [pc, #28]	; (80006ac <deskAppRxCompleteISR+0x40>)
 8000690:	4807      	ldr	r0, [pc, #28]	; (80006b0 <deskAppRxCompleteISR+0x44>)
 8000692:	f004 fde7 	bl	8005264 <strncpy>
		_txMessage_IT();
 8000696:	f000 f819 	bl	80006cc <_txMessage_IT>
	}

	// begin receiving again
	_rxMessage_IT();
 800069a:	f000 f82f 	bl	80006fc <_rxMessage_IT>
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000030 	.word	0x20000030
 80006a8:	20000168 	.word	0x20000168
 80006ac:	080052a4 	.word	0x080052a4
 80006b0:	20000148 	.word	0x20000148

080006b4 <deskAppTxCompleteISR>:


/*
 *
 */
void deskAppTxCompleteISR(void) {
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <deskAppErrorISR>:


/*
 *
 */
void deskAppErrorISR(void) {
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <_txMessage_IT>:


/*
 *
 */
void _txMessage_IT(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <_txMessage_IT+0x24>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2220      	movs	r2, #32
 80006d6:	4907      	ldr	r1, [pc, #28]	; (80006f4 <_txMessage_IT+0x28>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 fbb1 	bl	8002e40 <HAL_UART_Transmit_IT>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b01      	cmp	r3, #1
 80006e2:	d102      	bne.n	80006ea <_txMessage_IT+0x1e>
		_txError = true;
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <_txMessage_IT+0x2c>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	20000148 	.word	0x20000148
 80006f8:	20000029 	.word	0x20000029

080006fc <_rxMessage_IT>:


/*
 *
 */
void _rxMessage_IT(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <_rxMessage_IT+0x24>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2220      	movs	r2, #32
 8000706:	4907      	ldr	r1, [pc, #28]	; (8000724 <_rxMessage_IT+0x28>)
 8000708:	4618      	mov	r0, r3
 800070a:	f002 fc2d 	bl	8002f68 <HAL_UART_Receive_IT>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d102      	bne.n	800071a <_rxMessage_IT+0x1e>
		_rxError = true;
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <_rxMessage_IT+0x2c>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000002c 	.word	0x2000002c
 8000724:	20000168 	.word	0x20000168
 8000728:	2000002a 	.word	0x2000002a

0800072c <_txMessage_Poll>:


/*
 *
 */
void _txMessage_Poll(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <_txMessage_Poll+0x24>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	23fa      	movs	r3, #250	; 0xfa
 8000736:	2220      	movs	r2, #32
 8000738:	4906      	ldr	r1, [pc, #24]	; (8000754 <_txMessage_Poll+0x28>)
 800073a:	f002 fafa 	bl	8002d32 <HAL_UART_Transmit>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d102      	bne.n	800074a <_txMessage_Poll+0x1e>
		_txError = true;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <_txMessage_Poll+0x2c>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000002c 	.word	0x2000002c
 8000754:	20000148 	.word	0x20000148
 8000758:	20000029 	.word	0x20000029

0800075c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800076c:	f023 0218 	bic.w	r2, r3, #24
 8000770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4313      	orrs	r3, r2
 8000778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800078e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000792:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4313      	orrs	r3, r2
 800079c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800079e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4013      	ands	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr
	...

080007b8 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_UART_ErrorCallback+0x28>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d006      	beq.n	80007d8 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <HAL_UART_ErrorCallback+0x2c>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d101      	bne.n	80007d8 <HAL_UART_ErrorCallback+0x20>
		deskAppErrorISR();
 80007d4:	f7ff ff74 	bl	80006c0 <deskAppErrorISR>
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40013800 	.word	0x40013800
 80007e4:	40004400 	.word	0x40004400

080007e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a06      	ldr	r2, [pc, #24]	; (8000810 <HAL_UART_TxCpltCallback+0x28>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d006      	beq.n	8000808 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a05      	ldr	r2, [pc, #20]	; (8000814 <HAL_UART_TxCpltCallback+0x2c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d101      	bne.n	8000808 <HAL_UART_TxCpltCallback+0x20>
		deskAppTxCompleteISR();
 8000804:	f7ff ff56 	bl	80006b4 <deskAppTxCompleteISR>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40013800 	.word	0x40013800
 8000814:	40004400 	.word	0x40004400

08000818 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_UART_RxCpltCallback+0x28>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d006      	beq.n	8000838 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <HAL_UART_RxCpltCallback+0x2c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d101      	bne.n	8000838 <HAL_UART_RxCpltCallback+0x20>
		deskAppRxCompleteISR();
 8000834:	f7ff ff1a 	bl	800066c <deskAppRxCompleteISR>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40013800 	.word	0x40013800
 8000844:	40004400 	.word	0x40004400

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f000 fae9 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f82d 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000856:	f000 f8db 	bl	8000a10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800085a:	f000 f883 	bl	8000964 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800085e:	2001      	movs	r0, #1
 8000860:	f000 fed8 	bl	8001614 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  initDesktopCommunication(&huart2);
 8000864:	4811      	ldr	r0, [pc, #68]	; (80008ac <main+0x64>)
 8000866:	f7ff fe0f 	bl	8000488 <initDesktopCommunication>

  // begin listening for messages from desktop
  startDesktopAppCommunication();
 800086a:	f7ff fef9 	bl	8000660 <startDesktopAppCommunication>
  char messageBody[UART_MESSAGE_BODY_SIZE];
  PROCESS_QUEUE_STATUS messageStatus;
  while (1)
  {
	  // check if there was an error in rx or tx
	  if (checkRxTxError())
 800086e:	f7ff fec3 	bl	80005f8 <checkRxTxError>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d000      	beq.n	800087a <main+0x32>
		  while (1) {}
 8000878:	e7fe      	b.n	8000878 <main+0x30>

	  // flush the report queue
	  flushReportQueue();
 800087a:	f7ff fed7 	bl	800062c <flushReportQueue>

	  // check for message in the process queue
	  messageStatus = retrieveFromDesktopApp(messageHeader, messageBody);
 800087e:	1d3a      	adds	r2, r7, #4
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe68 	bl	800055c <retrieveFromDesktopApp>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  // if message present, handle message
	  if (messageStatus == PROCESS_DEQUEUED) {
 8000892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000896:	2b00      	cmp	r3, #0
 8000898:	d1e9      	bne.n	800086e <main+0x26>
		  // echo back to computer
		  reportToDesktopApp(messageHeader, messageBody);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4611      	mov	r1, r2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe0c 	bl	80004c0 <reportToDesktopApp>
	  if (checkRxTxError())
 80008a8:	e7e1      	b.n	800086e <main+0x26>
 80008aa:	bf00      	nop
 80008ac:	20000188 	.word	0x20000188

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09a      	sub	sp, #104	; 0x68
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2248      	movs	r2, #72	; 0x48
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f004 fcc8 	bl	8005254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d6:	f000 fe75 	bl	80015c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ff3e 	bl	800075c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <SystemClock_Config+0xb0>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008e8:	4a1d      	ldr	r2, [pc, #116]	; (8000960 <SystemClock_Config+0xb0>)
 80008ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <SystemClock_Config+0xb0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008fc:	2324      	movs	r3, #36	; 0x24
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000900:	2381      	movs	r3, #129	; 0x81
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000908:	2300      	movs	r3, #0
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800090c:	2360      	movs	r3, #96	; 0x60
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4618      	mov	r0, r3
 800091a:	f001 f93d 	bl	8001b98 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000924:	f000 f881 	bl	8000a2a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000928:	236f      	movs	r3, #111	; 0x6f
 800092a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fca7 	bl	800229c <HAL_RCC_ClockConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000954:	f000 f869 	bl	8000a2a <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3768      	adds	r7, #104	; 0x68
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	58000400 	.word	0x58000400

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 800096a:	4a28      	ldr	r2, [pc, #160]	; (8000a0c <MX_USART2_UART_Init+0xa8>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000970:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000984:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000988:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 800098c:	220c      	movs	r2, #12
 800098e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009aa:	2230      	movs	r2, #48	; 0x30
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009be:	4812      	ldr	r0, [pc, #72]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009c0:	f002 f967 	bl	8002c92 <HAL_UART_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f82e 	bl	8000a2a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009d2:	f004 fb44 	bl	800505e <HAL_UARTEx_SetTxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f825 	bl	8000a2a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009e4:	f004 fb79 	bl	80050da <HAL_UARTEx_SetRxFifoThreshold>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80009ee:	f000 f81c 	bl	8000a2a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0xa4>)
 80009f4:	f004 fafb 	bl	8004fee <HAL_UARTEx_DisableFifoMode>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 80009fe:	f000 f814 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000188 	.word	0x20000188
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff feb6 	bl	8000786 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f7ff feb3 	bl	8000786 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	2002      	movs	r0, #2
 8000a22:	f7ff feb0 	bl	8000786 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2e:	b672      	cpsid	i
}
 8000a30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <Error_Handler+0x8>

08000a34 <LL_AHB2_GRP1_EnableClock>:
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4013      	ands	r3, r2
 8000a56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a58:	68fb      	ldr	r3, [r7, #12]
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a88:	68fb      	ldr	r3, [r7, #12]
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b096      	sub	sp, #88	; 0x58
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2238      	movs	r2, #56	; 0x38
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f004 fbc7 	bl	8005254 <memset>
  if(huart->Instance==USART2)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0x98>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d12e      	bne.n	8000b2e <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000ad8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 ff9c 	bl	8002a1c <HAL_RCCEx_PeriphCLKConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aea:	f7ff ff9e 	bl	8000a2a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000af2:	f7ff ffb7 	bl	8000a64 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff ff9c 	bl	8000a34 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000afc:	230c      	movs	r3, #12
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 fbf3 	bl	8001304 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2025      	movs	r0, #37	; 0x25
 8000b24:	f000 faef 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b28:	2025      	movs	r0, #37	; 0x25
 8000b2a:	f000 fb06 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3758      	adds	r7, #88	; 0x58
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr

08000b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 f9a9 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <USART2_IRQHandler+0x10>)
 8000b92:	f002 fa35 	bl	8003000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000188 	.word	0x20000188

08000ba0 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	221c      	movs	r2, #28
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f004 fb3a 	bl	8005238 <memcpy>
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	3304      	adds	r3, #4
 8000be6:	221c      	movs	r2, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	68b8      	ldr	r0, [r7, #8]
 8000bec:	f004 fb24 	bl	8005238 <memcpy>
}
 8000bf0:	bf00      	nop
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <nextIdx>:


/*
 * Private helper to calculate next index in circular queue.
 */
uint8_t nextIdx(uint8_t index) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	return (index + 1) % QUEUE_SIZE;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	3301      	adds	r3, #1
 8000c06:	425a      	negs	r2, r3
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	f002 0203 	and.w	r2, r2, #3
 8000c10:	bf58      	it	pl
 8000c12:	4253      	negpl	r3, r2
 8000c14:	b2db      	uxtb	r3, r3
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <_enqueue>:

/*
 * Private helper to enqueue a message to the queue.
 */
void _enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	// copy the message to the queue and increment the rear pointer
	memcpy(queue->_queue[queue->_rear], message, QUEUE_BUFFER_SIZE*sizeof(char));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	015b      	lsls	r3, r3, #5
 8000c30:	3308      	adds	r3, #8
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	3304      	adds	r3, #4
 8000c38:	2220      	movs	r2, #32
 8000c3a:	6839      	ldr	r1, [r7, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 fafb 	bl	8005238 <memcpy>
	queue->_rear = nextIdx(queue->_rear);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ffd5 	bl	8000bf8 <nextIdx>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	609a      	str	r2, [r3, #8]
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_dequeue>:

/*
 * Private helper to dequeue a message from the queue.
 */
void _dequeue(UART_Queue* queue, char messageBuffer[QUEUE_BUFFER_SIZE]) {
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
	// copy message from  the queue and increment the front pointer
	strncpy(messageBuffer, queue->_queue[queue->_front], QUEUE_BUFFER_SIZE);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	015b      	lsls	r3, r3, #5
 8000c6e:	3308      	adds	r3, #8
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	3304      	adds	r3, #4
 8000c76:	2220      	movs	r2, #32
 8000c78:	4619      	mov	r1, r3
 8000c7a:	6838      	ldr	r0, [r7, #0]
 8000c7c:	f004 faf2 	bl	8005264 <strncpy>
	queue->_front = nextIdx(queue->_front);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff ffb6 	bl	8000bf8 <nextIdx>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	605a      	str	r2, [r3, #4]

	// set isEmpty flag if necessary
	if (queue->_front == queue->_rear)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d102      	bne.n	8000ca6 <_dequeue+0x48>
		queue->_isEmpty = true;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	701a      	strb	r2, [r3, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <uartQueue_init>:

/*
 * Initializes a UART_Queue structure.
 * Call before attempting to operate on the queue.
 */
void uartQueue_init(UART_Queue* queue) {
 8000cae:	b480      	push	{r7}
 8000cb0:	b085      	sub	sp, #20
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	// operation variables
	int row, col;

	// reset all operation variables
	queue->_isEmpty = true;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
	queue->_front = 0;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
	queue->_rear = 0;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]

	// ensure that the queue messages are empty
	for (row = 0; row < QUEUE_SIZE; row++)
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	e014      	b.n	8000cf8 <uartQueue_init+0x4a>
		for (col = 0; col < QUEUE_BUFFER_SIZE; col++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	e00b      	b.n	8000cec <uartQueue_init+0x3e>
			queue->_queue[row][col] = '\0';
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	015b      	lsls	r3, r3, #5
 8000cda:	441a      	add	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4413      	add	r3, r2
 8000ce0:	330c      	adds	r3, #12
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
		for (col = 0; col < QUEUE_BUFFER_SIZE; col++)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	2b1f      	cmp	r3, #31
 8000cf0:	ddf0      	ble.n	8000cd4 <uartQueue_init+0x26>
	for (row = 0; row < QUEUE_SIZE; row++)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	dde7      	ble.n	8000cce <uartQueue_init+0x20>
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <uartQueue_enqueue>:

/*
 * Enqueue a message.
 * Return success if enqueueing successful, or full if the queue is full.
 */
UART_QUEUE_STATUS uartQueue_enqueue(UART_Queue* queue, char message[QUEUE_BUFFER_SIZE]) {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (uartQueue_isEmpty(queue)) {
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f832 	bl	8000d7e <uartQueue_isEmpty>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <uartQueue_enqueue+0x28>
		// set not empty
		queue->_isEmpty = false;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]

		// enqueue
		_enqueue(queue, message);
 8000d26:	6839      	ldr	r1, [r7, #0]
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff79 	bl	8000c20 <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e00c      	b.n	8000d4c <uartQueue_enqueue+0x42>
	}

	// case that queue is full
	else if (uartQueue_isFull(queue)) {
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f000 f82f 	bl	8000d96 <uartQueue_isFull>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <uartQueue_enqueue+0x38>
		// report
		return UART_QUEUE_FULL;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e004      	b.n	8000d4c <uartQueue_enqueue+0x42>
	}

	// queue is not full, enqueue
	else {
		// enqueue
		_enqueue(queue, message);
 8000d42:	6839      	ldr	r1, [r7, #0]
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff6b 	bl	8000c20 <_enqueue>

		// and report
		return UART_QUEUE_OKAY;
 8000d4a:	2300      	movs	r3, #0
	}
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <uartQueue_dequeue>:
/*
 * Dequeue a message.
 * Return success and message if message present, or empty and null if queue
 * is empty.
 */
UART_QUEUE_STATUS uartQueue_dequeue(UART_Queue* queue, char messageBuffer[QUEUE_BUFFER_SIZE]) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
	// operation variables

	// case that queue is empty
	if (queue->_isEmpty) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <uartQueue_dequeue+0x18>
		return UART_QUEUE_EMPTY;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e004      	b.n	8000d76 <uartQueue_dequeue+0x22>
	}

	// case that queue is not empty
	else {
		_dequeue(queue, messageBuffer);
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ff75 	bl	8000c5e <_dequeue>
		return UART_QUEUE_OKAY;
 8000d74:	2300      	movs	r3, #0
	}
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <uartQueue_isEmpty>:

/*
 *
 */
bool uartQueue_isEmpty(UART_Queue* queue) {
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
	return (queue->_isEmpty);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b2db      	uxtb	r3, r3
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <uartQueue_isFull>:

/*
 * Helper to check if a queue is empty.
 */
bool uartQueue_isFull(UART_Queue* queue) {
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	return (!uartQueue_isEmpty(queue) && queue->_front == queue->_rear);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffed 	bl	8000d7e <uartQueue_isEmpty>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f083 0301 	eor.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d007      	beq.n	8000dc0 <uartQueue_isFull+0x2a>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d101      	bne.n	8000dc0 <uartQueue_isFull+0x2a>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <uartQueue_isFull+0x2c>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	b2db      	uxtb	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd4:	f7ff fb52 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd8:	480c      	ldr	r0, [pc, #48]	; (8000e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dda:	490d      	ldr	r1, [pc, #52]	; (8000e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ddc:	4a0d      	ldr	r2, [pc, #52]	; (8000e14 <LoopForever+0xe>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de0:	e002      	b.n	8000de8 <LoopCopyDataInit>

08000de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de6:	3304      	adds	r3, #4

08000de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dec:	d3f9      	bcc.n	8000de2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df0:	4c0a      	ldr	r4, [pc, #40]	; (8000e1c <LoopForever+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df4:	e001      	b.n	8000dfa <LoopFillZerobss>

08000df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df8:	3204      	adds	r2, #4

08000dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dfc:	d3fb      	bcc.n	8000df6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dfe:	f004 f9f7 	bl	80051f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e02:	f7ff fd21 	bl	8000848 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   r0, =_estack
 8000e08:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e14:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8000e18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e1c:	20000220 	.word	0x20000220

08000e20 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f000 f95e 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e34:	f001 fc14 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <HAL_Init+0x3c>)
 8000e3c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f810 	bl	8000e64 <HAL_InitTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	71fb      	strb	r3, [r7, #7]
 8000e4e:	e001      	b.n	8000e54 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e50:	f7ff fe20 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d024      	beq.n	8000ec2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e78:	f001 fbf2 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_InitTick+0x6c>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f96e 	bl	8001172 <HAL_SYSTICK_Config>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10f      	bne.n	8000ebc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	d809      	bhi.n	8000eb6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eaa:	f000 f92c 	bl	8001106 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <HAL_InitTick+0x70>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e007      	b.n	8000ec6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	73fb      	strb	r3, [r7, #15]
 8000eba:	e004      	b.n	8000ec6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e001      	b.n	8000ec6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000004 	.word	0x20000004

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <HAL_IncTick+0x20>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	2000021c 	.word	0x2000021c

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <HAL_GetTick+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	2000021c 	.word	0x2000021c

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <__NVIC_EnableIRQ+0x34>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db12      	blt.n	8000fe4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	490a      	ldr	r1, [pc, #40]	; (8000ff0 <__NVIC_DisableIRQ+0x44>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	3320      	adds	r3, #32
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd8:	f3bf 8f4f 	dsb	sy
}
 8000fdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fde:	f3bf 8f6f 	isb	sy
}
 8000fe2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d0:	f7ff ff90 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff09 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff20 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff92 	bl	8001048 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff61 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff13 	bl	8000f74 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff21 	bl	8000fac <__NVIC_DisableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ff96 	bl	80010ac <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e04f      	b.n	800123c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d008      	beq.n	80011ba <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2204      	movs	r2, #4
 80011ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e040      	b.n	800123c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 020e 	bic.w	r2, r2, #14
 80011c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f003 021c 	and.w	r2, r3, #28
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001206:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00c      	beq.n	800122a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800121e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001228:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d005      	beq.n	800126a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2204      	movs	r2, #4
 8001262:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e047      	b.n	80012fa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 020e 	bic.w	r2, r2, #14
 8001278:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0201 	bic.w	r2, r2, #1
 8001288:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001298:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f003 021c 	and.w	r2, r3, #28
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	2101      	movs	r1, #1
 80012a8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00c      	beq.n	80012da <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
    }
  }
  return status;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	e140      	b.n	8001596 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	2101      	movs	r1, #1
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8132 	beq.w	8001590 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d005      	beq.n	8001344 <HAL_GPIO_Init+0x40>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d130      	bne.n	80013a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137a:	2201      	movs	r2, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	f003 0201 	and.w	r2, r3, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d017      	beq.n	80013e2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689a      	ldr	r2, [r3, #8]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d123      	bne.n	8001436 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	08da      	lsrs	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3208      	adds	r2, #8
 80013f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0307 	and.w	r3, r3, #7
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	08da      	lsrs	r2, r3, #3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3208      	adds	r2, #8
 8001430:	6939      	ldr	r1, [r7, #16]
 8001432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0203 	and.w	r2, r3, #3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 808c 	beq.w	8001590 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001478:	4a4e      	ldr	r2, [pc, #312]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	3302      	adds	r3, #2
 8001480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	2207      	movs	r2, #7
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014a2:	d00d      	beq.n	80014c0 <HAL_GPIO_Init+0x1bc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a44      	ldr	r2, [pc, #272]	; (80015b8 <HAL_GPIO_Init+0x2b4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d007      	beq.n	80014bc <HAL_GPIO_Init+0x1b8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a43      	ldr	r2, [pc, #268]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_GPIO_Init+0x1b4>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e004      	b.n	80014c2 <HAL_GPIO_Init+0x1be>
 80014b8:	2307      	movs	r3, #7
 80014ba:	e002      	b.n	80014c2 <HAL_GPIO_Init+0x1be>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_GPIO_Init+0x1be>
 80014c0:	2300      	movs	r3, #0
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	f002 0203 	and.w	r2, r2, #3
 80014c8:	0092      	lsls	r2, r2, #2
 80014ca:	4093      	lsls	r3, r2
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014d2:	4938      	ldr	r1, [pc, #224]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014e0:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001504:	4a2e      	ldr	r2, [pc, #184]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800150a:	4b2d      	ldr	r3, [pc, #180]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800152e:	4a24      	ldr	r2, [pc, #144]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 8001536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800153a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800155a:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 8001564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001568:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_GPIO_Init+0x2bc>)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f47f aeb7 	bne.w	8001314 <HAL_GPIO_Init+0x10>
  }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40010000 	.word	0x40010000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	48000800 	.word	0x48000800
 80015c0:	58000800 	.word	0x58000800

080015c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a03      	ldr	r2, [pc, #12]	; (80015dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	58000400 	.word	0x58000400

080015e0 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <LL_PWR_EnableBootC2+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <LL_PWR_EnableBootC2+0x18>)
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	58000400 	.word	0x58000400

080015fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_PWREx_GetVoltageRange+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	58000400 	.word	0x58000400

08001614 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 800161c:	f7ff ffe0 	bl	80015e0 <LL_PWR_EnableBootC2>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001638:	d101      	bne.n	800163e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	58000400 	.word	0x58000400

0800164c <LL_RCC_HSE_EnableTcxo>:
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800165a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <LL_RCC_HSE_DisableTcxo>:
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001696:	d101      	bne.n	800169c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <LL_RCC_HSE_Enable>:
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80016aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <LL_RCC_HSE_Disable>:
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr

080016de <LL_RCC_HSE_IsReady>:
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016f0:	d101      	bne.n	80016f6 <LL_RCC_HSE_IsReady+0x18>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <LL_RCC_HSE_IsReady+0x1a>
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <LL_RCC_HSI_Enable>:
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <LL_RCC_HSI_Disable>:
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <LL_RCC_HSI_IsReady>:
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174a:	d101      	bne.n	8001750 <LL_RCC_HSI_IsReady+0x18>
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <LL_RCC_HSI_IsReady+0x1a>
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <LL_RCC_HSI_SetCalibTrimming>:
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	061b      	lsls	r3, r3, #24
 8001770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b02      	cmp	r3, #2
 8001794:	d101      	bne.n	800179a <LL_RCC_LSE_IsReady+0x18>
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <LL_RCC_LSE_IsReady+0x1a>
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d101      	bne.n	80017fc <LL_RCC_LSI_IsReady+0x18>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_RCC_LSI_IsReady+0x1a>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6013      	str	r3, [r2, #0]
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6013      	str	r3, [r2, #0]
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b02      	cmp	r3, #2
 800184e:	d101      	bne.n	8001854 <LL_RCC_MSI_IsReady+0x16>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <LL_RCC_MSI_IsReady+0x18>
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b08      	cmp	r3, #8
 800186e:	d101      	bne.n	8001874 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001870:	2301      	movs	r3, #1
 8001872:	e000      	b.n	8001876 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f023 0203 	bic.w	r2, r3, #3
 80018e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	608b      	str	r3, [r1, #8]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4313      	orrs	r3, r2
 8001952:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001970:	f023 020f 	bic.w	r2, r3, #15
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800197c:	4313      	orrs	r3, r2
 800197e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800199e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a7e:	d101      	bne.n	8001a84 <LL_RCC_PLL_IsReady+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_RCC_PLL_IsReady+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr

08001a8e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 0303 	and.w	r3, r3, #3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afa:	d101      	bne.n	8001b00 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b1e:	d101      	bne.n	8001b24 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d101      	bne.n	8001b48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b64:	d101      	bne.n	8001b6a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b86:	d101      	bne.n	8001b8c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e36f      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001baa:	f7ff fea6 	bl	80018fa <LL_RCC_GetSysClkSource>
 8001bae:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb0:	f7ff ff8f 	bl	8001ad2 <LL_RCC_PLL_GetMainSource>
 8001bb4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80c4 	beq.w	8001d4c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x3e>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d176      	bne.n	8001cbe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d173      	bne.n	8001cbe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e353      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_RCC_OscConfig+0x68>
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfe:	e006      	b.n	8001c0e <HAL_RCC_OscConfig+0x76>
 8001c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c08:	091b      	lsrs	r3, r3, #4
 8001c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d222      	bcs.n	8001c58 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fd5a 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e331      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fe2b 	bl	80018ac <LL_RCC_MSI_SetCalibTrimming>
 8001c56:	e021      	b.n	8001c9c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c62:	f043 0308 	orr.w	r3, r3, #8
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fe12 	bl	80018ac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fd1f 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e2f6      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c9c:	f000 fce0 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4aa7      	ldr	r2, [pc, #668]	; (8001f40 <HAL_RCC_OscConfig+0x3a8>)
 8001ca4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001ca6:	4ba7      	ldr	r3, [pc, #668]	; (8001f44 <HAL_RCC_OscConfig+0x3ac>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f8da 	bl	8000e64 <HAL_InitTick>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001cb4:	7cfb      	ldrb	r3, [r7, #19]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d047      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001cba:	7cfb      	ldrb	r3, [r7, #19]
 8001cbc:	e2e5      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d02c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cc6:	f7ff fd9e 	bl	8001806 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cca:	f7ff f917 	bl	8000efc <HAL_GetTick>
 8001cce:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f913 	bl	8000efc <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e2d2      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ce4:	f7ff fdab 	bl	800183e <LL_RCC_MSI_IsReady>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f1      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fdc7 	bl	80018ac <LL_RCC_MSI_SetCalibTrimming>
 8001d1e:	e015      	b.n	8001d4c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d20:	f7ff fd7f 	bl	8001822 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d24:	f7ff f8ea 	bl	8000efc <HAL_GetTick>
 8001d28:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f8e6 	bl	8000efc <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e2a5      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d3e:	f7ff fd7e 	bl	800183e <LL_RCC_MSI_IsReady>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f1      	bne.n	8001d2c <HAL_RCC_OscConfig+0x194>
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d4a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d058      	beq.n	8001e0a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d005      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1d2>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	d108      	bne.n	8001d76 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d105      	bne.n	8001d76 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d14b      	bne.n	8001e0a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e289      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x204>
 8001d96:	f7ff fc86 	bl	80016a6 <LL_RCC_HSE_Enable>
 8001d9a:	e00d      	b.n	8001db8 <HAL_RCC_OscConfig+0x220>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001da4:	d104      	bne.n	8001db0 <HAL_RCC_OscConfig+0x218>
 8001da6:	f7ff fc51 	bl	800164c <LL_RCC_HSE_EnableTcxo>
 8001daa:	f7ff fc7c 	bl	80016a6 <LL_RCC_HSE_Enable>
 8001dae:	e003      	b.n	8001db8 <HAL_RCC_OscConfig+0x220>
 8001db0:	f7ff fc87 	bl	80016c2 <LL_RCC_HSE_Disable>
 8001db4:	f7ff fc58 	bl	8001668 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d012      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f89c 	bl	8000efc <HAL_GetTick>
 8001dc4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f898 	bl	8000efc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e257      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dda:	f7ff fc80 	bl	80016de <LL_RCC_HSE_IsReady>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f1      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x230>
 8001de4:	e011      	b.n	8001e0a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff f889 	bl	8000efc <HAL_GetTick>
 8001dea:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dee:	f7ff f885 	bl	8000efc <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b64      	cmp	r3, #100	; 0x64
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e244      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e00:	f7ff fc6d 	bl	80016de <LL_RCC_HSE_IsReady>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f1      	bne.n	8001dee <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d046      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x290>
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d10e      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d10b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e22a      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fc8e 	bl	800175a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e3e:	e031      	b.n	8001ea4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d019      	beq.n	8001e7c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	f7ff fc5a 	bl	8001700 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f856 	bl	8000efc <HAL_GetTick>
 8001e50:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff f852 	bl	8000efc <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e211      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e66:	f7ff fc67 	bl	8001738 <LL_RCC_HSI_IsReady>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f1      	beq.n	8001e54 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fc70 	bl	800175a <LL_RCC_HSI_SetCalibTrimming>
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7c:	f7ff fc4e 	bl	800171c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f83c 	bl	8000efc <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e88:	f7ff f838 	bl	8000efc <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e1f7      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e9a:	f7ff fc4d 	bl	8001738 <LL_RCC_HSI_IsReady>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f1      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d06e      	beq.n	8001f8e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d056      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d031      	beq.n	8001f34 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d006      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e1d0      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d013      	beq.n	8001f1a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ef2:	f7ff fc67 	bl	80017c4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef6:	f7ff f801 	bl	8000efc <HAL_GetTick>
 8001efa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efe:	f7fe fffd 	bl	8000efc <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b11      	cmp	r3, #17
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e1bc      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001f10:	f7ff fc68 	bl	80017e4 <LL_RCC_LSI_IsReady>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f1      	bne.n	8001efe <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f22:	f023 0210 	bic.w	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f34:	f7ff fc36 	bl	80017a4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7fe ffe0 	bl	8000efc <HAL_GetTick>
 8001f3c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f3e:	e00c      	b.n	8001f5a <HAL_RCC_OscConfig+0x3c2>
 8001f40:	20000000 	.word	0x20000000
 8001f44:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7fe ffd8 	bl	8000efc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b11      	cmp	r3, #17
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e197      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f5a:	f7ff fc43 	bl	80017e4 <LL_RCC_LSI_IsReady>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f1      	beq.n	8001f48 <HAL_RCC_OscConfig+0x3b0>
 8001f64:	e013      	b.n	8001f8e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	f7ff fc2d 	bl	80017c4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe ffc7 	bl	8000efc <HAL_GetTick>
 8001f6e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7fe ffc3 	bl	8000efc <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b11      	cmp	r3, #17
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e182      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f84:	f7ff fc2e 	bl	80017e4 <LL_RCC_LSI_IsReady>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f1      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80d8 	beq.w	800214c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f9c:	f7ff fb44 	bl	8001628 <LL_PWR_IsEnabledBkUpAccess>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d113      	bne.n	8001fce <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001fa6:	f7ff fb0d 	bl	80015c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001faa:	f7fe ffa7 	bl	8000efc <HAL_GetTick>
 8001fae:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb2:	f7fe ffa3 	bl	8000efc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e162      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fc4:	f7ff fb30 	bl	8001628 <LL_PWR_IsEnabledBkUpAccess>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f1      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d07b      	beq.n	80020ce <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b85      	cmp	r3, #133	; 0x85
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7fe ff7f 	bl	8000efc <HAL_GetTick>
 8001ffe:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7fe ff71 	bl	8000efc <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e12e      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800202c:	f7ff fba9 	bl	8001782 <LL_RCC_LSE_IsReady>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0ef      	beq.n	8002016 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b81      	cmp	r3, #129	; 0x81
 800203c:	d003      	beq.n	8002046 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b85      	cmp	r3, #133	; 0x85
 8002044:	d121      	bne.n	800208a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe ff59 	bl	8000efc <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800204c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe ff4b 	bl	8000efc <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e108      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ec      	beq.n	8002062 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002088:	e060      	b.n	800214c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe ff37 	bl	8000efc <HAL_GetTick>
 800208e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe ff29 	bl	8000efc <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0e6      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1ec      	bne.n	80020a6 <HAL_RCC_OscConfig+0x50e>
 80020cc:	e03e      	b.n	800214c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ff15 	bl	8000efc <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020e8:	e00a      	b.n	8002100 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ea:	f7fe ff07 	bl	8000efc <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0c4      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002108:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ec      	bne.n	80020ea <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7fe fef4 	bl	8000efc <HAL_GetTick>
 8002114:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002122:	f023 0301 	bic.w	r3, r3, #1
 8002126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe fee6 	bl	8000efc <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e0a3      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002142:	f7ff fb1e 	bl	8001782 <LL_RCC_LSE_IsReady>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ef      	bne.n	800212c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 8099 	beq.w	8002288 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d06c      	beq.n	8002236 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	2b02      	cmp	r3, #2
 8002162:	d14b      	bne.n	80021fc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002164:	f7ff fc74 	bl	8001a50 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe fec8 	bl	8000efc <HAL_GetTick>
 800216c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7fe fec4 	bl	8000efc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b0a      	cmp	r3, #10
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e083      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002182:	f7ff fc73 	bl	8001a6c <LL_RCC_PLL_IsReady>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f1      	bne.n	8002170 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	4b40      	ldr	r3, [pc, #256]	; (8002294 <HAL_RCC_OscConfig+0x6fc>)
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800219e:	4311      	orrs	r1, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021a4:	0212      	lsls	r2, r2, #8
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021b8:	430a      	orrs	r2, r1
 80021ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021be:	4313      	orrs	r3, r2
 80021c0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c2:	f7ff fc37 	bl	8001a34 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fe91 	bl	8000efc <HAL_GetTick>
 80021da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe fe8d 	bl	8000efc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b0a      	cmp	r3, #10
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e04c      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80021f0:	f7ff fc3c 	bl	8001a6c <LL_RCC_PLL_IsReady>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0f1      	beq.n	80021de <HAL_RCC_OscConfig+0x646>
 80021fa:	e045      	b.n	8002288 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	f7ff fc28 	bl	8001a50 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fe7c 	bl	8000efc <HAL_GetTick>
 8002204:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fe78 	bl	8000efc <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b0a      	cmp	r3, #10
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e037      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800221a:	f7ff fc27 	bl	8001a6c <LL_RCC_PLL_IsReady>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f1      	bne.n	8002208 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222e:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_RCC_OscConfig+0x700>)
 8002230:	4013      	ands	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
 8002234:	e028      	b.n	8002288 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e023      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	429a      	cmp	r2, r3
 8002256:	d115      	bne.n	8002284 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	429a      	cmp	r2, r3
 8002264:	d10e      	bne.n	8002284 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	429a      	cmp	r2, r3
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	11c1808c 	.word	0x11c1808c
 8002298:	eefefffc 	.word	0xeefefffc

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e12c      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b98      	ldr	r3, [pc, #608]	; (8002514 <HAL_RCC_ClockConfig+0x278>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d91b      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b95      	ldr	r3, [pc, #596]	; (8002514 <HAL_RCC_ClockConfig+0x278>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4993      	ldr	r1, [pc, #588]	; (8002514 <HAL_RCC_ClockConfig+0x278>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ce:	f7fe fe15 	bl	8000efc <HAL_GetTick>
 80022d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022d6:	f7fe fe11 	bl	8000efc <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e110      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e8:	4b8a      	ldr	r3, [pc, #552]	; (8002514 <HAL_RCC_ClockConfig+0x278>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d1ef      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fb02 	bl	8001910 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800230c:	f7fe fdf6 	bl	8000efc <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002314:	f7fe fdf2 	bl	8000efc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0f1      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002326:	f7ff fbdf 	bl	8001ae8 <LL_RCC_IsActiveFlag_HPRE>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f1      	beq.n	8002314 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d016      	beq.n	800236a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff faf8 	bl	8001936 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002346:	f7fe fdd9 	bl	8000efc <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800234e:	f7fe fdd5 	bl	8000efc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0d4      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002360:	f7ff fbd3 	bl	8001b0a <LL_RCC_IsActiveFlag_C2HPRE>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f1      	beq.n	800234e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff faf0 	bl	8001960 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002380:	f7fe fdbc 	bl	8000efc <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002388:	f7fe fdb8 	bl	8000efc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0b7      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800239a:	f7ff fbc8 	bl	8001b2e <LL_RCC_IsActiveFlag_SHDHPRE>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f1      	beq.n	8002388 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fae9 	bl	800198c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023ba:	f7fe fd9f 	bl	8000efc <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023c2:	f7fe fd9b 	bl	8000efc <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e09a      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023d4:	f7ff fbbd 	bl	8001b52 <LL_RCC_IsActiveFlag_PPRE1>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f1      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d017      	beq.n	800241a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fade 	bl	80019b2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023f6:	f7fe fd81 	bl	8000efc <HAL_GetTick>
 80023fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023fe:	f7fe fd7d 	bl	8000efc <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e07c      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002410:	f7ff fbb0 	bl	8001b74 <LL_RCC_IsActiveFlag_PPRE2>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f1      	beq.n	80023fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d043      	beq.n	80024ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d106      	bne.n	800243c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800242e:	f7ff f956 	bl	80016de <LL_RCC_HSE_IsReady>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11e      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e066      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002444:	f7ff fb12 	bl	8001a6c <LL_RCC_PLL_IsReady>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d113      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e05b      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800245a:	f7ff f9f0 	bl	800183e <LL_RCC_MSI_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e050      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002468:	f7ff f966 	bl	8001738 <LL_RCC_HSI_IsReady>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e049      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fa2a 	bl	80018d4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002480:	f7fe fd3c 	bl	8000efc <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe fd38 	bl	8000efc <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e035      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	f7ff fa2c 	bl	80018fa <LL_RCC_GetSysClkSource>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d1ec      	bne.n	8002488 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x278>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d21b      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_ClockConfig+0x278>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 0207 	bic.w	r2, r3, #7
 80024c4:	4913      	ldr	r1, [pc, #76]	; (8002514 <HAL_RCC_ClockConfig+0x278>)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fd16 	bl	8000efc <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024d4:	f7fe fd12 	bl	8000efc <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e011      	b.n	800250a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x278>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1ef      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024f4:	f000 f8b4 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4a07      	ldr	r2, [pc, #28]	; (8002518 <HAL_RCC_ClockConfig+0x27c>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <HAL_RCC_ClockConfig+0x280>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fcae 	bl	8000e64 <HAL_InitTick>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	58004000 	.word	0x58004000
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	f7ff f9e4 	bl	80018fa <LL_RCC_GetSysClkSource>
 8002532:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002534:	f7ff facd 	bl	8001ad2 <LL_RCC_PLL_GetMainSource>
 8002538:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x2c>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b0c      	cmp	r3, #12
 8002544:	d139      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d136      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800254c:	f7ff f987 	bl	800185e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d115      	bne.n	8002582 <HAL_RCC_GetSysClockFreq+0x62>
 8002556:	f7ff f982 	bl	800185e <LL_RCC_MSI_IsEnabledRangeSelect>
 800255a:	4603      	mov	r3, r0
 800255c:	2b01      	cmp	r3, #1
 800255e:	d106      	bne.n	800256e <HAL_RCC_GetSysClockFreq+0x4e>
 8002560:	f7ff f98d 	bl	800187e <LL_RCC_MSI_GetRange>
 8002564:	4603      	mov	r3, r0
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	e005      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x5a>
 800256e:	f7ff f991 	bl	8001894 <LL_RCC_MSI_GetRangeAfterStandby>
 8002572:	4603      	mov	r3, r0
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	4a36      	ldr	r2, [pc, #216]	; (8002654 <HAL_RCC_GetSysClockFreq+0x134>)
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	e014      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x8c>
 8002582:	f7ff f96c 	bl	800185e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002586:	4603      	mov	r3, r0
 8002588:	2b01      	cmp	r3, #1
 800258a:	d106      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x7a>
 800258c:	f7ff f977 	bl	800187e <LL_RCC_MSI_GetRange>
 8002590:	4603      	mov	r3, r0
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	e005      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x86>
 800259a:	f7ff f97b 	bl	8001894 <LL_RCC_MSI_GetRangeAfterStandby>
 800259e:	4603      	mov	r3, r0
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <HAL_RCC_GetSysClockFreq+0x134>)
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d115      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025b8:	e012      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_RCC_GetSysClockFreq+0x138>)
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e00c      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d109      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025cc:	f7ff f85a 	bl	8001684 <LL_RCC_HSE_IsEnabledDiv2>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d102      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCC_GetSysClockFreq+0x138>)
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e001      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <HAL_RCC_GetSysClockFreq+0x13c>)
 80025de:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	f7ff f98b 	bl	80018fa <LL_RCC_GetSysClkSource>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d12f      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80025ea:	f7ff fa72 	bl	8001ad2 <LL_RCC_PLL_GetMainSource>
 80025ee:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d003      	beq.n	80025fe <HAL_RCC_GetSysClockFreq+0xde>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d003      	beq.n	8002604 <HAL_RCC_GetSysClockFreq+0xe4>
 80025fc:	e00d      	b.n	800261a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <HAL_RCC_GetSysClockFreq+0x138>)
 8002600:	60fb      	str	r3, [r7, #12]
        break;
 8002602:	e00d      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002604:	f7ff f83e 	bl	8001684 <LL_RCC_HSE_IsEnabledDiv2>
 8002608:	4603      	mov	r3, r0
 800260a:	2b01      	cmp	r3, #1
 800260c:	d102      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_GetSysClockFreq+0x138>)
 8002610:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002612:	e005      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002616:	60fb      	str	r3, [r7, #12]
        break;
 8002618:	e002      	b.n	8002620 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	60fb      	str	r3, [r7, #12]
        break;
 800261e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002620:	f7ff fa35 	bl	8001a8e <LL_RCC_PLL_GetN>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	fb03 f402 	mul.w	r4, r3, r2
 800262c:	f7ff fa46 	bl	8001abc <LL_RCC_PLL_GetDivider>
 8002630:	4603      	mov	r3, r0
 8002632:	091b      	lsrs	r3, r3, #4
 8002634:	3301      	adds	r3, #1
 8002636:	fbb4 f4f3 	udiv	r4, r4, r3
 800263a:	f7ff fa34 	bl	8001aa6 <LL_RCC_PLL_GetR>
 800263e:	4603      	mov	r3, r0
 8002640:	0f5b      	lsrs	r3, r3, #29
 8002642:	3301      	adds	r3, #1
 8002644:	fbb4 f3f3 	udiv	r3, r4, r3
 8002648:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800264a:	697b      	ldr	r3, [r7, #20]
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	08005330 	.word	0x08005330
 8002658:	00f42400 	.word	0x00f42400
 800265c:	01e84800 	.word	0x01e84800

08002660 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b598      	push	{r3, r4, r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002664:	f7ff ff5c 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8002668:	4604      	mov	r4, r0
 800266a:	f7ff f9b5 	bl	80019d8 <LL_RCC_GetAHBPrescaler>
 800266e:	4603      	mov	r3, r0
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	4a03      	ldr	r2, [pc, #12]	; (8002684 <HAL_RCC_GetHCLKFreq+0x24>)
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd98      	pop	{r3, r4, r7, pc}
 8002684:	080052d0 	.word	0x080052d0

08002688 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b598      	push	{r3, r4, r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800268c:	f7ff ffe8 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8002690:	4604      	mov	r4, r0
 8002692:	f7ff f9b9 	bl	8001a08 <LL_RCC_GetAPB1Prescaler>
 8002696:	4603      	mov	r3, r0
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	bd98      	pop	{r3, r4, r7, pc}
 80026a8:	08005310 	.word	0x08005310

080026ac <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ac:	b598      	push	{r3, r4, r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026b0:	f7ff ffd6 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026b4:	4604      	mov	r4, r0
 80026b6:	f7ff f9b2 	bl	8001a1e <LL_RCC_GetAPB2Prescaler>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0adb      	lsrs	r3, r3, #11
 80026be:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd98      	pop	{r3, r4, r7, pc}
 80026cc:	08005310 	.word	0x08005310

080026d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	4a10      	ldr	r2, [pc, #64]	; (8002724 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80026e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80026e8:	f7ff f981 	bl	80019ee <LL_RCC_GetAHB3Prescaler>
 80026ec:	4603      	mov	r3, r0
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0c9c      	lsrs	r4, r3, #18
 800270c:	f7fe ff76 	bl	80015fc <HAL_PWREx_GetVoltageRange>
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	4620      	mov	r0, r4
 8002716:	f000 f80b 	bl	8002730 <RCC_SetFlashLatency>
 800271a:	4603      	mov	r3, r0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	08005330 	.word	0x08005330
 8002728:	080052d0 	.word	0x080052d0
 800272c:	431bde83 	.word	0x431bde83

08002730 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800273a:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <RCC_SetFlashLatency+0xf4>)
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002744:	6018      	str	r0, [r3, #0]
 8002746:	3304      	adds	r3, #4
 8002748:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800274a:	4a37      	ldr	r2, [pc, #220]	; (8002828 <RCC_SetFlashLatency+0xf8>)
 800274c:	f107 0318 	add.w	r3, r7, #24
 8002750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002754:	6018      	str	r0, [r3, #0]
 8002756:	3304      	adds	r3, #4
 8002758:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800275a:	4a34      	ldr	r2, [pc, #208]	; (800282c <RCC_SetFlashLatency+0xfc>)
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	ca07      	ldmia	r2, {r0, r1, r2}
 8002762:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002770:	d11b      	bne.n	80027aa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002772:	2300      	movs	r3, #0
 8002774:	633b      	str	r3, [r7, #48]	; 0x30
 8002776:	e014      	b.n	80027a2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	3338      	adds	r3, #56	; 0x38
 800277e:	443b      	add	r3, r7
 8002780:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002784:	461a      	mov	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4293      	cmp	r3, r2
 800278a:	d807      	bhi.n	800279c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	3338      	adds	r3, #56	; 0x38
 8002792:	443b      	add	r3, r7
 8002794:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800279a:	e021      	b.n	80027e0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	3301      	adds	r3, #1
 80027a0:	633b      	str	r3, [r7, #48]	; 0x30
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d9e7      	bls.n	8002778 <RCC_SetFlashLatency+0x48>
 80027a8:	e01a      	b.n	80027e0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ae:	e014      	b.n	80027da <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	3338      	adds	r3, #56	; 0x38
 80027b6:	443b      	add	r3, r7
 80027b8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d807      	bhi.n	80027d4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	3338      	adds	r3, #56	; 0x38
 80027ca:	443b      	add	r3, r7
 80027cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027d2:	e005      	b.n	80027e0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	3301      	adds	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d9e7      	bls.n	80027b0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <RCC_SetFlashLatency+0x100>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 0207 	bic.w	r2, r3, #7
 80027e8:	4911      	ldr	r1, [pc, #68]	; (8002830 <RCC_SetFlashLatency+0x100>)
 80027ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027f0:	f7fe fb84 	bl	8000efc <HAL_GetTick>
 80027f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027f6:	e008      	b.n	800280a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027f8:	f7fe fb80 	bl	8000efc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e007      	b.n	800281a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <RCC_SetFlashLatency+0x100>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002814:	429a      	cmp	r2, r3
 8002816:	d1ef      	bne.n	80027f8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3738      	adds	r7, #56	; 0x38
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	080052b4 	.word	0x080052b4
 8002828:	080052bc 	.word	0x080052bc
 800282c:	080052c4 	.word	0x080052c4
 8002830:	58004000 	.word	0x58004000

08002834 <LL_RCC_LSE_IsReady>:
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d101      	bne.n	800284c <LL_RCC_LSE_IsReady+0x18>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <LL_RCC_LSE_IsReady+0x1a>
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <LL_RCC_SetUSARTClockSource>:
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	43db      	mvns	r3, r3
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	b29b      	uxth	r3, r3
 8002872:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <LL_RCC_SetI2SClockSource>:
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800288e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800289a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_SetLPUARTClockSource>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <LL_RCC_SetI2CClockSource>:
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80028f2:	43db      	mvns	r3, r3
 80028f4:	401a      	ands	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80028fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <LL_RCC_SetLPTIMClockSource>:
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0c1b      	lsrs	r3, r3, #16
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	43db      	mvns	r3, r3
 800292a:	401a      	ands	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <LL_RCC_SetRNGClockSource>:
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <LL_RCC_SetADCClockSource>:
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <LL_RCC_SetRTCClockSource>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_GetRTCClockSource>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <LL_RCC_ForceBackupDomainReset>:
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <LL_RCC_ReleaseBackupDomainReset>:
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a12:	bf00      	nop
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002a28:	2300      	movs	r3, #0
 8002a2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d058      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a3c:	f7fe fdc2 	bl	80015c4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a40:	f7fe fa5c 	bl	8000efc <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a46:	e009      	b.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe fa58 	bl	8000efc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d902      	bls.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	74fb      	strb	r3, [r7, #19]
        break;
 8002a5a:	e006      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a5c:	4b7b      	ldr	r3, [pc, #492]	; (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a68:	d1ee      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d13c      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002a70:	f7ff ffa7 	bl	80029c2 <LL_RCC_GetRTCClockSource>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d00f      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a8c:	f7ff ffa5 	bl	80029da <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a90:	f7ff ffb3 	bl	80029fa <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d014      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fa28 	bl	8000efc <HAL_GetTick>
 8002aac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fa24 	bl	8000efc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d902      	bls.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	74fb      	strb	r3, [r7, #19]
            break;
 8002ac6:	e004      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002ac8:	f7ff feb4 	bl	8002834 <LL_RCC_LSE_IsReady>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d1ee      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff5b 	bl	8002998 <LL_RCC_SetRTCClockSource>
 8002ae2:	e004      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	74bb      	strb	r3, [r7, #18]
 8002ae8:	e001      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fea9 	bl	8002856 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d004      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fe9e 	bl	8002856 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d004      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fec0 	bl	80028b0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d004      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fee6 	bl	8002912 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fedb 	bl	8002912 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fed0 	bl	8002912 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d004      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fea9 	bl	80028da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fe9e 	bl	80028da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d004      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fe93 	bl	80028da <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d011      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe5e 	bl	8002886 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fea5 	bl	8002944 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d107      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c10:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d011      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fea3 	bl	800296e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c30:	d107      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002c42:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	58000400 	.word	0x58000400

08002c50 <LL_RCC_GetUSARTClockSource>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	401a      	ands	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	4313      	orrs	r3, r2
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <LL_RCC_GetLPUARTClockSource>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4013      	ands	r3, r2
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e042      	b.n	8002d2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd fef2 	bl	8000aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	; 0x24
 8002cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fcc3 	bl	8003660 <UART_SetConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e022      	b.n	8002d2a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 ff2b 	bl	8003b48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 ffb1 	bl	8003c8a <UART_CheckIdleState>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b08a      	sub	sp, #40	; 0x28
 8002d36:	af02      	add	r7, sp, #8
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d173      	bne.n	8002e34 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_UART_Transmit+0x26>
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e06c      	b.n	8002e36 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2221      	movs	r2, #33	; 0x21
 8002d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe f8c6 	bl	8000efc <HAL_GetTick>
 8002d70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	88fa      	ldrh	r2, [r7, #6]
 8002d7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	d108      	bne.n	8002d9e <HAL_UART_Transmit+0x6c>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	e003      	b.n	8002da6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002da6:	e02c      	b.n	8002e02 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 ffb7 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e039      	b.n	8002e36 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	3302      	adds	r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	e007      	b.n	8002df0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1cc      	bne.n	8002da8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	2140      	movs	r1, #64	; 0x40
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 ff84 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b091      	sub	sp, #68	; 0x44
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d178      	bne.n	8002f4a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_UART_Transmit_IT+0x24>
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e071      	b.n	8002f4c <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	88fa      	ldrh	r2, [r7, #6]
 8002e72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2221      	movs	r2, #33	; 0x21
 8002e90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e9c:	d12a      	bne.n	8002ef4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea6:	d107      	bne.n	8002eb8 <HAL_UART_Transmit_IT+0x78>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d103      	bne.n	8002eb8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <HAL_UART_Transmit_IT+0x118>)
 8002eb4:	679a      	str	r2, [r3, #120]	; 0x78
 8002eb6:	e002      	b.n	8002ebe <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4a28      	ldr	r2, [pc, #160]	; (8002f5c <HAL_UART_Transmit_IT+0x11c>)
 8002ebc:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3308      	adds	r3, #8
 8002edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ede:	637a      	str	r2, [r7, #52]	; 0x34
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e5      	bne.n	8002ebe <HAL_UART_Transmit_IT+0x7e>
 8002ef2:	e028      	b.n	8002f46 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efc:	d107      	bne.n	8002f0e <HAL_UART_Transmit_IT+0xce>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d103      	bne.n	8002f0e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <HAL_UART_Transmit_IT+0x120>)
 8002f0a:	679a      	str	r2, [r3, #120]	; 0x78
 8002f0c:	e002      	b.n	8002f14 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <HAL_UART_Transmit_IT+0x124>)
 8002f12:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	613b      	str	r3, [r7, #16]
   return(result);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	69f9      	ldr	r1, [r7, #28]
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e6      	bne.n	8002f14 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
  }
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3744      	adds	r7, #68	; 0x44
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	08004443 	.word	0x08004443
 8002f5c:	08004365 	.word	0x08004365
 8002f60:	080042a5 	.word	0x080042a5
 8002f64:	080041ef 	.word	0x080041ef

08002f68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d137      	bne.n	8002ff0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Receive_IT+0x24>
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e030      	b.n	8002ff2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_UART_Receive_IT+0x94>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d01f      	beq.n	8002fe0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d018      	beq.n	8002fe0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	e853 3f00 	ldrex	r3, [r3]
 8002fba:	613b      	str	r3, [r7, #16]
   return(result);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	623b      	str	r3, [r7, #32]
 8002fce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	69f9      	ldr	r1, [r7, #28]
 8002fd2:	6a3a      	ldr	r2, [r7, #32]
 8002fd4:	e841 2300 	strex	r3, r2, [r1]
 8002fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e6      	bne.n	8002fae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 ff66 	bl	8003eb8 <UART_Start_Receive_IT>
 8002fec:	4603      	mov	r3, r0
 8002fee:	e000      	b.n	8002ff2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3728      	adds	r7, #40	; 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40008000 	.word	0x40008000

08003000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b0ba      	sub	sp, #232	; 0xe8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003026:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800302a:	f640 030f 	movw	r3, #2063	; 0x80f
 800302e:	4013      	ands	r3, r2
 8003030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11b      	bne.n	8003074 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800303c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d015      	beq.n	8003074 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d009      	beq.n	8003074 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 82e3 	beq.w	8003630 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
      }
      return;
 8003072:	e2dd      	b.n	8003630 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8123 	beq.w	80032c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800307e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003082:	4b8d      	ldr	r3, [pc, #564]	; (80032b8 <HAL_UART_IRQHandler+0x2b8>)
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800308a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800308e:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <HAL_UART_IRQHandler+0x2bc>)
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8116 	beq.w	80032c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d011      	beq.n	80030c8 <HAL_UART_IRQHandler+0xc8>
 80030a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2201      	movs	r2, #1
 80030b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d011      	beq.n	80030f8 <HAL_UART_IRQHandler+0xf8>
 80030d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2202      	movs	r2, #2
 80030e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f043 0204 	orr.w	r2, r3, #4
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d011      	beq.n	8003128 <HAL_UART_IRQHandler+0x128>
 8003104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2204      	movs	r2, #4
 8003116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f043 0202 	orr.w	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d017      	beq.n	8003164 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003140:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003144:	4b5c      	ldr	r3, [pc, #368]	; (80032b8 <HAL_UART_IRQHandler+0x2b8>)
 8003146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2208      	movs	r2, #8
 8003152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f043 0208 	orr.w	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <HAL_UART_IRQHandler+0x196>
 8003170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f043 0220 	orr.w	r2, r3, #32
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8249 	beq.w	8003634 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d013      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80031ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d105      	bne.n	80031c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80031ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d005      	beq.n	80031fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d054      	beq.n	80032a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ff7c 	bl	80040f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d146      	bne.n	800329c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3308      	adds	r3, #8
 8003214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3308      	adds	r3, #8
 8003236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800323a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800323e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800324a:	e841 2300 	strex	r3, r2, [r1]
 800324e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1d9      	bne.n	800320e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003260:	2b00      	cmp	r3, #0
 8003262:	d017      	beq.n	8003294 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800326a:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <HAL_UART_IRQHandler+0x2c0>)
 800326c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd ffe6 	bl	8001246 <HAL_DMA_Abort_IT>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d019      	beq.n	80032b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800328e:	4610      	mov	r0, r2
 8003290:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003292:	e00f      	b.n	80032b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fd fa8f 	bl	80007b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	e00b      	b.n	80032b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd fa8b 	bl	80007b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a2:	e007      	b.n	80032b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7fd fa87 	bl	80007b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80032b2:	e1bf      	b.n	8003634 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	bf00      	nop
    return;
 80032b6:	e1bd      	b.n	8003634 <HAL_UART_IRQHandler+0x634>
 80032b8:	10000001 	.word	0x10000001
 80032bc:	04000120 	.word	0x04000120
 80032c0:	080041c3 	.word	0x080041c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 8153 	bne.w	8003574 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 814c 	beq.w	8003574 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8145 	beq.w	8003574 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2210      	movs	r2, #16
 80032f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	f040 80bb 	bne.w	8003478 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003310:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 818f 	beq.w	8003638 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003320:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003324:	429a      	cmp	r2, r3
 8003326:	f080 8187 	bcs.w	8003638 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 8087 	bne.w	8003456 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800335c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003364:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003372:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003376:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800337e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800338a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1da      	bne.n	8003348 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3308      	adds	r3, #8
 8003398:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033a4:	f023 0301 	bic.w	r3, r3, #1
 80033a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3308      	adds	r3, #8
 80033b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e1      	bne.n	8003392 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3308      	adds	r3, #8
 80033d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3308      	adds	r3, #8
 80033ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e3      	bne.n	80033ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003424:	f023 0310 	bic.w	r3, r3, #16
 8003428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003436:	65bb      	str	r3, [r7, #88]	; 0x58
 8003438:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800343c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e4      	bne.n	8003414 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd fe9a 	bl	800118a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003468:	b29b      	uxth	r3, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	b29b      	uxth	r3, r3
 800346e:	4619      	mov	r1, r3
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f8e9 	bl	8003648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003476:	e0df      	b.n	8003638 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003484:	b29b      	uxth	r3, r3
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80d1 	beq.w	800363c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800349a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80cc 	beq.w	800363c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034c6:	647b      	str	r3, [r7, #68]	; 0x44
 80034c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e4      	bne.n	80034a4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3308      	adds	r3, #8
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	623b      	str	r3, [r7, #32]
   return(result);
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3308      	adds	r3, #8
 80034fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003502:	633a      	str	r2, [r7, #48]	; 0x30
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800350a:	e841 2300 	strex	r3, r2, [r1]
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1e1      	bne.n	80034da <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	60fb      	str	r3, [r7, #12]
   return(result);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0310 	bic.w	r3, r3, #16
 800353e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800354c:	61fb      	str	r3, [r7, #28]
 800354e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	69b9      	ldr	r1, [r7, #24]
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	617b      	str	r3, [r7, #20]
   return(result);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e4      	bne.n	800352a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003566:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f86b 	bl	8003648 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003572:	e063      	b.n	800363c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00e      	beq.n	800359e <HAL_UART_IRQHandler+0x59e>
 8003580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d008      	beq.n	800359e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f001 fd0e 	bl	8004fb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800359c:	e051      	b.n	8003642 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d014      	beq.n	80035d4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80035aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d105      	bne.n	80035c2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80035b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d03a      	beq.n	8003640 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
    }
    return;
 80035d2:	e035      	b.n	8003640 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_UART_IRQHandler+0x5f4>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 ff9c 	bl	800452a <UART_EndTransmit_IT>
    return;
 80035f2:	e026      	b.n	8003642 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d009      	beq.n	8003614 <HAL_UART_IRQHandler+0x614>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003604:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f001 fce5 	bl	8004fdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003612:	e016      	b.n	8003642 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_UART_IRQHandler+0x642>
 8003620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003624:	2b00      	cmp	r3, #0
 8003626:	da0c      	bge.n	8003642 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f001 fcce 	bl	8004fca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800362e:	e008      	b.n	8003642 <HAL_UART_IRQHandler+0x642>
      return;
 8003630:	bf00      	nop
 8003632:	e006      	b.n	8003642 <HAL_UART_IRQHandler+0x642>
    return;
 8003634:	bf00      	nop
 8003636:	e004      	b.n	8003642 <HAL_UART_IRQHandler+0x642>
      return;
 8003638:	bf00      	nop
 800363a:	e002      	b.n	8003642 <HAL_UART_IRQHandler+0x642>
      return;
 800363c:	bf00      	nop
 800363e:	e000      	b.n	8003642 <HAL_UART_IRQHandler+0x642>
    return;
 8003640:	bf00      	nop
  }
}
 8003642:	37e8      	adds	r7, #232	; 0xe8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
	...

08003660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b08c      	sub	sp, #48	; 0x30
 8003666:	af00      	add	r7, sp, #0
 8003668:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	431a      	orrs	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	431a      	orrs	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	4313      	orrs	r3, r2
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4b94      	ldr	r3, [pc, #592]	; (80038e0 <UART_SetConfig+0x280>)
 8003690:	4013      	ands	r3, r2
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003698:	430b      	orrs	r3, r1
 800369a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a89      	ldr	r2, [pc, #548]	; (80038e4 <UART_SetConfig+0x284>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d004      	beq.n	80036cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c8:	4313      	orrs	r3, r2
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80036d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	f023 010f 	bic.w	r1, r3, #15
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a7a      	ldr	r2, [pc, #488]	; (80038e8 <UART_SetConfig+0x288>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d127      	bne.n	8003754 <UART_SetConfig+0xf4>
 8003704:	2003      	movs	r0, #3
 8003706:	f7ff faa3 	bl	8002c50 <LL_RCC_GetUSARTClockSource>
 800370a:	4603      	mov	r3, r0
 800370c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003710:	2b03      	cmp	r3, #3
 8003712:	d81b      	bhi.n	800374c <UART_SetConfig+0xec>
 8003714:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0xbc>)
 8003716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371a:	bf00      	nop
 800371c:	0800372d 	.word	0x0800372d
 8003720:	0800373d 	.word	0x0800373d
 8003724:	08003735 	.word	0x08003735
 8003728:	08003745 	.word	0x08003745
 800372c:	2301      	movs	r3, #1
 800372e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003732:	e080      	b.n	8003836 <UART_SetConfig+0x1d6>
 8003734:	2302      	movs	r3, #2
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373a:	e07c      	b.n	8003836 <UART_SetConfig+0x1d6>
 800373c:	2304      	movs	r3, #4
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003742:	e078      	b.n	8003836 <UART_SetConfig+0x1d6>
 8003744:	2308      	movs	r3, #8
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374a:	e074      	b.n	8003836 <UART_SetConfig+0x1d6>
 800374c:	2310      	movs	r3, #16
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003752:	e070      	b.n	8003836 <UART_SetConfig+0x1d6>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a64      	ldr	r2, [pc, #400]	; (80038ec <UART_SetConfig+0x28c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d138      	bne.n	80037d0 <UART_SetConfig+0x170>
 800375e:	200c      	movs	r0, #12
 8003760:	f7ff fa76 	bl	8002c50 <LL_RCC_GetUSARTClockSource>
 8003764:	4603      	mov	r3, r0
 8003766:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d82c      	bhi.n	80037c8 <UART_SetConfig+0x168>
 800376e:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <UART_SetConfig+0x114>)
 8003770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003774:	080037a9 	.word	0x080037a9
 8003778:	080037c9 	.word	0x080037c9
 800377c:	080037c9 	.word	0x080037c9
 8003780:	080037c9 	.word	0x080037c9
 8003784:	080037b9 	.word	0x080037b9
 8003788:	080037c9 	.word	0x080037c9
 800378c:	080037c9 	.word	0x080037c9
 8003790:	080037c9 	.word	0x080037c9
 8003794:	080037b1 	.word	0x080037b1
 8003798:	080037c9 	.word	0x080037c9
 800379c:	080037c9 	.word	0x080037c9
 80037a0:	080037c9 	.word	0x080037c9
 80037a4:	080037c1 	.word	0x080037c1
 80037a8:	2300      	movs	r3, #0
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ae:	e042      	b.n	8003836 <UART_SetConfig+0x1d6>
 80037b0:	2302      	movs	r3, #2
 80037b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037b6:	e03e      	b.n	8003836 <UART_SetConfig+0x1d6>
 80037b8:	2304      	movs	r3, #4
 80037ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037be:	e03a      	b.n	8003836 <UART_SetConfig+0x1d6>
 80037c0:	2308      	movs	r3, #8
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c6:	e036      	b.n	8003836 <UART_SetConfig+0x1d6>
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ce:	e032      	b.n	8003836 <UART_SetConfig+0x1d6>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <UART_SetConfig+0x284>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d12a      	bne.n	8003830 <UART_SetConfig+0x1d0>
 80037da:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80037de:	f7ff fa49 	bl	8002c74 <LL_RCC_GetLPUARTClockSource>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e8:	d01a      	beq.n	8003820 <UART_SetConfig+0x1c0>
 80037ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ee:	d81b      	bhi.n	8003828 <UART_SetConfig+0x1c8>
 80037f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f4:	d00c      	beq.n	8003810 <UART_SetConfig+0x1b0>
 80037f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037fa:	d815      	bhi.n	8003828 <UART_SetConfig+0x1c8>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <UART_SetConfig+0x1a8>
 8003800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003804:	d008      	beq.n	8003818 <UART_SetConfig+0x1b8>
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x1c8>
 8003808:	2300      	movs	r3, #0
 800380a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800380e:	e012      	b.n	8003836 <UART_SetConfig+0x1d6>
 8003810:	2302      	movs	r3, #2
 8003812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003816:	e00e      	b.n	8003836 <UART_SetConfig+0x1d6>
 8003818:	2304      	movs	r3, #4
 800381a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800381e:	e00a      	b.n	8003836 <UART_SetConfig+0x1d6>
 8003820:	2308      	movs	r3, #8
 8003822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003826:	e006      	b.n	8003836 <UART_SetConfig+0x1d6>
 8003828:	2310      	movs	r3, #16
 800382a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800382e:	e002      	b.n	8003836 <UART_SetConfig+0x1d6>
 8003830:	2310      	movs	r3, #16
 8003832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a2a      	ldr	r2, [pc, #168]	; (80038e4 <UART_SetConfig+0x284>)
 800383c:	4293      	cmp	r3, r2
 800383e:	f040 80a4 	bne.w	800398a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003846:	2b08      	cmp	r3, #8
 8003848:	d823      	bhi.n	8003892 <UART_SetConfig+0x232>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <UART_SetConfig+0x1f0>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	08003875 	.word	0x08003875
 8003854:	08003893 	.word	0x08003893
 8003858:	0800387d 	.word	0x0800387d
 800385c:	08003893 	.word	0x08003893
 8003860:	08003883 	.word	0x08003883
 8003864:	08003893 	.word	0x08003893
 8003868:	08003893 	.word	0x08003893
 800386c:	08003893 	.word	0x08003893
 8003870:	0800388b 	.word	0x0800388b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003874:	f7fe ff08 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8003878:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800387a:	e010      	b.n	800389e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800387c:	4b1c      	ldr	r3, [pc, #112]	; (80038f0 <UART_SetConfig+0x290>)
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003880:	e00d      	b.n	800389e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003882:	f7fe fe4d 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8003886:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003888:	e009      	b.n	800389e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003890:	e005      	b.n	800389e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800389c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8137 	beq.w	8003b14 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <UART_SetConfig+0x294>)
 80038ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038b0:	461a      	mov	r2, r3
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d305      	bcc.n	80038d6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038dc:	e11a      	b.n	8003b14 <UART_SetConfig+0x4b4>
 80038de:	bf00      	nop
 80038e0:	cfff69f3 	.word	0xcfff69f3
 80038e4:	40008000 	.word	0x40008000
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40004400 	.word	0x40004400
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	08005370 	.word	0x08005370
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	2200      	movs	r2, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	60fa      	str	r2, [r7, #12]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	4a8e      	ldr	r2, [pc, #568]	; (8003b40 <UART_SetConfig+0x4e0>)
 8003906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800390a:	b29b      	uxth	r3, r3
 800390c:	2200      	movs	r2, #0
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003916:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800391a:	f7fc fc2d 	bl	8000178 <__aeabi_uldivmod>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	020b      	lsls	r3, r1, #8
 8003930:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003934:	0202      	lsls	r2, r0, #8
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	6849      	ldr	r1, [r1, #4]
 800393a:	0849      	lsrs	r1, r1, #1
 800393c:	2000      	movs	r0, #0
 800393e:	460c      	mov	r4, r1
 8003940:	4605      	mov	r5, r0
 8003942:	eb12 0804 	adds.w	r8, r2, r4
 8003946:	eb43 0905 	adc.w	r9, r3, r5
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	469a      	mov	sl, r3
 8003952:	4693      	mov	fp, r2
 8003954:	4652      	mov	r2, sl
 8003956:	465b      	mov	r3, fp
 8003958:	4640      	mov	r0, r8
 800395a:	4649      	mov	r1, r9
 800395c:	f7fc fc0c 	bl	8000178 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4613      	mov	r3, r2
 8003966:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800396e:	d308      	bcc.n	8003982 <UART_SetConfig+0x322>
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003976:	d204      	bcs.n	8003982 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	60da      	str	r2, [r3, #12]
 8003980:	e0c8      	b.n	8003b14 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003988:	e0c4      	b.n	8003b14 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003992:	d167      	bne.n	8003a64 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003994:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003998:	2b08      	cmp	r3, #8
 800399a:	d828      	bhi.n	80039ee <UART_SetConfig+0x38e>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <UART_SetConfig+0x344>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039c9 	.word	0x080039c9
 80039a8:	080039d1 	.word	0x080039d1
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039ef 	.word	0x080039ef
 80039b4:	080039df 	.word	0x080039df
 80039b8:	080039ef 	.word	0x080039ef
 80039bc:	080039ef 	.word	0x080039ef
 80039c0:	080039ef 	.word	0x080039ef
 80039c4:	080039e7 	.word	0x080039e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7fe fe5e 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 80039cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039ce:	e014      	b.n	80039fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d0:	f7fe fe6c 	bl	80026ac <HAL_RCC_GetPCLK2Freq>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039d6:	e010      	b.n	80039fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d8:	4b5a      	ldr	r3, [pc, #360]	; (8003b44 <UART_SetConfig+0x4e4>)
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039dc:	e00d      	b.n	80039fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039de:	f7fe fd9f 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80039e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039e4:	e009      	b.n	80039fa <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039ec:	e005      	b.n	80039fa <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8089 	beq.w	8003b14 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	4a4e      	ldr	r2, [pc, #312]	; (8003b40 <UART_SetConfig+0x4e0>)
 8003a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a14:	005a      	lsls	r2, r3, #1
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	441a      	add	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	d916      	bls.n	8003a5c <UART_SetConfig+0x3fc>
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d212      	bcs.n	8003a5c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f023 030f 	bic.w	r3, r3, #15
 8003a3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f003 0307 	and.w	r3, r3, #7
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	8bfb      	ldrh	r3, [r7, #30]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	8bfa      	ldrh	r2, [r7, #30]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	e05b      	b.n	8003b14 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a62:	e057      	b.n	8003b14 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d828      	bhi.n	8003abe <UART_SetConfig+0x45e>
 8003a6c:	a201      	add	r2, pc, #4	; (adr r2, 8003a74 <UART_SetConfig+0x414>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003aa1 	.word	0x08003aa1
 8003a7c:	08003aa9 	.word	0x08003aa9
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003aaf 	.word	0x08003aaf
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003abf 	.word	0x08003abf
 8003a90:	08003abf 	.word	0x08003abf
 8003a94:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a98:	f7fe fdf6 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8003a9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a9e:	e014      	b.n	8003aca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7fe fe04 	bl	80026ac <HAL_RCC_GetPCLK2Freq>
 8003aa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aa6:	e010      	b.n	8003aca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b26      	ldr	r3, [pc, #152]	; (8003b44 <UART_SetConfig+0x4e4>)
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003aac:	e00d      	b.n	8003aca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7fe fd37 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8003ab2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ab4:	e009      	b.n	8003aca <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003abc:	e005      	b.n	8003aca <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d021      	beq.n	8003b14 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <UART_SetConfig+0x4e0>)
 8003ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ada:	461a      	mov	r2, r3
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	441a      	add	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d909      	bls.n	8003b0e <UART_SetConfig+0x4ae>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b00:	d205      	bcs.n	8003b0e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	e002      	b.n	8003b14 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2200      	movs	r2, #0
 8003b28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b30:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3730      	adds	r7, #48	; 0x30
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b3e:	bf00      	nop
 8003b40:	08005370 	.word	0x08005370
 8003b44:	00f42400 	.word	0x00f42400

08003b48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c46:	d10a      	bne.n	8003c5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af02      	add	r7, sp, #8
 8003c90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c9a:	f7fd f92f 	bl	8000efc <HAL_GetTick>
 8003c9e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d10e      	bne.n	8003ccc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f832 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e028      	b.n	8003d1e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d10e      	bne.n	8003cf8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f81c 	bl	8003d26 <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e012      	b.n	8003d1e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b09c      	sub	sp, #112	; 0x70
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	60f8      	str	r0, [r7, #12]
 8003d2e:	60b9      	str	r1, [r7, #8]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	4613      	mov	r3, r2
 8003d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	e0a9      	b.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3e:	f000 80a5 	beq.w	8003e8c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fd f8db 	bl	8000efc <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d140      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e6      	bne.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	663b      	str	r3, [r7, #96]	; 0x60
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3308      	adds	r3, #8
 8003da8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003daa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e069      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d051      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df6:	d149      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e6      	bne.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	613b      	str	r3, [r7, #16]
   return(result);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e54:	623a      	str	r2, [r7, #32]
 8003e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e010      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	f43f af46 	beq.w	8003d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3770      	adds	r7, #112	; 0x70
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b0a3      	sub	sp, #140	; 0x8c
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	d10e      	bne.n	8003f0a <UART_Start_Receive_IT+0x52>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <UART_Start_Receive_IT+0x48>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003efa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003efe:	e02d      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	22ff      	movs	r2, #255	; 0xff
 8003f04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f08:	e028      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <UART_Start_Receive_IT+0x76>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <UART_Start_Receive_IT+0x6c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f22:	e01b      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	227f      	movs	r2, #127	; 0x7f
 8003f28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f2c:	e016      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f36:	d10d      	bne.n	8003f54 <UART_Start_Receive_IT+0x9c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <UART_Start_Receive_IT+0x92>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	227f      	movs	r2, #127	; 0x7f
 8003f44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f48:	e008      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	223f      	movs	r2, #63	; 0x3f
 8003f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f52:	e003      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2222      	movs	r2, #34	; 0x22
 8003f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3308      	adds	r3, #8
 8003f72:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f90:	673a      	str	r2, [r7, #112]	; 0x70
 8003f92:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003f96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e3      	bne.n	8003f6c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fac:	d14f      	bne.n	800404e <UART_Start_Receive_IT+0x196>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d349      	bcc.n	800404e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc2:	d107      	bne.n	8003fd4 <UART_Start_Receive_IT+0x11c>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d103      	bne.n	8003fd4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a46      	ldr	r2, [pc, #280]	; (80040e8 <UART_Start_Receive_IT+0x230>)
 8003fd0:	675a      	str	r2, [r3, #116]	; 0x74
 8003fd2:	e002      	b.n	8003fda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a45      	ldr	r2, [pc, #276]	; (80040ec <UART_Start_Receive_IT+0x234>)
 8003fd8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01a      	beq.n	8004018 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004006:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800400a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e4      	bne.n	8003fe2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800402e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004038:	64ba      	str	r2, [r7, #72]	; 0x48
 800403a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800403e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_Start_Receive_IT+0x160>
 800404c:	e046      	b.n	80040dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d107      	bne.n	8004068 <UART_Start_Receive_IT+0x1b0>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <UART_Start_Receive_IT+0x238>)
 8004064:	675a      	str	r2, [r3, #116]	; 0x74
 8004066:	e002      	b.n	800406e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a22      	ldr	r2, [pc, #136]	; (80040f4 <UART_Start_Receive_IT+0x23c>)
 800406c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d019      	beq.n	80040aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800408a:	677b      	str	r3, [r7, #116]	; 0x74
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004094:	637b      	str	r3, [r7, #52]	; 0x34
 8004096:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800409a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e6      	bne.n	8004076 <UART_Start_Receive_IT+0x1be>
 80040a8:	e018      	b.n	80040dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	613b      	str	r3, [r7, #16]
   return(result);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f043 0320 	orr.w	r3, r3, #32
 80040be:	67bb      	str	r3, [r7, #120]	; 0x78
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c8:	623b      	str	r3, [r7, #32]
 80040ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	69f9      	ldr	r1, [r7, #28]
 80040ce:	6a3a      	ldr	r2, [r7, #32]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	378c      	adds	r7, #140	; 0x8c
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	08004c51 	.word	0x08004c51
 80040ec:	080048f1 	.word	0x080048f1
 80040f0:	08004739 	.word	0x08004739
 80040f4:	08004581 	.word	0x08004581

080040f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b095      	sub	sp, #84	; 0x54
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411e:	643b      	str	r3, [r7, #64]	; 0x40
 8004120:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e6      	bne.n	8004100 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	61fb      	str	r3, [r7, #28]
   return(result);
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	64bb      	str	r3, [r7, #72]	; 0x48
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3308      	adds	r3, #8
 8004154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004158:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800415c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e3      	bne.n	8004132 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	2b01      	cmp	r3, #1
 8004170:	d118      	bne.n	80041a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 0310 	bic.w	r3, r3, #16
 8004186:	647b      	str	r3, [r7, #68]	; 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6979      	ldr	r1, [r7, #20]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	613b      	str	r3, [r7, #16]
   return(result);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80041b8:	bf00      	nop
 80041ba:	3754      	adds	r7, #84	; 0x54
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7fc fae9 	bl	80007b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b08f      	sub	sp, #60	; 0x3c
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	2b21      	cmp	r3, #33	; 0x21
 80041fe:	d14c      	bne.n	800429a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d132      	bne.n	8004272 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	61fb      	str	r3, [r7, #28]
   return(result);
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004220:	637b      	str	r3, [r7, #52]	; 0x34
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e6      	bne.n	800420c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	60bb      	str	r3, [r7, #8]
   return(result);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004252:	633b      	str	r3, [r7, #48]	; 0x30
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6979      	ldr	r1, [r7, #20]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	613b      	str	r3, [r7, #16]
   return(result);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004270:	e013      	b.n	800429a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800429a:	bf00      	nop
 800429c:	373c      	adds	r7, #60	; 0x3c
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b091      	sub	sp, #68	; 0x44
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	2b21      	cmp	r3, #33	; 0x21
 80042b4:	d151      	bne.n	800435a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d132      	bne.n	8004328 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	e853 3f00 	ldrex	r3, [r3]
 80042ce:	623b      	str	r3, [r7, #32]
   return(result);
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
 80042e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e8:	e841 2300 	strex	r3, r2, [r1]
 80042ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1e6      	bne.n	80042c2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	60fb      	str	r3, [r7, #12]
   return(result);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004308:	637b      	str	r3, [r7, #52]	; 0x34
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	69b9      	ldr	r1, [r7, #24]
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	617b      	str	r3, [r7, #20]
   return(result);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e6      	bne.n	80042f4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004326:	e018      	b.n	800435a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800432e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004342:	1c9a      	adds	r2, r3, #2
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800435a:	bf00      	nop
 800435c:	3744      	adds	r7, #68	; 0x44
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b091      	sub	sp, #68	; 0x44
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	2b21      	cmp	r3, #33	; 0x21
 8004374:	d160      	bne.n	8004438 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800437c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800437e:	e057      	b.n	8004430 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d133      	bne.n	80043f4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	623b      	str	r3, [r7, #32]
   return(result);
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ac:	633a      	str	r2, [r7, #48]	; 0x30
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	e853 3f00 	ldrex	r3, [r3]
 80043cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d4:	637b      	str	r3, [r7, #52]	; 0x34
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	461a      	mov	r2, r3
 80043dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	69b9      	ldr	r1, [r7, #24]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	e841 2300 	strex	r3, r2, [r1]
 80043ea:	617b      	str	r3, [r7, #20]
   return(result);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1e6      	bne.n	80043c0 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80043f2:	e021      	b.n	8004438 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d013      	beq.n	800442a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800442a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800442c:	3b01      	subs	r3, #1
 800442e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004430:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1a4      	bne.n	8004380 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004436:	e7ff      	b.n	8004438 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004438:	bf00      	nop
 800443a:	3744      	adds	r7, #68	; 0x44
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004442:	b480      	push	{r7}
 8004444:	b091      	sub	sp, #68	; 0x44
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	2b21      	cmp	r3, #33	; 0x21
 8004452:	d165      	bne.n	8004520 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800445a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800445c:	e05c      	b.n	8004518 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d133      	bne.n	80044d2 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	61fb      	str	r3, [r7, #28]
   return(result);
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3308      	adds	r3, #8
 8004488:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800448a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e5      	bne.n	800446a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b2:	633b      	str	r3, [r7, #48]	; 0x30
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	461a      	mov	r2, r3
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6979      	ldr	r1, [r7, #20]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e6      	bne.n	800449e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80044d0:	e026      	b.n	8004520 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d018      	beq.n	8004512 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004512:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004514:	3b01      	subs	r3, #1
 8004516:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004518:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800451a:	2b00      	cmp	r3, #0
 800451c:	d19f      	bne.n	800445e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800451e:	e7ff      	b.n	8004520 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004520:	bf00      	nop
 8004522:	3744      	adds	r7, #68	; 0x44
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr

0800452a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b088      	sub	sp, #32
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	461a      	mov	r2, r3
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	613b      	str	r3, [r7, #16]
   return(result);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e6      	bne.n	8004532 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fc f938 	bl	80007e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004578:	bf00      	nop
 800457a:	3720      	adds	r7, #32
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b09c      	sub	sp, #112	; 0x70
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800458e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004598:	2b22      	cmp	r3, #34	; 0x22
 800459a:	f040 80be 	bne.w	800471a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80045ac:	b2d9      	uxtb	r1, r3
 80045ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b8:	400a      	ands	r2, r1
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f040 80a1 	bne.w	800472a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045f0:	e853 3f00 	ldrex	r3, [r3]
 80045f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004606:	65bb      	str	r3, [r7, #88]	; 0x58
 8004608:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800460c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800460e:	e841 2300 	strex	r3, r2, [r1]
 8004612:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1e6      	bne.n	80045e8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	667b      	str	r3, [r7, #100]	; 0x64
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3308      	adds	r3, #8
 8004638:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800463a:	647a      	str	r2, [r7, #68]	; 0x44
 800463c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e5      	bne.n	800461a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a33      	ldr	r2, [pc, #204]	; (8004734 <UART_RxISR_8BIT+0x1b4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d01f      	beq.n	80046ac <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d018      	beq.n	80046ac <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	623b      	str	r3, [r7, #32]
   return(result);
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800468e:	663b      	str	r3, [r7, #96]	; 0x60
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
 800469a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800469e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d12e      	bne.n	8004712 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	e853 3f00 	ldrex	r3, [r3]
 80046c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0310 	bic.w	r3, r3, #16
 80046ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	69b9      	ldr	r1, [r7, #24]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	617b      	str	r3, [r7, #20]
   return(result);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e6      	bne.n	80046ba <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d103      	bne.n	8004702 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2210      	movs	r2, #16
 8004700:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fe ff9c 	bl	8003648 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004710:	e00b      	b.n	800472a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7fc f880 	bl	8000818 <HAL_UART_RxCpltCallback>
}
 8004718:	e007      	b.n	800472a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0208 	orr.w	r2, r2, #8
 8004728:	619a      	str	r2, [r3, #24]
}
 800472a:	bf00      	nop
 800472c:	3770      	adds	r7, #112	; 0x70
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40008000 	.word	0x40008000

08004738 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b09c      	sub	sp, #112	; 0x70
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004746:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004750:	2b22      	cmp	r3, #34	; 0x22
 8004752:	f040 80be 	bne.w	80048d2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004766:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800476a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800476e:	4013      	ands	r3, r2
 8004770:	b29a      	uxth	r2, r3
 8004772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004774:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 80a1 	bne.w	80048e2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80047ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b4:	667b      	str	r3, [r7, #100]	; 0x64
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047be:	657b      	str	r3, [r7, #84]	; 0x54
 80047c0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e6      	bne.n	80047a0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	f023 0301 	bic.w	r3, r3, #1
 80047e8:	663b      	str	r3, [r7, #96]	; 0x60
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047f2:	643a      	str	r2, [r7, #64]	; 0x40
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1e5      	bne.n	80047d2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a33      	ldr	r2, [pc, #204]	; (80048ec <UART_RxISR_16BIT+0x1b4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d01f      	beq.n	8004864 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d018      	beq.n	8004864 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004852:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d12e      	bne.n	80048ca <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f023 0310 	bic.w	r3, r3, #16
 8004886:	65bb      	str	r3, [r7, #88]	; 0x58
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6979      	ldr	r1, [r7, #20]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e6      	bne.n	8004872 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b10      	cmp	r3, #16
 80048b0:	d103      	bne.n	80048ba <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2210      	movs	r2, #16
 80048b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048c0:	4619      	mov	r1, r3
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fe fec0 	bl	8003648 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048c8:	e00b      	b.n	80048e2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fb ffa4 	bl	8000818 <HAL_UART_RxCpltCallback>
}
 80048d0:	e007      	b.n	80048e2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0208 	orr.w	r2, r2, #8
 80048e0:	619a      	str	r2, [r3, #24]
}
 80048e2:	bf00      	nop
 80048e4:	3770      	adds	r7, #112	; 0x70
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40008000 	.word	0x40008000

080048f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0ac      	sub	sp, #176	; 0xb0
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80048fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004926:	2b22      	cmp	r3, #34	; 0x22
 8004928:	f040 8182 	bne.w	8004c30 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004932:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004936:	e125      	b.n	8004b84 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004942:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8004946:	b2d9      	uxtb	r1, r3
 8004948:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800494c:	b2da      	uxtb	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	400a      	ands	r2, r1
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800497e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d053      	beq.n	8004a32 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800498a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d011      	beq.n	80049ba <UART_RxISR_8BIT_FIFOEN+0xca>
 8004996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800499a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	f043 0201 	orr.w	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d011      	beq.n	80049ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 80049c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2202      	movs	r2, #2
 80049d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e0:	f043 0204 	orr.w	r2, r3, #4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d011      	beq.n	8004a1a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80049f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2204      	movs	r2, #4
 8004a08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f043 0202 	orr.w	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d006      	beq.n	8004a32 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fb fec7 	bl	80007b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f040 80a2 	bne.w	8004b84 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8004a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a64:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a66:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004a68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004a6a:	e841 2300 	strex	r3, r2, [r1]
 8004a6e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8004a70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1e4      	bne.n	8004a40 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a9e:	66ba      	str	r2, [r7, #104]	; 0x68
 8004aa0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004aa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e1      	bne.n	8004a76 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5f      	ldr	r2, [pc, #380]	; (8004c48 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d021      	beq.n	8004b14 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01a      	beq.n	8004b14 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	461a      	mov	r2, r3
 8004afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b00:	657b      	str	r3, [r7, #84]	; 0x54
 8004b02:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e4      	bne.n	8004ade <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d130      	bne.n	8004b7e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	f023 0310 	bic.w	r3, r3, #16
 8004b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b44:	643b      	str	r3, [r7, #64]	; 0x40
 8004b46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e4      	bne.n	8004b22 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d103      	bne.n	8004b6e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fe fd66 	bl	8003648 <HAL_UARTEx_RxEventCallback>
 8004b7c:	e002      	b.n	8004b84 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fb fe4a 	bl	8000818 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004b84:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d006      	beq.n	8004b9a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8004b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f47f aecf 	bne.w	8004938 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ba0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004ba4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d049      	beq.n	8004c40 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bb2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d242      	bcs.n	8004c40 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e3      	bne.n	8004bba <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8004bf6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f043 0320 	orr.w	r3, r3, #32
 8004c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c1a:	61bb      	str	r3, [r7, #24]
 8004c1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6979      	ldr	r1, [r7, #20]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	613b      	str	r3, [r7, #16]
   return(result);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e4      	bne.n	8004bf8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c2e:	e007      	b.n	8004c40 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0208 	orr.w	r2, r2, #8
 8004c3e:	619a      	str	r2, [r3, #24]
}
 8004c40:	bf00      	nop
 8004c42:	37b0      	adds	r7, #176	; 0xb0
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40008000 	.word	0x40008000
 8004c4c:	08004581 	.word	0x08004581

08004c50 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b0ae      	sub	sp, #184	; 0xb8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004c5e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c86:	2b22      	cmp	r3, #34	; 0x22
 8004c88:	f040 8186 	bne.w	8004f98 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c92:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004c96:	e129      	b.n	8004eec <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004caa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004cae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	1c9a      	adds	r2, r3, #2
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004ce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d053      	beq.n	8004d96 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <UART_RxISR_16BIT_FIFOEN+0xce>
 8004cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f043 0201 	orr.w	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d011      	beq.n	8004d4e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004d2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	f043 0204 	orr.w	r2, r3, #4
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d011      	beq.n	8004d7e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004d5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d74:	f043 0202 	orr.w	r2, r3, #2
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d006      	beq.n	8004d96 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fb fd15 	bl	80007b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f040 80a4 	bne.w	8004eec <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004dc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dca:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e2      	bne.n	8004da4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3308      	adds	r3, #8
 8004de4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e0e:	e841 2300 	strex	r3, r2, [r1]
 8004e12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1e1      	bne.n	8004dde <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a5f      	ldr	r2, [pc, #380]	; (8004fb0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d021      	beq.n	8004e7c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01a      	beq.n	8004e7c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e68:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e4      	bne.n	8004e46 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d130      	bne.n	8004ee6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9a:	f023 0310 	bic.w	r3, r3, #16
 8004e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004eac:	647b      	str	r3, [r7, #68]	; 0x44
 8004eae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e4      	bne.n	8004e8a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	2b10      	cmp	r3, #16
 8004ecc:	d103      	bne.n	8004ed6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2210      	movs	r2, #16
 8004ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7fe fbb2 	bl	8003648 <HAL_UARTEx_RxEventCallback>
 8004ee4:	e002      	b.n	8004eec <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fb fc96 	bl	8000818 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004eec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d006      	beq.n	8004f02 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f47f aecb 	bne.w	8004c98 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f08:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004f0c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d049      	beq.n	8004fa8 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004f1a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d242      	bcs.n	8004fa8 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3308      	adds	r3, #8
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	623b      	str	r3, [r7, #32]
   return(result);
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004f46:	633a      	str	r2, [r7, #48]	; 0x30
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e3      	bne.n	8004f22 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a15      	ldr	r2, [pc, #84]	; (8004fb4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004f5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f043 0320 	orr.w	r3, r3, #32
 8004f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	69b9      	ldr	r1, [r7, #24]
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e4      	bne.n	8004f60 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f96:	e007      	b.n	8004fa8 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699a      	ldr	r2, [r3, #24]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0208 	orr.w	r2, r2, #8
 8004fa6:	619a      	str	r2, [r3, #24]
}
 8004fa8:	bf00      	nop
 8004faa:	37b8      	adds	r7, #184	; 0xb8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40008000 	.word	0x40008000
 8004fb4:	08004739 	.word	0x08004739

08004fb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_UARTEx_DisableFifoMode+0x16>
 8005000:	2302      	movs	r3, #2
 8005002:	e027      	b.n	8005054 <HAL_UARTEx_DisableFifoMode+0x66>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2224      	movs	r2, #36	; 0x24
 8005010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005032:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr

0800505e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800506e:	2b01      	cmp	r3, #1
 8005070:	d101      	bne.n	8005076 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005072:	2302      	movs	r3, #2
 8005074:	e02d      	b.n	80050d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2224      	movs	r2, #36	; 0x24
 8005082:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0201 	bic.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f850 	bl	8005158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b084      	sub	sp, #16
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e02d      	b.n	800514e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2224      	movs	r2, #36	; 0x24
 80050fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f812 	bl	8005158 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005164:	2b00      	cmp	r3, #0
 8005166:	d108      	bne.n	800517a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005178:	e031      	b.n	80051de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800517a:	2308      	movs	r3, #8
 800517c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800517e:	2308      	movs	r3, #8
 8005180:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	0e5b      	lsrs	r3, r3, #25
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	0f5b      	lsrs	r3, r3, #29
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051a2:	7bbb      	ldrb	r3, [r7, #14]
 80051a4:	7b3a      	ldrb	r2, [r7, #12]
 80051a6:	4910      	ldr	r1, [pc, #64]	; (80051e8 <UARTEx_SetNbDataToProcess+0x90>)
 80051a8:	5c8a      	ldrb	r2, [r1, r2]
 80051aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051ae:	7b3a      	ldrb	r2, [r7, #12]
 80051b0:	490e      	ldr	r1, [pc, #56]	; (80051ec <UARTEx_SetNbDataToProcess+0x94>)
 80051b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	7b7a      	ldrb	r2, [r7, #13]
 80051c4:	4908      	ldr	r1, [pc, #32]	; (80051e8 <UARTEx_SetNbDataToProcess+0x90>)
 80051c6:	5c8a      	ldrb	r2, [r1, r2]
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051cc:	7b7a      	ldrb	r2, [r7, #13]
 80051ce:	4907      	ldr	r1, [pc, #28]	; (80051ec <UARTEx_SetNbDataToProcess+0x94>)
 80051d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	08005388 	.word	0x08005388
 80051ec:	08005390 	.word	0x08005390

080051f0 <__libc_init_array>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	4d0d      	ldr	r5, [pc, #52]	; (8005228 <__libc_init_array+0x38>)
 80051f4:	4c0d      	ldr	r4, [pc, #52]	; (800522c <__libc_init_array+0x3c>)
 80051f6:	1b64      	subs	r4, r4, r5
 80051f8:	10a4      	asrs	r4, r4, #2
 80051fa:	2600      	movs	r6, #0
 80051fc:	42a6      	cmp	r6, r4
 80051fe:	d109      	bne.n	8005214 <__libc_init_array+0x24>
 8005200:	4d0b      	ldr	r5, [pc, #44]	; (8005230 <__libc_init_array+0x40>)
 8005202:	4c0c      	ldr	r4, [pc, #48]	; (8005234 <__libc_init_array+0x44>)
 8005204:	f000 f842 	bl	800528c <_init>
 8005208:	1b64      	subs	r4, r4, r5
 800520a:	10a4      	asrs	r4, r4, #2
 800520c:	2600      	movs	r6, #0
 800520e:	42a6      	cmp	r6, r4
 8005210:	d105      	bne.n	800521e <__libc_init_array+0x2e>
 8005212:	bd70      	pop	{r4, r5, r6, pc}
 8005214:	f855 3b04 	ldr.w	r3, [r5], #4
 8005218:	4798      	blx	r3
 800521a:	3601      	adds	r6, #1
 800521c:	e7ee      	b.n	80051fc <__libc_init_array+0xc>
 800521e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005222:	4798      	blx	r3
 8005224:	3601      	adds	r6, #1
 8005226:	e7f2      	b.n	800520e <__libc_init_array+0x1e>
 8005228:	080053a0 	.word	0x080053a0
 800522c:	080053a0 	.word	0x080053a0
 8005230:	080053a0 	.word	0x080053a0
 8005234:	080053a4 	.word	0x080053a4

08005238 <memcpy>:
 8005238:	440a      	add	r2, r1
 800523a:	4291      	cmp	r1, r2
 800523c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005240:	d100      	bne.n	8005244 <memcpy+0xc>
 8005242:	4770      	bx	lr
 8005244:	b510      	push	{r4, lr}
 8005246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800524a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800524e:	4291      	cmp	r1, r2
 8005250:	d1f9      	bne.n	8005246 <memcpy+0xe>
 8005252:	bd10      	pop	{r4, pc}

08005254 <memset>:
 8005254:	4402      	add	r2, r0
 8005256:	4603      	mov	r3, r0
 8005258:	4293      	cmp	r3, r2
 800525a:	d100      	bne.n	800525e <memset+0xa>
 800525c:	4770      	bx	lr
 800525e:	f803 1b01 	strb.w	r1, [r3], #1
 8005262:	e7f9      	b.n	8005258 <memset+0x4>

08005264 <strncpy>:
 8005264:	b510      	push	{r4, lr}
 8005266:	3901      	subs	r1, #1
 8005268:	4603      	mov	r3, r0
 800526a:	b132      	cbz	r2, 800527a <strncpy+0x16>
 800526c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005270:	f803 4b01 	strb.w	r4, [r3], #1
 8005274:	3a01      	subs	r2, #1
 8005276:	2c00      	cmp	r4, #0
 8005278:	d1f7      	bne.n	800526a <strncpy+0x6>
 800527a:	441a      	add	r2, r3
 800527c:	2100      	movs	r1, #0
 800527e:	4293      	cmp	r3, r2
 8005280:	d100      	bne.n	8005284 <strncpy+0x20>
 8005282:	bd10      	pop	{r4, pc}
 8005284:	f803 1b01 	strb.w	r1, [r3], #1
 8005288:	e7f9      	b.n	800527e <strncpy+0x1a>
	...

0800528c <_init>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr

08005298 <_fini>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

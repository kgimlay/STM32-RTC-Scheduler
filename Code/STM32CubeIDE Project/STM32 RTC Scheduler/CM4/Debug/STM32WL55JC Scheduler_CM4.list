
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080065d8  080065d8  000165d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006724  08006724  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800672c  0800672c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000070  080067a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080067a4  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001342a  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be5  00000000  00000000  000334c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000360b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  000372a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d7a1  00000000  00000000  00038378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012820  00000000  00000000  00055b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7131  00000000  00000000  00068339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f46a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d2c  00000000  00000000  0011f4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	080065c0 	.word	0x080065c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	080065c0 	.word	0x080065c0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <calendar_init+0x18>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	2000008c 	.word	0x2000008c

0800054c <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af02      	add	r7, sp, #8
 8000552:	463b      	mov	r3, r7
 8000554:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 8000558:	7838      	ldrb	r0, [r7, #0]
 800055a:	7879      	ldrb	r1, [r7, #1]
 800055c:	78bc      	ldrb	r4, [r7, #2]
 800055e:	78fd      	ldrb	r5, [r7, #3]
 8000560:	793b      	ldrb	r3, [r7, #4]
 8000562:	797a      	ldrb	r2, [r7, #5]
 8000564:	9201      	str	r2, [sp, #4]
 8000566:	9300      	str	r3, [sp, #0]
 8000568:	462b      	mov	r3, r5
 800056a:	4622      	mov	r2, r4
 800056c:	f000 fa7c 	bl	8000a68 <setDateTime>
}
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bdb0      	pop	{r4, r5, r7, pc}

08000578 <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af02      	add	r7, sp, #8
 800057e:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	1c59      	adds	r1, r3, #1
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c9c      	adds	r4, r3, #2
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1cdd      	adds	r5, r3, #3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3304      	adds	r3, #4
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	3205      	adds	r2, #5
 8000596:	9201      	str	r2, [sp, #4]
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	462b      	mov	r3, r5
 800059c:	4622      	mov	r2, r4
 800059e:	f000 fb2d 	bl	8000bfc <getDateTime>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bdb0      	pop	{r4, r5, r7, pc}

080005aa <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ba:	f023 0218 	bic.w	r2, r3, #24
 80005be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4013      	ands	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f8:	68fb      	ldr	r3, [r7, #12]
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a06      	ldr	r2, [pc, #24]	; (800062c <HAL_UART_ErrorCallback+0x28>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d006      	beq.n	8000624 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_UART_ErrorCallback+0x2c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d101      	bne.n	8000624 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000620:	f000 fd3c 	bl	800109c <uartBasic_Error_ISR>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40013800 	.word	0x40013800
 8000630:	40004400 	.word	0x40004400

08000634 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_UART_TxCpltCallback+0x28>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d006      	beq.n	8000654 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <HAL_UART_TxCpltCallback+0x2c>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d101      	bne.n	8000654 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 8000650:	f000 fd18 	bl	8001084 <uartBasic_TX_Complete_ISR>
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40013800 	.word	0x40013800
 8000660:	40004400 	.word	0x40004400

08000664 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <HAL_UART_RxCpltCallback+0x28>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d006      	beq.n	8000684 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <HAL_UART_RxCpltCallback+0x2c>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d101      	bne.n	8000684 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000680:	f000 fcf4 	bl	800106c <uartBasic_RX_Complete_ISR>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40013800 	.word	0x40013800
 8000690:	40004400 	.word	0x40004400

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b095      	sub	sp, #84	; 0x54
 8000698:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f000 fd89 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069e:	f000 f887 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a2:	f000 f9cf 	bl	8000a44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a6:	f000 f977 	bl	8000998 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80006aa:	f000 f8df 	bl	800086c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f001 f944 	bl	800193c <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 80006b4:	4838      	ldr	r0, [pc, #224]	; (8000798 <main+0x104>)
 80006b6:	f000 fc6b 	bl	8000f90 <uartBasic_init>

  // set calendar time
  DateTime now = {
 80006ba:	4a38      	ldr	r2, [pc, #224]	; (800079c <main+0x108>)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	3304      	adds	r3, #4
 80006c8:	8019      	strh	r1, [r3, #0]
		  .day = 31,
		  .hour = 23,
		  .minute = 59,
		  .second = 45
  };
  calendar_setDateTime(now);
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006d2:	f7ff ff3b 	bl	800054c <calendar_setDateTime>

  // initialize calendar
  calendar_init(&hrtc);
 80006d6:	4832      	ldr	r0, [pc, #200]	; (80007a0 <main+0x10c>)
 80006d8:	f7ff ff2a 	bl	8000530 <calendar_init>

  // set some events


  // begin listening for messages from desktop
  uartBasic_RX_IT();
 80006dc:	f000 fc88 	bl	8000ff0 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
  int timeSeconds = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  int timeMinutes = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (1)
  {
	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 80006ec:	463a      	mov	r2, r7
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fc8f 	bl	8001018 <uartBasic_get_RX>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  // if message present, handle message
	  if (messageStatus == true) {
 8000700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00b      	beq.n	8000720 <main+0x8c>
		  // echo back to computer
		  uartBasic_TX_IT(messageHeader, messageBody);
 8000708:	463a      	mov	r2, r7
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4611      	mov	r1, r2
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fc4b 	bl	8000fac <uartBasic_TX_IT>
		  messageCount++;
 8000716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000718:	3301      	adds	r3, #1
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
		  uartBasic_RX_IT();
 800071c:	f000 fc68 	bl	8000ff0 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff27 	bl	8000578 <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 800072a:	463b      	mov	r3, r7
 800072c:	221c      	movs	r2, #28
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f005 facb 	bl	8005ccc <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000736:	f897 3020 	ldrb.w	r3, [r7, #32]
 800073a:	461e      	mov	r6, r3
 800073c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000740:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000744:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000748:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800074c:	4604      	mov	r4, r0
 800074e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8000752:	4605      	mov	r5, r0
 8000754:	4638      	mov	r0, r7
 8000756:	9504      	str	r5, [sp, #16]
 8000758:	9403      	str	r4, [sp, #12]
 800075a:	9102      	str	r1, [sp, #8]
 800075c:	9201      	str	r2, [sp, #4]
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	4633      	mov	r3, r6
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <main+0x110>)
 8000764:	211c      	movs	r1, #28
 8000766:	f005 fab9 	bl	8005cdc <sniprintf>
	  uartBasic_TX_IT("TIME", messageBody);
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	480e      	ldr	r0, [pc, #56]	; (80007a8 <main+0x114>)
 8000770:	f000 fc1c 	bl	8000fac <uartBasic_TX_IT>
	  timeSeconds++;
 8000774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000776:	3301      	adds	r3, #1
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
	  timeMinutes++;
 800077a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077c:	3301      	adds	r3, #1
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c

	  long int i = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
	  while (i < 65535*2)
 8000784:	e002      	b.n	800078c <main+0xf8>
		  i++;
 8000786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000788:	3301      	adds	r3, #1
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
	  while (i < 65535*2)
 800078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <main+0x118>)
 8000790:	4293      	cmp	r3, r2
 8000792:	ddf8      	ble.n	8000786 <main+0xf2>
  {
 8000794:	e7aa      	b.n	80006ec <main+0x58>
 8000796:	bf00      	nop
 8000798:	200000c8 	.word	0x200000c8
 800079c:	08006604 	.word	0x08006604
 80007a0:	20000090 	.word	0x20000090
 80007a4:	080065d8 	.word	0x080065d8
 80007a8:	080065fc 	.word	0x080065fc
 80007ac:	0001fffd 	.word	0x0001fffd

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b09a      	sub	sp, #104	; 0x68
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	2248      	movs	r2, #72	; 0x48
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fa84 	bl	8005ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007d6:	f001 f889 	bl	80018ec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fee5 	bl	80005aa <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <SystemClock_Config+0xb8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80007e8:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <SystemClock_Config+0xb8>)
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <SystemClock_Config+0xb8>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80007fc:	232c      	movs	r3, #44	; 0x2c
 80007fe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000800:	2381      	movs	r3, #129	; 0x81
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000804:	2301      	movs	r3, #1
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000808:	2300      	movs	r3, #0
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800080c:	2360      	movs	r3, #96	; 0x60
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000818:	2300      	movs	r3, #0
 800081a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4618      	mov	r0, r3
 8000822:	f001 fb4d 	bl	8001ec0 <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800082c:	f000 f917 	bl	8000a5e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000830:	236f      	movs	r3, #111	; 0x6f
 8000832:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f001 feb7 	bl	80025c4 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800085c:	f000 f8ff 	bl	8000a5e <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3768      	adds	r7, #104	; 0x68
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58000400 	.word	0x58000400

0800086c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b092      	sub	sp, #72	; 0x48
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000882:	2300      	movs	r3, #0
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	222c      	movs	r2, #44	; 0x2c
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f005 fa1d 	bl	8005ccc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000892:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <MX_RTC_Init+0x124>)
 8000894:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <MX_RTC_Init+0x128>)
 8000896:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000898:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <MX_RTC_Init+0x124>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800089e:	4b3c      	ldr	r3, [pc, #240]	; (8000990 <MX_RTC_Init+0x124>)
 80008a0:	227f      	movs	r2, #127	; 0x7f
 80008a2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a4:	4b3a      	ldr	r3, [pc, #232]	; (8000990 <MX_RTC_Init+0x124>)
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <MX_RTC_Init+0x124>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008b0:	4b37      	ldr	r3, [pc, #220]	; (8000990 <MX_RTC_Init+0x124>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008b6:	4b36      	ldr	r3, [pc, #216]	; (8000990 <MX_RTC_Init+0x124>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <MX_RTC_Init+0x124>)
 80008be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008c4:	4b32      	ldr	r3, [pc, #200]	; (8000990 <MX_RTC_Init+0x124>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80008ca:	4b31      	ldr	r3, [pc, #196]	; (8000990 <MX_RTC_Init+0x124>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008d0:	482f      	ldr	r0, [pc, #188]	; (8000990 <MX_RTC_Init+0x124>)
 80008d2:	f002 fb51 	bl	8002f78 <HAL_RTC_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80008dc:	f000 f8bf 	bl	8000a5e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008fe:	2201      	movs	r2, #1
 8000900:	4619      	mov	r1, r3
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <MX_RTC_Init+0x124>)
 8000904:	f002 fbba 	bl	800307c <HAL_RTC_SetTime>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800090e:	f000 f8a6 	bl	8000a5e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000912:	2301      	movs	r3, #1
 8000914:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000918:	2301      	movs	r3, #1
 800091a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800091e:	2301      	movs	r3, #1
 8000920:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800092a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800092e:	2201      	movs	r2, #1
 8000930:	4619      	mov	r1, r3
 8000932:	4817      	ldr	r0, [pc, #92]	; (8000990 <MX_RTC_Init+0x124>)
 8000934:	f002 fca0 	bl	8003278 <HAL_RTC_SetDate>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 800093e:	f000 f88e 	bl	8000a5e <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000942:	2300      	movs	r3, #0
 8000944:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000946:	2300      	movs	r3, #0
 8000948:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800094a:	2300      	movs	r3, #0
 800094c:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000966:	2301      	movs	r3, #1
 8000968:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800096c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2201      	movs	r2, #1
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_RTC_Init+0x124>)
 800097a:	f002 fd51 	bl	8003420 <HAL_RTC_SetAlarm>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000984:	f000 f86b 	bl	8000a5e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3748      	adds	r7, #72	; 0x48
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000090 	.word	0x20000090
 8000994:	40002800 	.word	0x40002800

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 800099e:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <MX_USART2_UART_Init+0xa8>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009e0:	2230      	movs	r2, #48	; 0x30
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f4:	4811      	ldr	r0, [pc, #68]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 80009f6:	f002 ff08 	bl	800380a <HAL_UART_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000a00:	f000 f82d 	bl	8000a5e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 8000a08:	f005 f85f 	bl	8005aca <HAL_UARTEx_SetTxFifoThreshold>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000a12:	f000 f824 	bl	8000a5e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 8000a1a:	f005 f894 	bl	8005b46 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000a24:	f000 f81b 	bl	8000a5e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_USART2_UART_Init+0xa4>)
 8000a2a:	f005 f816 	bl	8005a5a <HAL_UARTEx_DisableFifoMode>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8000a34:	f000 f813 	bl	8000a5e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000c8 	.word	0x200000c8
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fdc3 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	2004      	movs	r0, #4
 8000a50:	f7ff fdc0 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	2002      	movs	r0, #2
 8000a56:	f7ff fdbd 	bl	80005d4 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a62:	b672      	cpsid	i
}
 8000a64:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <Error_Handler+0x8>

08000a68 <setDateTime>:


/* Set the date and time in the RTC.
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4623      	mov	r3, r4
 8000a78:	71fb      	strb	r3, [r7, #7]
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71bb      	strb	r3, [r7, #6]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	717b      	strb	r3, [r7, #5]
 8000a82:	4613      	mov	r3, r2
 8000a84:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a5a      	ldr	r2, [pc, #360]	; (8000bf4 <setDateTime+0x18c>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	08db      	lsrs	r3, r3, #3
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	011b      	lsls	r3, r3, #4
 8000a94:	b258      	sxtb	r0, r3
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <setDateTime+0x18c>)
 8000a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a9e:	08d9      	lsrs	r1, r3, #3
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	4303      	orrs	r3, r0
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8000ab6:	79bb      	ldrb	r3, [r7, #6]
 8000ab8:	4a4e      	ldr	r2, [pc, #312]	; (8000bf4 <setDateTime+0x18c>)
 8000aba:	fba2 2303 	umull	r2, r3, r2, r3
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	b258      	sxtb	r0, r3
 8000ac6:	79ba      	ldrb	r2, [r7, #6]
 8000ac8:	4b4a      	ldr	r3, [pc, #296]	; (8000bf4 <setDateTime+0x18c>)
 8000aca:	fba3 1302 	umull	r1, r3, r3, r2
 8000ace:	08d9      	lsrs	r1, r3, #3
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	4303      	orrs	r3, r0
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 8000ae6:	797b      	ldrb	r3, [r7, #5]
 8000ae8:	4a42      	ldr	r2, [pc, #264]	; (8000bf4 <setDateTime+0x18c>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	011b      	lsls	r3, r3, #4
 8000af4:	b258      	sxtb	r0, r3
 8000af6:	797a      	ldrb	r2, [r7, #5]
 8000af8:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <setDateTime+0x18c>)
 8000afa:	fba3 1302 	umull	r1, r3, r3, r2
 8000afe:	08d9      	lsrs	r1, r3, #3
 8000b00:	460b      	mov	r3, r1
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	440b      	add	r3, r1
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	4303      	orrs	r3, r0
 8000b10:	b25b      	sxtb	r3, r3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8000b1a:	793b      	ldrb	r3, [r7, #4]
 8000b1c:	4a35      	ldr	r2, [pc, #212]	; (8000bf4 <setDateTime+0x18c>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	011b      	lsls	r3, r3, #4
 8000b28:	b258      	sxtb	r0, r3
 8000b2a:	793a      	ldrb	r2, [r7, #4]
 8000b2c:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <setDateTime+0x18c>)
 8000b2e:	fba3 1302 	umull	r1, r3, r3, r2
 8000b32:	08d9      	lsrs	r1, r3, #3
 8000b34:	460b      	mov	r3, r1
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	440b      	add	r3, r1
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	4303      	orrs	r3, r0
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8000b4a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b4e:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <setDateTime+0x18c>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	b258      	sxtb	r0, r3
 8000b5c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <setDateTime+0x18c>)
 8000b62:	fba3 1302 	umull	r1, r3, r3, r2
 8000b66:	08d9      	lsrs	r1, r3, #3
 8000b68:	460b      	mov	r3, r1
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	4303      	orrs	r3, r0
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8000b7e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <setDateTime+0x18c>)
 8000b84:	fba2 2303 	umull	r2, r3, r2, r3
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	b258      	sxtb	r0, r3
 8000b90:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <setDateTime+0x18c>)
 8000b96:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9a:	08d9      	lsrs	r1, r3, #3
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	4303      	orrs	r3, r0
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <setDateTime+0x190>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f107 011c 	add.w	r1, r7, #28
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f002 fb5b 	bl	8003278 <HAL_RTC_SetDate>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000bcc:	e7fe      	b.n	8000bcc <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <setDateTime+0x190>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f107 0108 	add.w	r1, r7, #8
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fa4f 	bl	800307c <HAL_RTC_SetTime>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000be8:	e7fe      	b.n	8000be8 <setDateTime+0x180>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	cccccccd 	.word	0xcccccccd
 8000bf8:	2000015c 	.word	0x2000015c

08000bfc <getDateTime>:


/* Get the time and date in the RTC.
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8000c1e:	4b47      	ldr	r3, [pc, #284]	; (8000d3c <getDateTime+0x140>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f107 0114 	add.w	r1, r7, #20
 8000c26:	2201      	movs	r2, #1
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fac3 	bl	80031b4 <HAL_RTC_GetTime>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000c38:	e7fe      	b.n	8000c38 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8000c3a:	4b40      	ldr	r3, [pc, #256]	; (8000d3c <getDateTime+0x140>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f107 0110 	add.w	r1, r7, #16
 8000c42:	2201      	movs	r2, #1
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 fb9d 	bl	8003384 <HAL_RTC_GetDate>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8000c54:	e7fe      	b.n	8000c54 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0b11110000) >> 4) * 10 + (date.Year & 0b00001111);
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	7cfb      	ldrb	r3, [r7, #19]
 8000c68:	f003 030f 	and.w	r3, r3, #15
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0b00010000) >> 4) * 10 + (date.Month & 0b00001111);
 8000c76:	7c7b      	ldrb	r3, [r7, #17]
 8000c78:	111b      	asrs	r3, r3, #4
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	461a      	mov	r2, r3
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	7c7b      	ldrb	r3, [r7, #17]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4413      	add	r3, r2
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0b00110000) >> 4) * 10 + (date.Date & 0b00001111);
 8000c9c:	7cbb      	ldrb	r3, [r7, #18]
 8000c9e:	111b      	asrs	r3, r3, #4
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	0092      	lsls	r2, r2, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	7cbb      	ldrb	r3, [r7, #18]
 8000cb4:	f003 030f 	and.w	r3, r3, #15
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0b00110000) >> 4) * 10 + (time.Hours & 0b00001111);
 8000cc2:	7d3b      	ldrb	r3, [r7, #20]
 8000cc4:	111b      	asrs	r3, r3, #4
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	7d3b      	ldrb	r3, [r7, #20]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0b01110000) >> 4) * 10 + (time.Minutes & 0b00001111);
 8000ce8:	7d7b      	ldrb	r3, [r7, #21]
 8000cea:	111b      	asrs	r3, r3, #4
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	4413      	add	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	7d7b      	ldrb	r3, [r7, #21]
 8000d00:	f003 030f 	and.w	r3, r3, #15
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	4413      	add	r3, r2
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0c:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0b01110000) >> 4) * 10 + (time.Seconds & 0b00001111);
 8000d0e:	7dbb      	ldrb	r3, [r7, #22]
 8000d10:	111b      	asrs	r3, r3, #4
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f003 0307 	and.w	r3, r3, #7
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	7dbb      	ldrb	r3, [r7, #22]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d32:	701a      	strb	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000015c 	.word	0x2000015c

08000d40 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <LL_AHB2_GRP1_EnableClock>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d84:	68fb      	ldr	r3, [r7, #12]
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000db4:	68fb      	ldr	r3, [r7, #12]
}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	; 0x40
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	2238      	movs	r2, #56	; 0x38
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f004 ff75 	bl	8005ccc <memset>
  if(hrtc->Instance==RTC)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_RTC_MspInit+0x54>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d115      	bne.n	8000e18 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 ffa1 	bl	8002d44 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e08:	f7ff fe29 	bl	8000a5e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e0c:	f7ff ff98 	bl	8000d40 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e14:	f7ff ffbc 	bl	8000d90 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3740      	adds	r7, #64	; 0x40
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40002800 	.word	0x40002800

08000e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b096      	sub	sp, #88	; 0x58
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2238      	movs	r2, #56	; 0x38
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 ff41 	bl	8005ccc <memset>
  if(huart->Instance==USART2)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <HAL_UART_MspInit+0x98>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d12e      	bne.n	8000eb2 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e58:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000e5c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 ff6e 	bl	8002d44 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e6e:	f7ff fdf6 	bl	8000a5e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e72:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000e76:	f7ff ff8b 	bl	8000d90 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff ff70 	bl	8000d60 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000e80:	230c      	movs	r3, #12
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e90:	2307      	movs	r3, #7
 8000e92:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9e:	f000 fbc5 	bl	800162c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2025      	movs	r0, #37	; 0x25
 8000ea8:	f000 facf 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eac:	2025      	movs	r0, #37	; 0x25
 8000eae:	f000 fae6 	bl	800147e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3758      	adds	r7, #88	; 0x58
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004400 	.word	0x40004400

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f06:	f000 f9ad 	bl	8001264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <USART2_IRQHandler+0x10>)
 8000f16:	f002 fda9 	bl	8003a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000c8 	.word	0x200000c8

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f004 fe82 	bl	8005c5c <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20008000 	.word	0x20008000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20000160 	.word	0x20000160
 8000f8c:	200001c8 	.word	0x200001c8

08000f90 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8000f98:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <uartBasic_init+0x18>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	20000168 	.word	0x20000168

08000fac <uartBasic_TX_IT>:
/*
 *
 */
bool uartBasic_TX_IT(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <uartBasic_TX_IT+0x3c>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f083 0301 	eor.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <uartBasic_TX_IT+0x32>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <uartBasic_TX_IT+0x40>)
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f89a 	bl	8001104 <composeMessage>
		_txBuffer_full = true;
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <uartBasic_TX_IT+0x3c>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_IT();
 8000fd6:	f000 f865 	bl	80010a4 <_txMessage_IT>

		// report successfully queued
		return true;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <uartBasic_TX_IT+0x34>
	}

	else
	{
		// return full buffer
		return false;
 8000fde:	2300      	movs	r3, #0
	}
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001ac 	.word	0x200001ac
 8000fec:	2000016c 	.word	0x2000016c

08000ff0 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <uartBasic_RX_IT+0x24>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f083 0301 	eor.w	r3, r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 8001004:	f000 f866 	bl	80010d4 <_rxMessage_IT>

		// return success
		return true;
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 800100c:	2300      	movs	r3, #0
	}
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200001ad 	.word	0x200001ad

08001018 <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <uartBasic_get_RX+0x4c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d015      	beq.n	8001058 <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <uartBasic_get_RX+0x50>)
 800102e:	f107 0408 	add.w	r4, r7, #8
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800103c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <uartBasic_get_RX+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	461a      	mov	r2, r3
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f86e 	bl	8001130 <decomposeMessage>

		// report successfully dequeued
		return true;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 8001058:	2300      	movs	r3, #0
	}
}
 800105a:	4618      	mov	r0, r3
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bdb0      	pop	{r4, r5, r7, pc}
 8001062:	bf00      	nop
 8001064:	200001ad 	.word	0x200001ad
 8001068:	2000018c 	.word	0x2000018c

0800106c <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <uartBasic_RX_Complete_ISR+0x14>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200001ad 	.word	0x200001ad

08001084 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <uartBasic_TX_Complete_ISR+0x14>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200001ac 	.word	0x200001ac

0800109c <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 80010a0:	e7fe      	b.n	80010a0 <uartBasic_Error_ISR+0x4>
	...

080010a4 <_txMessage_IT>:

/*
 *
 */
void _txMessage_IT(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <_txMessage_IT+0x24>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2220      	movs	r2, #32
 80010ae:	4907      	ldr	r1, [pc, #28]	; (80010cc <_txMessage_IT+0x28>)
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fbfb 	bl	80038ac <HAL_UART_Transmit_IT>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d102      	bne.n	80010c2 <_txMessage_IT+0x1e>
		_txError = true;
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <_txMessage_IT+0x2c>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000168 	.word	0x20000168
 80010cc:	2000016c 	.word	0x2000016c
 80010d0:	20000164 	.word	0x20000164

080010d4 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_rxMessage_IT+0x24>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2220      	movs	r2, #32
 80010de:	4907      	ldr	r1, [pc, #28]	; (80010fc <_rxMessage_IT+0x28>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 fc77 	bl	80039d4 <HAL_UART_Receive_IT>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d102      	bne.n	80010f2 <_rxMessage_IT+0x1e>
		_rxError = true;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <_rxMessage_IT+0x2c>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000168 	.word	0x20000168
 80010fc:	2000018c 	.word	0x2000018c
 8001100:	20000165 	.word	0x20000165

08001104 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3304      	adds	r3, #4
 800111e:	221c      	movs	r2, #28
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fdc4 	bl	8005cb0 <memcpy>
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3304      	adds	r3, #4
 800114a:	221c      	movs	r2, #28
 800114c:	4619      	mov	r1, r3
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f004 fdae 	bl	8005cb0 <memcpy>
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001160:	f7ff f9e0 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LoopForever+0x6>)
  ldr r1, =_edata
 8001166:	490d      	ldr	r1, [pc, #52]	; (800119c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <LoopForever+0xe>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800116c:	e002      	b.n	8001174 <LoopCopyDataInit>

0800116e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001172:	3304      	adds	r3, #4

08001174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001178:	d3f9      	bcc.n	800116e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800117c:	4c0a      	ldr	r4, [pc, #40]	; (80011a8 <LoopForever+0x16>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001180:	e001      	b.n	8001186 <LoopFillZerobss>

08001182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001184:	3204      	adds	r2, #4

08001186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001188:	d3fb      	bcc.n	8001182 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800118a:	f004 fd6d 	bl	8005c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118e:	f7ff fa81 	bl	8000694 <main>

08001192 <LoopForever>:

LoopForever:
    b LoopForever
 8001192:	e7fe      	b.n	8001192 <LoopForever>
  ldr   r0, =_estack
 8001194:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011a0:	08006734 	.word	0x08006734
  ldr r2, =_sbss
 80011a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011a8:	200001c4 	.word	0x200001c4

080011ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ba:	2003      	movs	r0, #3
 80011bc:	f000 f93a 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011c0:	f001 fbe2 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_Init+0x3c>)
 80011c8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f810 	bl	80011f0 <HAL_InitTick>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	e001      	b.n	80011e0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011dc:	f7ff fdf0 	bl	8000dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e0:	79fb      	ldrb	r3, [r7, #7]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000

080011f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_InitTick+0x6c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d024      	beq.n	800124e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001204:	f001 fbc0 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 8001208:	4602      	mov	r2, r0
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_InitTick+0x6c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	4619      	mov	r1, r3
 8001210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001214:	fbb3 f3f1 	udiv	r3, r3, r1
 8001218:	fbb2 f3f3 	udiv	r3, r2, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f93c 	bl	800149a <HAL_SYSTICK_Config>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10f      	bne.n	8001248 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	d809      	bhi.n	8001242 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122e:	2200      	movs	r2, #0
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001236:	f000 f908 	bl	800144a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <HAL_InitTick+0x70>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e007      	b.n	8001252 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]
 8001246:	e004      	b.n	8001252 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	73fb      	strb	r3, [r7, #15]
 800124c:	e001      	b.n	8001252 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000008 	.word	0x20000008
 8001260:	20000004 	.word	0x20000004

08001264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x1c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x20>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4413      	add	r3, r2
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <HAL_IncTick+0x20>)
 8001276:	6013      	str	r3, [r2, #0]
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000008 	.word	0x20000008
 8001284:	200001b0 	.word	0x200001b0

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <HAL_GetTick+0x10>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	200001b0 	.word	0x200001b0

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4906      	ldr	r1, [pc, #24]	; (8001334 <__NVIC_EnableIRQ+0x34>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	f7ff ff90 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff2d 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff44 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff92 	bl	800138c <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff61 	bl	8001338 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff37 	bl	8001300 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa4 	bl	80013f0 <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e04f      	b.n	8001564 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d008      	beq.n	80014e2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2204      	movs	r2, #4
 80014d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e040      	b.n	8001564 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 020e 	bic.w	r2, r2, #14
 80014f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001500:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f003 021c 	and.w	r2, r3, #28
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800152e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00c      	beq.n	8001552 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001546:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001550:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d005      	beq.n	8001592 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2204      	movs	r2, #4
 800158a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e047      	b.n	8001622 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 020e 	bic.w	r2, r2, #14
 80015a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0201 	bic.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f003 021c 	and.w	r2, r3, #28
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001600:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	4798      	blx	r3
    }
  }
  return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e140      	b.n	80018be <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8132 	beq.w	80018b8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x40>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d017      	beq.n	800170a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d123      	bne.n	800175e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	691a      	ldr	r2, [r3, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	6939      	ldr	r1, [r7, #16]
 800175a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0203 	and.w	r2, r3, #3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 808c 	beq.w	80018b8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80017a0:	4a4e      	ldr	r2, [pc, #312]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	2207      	movs	r2, #7
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ca:	d00d      	beq.n	80017e8 <HAL_GPIO_Init+0x1bc>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a44      	ldr	r2, [pc, #272]	; (80018e0 <HAL_GPIO_Init+0x2b4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d007      	beq.n	80017e4 <HAL_GPIO_Init+0x1b8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a43      	ldr	r2, [pc, #268]	; (80018e4 <HAL_GPIO_Init+0x2b8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_GPIO_Init+0x1b4>
 80017dc:	2302      	movs	r3, #2
 80017de:	e004      	b.n	80017ea <HAL_GPIO_Init+0x1be>
 80017e0:	2307      	movs	r3, #7
 80017e2:	e002      	b.n	80017ea <HAL_GPIO_Init+0x1be>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <HAL_GPIO_Init+0x1be>
 80017e8:	2300      	movs	r3, #0
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	f002 0203 	and.w	r2, r2, #3
 80017f0:	0092      	lsls	r2, r2, #2
 80017f2:	4093      	lsls	r3, r2
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017fa:	4938      	ldr	r1, [pc, #224]	; (80018dc <HAL_GPIO_Init+0x2b0>)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001808:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800182c:	4a2e      	ldr	r2, [pc, #184]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001832:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001856:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800185c:	4b22      	ldr	r3, [pc, #136]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 800185e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001862:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001882:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 800188c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001890:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_GPIO_Init+0x2bc>)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f47f aeb7 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40010000 	.word	0x40010000
 80018e0:	48000400 	.word	0x48000400
 80018e4:	48000800 	.word	0x48000800
 80018e8:	58000800 	.word	0x58000800

080018ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <HAL_PWR_EnableBkUpAccess+0x18>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a03      	ldr	r2, [pc, #12]	; (8001904 <HAL_PWR_EnableBkUpAccess+0x18>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	58000400 	.word	0x58000400

08001908 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <LL_PWR_EnableBootC2+0x18>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <LL_PWR_EnableBootC2+0x18>)
 8001912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	58000400 	.word	0x58000400

08001924 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <HAL_PWREx_GetVoltageRange+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	58000400 	.word	0x58000400

0800193c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001944:	f7ff ffe0 	bl	8001908 <LL_PWR_EnableBootC2>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001960:	d101      	bne.n	8001966 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	58000400 	.word	0x58000400

08001974 <LL_RCC_HSE_EnableTcxo>:
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001986:	6013      	str	r3, [r2, #0]
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <LL_RCC_HSE_DisableTcxo>:
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019be:	d101      	bne.n	80019c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <LL_RCC_HSE_Enable>:
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <LL_RCC_HSE_Disable>:
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80019ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr

08001a06 <LL_RCC_HSE_IsReady>:
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a18:	d101      	bne.n	8001a1e <LL_RCC_HSE_IsReady+0x18>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <LL_RCC_HSE_IsReady+0x1a>
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_HSI_Enable>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_HSI_Disable>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_HSI_IsReady>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d101      	bne.n	8001a78 <LL_RCC_HSI_IsReady+0x18>
 8001a74:	2301      	movs	r3, #1
 8001a76:	e000      	b.n	8001a7a <LL_RCC_HSI_IsReady+0x1a>
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	061b      	lsls	r3, r3, #24
 8001a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <LL_RCC_LSE_IsReady>:
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d101      	bne.n	8001ac2 <LL_RCC_LSE_IsReady+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_RCC_LSE_IsReady+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <LL_RCC_LSI_Enable>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr

08001aec <LL_RCC_LSI_Disable>:
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <LL_RCC_LSI_IsReady>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d101      	bne.n	8001b24 <LL_RCC_LSI_IsReady+0x18>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_RCC_LSI_IsReady+0x1a>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <LL_RCC_MSI_Enable>:
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6013      	str	r3, [r2, #0]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_MSI_Disable>:
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <LL_RCC_MSI_IsReady>:
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d101      	bne.n	8001b7c <LL_RCC_MSI_IsReady+0x16>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <LL_RCC_MSI_IsReady+0x18>
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d101      	bne.n	8001b9c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_MSI_GetRange>:
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <LL_RCC_SetSysClkSource>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f023 0203 	bic.w	r2, r3, #3
 8001c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <LL_RCC_GetSysClkSource>:
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <LL_RCC_SetAHBPrescaler>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <LL_C2_RCC_SetAHBPrescaler>:
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <LL_RCC_SetAHB3Prescaler>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c98:	f023 020f 	bic.w	r2, r3, #15
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <LL_RCC_SetAPB1Prescaler>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	608b      	str	r3, [r1, #8]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <LL_RCC_SetAPB2Prescaler>:
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <LL_RCC_GetAHBPrescaler>:
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <LL_RCC_GetAHB3Prescaler>:
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d22:	011b      	lsls	r3, r3, #4
 8001d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <LL_RCC_GetAPB1Prescaler>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <LL_RCC_GetAPB2Prescaler>:
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	6013      	str	r3, [r2, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001da6:	d101      	bne.n	8001dac <LL_RCC_PLL_IsReady+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_RCC_PLL_IsReady+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0a1b      	lsrs	r3, r3, #8
 8001dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0303 	and.w	r3, r3, #3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d101      	bne.n	8001e28 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e46:	d101      	bne.n	8001e4c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d101      	bne.n	8001e70 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e8c:	d101      	bne.n	8001e92 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001eae:	d101      	bne.n	8001eb4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e36f      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed2:	f7ff fea6 	bl	8001c22 <LL_RCC_GetSysClkSource>
 8001ed6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ed8:	f7ff ff8f 	bl	8001dfa <LL_RCC_PLL_GetMainSource>
 8001edc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80c4 	beq.w	8002074 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x3e>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d176      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d173      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e353      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_OscConfig+0x68>
 8001f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f26:	e006      	b.n	8001f36 <HAL_RCC_OscConfig+0x76>
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d222      	bcs.n	8001f80 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fd5a 	bl	80029f8 <RCC_SetFlashLatencyFromMSIRange>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e331      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe2b 	bl	8001bd4 <LL_RCC_MSI_SetCalibTrimming>
 8001f7e:	e021      	b.n	8001fc4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fe12 	bl	8001bd4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fd1f 	bl	80029f8 <RCC_SetFlashLatencyFromMSIRange>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e2f6      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fc4:	f000 fce0 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4aa7      	ldr	r2, [pc, #668]	; (8002268 <HAL_RCC_OscConfig+0x3a8>)
 8001fcc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001fce:	4ba7      	ldr	r3, [pc, #668]	; (800226c <HAL_RCC_OscConfig+0x3ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff f90c 	bl	80011f0 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001fdc:	7cfb      	ldrb	r3, [r7, #19]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d047      	beq.n	8002072 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001fe2:	7cfb      	ldrb	r3, [r7, #19]
 8001fe4:	e2e5      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d02c      	beq.n	8002048 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fee:	f7ff fd9e 	bl	8001b2e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff f949 	bl	8001288 <HAL_GetTick>
 8001ff6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f945 	bl	8001288 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e2d2      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800200c:	f7ff fdab 	bl	8001b66 <LL_RCC_MSI_IsReady>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f1      	beq.n	8001ffa <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fdc7 	bl	8001bd4 <LL_RCC_MSI_SetCalibTrimming>
 8002046:	e015      	b.n	8002074 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002048:	f7ff fd7f 	bl	8001b4a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800204c:	f7ff f91c 	bl	8001288 <HAL_GetTick>
 8002050:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002054:	f7ff f918 	bl	8001288 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e2a5      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002066:	f7ff fd7e 	bl	8001b66 <LL_RCC_MSI_IsReady>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f1      	bne.n	8002054 <HAL_RCC_OscConfig+0x194>
 8002070:	e000      	b.n	8002074 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002072:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d058      	beq.n	8002132 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d005      	beq.n	8002092 <HAL_RCC_OscConfig+0x1d2>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	d108      	bne.n	800209e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d105      	bne.n	800209e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d14b      	bne.n	8002132 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e289      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_OscConfig+0x204>
 80020be:	f7ff fc86 	bl	80019ce <LL_RCC_HSE_Enable>
 80020c2:	e00d      	b.n	80020e0 <HAL_RCC_OscConfig+0x220>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80020cc:	d104      	bne.n	80020d8 <HAL_RCC_OscConfig+0x218>
 80020ce:	f7ff fc51 	bl	8001974 <LL_RCC_HSE_EnableTcxo>
 80020d2:	f7ff fc7c 	bl	80019ce <LL_RCC_HSE_Enable>
 80020d6:	e003      	b.n	80020e0 <HAL_RCC_OscConfig+0x220>
 80020d8:	f7ff fc87 	bl	80019ea <LL_RCC_HSE_Disable>
 80020dc:	f7ff fc58 	bl	8001990 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d012      	beq.n	800210e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f8ce 	bl	8001288 <HAL_GetTick>
 80020ec:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f0:	f7ff f8ca 	bl	8001288 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e257      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002102:	f7ff fc80 	bl	8001a06 <LL_RCC_HSE_IsReady>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f1      	beq.n	80020f0 <HAL_RCC_OscConfig+0x230>
 800210c:	e011      	b.n	8002132 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7ff f8bb 	bl	8001288 <HAL_GetTick>
 8002112:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002116:	f7ff f8b7 	bl	8001288 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b64      	cmp	r3, #100	; 0x64
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e244      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002128:	f7ff fc6d 	bl	8001a06 <LL_RCC_HSE_IsReady>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f1      	bne.n	8002116 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d046      	beq.n	80021cc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d005      	beq.n	8002150 <HAL_RCC_OscConfig+0x290>
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d10e      	bne.n	8002168 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d10b      	bne.n	8002168 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e22a      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fc8e 	bl	8001a82 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002166:	e031      	b.n	80021cc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d019      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002170:	f7ff fc5a 	bl	8001a28 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f888 	bl	8001288 <HAL_GetTick>
 8002178:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff f884 	bl	8001288 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e211      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800218e:	f7ff fc67 	bl	8001a60 <LL_RCC_HSI_IsReady>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f1      	beq.n	800217c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fc70 	bl	8001a82 <LL_RCC_HSI_SetCalibTrimming>
 80021a2:	e013      	b.n	80021cc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a4:	f7ff fc4e 	bl	8001a44 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff f86e 	bl	8001288 <HAL_GetTick>
 80021ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7ff f86a 	bl	8001288 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1f7      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80021c2:	f7ff fc4d 	bl	8001a60 <LL_RCC_HSI_IsReady>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f1      	bne.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d06e      	beq.n	80022b6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d056      	beq.n	800228e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d031      	beq.n	800225c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e1d0      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d013      	beq.n	8002242 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800221a:	f7ff fc67 	bl	8001aec <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800221e:	f7ff f833 	bl	8001288 <HAL_GetTick>
 8002222:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7ff f82f 	bl	8001288 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b11      	cmp	r3, #17
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1bc      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002238:	f7ff fc68 	bl	8001b0c <LL_RCC_LSI_IsReady>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f1      	bne.n	8002226 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	f023 0210 	bic.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225c:	f7ff fc36 	bl	8001acc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7ff f812 	bl	8001288 <HAL_GetTick>
 8002264:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002266:	e00c      	b.n	8002282 <HAL_RCC_OscConfig+0x3c2>
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7ff f80a 	bl	8001288 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b11      	cmp	r3, #17
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e197      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002282:	f7ff fc43 	bl	8001b0c <LL_RCC_LSI_IsReady>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f1      	beq.n	8002270 <HAL_RCC_OscConfig+0x3b0>
 800228c:	e013      	b.n	80022b6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	f7ff fc2d 	bl	8001aec <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7fe fff9 	bl	8001288 <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229a:	f7fe fff5 	bl	8001288 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b11      	cmp	r3, #17
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e182      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80022ac:	f7ff fc2e 	bl	8001b0c <LL_RCC_LSI_IsReady>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f1      	bne.n	800229a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 80d8 	beq.w	8002474 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022c4:	f7ff fb44 	bl	8001950 <LL_PWR_IsEnabledBkUpAccess>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d113      	bne.n	80022f6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80022ce:	f7ff fb0d 	bl	80018ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d2:	f7fe ffd9 	bl	8001288 <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7fe ffd5 	bl	8001288 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e162      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80022ec:	f7ff fb30 	bl	8001950 <LL_PWR_IsEnabledBkUpAccess>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f1      	beq.n	80022da <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d07b      	beq.n	80023f6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b85      	cmp	r3, #133	; 0x85
 8002304:	d003      	beq.n	800230e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b05      	cmp	r3, #5
 800230c:	d109      	bne.n	8002322 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe ffb1 	bl	8001288 <HAL_GetTick>
 8002326:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe ffa3 	bl	8001288 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e12e      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002354:	f7ff fba9 	bl	8001aaa <LL_RCC_LSE_IsReady>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ef      	beq.n	800233e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b81      	cmp	r3, #129	; 0x81
 8002364:	d003      	beq.n	800236e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b85      	cmp	r3, #133	; 0x85
 800236c:	d121      	bne.n	80023b2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7fe ff8b 	bl	8001288 <HAL_GetTick>
 8002372:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe ff7d 	bl	8001288 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	; 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e108      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ec      	beq.n	800238a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80023b0:	e060      	b.n	8002474 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe ff69 	bl	8001288 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe ff5b 	bl	8001288 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0e6      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1ec      	bne.n	80023ce <HAL_RCC_OscConfig+0x50e>
 80023f4:	e03e      	b.n	8002474 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7fe ff47 	bl	8001288 <HAL_GetTick>
 80023fa:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe ff39 	bl	8001288 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0c4      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ec      	bne.n	8002412 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe ff26 	bl	8001288 <HAL_GetTick>
 800243c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002452:	e00a      	b.n	800246a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7fe ff18 	bl	8001288 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0a3      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800246a:	f7ff fb1e 	bl	8001aaa <LL_RCC_LSE_IsReady>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ef      	bne.n	8002454 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8099 	beq.w	80025b0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	2b0c      	cmp	r3, #12
 8002482:	d06c      	beq.n	800255e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	2b02      	cmp	r3, #2
 800248a:	d14b      	bne.n	8002524 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248c:	f7ff fc74 	bl	8001d78 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fefa 	bl	8001288 <HAL_GetTick>
 8002494:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fef6 	bl	8001288 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b0a      	cmp	r3, #10
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e083      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80024aa:	f7ff fc73 	bl	8001d94 <LL_RCC_PLL_IsReady>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f1      	bne.n	8002498 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_RCC_OscConfig+0x6fc>)
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024c6:	4311      	orrs	r1, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024cc:	0212      	lsls	r2, r2, #8
 80024ce:	4311      	orrs	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024d4:	4311      	orrs	r1, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024da:	4311      	orrs	r1, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024e0:	430a      	orrs	r2, r1
 80024e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ea:	f7ff fc37 	bl	8001d5c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7fe fec3 	bl	8001288 <HAL_GetTick>
 8002502:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002506:	f7fe febf 	bl	8001288 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b0a      	cmp	r3, #10
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e04c      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002518:	f7ff fc3c 	bl	8001d94 <LL_RCC_PLL_IsReady>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f1      	beq.n	8002506 <HAL_RCC_OscConfig+0x646>
 8002522:	e045      	b.n	80025b0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002524:	f7ff fc28 	bl	8001d78 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe feae 	bl	8001288 <HAL_GetTick>
 800252c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe feaa 	bl	8001288 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b0a      	cmp	r3, #10
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e037      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002542:	f7ff fc27 	bl	8001d94 <LL_RCC_PLL_IsReady>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f1      	bne.n	8002530 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCC_OscConfig+0x700>)
 8002558:	4013      	ands	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
 800255c:	e028      	b.n	80025b0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e023      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	429a      	cmp	r2, r3
 800257e:	d115      	bne.n	80025ac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258a:	429a      	cmp	r2, r3
 800258c:	d10e      	bne.n	80025ac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	429a      	cmp	r2, r3
 800259c:	d106      	bne.n	80025ac <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	11c1808c 	.word	0x11c1808c
 80025c0:	eefefffc 	.word	0xeefefffc

080025c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e12c      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b98      	ldr	r3, [pc, #608]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d91b      	bls.n	800261e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b95      	ldr	r3, [pc, #596]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4993      	ldr	r1, [pc, #588]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f6:	f7fe fe47 	bl	8001288 <HAL_GetTick>
 80025fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025fe:	f7fe fe43 	bl	8001288 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e110      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002610:	4b8a      	ldr	r3, [pc, #552]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d1ef      	bne.n	80025fe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fb02 	bl	8001c38 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002634:	f7fe fe28 	bl	8001288 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800263c:	f7fe fe24 	bl	8001288 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e0f1      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800264e:	f7ff fbdf 	bl	8001e10 <LL_RCC_IsActiveFlag_HPRE>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f1      	beq.n	800263c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d016      	beq.n	8002692 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff faf8 	bl	8001c5e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800266e:	f7fe fe0b 	bl	8001288 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002676:	f7fe fe07 	bl	8001288 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0d4      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002688:	f7ff fbd3 	bl	8001e32 <LL_RCC_IsActiveFlag_C2HPRE>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f1      	beq.n	8002676 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff faf0 	bl	8001c88 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fdee 	bl	8001288 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026b0:	f7fe fdea 	bl	8001288 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0b7      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80026c2:	f7ff fbc8 	bl	8001e56 <LL_RCC_IsActiveFlag_SHDHPRE>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f1      	beq.n	80026b0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fae9 	bl	8001cb4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026e2:	f7fe fdd1 	bl	8001288 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ea:	f7fe fdcd 	bl	8001288 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e09a      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026fc:	f7ff fbbd 	bl	8001e7a <LL_RCC_IsActiveFlag_PPRE1>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f1      	beq.n	80026ea <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d017      	beq.n	8002742 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fade 	bl	8001cda <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800271e:	f7fe fdb3 	bl	8001288 <HAL_GetTick>
 8002722:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002726:	f7fe fdaf 	bl	8001288 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e07c      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002738:	f7ff fbb0 	bl	8001e9c <LL_RCC_IsActiveFlag_PPRE2>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f1      	beq.n	8002726 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d043      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d106      	bne.n	8002764 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002756:	f7ff f956 	bl	8001a06 <LL_RCC_HSE_IsReady>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11e      	bne.n	800279e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e066      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d106      	bne.n	800277a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800276c:	f7ff fb12 	bl	8001d94 <LL_RCC_PLL_IsReady>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d113      	bne.n	800279e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e05b      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002782:	f7ff f9f0 	bl	8001b66 <LL_RCC_MSI_IsReady>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d108      	bne.n	800279e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e050      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002790:	f7ff f966 	bl	8001a60 <LL_RCC_HSI_IsReady>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e049      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fa2a 	bl	8001bfc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a8:	f7fe fd6e 	bl	8001288 <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b0:	f7fe fd6a 	bl	8001288 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e035      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	f7ff fa2c 	bl	8001c22 <LL_RCC_GetSysClkSource>
 80027ca:	4602      	mov	r2, r0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d1ec      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d21b      	bcs.n	800281c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 0207 	bic.w	r2, r3, #7
 80027ec:	4913      	ldr	r1, [pc, #76]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f4:	f7fe fd48 	bl	8001288 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	e008      	b.n	800280e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027fc:	f7fe fd44 	bl	8001288 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e011      	b.n	8002832 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x278>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d1ef      	bne.n	80027fc <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800281c:	f000 f8b4 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 8002820:	4603      	mov	r3, r0
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <HAL_RCC_ClockConfig+0x27c>)
 8002824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <HAL_RCC_ClockConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fce0 	bl	80011f0 <HAL_InitTick>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	58004000 	.word	0x58004000
 8002840:	20000000 	.word	0x20000000
 8002844:	20000004 	.word	0x20000004

08002848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002848:	b590      	push	{r4, r7, lr}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002856:	f7ff f9e4 	bl	8001c22 <LL_RCC_GetSysClkSource>
 800285a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800285c:	f7ff facd 	bl	8001dfa <LL_RCC_PLL_GetMainSource>
 8002860:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x2c>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d139      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d136      	bne.n	80028e2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002874:	f7ff f987 	bl	8001b86 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d115      	bne.n	80028aa <HAL_RCC_GetSysClockFreq+0x62>
 800287e:	f7ff f982 	bl	8001b86 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_GetSysClockFreq+0x4e>
 8002888:	f7ff f98d 	bl	8001ba6 <LL_RCC_MSI_GetRange>
 800288c:	4603      	mov	r3, r0
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	e005      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x5a>
 8002896:	f7ff f991 	bl	8001bbc <LL_RCC_MSI_GetRangeAfterStandby>
 800289a:	4603      	mov	r3, r0
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a36      	ldr	r2, [pc, #216]	; (800297c <HAL_RCC_GetSysClockFreq+0x134>)
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	e014      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80028aa:	f7ff f96c 	bl	8001b86 <LL_RCC_MSI_IsEnabledRangeSelect>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d106      	bne.n	80028c2 <HAL_RCC_GetSysClockFreq+0x7a>
 80028b4:	f7ff f977 	bl	8001ba6 <LL_RCC_MSI_GetRange>
 80028b8:	4603      	mov	r3, r0
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	e005      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x86>
 80028c2:	f7ff f97b 	bl	8001bbc <LL_RCC_MSI_GetRangeAfterStandby>
 80028c6:	4603      	mov	r3, r0
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4a2b      	ldr	r2, [pc, #172]	; (800297c <HAL_RCC_GetSysClockFreq+0x134>)
 80028d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d115      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028e0:	e012      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d102      	bne.n	80028ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028e8:	4b25      	ldr	r3, [pc, #148]	; (8002980 <HAL_RCC_GetSysClockFreq+0x138>)
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	e00c      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d109      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80028f4:	f7ff f85a 	bl	80019ac <LL_RCC_HSE_IsEnabledDiv2>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d102      	bne.n	8002904 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_GetSysClockFreq+0x138>)
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	e001      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002906:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002908:	f7ff f98b 	bl	8001c22 <LL_RCC_GetSysClkSource>
 800290c:	4603      	mov	r3, r0
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d12f      	bne.n	8002972 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002912:	f7ff fa72 	bl	8001dfa <LL_RCC_PLL_GetMainSource>
 8002916:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0xde>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d003      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0xe4>
 8002924:	e00d      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002926:	4b16      	ldr	r3, [pc, #88]	; (8002980 <HAL_RCC_GetSysClockFreq+0x138>)
 8002928:	60fb      	str	r3, [r7, #12]
        break;
 800292a:	e00d      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800292c:	f7ff f83e 	bl	80019ac <LL_RCC_HSE_IsEnabledDiv2>
 8002930:	4603      	mov	r3, r0
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <HAL_RCC_GetSysClockFreq+0x138>)
 8002938:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800293a:	e005      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_RCC_GetSysClockFreq+0x13c>)
 800293e:	60fb      	str	r3, [r7, #12]
        break;
 8002940:	e002      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	60fb      	str	r3, [r7, #12]
        break;
 8002946:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002948:	f7ff fa35 	bl	8001db6 <LL_RCC_PLL_GetN>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	fb03 f402 	mul.w	r4, r3, r2
 8002954:	f7ff fa46 	bl	8001de4 <LL_RCC_PLL_GetDivider>
 8002958:	4603      	mov	r3, r0
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	3301      	adds	r3, #1
 800295e:	fbb4 f4f3 	udiv	r4, r4, r3
 8002962:	f7ff fa34 	bl	8001dce <LL_RCC_PLL_GetR>
 8002966:	4603      	mov	r3, r0
 8002968:	0f5b      	lsrs	r3, r3, #29
 800296a:	3301      	adds	r3, #1
 800296c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002970:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002972:	697b      	ldr	r3, [r7, #20]
}
 8002974:	4618      	mov	r0, r3
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}
 800297c:	08006688 	.word	0x08006688
 8002980:	00f42400 	.word	0x00f42400
 8002984:	01e84800 	.word	0x01e84800

08002988 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b598      	push	{r3, r4, r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800298c:	f7ff ff5c 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 8002990:	4604      	mov	r4, r0
 8002992:	f7ff f9b5 	bl	8001d00 <LL_RCC_GetAHBPrescaler>
 8002996:	4603      	mov	r3, r0
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	4a03      	ldr	r2, [pc, #12]	; (80029ac <HAL_RCC_GetHCLKFreq+0x24>)
 80029a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd98      	pop	{r3, r4, r7, pc}
 80029ac:	08006628 	.word	0x08006628

080029b0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029b0:	b598      	push	{r3, r4, r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029b4:	f7ff ffe8 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029b8:	4604      	mov	r4, r0
 80029ba:	f7ff f9b9 	bl	8001d30 <LL_RCC_GetAPB1Prescaler>
 80029be:	4603      	mov	r3, r0
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd98      	pop	{r3, r4, r7, pc}
 80029d0:	08006668 	.word	0x08006668

080029d4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d4:	b598      	push	{r3, r4, r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80029d8:	f7ff ffd6 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029dc:	4604      	mov	r4, r0
 80029de:	f7ff f9b2 	bl	8001d46 <LL_RCC_GetAPB2Prescaler>
 80029e2:	4603      	mov	r3, r0
 80029e4:	0adb      	lsrs	r3, r3, #11
 80029e6:	4a03      	ldr	r2, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ec:	fa24 f303 	lsr.w	r3, r4, r3
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	bd98      	pop	{r3, r4, r7, pc}
 80029f4:	08006668 	.word	0x08006668

080029f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002a10:	f7ff f981 	bl	8001d16 <LL_RCC_GetAHB3Prescaler>
 8002a14:	4603      	mov	r3, r0
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	4a0c      	ldr	r2, [pc, #48]	; (8002a50 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	0c9c      	lsrs	r4, r3, #18
 8002a34:	f7fe ff76 	bl	8001924 <HAL_PWREx_GetVoltageRange>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	f000 f80b 	bl	8002a58 <RCC_SetFlashLatency>
 8002a42:	4603      	mov	r3, r0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}
 8002a4c:	08006688 	.word	0x08006688
 8002a50:	08006628 	.word	0x08006628
 8002a54:	431bde83 	.word	0x431bde83

08002a58 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08e      	sub	sp, #56	; 0x38
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002a62:	4a3a      	ldr	r2, [pc, #232]	; (8002b4c <RCC_SetFlashLatency+0xf4>)
 8002a64:	f107 0320 	add.w	r3, r7, #32
 8002a68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a6c:	6018      	str	r0, [r3, #0]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002a72:	4a37      	ldr	r2, [pc, #220]	; (8002b50 <RCC_SetFlashLatency+0xf8>)
 8002a74:	f107 0318 	add.w	r3, r7, #24
 8002a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a7c:	6018      	str	r0, [r3, #0]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002a82:	4a34      	ldr	r2, [pc, #208]	; (8002b54 <RCC_SetFlashLatency+0xfc>)
 8002a84:	f107 030c 	add.w	r3, r7, #12
 8002a88:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002a8e:	2300      	movs	r3, #0
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a98:	d11b      	bne.n	8002ad2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9e:	e014      	b.n	8002aca <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	3338      	adds	r3, #56	; 0x38
 8002aa6:	443b      	add	r3, r7
 8002aa8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002aac:	461a      	mov	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d807      	bhi.n	8002ac4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	3338      	adds	r3, #56	; 0x38
 8002aba:	443b      	add	r3, r7
 8002abc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ac2:	e021      	b.n	8002b08 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d9e7      	bls.n	8002aa0 <RCC_SetFlashLatency+0x48>
 8002ad0:	e01a      	b.n	8002b08 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad6:	e014      	b.n	8002b02 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	3338      	adds	r3, #56	; 0x38
 8002ade:	443b      	add	r3, r7
 8002ae0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d807      	bhi.n	8002afc <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	3338      	adds	r3, #56	; 0x38
 8002af2:	443b      	add	r3, r7
 8002af4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002af8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002afa:	e005      	b.n	8002b08 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	3301      	adds	r3, #1
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d9e7      	bls.n	8002ad8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <RCC_SetFlashLatency+0x100>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 0207 	bic.w	r2, r3, #7
 8002b10:	4911      	ldr	r1, [pc, #68]	; (8002b58 <RCC_SetFlashLatency+0x100>)
 8002b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b18:	f7fe fbb6 	bl	8001288 <HAL_GetTick>
 8002b1c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b1e:	e008      	b.n	8002b32 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b20:	f7fe fbb2 	bl	8001288 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e007      	b.n	8002b42 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <RCC_SetFlashLatency+0x100>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d1ef      	bne.n	8002b20 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3738      	adds	r7, #56	; 0x38
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	0800660c 	.word	0x0800660c
 8002b50:	08006614 	.word	0x08006614
 8002b54:	0800661c 	.word	0x0800661c
 8002b58:	58004000 	.word	0x58004000

08002b5c <LL_RCC_LSE_IsReady>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d101      	bne.n	8002b74 <LL_RCC_LSE_IsReady+0x18>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_RCC_LSE_IsReady+0x1a>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_SetUSARTClockSource>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	43db      	mvns	r3, r3
 8002b94:	401a      	ands	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <LL_RCC_SetI2SClockSource>:
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_SetLPUARTClockSource>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <LL_RCC_SetI2CClockSource>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <LL_RCC_SetLPTIMClockSource>:
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <LL_RCC_SetRNGClockSource>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_SetADCClockSource>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <LL_RCC_SetRTCClockSource>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <LL_RCC_GetRTCClockSource>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_ForceBackupDomainReset>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002d50:	2300      	movs	r3, #0
 8002d52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d54:	2300      	movs	r3, #0
 8002d56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d058      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002d64:	f7fe fdc2 	bl	80018ec <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d68:	f7fe fa8e 	bl	8001288 <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002d6e:	e009      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fa8a 	bl	8001288 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d902      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	74fb      	strb	r3, [r7, #19]
        break;
 8002d82:	e006      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002d84:	4b7b      	ldr	r3, [pc, #492]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d90:	d1ee      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d13c      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002d98:	f7ff ffa7 	bl	8002cea <LL_RCC_GetRTCClockSource>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d00f      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002db4:	f7ff ffa5 	bl	8002d02 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002db8:	f7ff ffb3 	bl	8002d22 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d014      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd0:	f7fe fa5a 	bl	8001288 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe fa56 	bl	8001288 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d902      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	74fb      	strb	r3, [r7, #19]
            break;
 8002dee:	e004      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002df0:	f7ff feb4 	bl	8002b5c <LL_RCC_LSE_IsReady>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d1ee      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff5b 	bl	8002cc0 <LL_RCC_SetRTCClockSource>
 8002e0a:	e004      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	74bb      	strb	r3, [r7, #18]
 8002e10:	e001      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e12:	7cfb      	ldrb	r3, [r7, #19]
 8002e14:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d004      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fea9 	bl	8002b7e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d004      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fe9e 	bl	8002b7e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d004      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fec0 	bl	8002bd8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fee6 	bl	8002c3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d004      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fedb 	bl	8002c3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fed0 	bl	8002c3a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fea9 	bl	8002c02 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d004      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fe9e 	bl	8002c02 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff fe93 	bl	8002c02 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d011      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fe5e 	bl	8002bae <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efa:	d107      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d010      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fea5 	bl	8002c6c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d107      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f38:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d011      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fea3 	bl	8002c96 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f58:	d107      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f68:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002f6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	58000400 	.word	0x58000400

08002f78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d071      	beq.n	800306e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fd ff14 	bl	8000dcc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002fac:	4b32      	ldr	r3, [pc, #200]	; (8003078 <HAL_RTC_Init+0x100>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d051      	beq.n	800305c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fb8:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <HAL_RTC_Init+0x100>)
 8002fba:	22ca      	movs	r2, #202	; 0xca
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8002fbe:	4b2e      	ldr	r3, [pc, #184]	; (8003078 <HAL_RTC_Init+0x100>)
 8002fc0:	2253      	movs	r2, #83	; 0x53
 8002fc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fb53 	bl	8003670 <RTC_EnterInitMode>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d13f      	bne.n	8003054 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002fd4:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_RTC_Init+0x100>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4a27      	ldr	r2, [pc, #156]	; (8003078 <HAL_RTC_Init+0x100>)
 8002fda:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002fe4:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_RTC_Init+0x100>)
 8002fe6:	699a      	ldr	r2, [r3, #24]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	4319      	orrs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	491f      	ldr	r1, [pc, #124]	; (8003078 <HAL_RTC_Init+0x100>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	491b      	ldr	r1, [pc, #108]	; (8003078 <HAL_RTC_Init+0x100>)
 800300a:	4313      	orrs	r3, r2
 800300c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800300e:	4b1a      	ldr	r3, [pc, #104]	; (8003078 <HAL_RTC_Init+0x100>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	430b      	orrs	r3, r1
 8003020:	4915      	ldr	r1, [pc, #84]	; (8003078 <HAL_RTC_Init+0x100>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fb56 	bl	80036d8 <RTC_ExitInitMode>
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RTC_Init+0x100>)
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a19      	ldr	r1, [r3, #32]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4319      	orrs	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	430b      	orrs	r3, r1
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <HAL_RTC_Init+0x100>)
 8003050:	4313      	orrs	r3, r2
 8003052:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RTC_Init+0x100>)
 8003056:	22ff      	movs	r2, #255	; 0xff
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
 800305a:	e001      	b.n	8003060 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d103      	bne.n	800306e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40002800 	.word	0x40002800

0800307c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_RTC_SetTime+0x1a>
 8003092:	2302      	movs	r3, #2
 8003094:	e088      	b.n	80031a8 <HAL_RTC_SetTime+0x12c>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030a6:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 80030a8:	22ca      	movs	r2, #202	; 0xca
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
 80030ac:	4b40      	ldr	r3, [pc, #256]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 80030ae:	2253      	movs	r2, #83	; 0x53
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fadc 	bl	8003670 <RTC_EnterInitMode>
 80030b8:	4603      	mov	r3, r0
 80030ba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d15e      	bne.n	8003180 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80030c2:	4b3b      	ldr	r3, [pc, #236]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ce:	d057      	beq.n	8003180 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d125      	bne.n	8003122 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80030d6:	4b36      	ldr	r3, [pc, #216]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fb31 	bl	8003754 <RTC_ByteToBcd2>
 80030f2:	4603      	mov	r3, r0
 80030f4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fb2a 	bl	8003754 <RTC_ByteToBcd2>
 8003100:	4603      	mov	r3, r0
 8003102:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003104:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	789b      	ldrb	r3, [r3, #2]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fb22 	bl	8003754 <RTC_ByteToBcd2>
 8003110:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003112:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	78db      	ldrb	r3, [r3, #3]
 800311a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e017      	b.n	8003152 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003122:	4b23      	ldr	r3, [pc, #140]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	785b      	ldrb	r3, [r3, #1]
 800313e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003140:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003146:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	78db      	ldrb	r3, [r3, #3]
 800314c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003152:	4a17      	ldr	r2, [pc, #92]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800315a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800315e:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	430b      	orrs	r3, r1
 800317a:	490d      	ldr	r1, [pc, #52]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 800317c:	4313      	orrs	r3, r2
 800317e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 faa9 	bl	80036d8 <RTC_ExitInitMode>
 8003186:	4603      	mov	r3, r0
 8003188:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RTC_SetTime+0x134>)
 800318c:	22ff      	movs	r2, #255	; 0xff
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003190:	7cfb      	ldrb	r3, [r7, #19]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd90      	pop	{r4, r7, pc}
 80031b0:	40002800 	.word	0x40002800

080031b4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_RTC_GetTime+0xc0>)
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80031c8:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_RTC_GetTime+0xc0>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d049      	beq.n	800326a <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_RTC_GetTime+0xc0>)
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_RTC_GetTime+0xc0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031ee:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	0c1b      	lsrs	r3, r3, #16
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	0a1b      	lsrs	r3, r3, #8
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800320a:	b2da      	uxtb	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003218:	b2da      	uxtb	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	0d9b      	lsrs	r3, r3, #22
 8003222:	b2db      	uxtb	r3, r3
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d11a      	bne.n	800326a <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f000 faaa 	bl	8003792 <RTC_Bcd2ToByte>
 800323e:	4603      	mov	r3, r0
 8003240:	461a      	mov	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	785b      	ldrb	r3, [r3, #1]
 800324a:	4618      	mov	r0, r3
 800324c:	f000 faa1 	bl	8003792 <RTC_Bcd2ToByte>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	789b      	ldrb	r3, [r3, #2]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fa98 	bl	8003792 <RTC_Bcd2ToByte>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40002800 	.word	0x40002800

08003278 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_RTC_SetDate+0x1a>
 800328e:	2302      	movs	r3, #2
 8003290:	e071      	b.n	8003376 <HAL_RTC_SetDate+0xfe>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2202      	movs	r2, #2
 800329e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10e      	bne.n	80032c6 <HAL_RTC_SetDate+0x4e>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	785b      	ldrb	r3, [r3, #1]
 80032b8:	f023 0310 	bic.w	r3, r3, #16
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	330a      	adds	r3, #10
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d11c      	bne.n	8003306 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fa3f 	bl	8003754 <RTC_ByteToBcd2>
 80032d6:	4603      	mov	r3, r0
 80032d8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fa38 	bl	8003754 <RTC_ByteToBcd2>
 80032e4:	4603      	mov	r3, r0
 80032e6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80032e8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa30 	bl	8003754 <RTC_ByteToBcd2>
 80032f4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032f6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	e00e      	b.n	8003324 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	78db      	ldrb	r3, [r3, #3]
 800330a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003312:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003318:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <HAL_RTC_SetDate+0x108>)
 8003326:	22ca      	movs	r2, #202	; 0xca
 8003328:	625a      	str	r2, [r3, #36]	; 0x24
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_RTC_SetDate+0x108>)
 800332c:	2253      	movs	r2, #83	; 0x53
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f99d 	bl	8003670 <RTC_EnterInitMode>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003340:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_RTC_SetDate+0x108>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003348:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800334c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f9c2 	bl	80036d8 <RTC_ExitInitMode>
 8003354:	4603      	mov	r3, r0
 8003356:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RTC_SetDate+0x108>)
 800335a:	22ff      	movs	r2, #255	; 0xff
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d103      	bne.n	800336c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003374:	7cfb      	ldrb	r3, [r7, #19]
}
 8003376:	4618      	mov	r0, r3
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	bf00      	nop
 8003380:	40002800 	.word	0x40002800

08003384 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003390:	4b22      	ldr	r3, [pc, #136]	; (800341c <HAL_RTC_GetDate+0x98>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003398:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800339c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	0b5b      	lsrs	r3, r3, #13
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d11a      	bne.n	8003412 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	78db      	ldrb	r3, [r3, #3]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f9d6 	bl	8003792 <RTC_Bcd2ToByte>
 80033e6:	4603      	mov	r3, r0
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	785b      	ldrb	r3, [r3, #1]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f9cd 	bl	8003792 <RTC_Bcd2ToByte>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	789b      	ldrb	r3, [r3, #2]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f9c4 	bl	8003792 <RTC_Bcd2ToByte>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40002800 	.word	0x40002800

08003420 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_RTC_SetAlarm+0x1e>
 800343a:	2302      	movs	r3, #2
 800343c:	e0eb      	b.n	8003616 <HAL_RTC_SetAlarm+0x1f6>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2202      	movs	r2, #2
 800344a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800344e:	4b74      	ldr	r3, [pc, #464]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003456:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345e:	d06a      	beq.n	8003536 <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d13a      	bne.n	80034dc <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003466:	4b6e      	ldr	r3, [pc, #440]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2200      	movs	r2, #0
 8003476:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 f965 	bl	8003754 <RTC_ByteToBcd2>
 800348a:	4603      	mov	r3, r0
 800348c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f95e 	bl	8003754 <RTC_ByteToBcd2>
 8003498:	4603      	mov	r3, r0
 800349a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800349c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	789b      	ldrb	r3, [r3, #2]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f956 	bl	8003754 <RTC_ByteToBcd2>
 80034a8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80034aa:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	78db      	ldrb	r3, [r3, #3]
 80034b2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80034b4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f948 	bl	8003754 <RTC_ByteToBcd2>
 80034c4:	4603      	mov	r3, r0
 80034c6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80034c8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80034d0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e02c      	b.n	8003536 <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80034e4:	d00d      	beq.n	8003502 <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ee:	d008      	beq.n	8003502 <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80034f0:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2200      	movs	r2, #0
 8003500:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800350e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003514:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	78db      	ldrb	r3, [r3, #3]
 800351a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800351c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003524:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003526:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800352c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003536:	4b3a      	ldr	r3, [pc, #232]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 8003538:	22ca      	movs	r2, #202	; 0xca
 800353a:	625a      	str	r2, [r3, #36]	; 0x24
 800353c:	4b38      	ldr	r3, [pc, #224]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 800353e:	2253      	movs	r2, #83	; 0x53
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354a:	d12c      	bne.n	80035a6 <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 800354c:	4b34      	ldr	r3, [pc, #208]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	4a33      	ldr	r2, [pc, #204]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 8003552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003556:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 800355a:	2201      	movs	r2, #1
 800355c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003564:	d107      	bne.n	8003576 <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	492c      	ldr	r1, [pc, #176]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 8003570:	4313      	orrs	r3, r2
 8003572:	644b      	str	r3, [r1, #68]	; 0x44
 8003574:	e006      	b.n	8003584 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003576:	4a2a      	ldr	r2, [pc, #168]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800357c:	4a28      	ldr	r2, [pc, #160]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	f043 0201 	orr.w	r2, r3, #1
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8003598:	4b21      	ldr	r3, [pc, #132]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4a20      	ldr	r2, [pc, #128]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 800359e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a2:	6193      	str	r3, [r2, #24]
 80035a4:	e02b      	b.n	80035fe <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035ac:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80035b0:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80035b2:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035b4:	2202      	movs	r2, #2
 80035b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035be:	d107      	bne.n	80035d0 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4915      	ldr	r1, [pc, #84]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035ce:	e006      	b.n	80035de <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80035d6:	4a12      	ldr	r2, [pc, #72]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	f043 0202 	orr.w	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 80035f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fc:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_RTC_SetAlarm+0x200>)
 8003600:	22ff      	movs	r2, #255	; 0xff
 8003602:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}
 800361e:	bf00      	nop
 8003620:	40002800 	.word	0x40002800

08003624 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <HAL_RTC_WaitForSynchro+0x48>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a0e      	ldr	r2, [pc, #56]	; (800366c <HAL_RTC_WaitForSynchro+0x48>)
 8003632:	f023 0320 	bic.w	r3, r3, #32
 8003636:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003638:	f7fd fe26 	bl	8001288 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800363e:	e009      	b.n	8003654 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003640:	f7fd fe22 	bl	8001288 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800364e:	d901      	bls.n	8003654 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e006      	b.n	8003662 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RTC_WaitForSynchro+0x48>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40002800 	.word	0x40002800

08003670 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800367c:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <RTC_EnterInitMode+0x64>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d120      	bne.n	80036ca <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <RTC_EnterInitMode+0x64>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <RTC_EnterInitMode+0x64>)
 800368e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003692:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003694:	f7fd fdf8 	bl	8001288 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800369a:	e00d      	b.n	80036b8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800369c:	f7fd fdf4 	bl	8001288 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036aa:	d905      	bls.n	80036b8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2203      	movs	r2, #3
 80036b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <RTC_EnterInitMode+0x64>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <RTC_EnterInitMode+0x5a>
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d1e8      	bne.n	800369c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40002800 	.word	0x40002800

080036d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <RTC_ExitInitMode+0x78>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a19      	ldr	r2, [pc, #100]	; (8003750 <RTC_ExitInitMode+0x78>)
 80036ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ee:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <RTC_ExitInitMode+0x78>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10c      	bne.n	8003716 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ff91 	bl	8003624 <HAL_RTC_WaitForSynchro>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01e      	beq.n	8003746 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2203      	movs	r2, #3
 800370c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e017      	b.n	8003746 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003716:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <RTC_ExitInitMode+0x78>)
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <RTC_ExitInitMode+0x78>)
 800371c:	f023 0320 	bic.w	r3, r3, #32
 8003720:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ff7e 	bl	8003624 <HAL_RTC_WaitForSynchro>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2203      	movs	r2, #3
 8003732:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <RTC_ExitInitMode+0x78>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	4a04      	ldr	r2, [pc, #16]	; (8003750 <RTC_ExitInitMode+0x78>)
 8003740:	f043 0320 	orr.w	r3, r3, #32
 8003744:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40002800 	.word	0x40002800

08003754 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003766:	e005      	b.n	8003774 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800376e:	7afb      	ldrb	r3, [r7, #11]
 8003770:	3b0a      	subs	r3, #10
 8003772:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003774:	7afb      	ldrb	r3, [r7, #11]
 8003776:	2b09      	cmp	r3, #9
 8003778:	d8f6      	bhi.n	8003768 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	b2da      	uxtb	r2, r3
 8003782:	7afb      	ldrb	r3, [r7, #11]
 8003784:	4313      	orrs	r3, r2
 8003786:	b2db      	uxtb	r3, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003792:	b480      	push	{r7}
 8003794:	b085      	sub	sp, #20
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	b2db      	uxtb	r3, r3
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <LL_RCC_GetUSARTClockSource>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80037d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	401a      	ands	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	041b      	lsls	r3, r3, #16
 80037e0:	4313      	orrs	r3, r2
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr

080037ec <LL_RCC_GetLPUARTClockSource>:
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80037f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4013      	ands	r3, r2
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e042      	b.n	80038a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd faf8 	bl	8000e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fc3d 	bl	80040cc <UART_SetConfig>
 8003852:	4603      	mov	r3, r0
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e022      	b.n	80038a2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fea5 	bl	80045b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003878:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003888:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 ff2b 	bl	80046f6 <UART_CheckIdleState>
 80038a0:	4603      	mov	r3, r0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b091      	sub	sp, #68	; 0x44
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d178      	bne.n	80039b6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_UART_Transmit_IT+0x24>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e071      	b.n	80039b8 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2221      	movs	r2, #33	; 0x21
 80038fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003908:	d12a      	bne.n	8003960 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	d107      	bne.n	8003924 <HAL_UART_Transmit_IT+0x78>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d103      	bne.n	8003924 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <HAL_UART_Transmit_IT+0x118>)
 8003920:	679a      	str	r2, [r3, #120]	; 0x78
 8003922:	e002      	b.n	800392a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <HAL_UART_Transmit_IT+0x11c>)
 8003928:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3308      	adds	r3, #8
 8003930:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	e853 3f00 	ldrex	r3, [r3]
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003940:	63bb      	str	r3, [r7, #56]	; 0x38
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3308      	adds	r3, #8
 8003948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800394a:	637a      	str	r2, [r7, #52]	; 0x34
 800394c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e5      	bne.n	800392a <HAL_UART_Transmit_IT+0x7e>
 800395e:	e028      	b.n	80039b2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003968:	d107      	bne.n	800397a <HAL_UART_Transmit_IT+0xce>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a15      	ldr	r2, [pc, #84]	; (80039cc <HAL_UART_Transmit_IT+0x120>)
 8003976:	679a      	str	r2, [r3, #120]	; 0x78
 8003978:	e002      	b.n	8003980 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4a14      	ldr	r2, [pc, #80]	; (80039d0 <HAL_UART_Transmit_IT+0x124>)
 800397e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	e853 3f00 	ldrex	r3, [r3]
 800398c:	613b      	str	r3, [r7, #16]
   return(result);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	69f9      	ldr	r1, [r7, #28]
 80039a4:	6a3a      	ldr	r2, [r7, #32]
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e6      	bne.n	8003980 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
  }
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3744      	adds	r7, #68	; 0x44
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	08004eaf 	.word	0x08004eaf
 80039c8:	08004dd1 	.word	0x08004dd1
 80039cc:	08004d11 	.word	0x08004d11
 80039d0:	08004c5b 	.word	0x08004c5b

080039d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d137      	bne.n	8003a5c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_UART_Receive_IT+0x24>
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e030      	b.n	8003a5e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a18      	ldr	r2, [pc, #96]	; (8003a68 <HAL_UART_Receive_IT+0x94>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d01f      	beq.n	8003a4c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d018      	beq.n	8003a4c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	613b      	str	r3, [r7, #16]
   return(result);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	461a      	mov	r2, r3
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	623b      	str	r3, [r7, #32]
 8003a3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	6a3a      	ldr	r2, [r7, #32]
 8003a40:	e841 2300 	strex	r3, r2, [r1]
 8003a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e6      	bne.n	8003a1a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 ff66 	bl	8004924 <UART_Start_Receive_IT>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	e000      	b.n	8003a5e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40008000 	.word	0x40008000

08003a6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b0ba      	sub	sp, #232	; 0xe8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003a96:	f640 030f 	movw	r3, #2063	; 0x80f
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d105      	bne.n	8003acc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 82e3 	beq.w	800409c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
      }
      return;
 8003ade:	e2dd      	b.n	800409c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8123 	beq.w	8003d30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003aea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003aee:	4b8d      	ldr	r3, [pc, #564]	; (8003d24 <HAL_UART_IRQHandler+0x2b8>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003afa:	4b8b      	ldr	r3, [pc, #556]	; (8003d28 <HAL_UART_IRQHandler+0x2bc>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8116 	beq.w	8003d30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d011      	beq.n	8003b34 <HAL_UART_IRQHandler+0xc8>
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d011      	beq.n	8003b64 <HAL_UART_IRQHandler+0xf8>
 8003b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2202      	movs	r2, #2
 8003b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f043 0204 	orr.w	r2, r3, #4
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d011      	beq.n	8003b94 <HAL_UART_IRQHandler+0x128>
 8003b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2204      	movs	r2, #4
 8003b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f043 0202 	orr.w	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d017      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003bac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003bb0:	4b5c      	ldr	r3, [pc, #368]	; (8003d24 <HAL_UART_IRQHandler+0x2b8>)
 8003bb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	f043 0208 	orr.w	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d012      	beq.n	8003c02 <HAL_UART_IRQHandler+0x196>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00c      	beq.n	8003c02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8249 	beq.w	80040a0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d007      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c56:	2b40      	cmp	r3, #64	; 0x40
 8003c58:	d005      	beq.n	8003c66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d054      	beq.n	8003d10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 ff7c 	bl	8004b64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c76:	2b40      	cmp	r3, #64	; 0x40
 8003c78:	d146      	bne.n	8003d08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3308      	adds	r3, #8
 8003c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d9      	bne.n	8003c7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d017      	beq.n	8003d00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <HAL_UART_IRQHandler+0x2c0>)
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd fc44 	bl	800156e <HAL_DMA_Abort_IT>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d019      	beq.n	8003d20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfe:	e00f      	b.n	8003d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fc fc7f 	bl	8000604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d06:	e00b      	b.n	8003d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fc fc7b 	bl	8000604 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0e:	e007      	b.n	8003d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7fc fc77 	bl	8000604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003d1e:	e1bf      	b.n	80040a0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	bf00      	nop
    return;
 8003d22:	e1bd      	b.n	80040a0 <HAL_UART_IRQHandler+0x634>
 8003d24:	10000001 	.word	0x10000001
 8003d28:	04000120 	.word	0x04000120
 8003d2c:	08004c2f 	.word	0x08004c2f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f040 8153 	bne.w	8003fe0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 814c 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8145 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	f040 80bb 	bne.w	8003ee4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 818f 	beq.w	80040a4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d90:	429a      	cmp	r2, r3
 8003d92:	f080 8187 	bcs.w	80040a4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 8087 	bne.w	8003ec2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003de2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1da      	bne.n	8003db4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3308      	adds	r3, #8
 8003e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e1      	bne.n	8003dfe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e66:	e841 2300 	strex	r3, r2, [r1]
 8003e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1e3      	bne.n	8003e3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e90:	f023 0310 	bic.w	r3, r3, #16
 8003e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ea4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003eaa:	e841 2300 	strex	r3, r2, [r1]
 8003eae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e4      	bne.n	8003e80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd faf8 	bl	80014b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8e9 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ee2:	e0df      	b.n	80040a4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 80d1 	beq.w	80040a8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 80cc 	beq.w	80040a8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	e853 3f00 	ldrex	r3, [r3]
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f32:	647b      	str	r3, [r7, #68]	; 0x44
 8003f34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e4      	bne.n	8003f10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	623b      	str	r3, [r7, #32]
   return(result);
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e1      	bne.n	8003f46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0310 	bic.w	r3, r3, #16
 8003faa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e4      	bne.n	8003f96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f86b 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fde:	e063      	b.n	80040a8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <HAL_UART_IRQHandler+0x59e>
 8003fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f001 fd0e 	bl	8005a24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004008:	e051      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004012:	2b00      	cmp	r3, #0
 8004014:	d014      	beq.n	8004040 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800401a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004032:	2b00      	cmp	r3, #0
 8004034:	d03a      	beq.n	80040ac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
    }
    return;
 800403e:	e035      	b.n	80040ac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_UART_IRQHandler+0x5f4>
 800404c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 ff9c 	bl	8004f96 <UART_EndTransmit_IT>
    return;
 800405e:	e026      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <HAL_UART_IRQHandler+0x614>
 800406c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f001 fce5 	bl	8005a48 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800407e:	e016      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <HAL_UART_IRQHandler+0x642>
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004090:	2b00      	cmp	r3, #0
 8004092:	da0c      	bge.n	80040ae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f001 fcce 	bl	8005a36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800409a:	e008      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
      return;
 800409c:	bf00      	nop
 800409e:	e006      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
    return;
 80040a0:	bf00      	nop
 80040a2:	e004      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
      return;
 80040a4:	bf00      	nop
 80040a6:	e002      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
      return;
 80040a8:	bf00      	nop
 80040aa:	e000      	b.n	80040ae <HAL_UART_IRQHandler+0x642>
    return;
 80040ac:	bf00      	nop
  }
}
 80040ae:	37e8      	adds	r7, #232	; 0xe8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
	...

080040cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d0:	b08c      	sub	sp, #48	; 0x30
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	431a      	orrs	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b94      	ldr	r3, [pc, #592]	; (800434c <UART_SetConfig+0x280>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004104:	430b      	orrs	r3, r1
 8004106:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a89      	ldr	r2, [pc, #548]	; (8004350 <UART_SetConfig+0x284>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004134:	4313      	orrs	r3, r2
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004142:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800414c:	430b      	orrs	r3, r1
 800414e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	f023 010f 	bic.w	r1, r3, #15
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7a      	ldr	r2, [pc, #488]	; (8004354 <UART_SetConfig+0x288>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d127      	bne.n	80041c0 <UART_SetConfig+0xf4>
 8004170:	2003      	movs	r0, #3
 8004172:	f7ff fb29 	bl	80037c8 <LL_RCC_GetUSARTClockSource>
 8004176:	4603      	mov	r3, r0
 8004178:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800417c:	2b03      	cmp	r3, #3
 800417e:	d81b      	bhi.n	80041b8 <UART_SetConfig+0xec>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <UART_SetConfig+0xbc>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	08004199 	.word	0x08004199
 800418c:	080041a9 	.word	0x080041a9
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041b1 	.word	0x080041b1
 8004198:	2301      	movs	r3, #1
 800419a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419e:	e080      	b.n	80042a2 <UART_SetConfig+0x1d6>
 80041a0:	2302      	movs	r3, #2
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a6:	e07c      	b.n	80042a2 <UART_SetConfig+0x1d6>
 80041a8:	2304      	movs	r3, #4
 80041aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ae:	e078      	b.n	80042a2 <UART_SetConfig+0x1d6>
 80041b0:	2308      	movs	r3, #8
 80041b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b6:	e074      	b.n	80042a2 <UART_SetConfig+0x1d6>
 80041b8:	2310      	movs	r3, #16
 80041ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041be:	e070      	b.n	80042a2 <UART_SetConfig+0x1d6>
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a64      	ldr	r2, [pc, #400]	; (8004358 <UART_SetConfig+0x28c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d138      	bne.n	800423c <UART_SetConfig+0x170>
 80041ca:	200c      	movs	r0, #12
 80041cc:	f7ff fafc 	bl	80037c8 <LL_RCC_GetUSARTClockSource>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d82c      	bhi.n	8004234 <UART_SetConfig+0x168>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x114>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004215 	.word	0x08004215
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004235 	.word	0x08004235
 80041ec:	08004235 	.word	0x08004235
 80041f0:	08004225 	.word	0x08004225
 80041f4:	08004235 	.word	0x08004235
 80041f8:	08004235 	.word	0x08004235
 80041fc:	08004235 	.word	0x08004235
 8004200:	0800421d 	.word	0x0800421d
 8004204:	08004235 	.word	0x08004235
 8004208:	08004235 	.word	0x08004235
 800420c:	08004235 	.word	0x08004235
 8004210:	0800422d 	.word	0x0800422d
 8004214:	2300      	movs	r3, #0
 8004216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800421a:	e042      	b.n	80042a2 <UART_SetConfig+0x1d6>
 800421c:	2302      	movs	r3, #2
 800421e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004222:	e03e      	b.n	80042a2 <UART_SetConfig+0x1d6>
 8004224:	2304      	movs	r3, #4
 8004226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800422a:	e03a      	b.n	80042a2 <UART_SetConfig+0x1d6>
 800422c:	2308      	movs	r3, #8
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004232:	e036      	b.n	80042a2 <UART_SetConfig+0x1d6>
 8004234:	2310      	movs	r3, #16
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423a:	e032      	b.n	80042a2 <UART_SetConfig+0x1d6>
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a43      	ldr	r2, [pc, #268]	; (8004350 <UART_SetConfig+0x284>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d12a      	bne.n	800429c <UART_SetConfig+0x1d0>
 8004246:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800424a:	f7ff facf 	bl	80037ec <LL_RCC_GetLPUARTClockSource>
 800424e:	4603      	mov	r3, r0
 8004250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004254:	d01a      	beq.n	800428c <UART_SetConfig+0x1c0>
 8004256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800425a:	d81b      	bhi.n	8004294 <UART_SetConfig+0x1c8>
 800425c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004260:	d00c      	beq.n	800427c <UART_SetConfig+0x1b0>
 8004262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004266:	d815      	bhi.n	8004294 <UART_SetConfig+0x1c8>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <UART_SetConfig+0x1a8>
 800426c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004270:	d008      	beq.n	8004284 <UART_SetConfig+0x1b8>
 8004272:	e00f      	b.n	8004294 <UART_SetConfig+0x1c8>
 8004274:	2300      	movs	r3, #0
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427a:	e012      	b.n	80042a2 <UART_SetConfig+0x1d6>
 800427c:	2302      	movs	r3, #2
 800427e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004282:	e00e      	b.n	80042a2 <UART_SetConfig+0x1d6>
 8004284:	2304      	movs	r3, #4
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800428a:	e00a      	b.n	80042a2 <UART_SetConfig+0x1d6>
 800428c:	2308      	movs	r3, #8
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004292:	e006      	b.n	80042a2 <UART_SetConfig+0x1d6>
 8004294:	2310      	movs	r3, #16
 8004296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429a:	e002      	b.n	80042a2 <UART_SetConfig+0x1d6>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a2a      	ldr	r2, [pc, #168]	; (8004350 <UART_SetConfig+0x284>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	f040 80a4 	bne.w	80043f6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d823      	bhi.n	80042fe <UART_SetConfig+0x232>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <UART_SetConfig+0x1f0>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042ff 	.word	0x080042ff
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	080042ff 	.word	0x080042ff
 80042cc:	080042ef 	.word	0x080042ef
 80042d0:	080042ff 	.word	0x080042ff
 80042d4:	080042ff 	.word	0x080042ff
 80042d8:	080042ff 	.word	0x080042ff
 80042dc:	080042f7 	.word	0x080042f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e0:	f7fe fb66 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042e6:	e010      	b.n	800430a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e8:	4b1c      	ldr	r3, [pc, #112]	; (800435c <UART_SetConfig+0x290>)
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042ec:	e00d      	b.n	800430a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042ee:	f7fe faab 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 80042f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042f4:	e009      	b.n	800430a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042fc:	e005      	b.n	800430a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004308:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 8137 	beq.w	8004580 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <UART_SetConfig+0x294>)
 8004318:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800431c:	461a      	mov	r2, r3
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	fbb3 f3f2 	udiv	r3, r3, r2
 8004324:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	429a      	cmp	r2, r3
 8004334:	d305      	bcc.n	8004342 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	429a      	cmp	r2, r3
 8004340:	d910      	bls.n	8004364 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004348:	e11a      	b.n	8004580 <UART_SetConfig+0x4b4>
 800434a:	bf00      	nop
 800434c:	cfff69f3 	.word	0xcfff69f3
 8004350:	40008000 	.word	0x40008000
 8004354:	40013800 	.word	0x40013800
 8004358:	40004400 	.word	0x40004400
 800435c:	00f42400 	.word	0x00f42400
 8004360:	080066c8 	.word	0x080066c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	2200      	movs	r2, #0
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	60fa      	str	r2, [r7, #12]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	4a8e      	ldr	r2, [pc, #568]	; (80045ac <UART_SetConfig+0x4e0>)
 8004372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004376:	b29b      	uxth	r3, r3
 8004378:	2200      	movs	r2, #0
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004382:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004386:	f7fb ff4b 	bl	8000220 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4610      	mov	r0, r2
 8004390:	4619      	mov	r1, r3
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	020b      	lsls	r3, r1, #8
 800439c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043a0:	0202      	lsls	r2, r0, #8
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	6849      	ldr	r1, [r1, #4]
 80043a6:	0849      	lsrs	r1, r1, #1
 80043a8:	2000      	movs	r0, #0
 80043aa:	460c      	mov	r4, r1
 80043ac:	4605      	mov	r5, r0
 80043ae:	eb12 0804 	adds.w	r8, r2, r4
 80043b2:	eb43 0905 	adc.w	r9, r3, r5
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	469a      	mov	sl, r3
 80043be:	4693      	mov	fp, r2
 80043c0:	4652      	mov	r2, sl
 80043c2:	465b      	mov	r3, fp
 80043c4:	4640      	mov	r0, r8
 80043c6:	4649      	mov	r1, r9
 80043c8:	f7fb ff2a 	bl	8000220 <__aeabi_uldivmod>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4613      	mov	r3, r2
 80043d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043da:	d308      	bcc.n	80043ee <UART_SetConfig+0x322>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e2:	d204      	bcs.n	80043ee <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	60da      	str	r2, [r3, #12]
 80043ec:	e0c8      	b.n	8004580 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043f4:	e0c4      	b.n	8004580 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fe:	d167      	bne.n	80044d0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004400:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004404:	2b08      	cmp	r3, #8
 8004406:	d828      	bhi.n	800445a <UART_SetConfig+0x38e>
 8004408:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <UART_SetConfig+0x344>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004435 	.word	0x08004435
 8004414:	0800443d 	.word	0x0800443d
 8004418:	08004445 	.word	0x08004445
 800441c:	0800445b 	.word	0x0800445b
 8004420:	0800444b 	.word	0x0800444b
 8004424:	0800445b 	.word	0x0800445b
 8004428:	0800445b 	.word	0x0800445b
 800442c:	0800445b 	.word	0x0800445b
 8004430:	08004453 	.word	0x08004453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004434:	f7fe fabc 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8004438:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800443a:	e014      	b.n	8004466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800443c:	f7fe faca 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004440:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004442:	e010      	b.n	8004466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004444:	4b5a      	ldr	r3, [pc, #360]	; (80045b0 <UART_SetConfig+0x4e4>)
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004448:	e00d      	b.n	8004466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800444a:	f7fe f9fd 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 800444e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004450:	e009      	b.n	8004466 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004458:	e005      	b.n	8004466 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8089 	beq.w	8004580 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	4a4e      	ldr	r2, [pc, #312]	; (80045ac <UART_SetConfig+0x4e0>)
 8004474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004478:	461a      	mov	r2, r3
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004480:	005a      	lsls	r2, r3, #1
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	441a      	add	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004492:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	d916      	bls.n	80044c8 <UART_SetConfig+0x3fc>
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d212      	bcs.n	80044c8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f023 030f 	bic.w	r3, r3, #15
 80044aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f003 0307 	and.w	r3, r3, #7
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	8bfb      	ldrh	r3, [r7, #30]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	8bfa      	ldrh	r2, [r7, #30]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	e05b      	b.n	8004580 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044ce:	e057      	b.n	8004580 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d828      	bhi.n	800452a <UART_SetConfig+0x45e>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x414>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7fe fa54 	bl	80029b0 <HAL_RCC_GetPCLK1Freq>
 8004508:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800450a:	e014      	b.n	8004536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe fa62 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004512:	e010      	b.n	8004536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <UART_SetConfig+0x4e4>)
 8004516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004518:	e00d      	b.n	8004536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7fe f995 	bl	8002848 <HAL_RCC_GetSysClockFreq>
 800451e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004520:	e009      	b.n	8004536 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004528:	e005      	b.n	8004536 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004534:	bf00      	nop
    }

    if (pclk != 0U)
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	2b00      	cmp	r3, #0
 800453a:	d021      	beq.n	8004580 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	4a1a      	ldr	r2, [pc, #104]	; (80045ac <UART_SetConfig+0x4e0>)
 8004542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004546:	461a      	mov	r2, r3
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	fbb3 f2f2 	udiv	r2, r3, r2
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	441a      	add	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	2b0f      	cmp	r3, #15
 8004564:	d909      	bls.n	800457a <UART_SetConfig+0x4ae>
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456c:	d205      	bcs.n	800457a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	b29a      	uxth	r2, r3
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	e002      	b.n	8004580 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2201      	movs	r2, #1
 8004584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	2201      	movs	r2, #1
 800458c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800459c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3730      	adds	r7, #48	; 0x30
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	080066c8 	.word	0x080066c8
 80045b0:	00f42400 	.word	0x00f42400

080045b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01a      	beq.n	80046ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b2:	d10a      	bne.n	80046ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b086      	sub	sp, #24
 80046fa:	af02      	add	r7, sp, #8
 80046fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004706:	f7fc fdbf 	bl	8001288 <HAL_GetTick>
 800470a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b08      	cmp	r3, #8
 8004718:	d10e      	bne.n	8004738 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f832 	bl	8004792 <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e028      	b.n	800478a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0304 	and.w	r3, r3, #4
 8004742:	2b04      	cmp	r3, #4
 8004744:	d10e      	bne.n	8004764 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f81c 	bl	8004792 <UART_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e012      	b.n	800478a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b09c      	sub	sp, #112	; 0x70
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a2:	e0a9      	b.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047aa:	f000 80a5 	beq.w	80048f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fc fd6b 	bl	8001288 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80047be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d140      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047d8:	667b      	str	r3, [r7, #100]	; 0x64
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e6      	bne.n	80047c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3308      	adds	r3, #8
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004800:	e853 3f00 	ldrex	r3, [r3]
 8004804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	663b      	str	r3, [r7, #96]	; 0x60
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004816:	64ba      	str	r2, [r7, #72]	; 0x48
 8004818:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800481c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800481e:	e841 2300 	strex	r3, r2, [r1]
 8004822:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e5      	bne.n	80047f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e069      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d051      	beq.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004862:	d149      	bne.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800486c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
 800488e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	613b      	str	r3, [r7, #16]
   return(result);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3308      	adds	r3, #8
 80048be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048c0:	623a      	str	r2, [r7, #32]
 80048c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	69f9      	ldr	r1, [r7, #28]
 80048c6:	6a3a      	ldr	r2, [r7, #32]
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e5      	bne.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e010      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69da      	ldr	r2, [r3, #28]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	4013      	ands	r3, r2
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	461a      	mov	r2, r3
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	429a      	cmp	r2, r3
 8004914:	f43f af46 	beq.w	80047a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3770      	adds	r7, #112	; 0x70
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004924:	b480      	push	{r7}
 8004926:	b0a3      	sub	sp, #140	; 0x8c
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d10e      	bne.n	8004976 <UART_Start_Receive_IT+0x52>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <UART_Start_Receive_IT+0x48>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004966:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800496a:	e02d      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	22ff      	movs	r2, #255	; 0xff
 8004970:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004974:	e028      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <UART_Start_Receive_IT+0x76>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <UART_Start_Receive_IT+0x6c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	22ff      	movs	r2, #255	; 0xff
 800498a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800498e:	e01b      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	227f      	movs	r2, #127	; 0x7f
 8004994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004998:	e016      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049a2:	d10d      	bne.n	80049c0 <UART_Start_Receive_IT+0x9c>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <UART_Start_Receive_IT+0x92>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	227f      	movs	r2, #127	; 0x7f
 80049b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049b4:	e008      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	223f      	movs	r2, #63	; 0x3f
 80049ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049be:	e003      	b.n	80049c8 <UART_Start_Receive_IT+0xa4>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2222      	movs	r2, #34	; 0x22
 80049d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80049e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3308      	adds	r3, #8
 80049f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80049fc:	673a      	str	r2, [r7, #112]	; 0x70
 80049fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004a02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e3      	bne.n	80049d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a18:	d14f      	bne.n	8004aba <UART_Start_Receive_IT+0x196>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d349      	bcc.n	8004aba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d107      	bne.n	8004a40 <UART_Start_Receive_IT+0x11c>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a46      	ldr	r2, [pc, #280]	; (8004b54 <UART_Start_Receive_IT+0x230>)
 8004a3c:	675a      	str	r2, [r3, #116]	; 0x74
 8004a3e:	e002      	b.n	8004a46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a45      	ldr	r2, [pc, #276]	; (8004b58 <UART_Start_Receive_IT+0x234>)
 8004a44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01a      	beq.n	8004a84 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a72:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e4      	bne.n	8004a4e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004aa4:	64ba      	str	r2, [r7, #72]	; 0x48
 8004aa6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004aaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_Start_Receive_IT+0x160>
 8004ab8:	e046      	b.n	8004b48 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d107      	bne.n	8004ad4 <UART_Start_Receive_IT+0x1b0>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a23      	ldr	r2, [pc, #140]	; (8004b5c <UART_Start_Receive_IT+0x238>)
 8004ad0:	675a      	str	r2, [r3, #116]	; 0x74
 8004ad2:	e002      	b.n	8004ada <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a22      	ldr	r2, [pc, #136]	; (8004b60 <UART_Start_Receive_IT+0x23c>)
 8004ad8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d019      	beq.n	8004b16 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004af6:	677b      	str	r3, [r7, #116]	; 0x74
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
 8004b02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_Start_Receive_IT+0x1be>
 8004b14:	e018      	b.n	8004b48 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	613b      	str	r3, [r7, #16]
   return(result);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f043 0320 	orr.w	r3, r3, #32
 8004b2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b34:	623b      	str	r3, [r7, #32]
 8004b36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	69f9      	ldr	r1, [r7, #28]
 8004b3a:	6a3a      	ldr	r2, [r7, #32]
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	378c      	adds	r7, #140	; 0x8c
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bc80      	pop	{r7}
 8004b52:	4770      	bx	lr
 8004b54:	080056bd 	.word	0x080056bd
 8004b58:	0800535d 	.word	0x0800535d
 8004b5c:	080051a5 	.word	0x080051a5
 8004b60:	08004fed 	.word	0x08004fed

08004b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b095      	sub	sp, #84	; 0x54
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e6      	bne.n	8004b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	f023 0301 	bic.w	r3, r3, #1
 8004bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e3      	bne.n	8004b9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d118      	bne.n	8004c10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0310 	bic.w	r3, r3, #16
 8004bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c00:	6979      	ldr	r1, [r7, #20]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	e841 2300 	strex	r3, r2, [r1]
 8004c08:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1e6      	bne.n	8004bde <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c24:	bf00      	nop
 8004c26:	3754      	adds	r7, #84	; 0x54
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f7fb fcd9 	bl	8000604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b08f      	sub	sp, #60	; 0x3c
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	2b21      	cmp	r3, #33	; 0x21
 8004c6a:	d14c      	bne.n	8004d06 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d132      	bne.n	8004cde <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c98:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e6      	bne.n	8004c78 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6979      	ldr	r1, [r7, #20]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e6      	bne.n	8004caa <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004cdc:	e013      	b.n	8004d06 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004d06:	bf00      	nop
 8004d08:	373c      	adds	r7, #60	; 0x3c
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b091      	sub	sp, #68	; 0x44
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	2b21      	cmp	r3, #33	; 0x21
 8004d20:	d151      	bne.n	8004dc6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d132      	bne.n	8004d94 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	e853 3f00 	ldrex	r3, [r3]
 8004d3a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d54:	e841 2300 	strex	r3, r2, [r1]
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1e6      	bne.n	8004d2e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d74:	637b      	str	r3, [r7, #52]	; 0x34
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	69b9      	ldr	r1, [r7, #24]
 8004d84:	69fa      	ldr	r2, [r7, #28]
 8004d86:	e841 2300 	strex	r3, r2, [r1]
 8004d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1e6      	bne.n	8004d60 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004d92:	e018      	b.n	8004dc6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004da8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dae:	1c9a      	adds	r2, r3, #2
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004dc6:	bf00      	nop
 8004dc8:	3744      	adds	r7, #68	; 0x44
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b091      	sub	sp, #68	; 0x44
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dde:	2b21      	cmp	r3, #33	; 0x21
 8004de0:	d160      	bne.n	8004ea4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004de8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004dea:	e057      	b.n	8004e9c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d133      	bne.n	8004e60 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	623b      	str	r3, [r7, #32]
   return(result);
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e18:	633a      	str	r2, [r7, #48]	; 0x30
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	461a      	mov	r2, r3
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	69b9      	ldr	r1, [r7, #24]
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	617b      	str	r3, [r7, #20]
   return(result);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e6      	bne.n	8004e2c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004e5e:	e021      	b.n	8004ea4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d013      	beq.n	8004e96 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004e96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004e9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1a4      	bne.n	8004dec <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004ea2:	e7ff      	b.n	8004ea4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004ea4:	bf00      	nop
 8004ea6:	3744      	adds	r7, #68	; 0x44
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b091      	sub	sp, #68	; 0x44
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	2b21      	cmp	r3, #33	; 0x21
 8004ebe:	d165      	bne.n	8004f8c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ec6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ec8:	e05c      	b.n	8004f84 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d133      	bne.n	8004f3e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004eec:	637b      	str	r3, [r7, #52]	; 0x34
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	613b      	str	r3, [r7, #16]
   return(result);
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e6      	bne.n	8004f0a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004f3c:	e026      	b.n	8004f8c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d018      	beq.n	8004f7e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f50:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f60:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f66:	1c9a      	adds	r2, r3, #2
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004f7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f80:	3b01      	subs	r3, #1
 8004f82:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004f84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d19f      	bne.n	8004eca <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004f8a:	e7ff      	b.n	8004f8c <UART_TxISR_16BIT_FIFOEN+0xde>
 8004f8c:	bf00      	nop
 8004f8e:	3744      	adds	r7, #68	; 0x44
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b088      	sub	sp, #32
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6979      	ldr	r1, [r7, #20]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e6      	bne.n	8004f9e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fb fb28 	bl	8000634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fe4:	bf00      	nop
 8004fe6:	3720      	adds	r7, #32
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b09c      	sub	sp, #112	; 0x70
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ffa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005004:	2b22      	cmp	r3, #34	; 0x22
 8005006:	f040 80be 	bne.w	8005186 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005014:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005018:	b2d9      	uxtb	r1, r3
 800501a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800501e:	b2da      	uxtb	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	400a      	ands	r2, r1
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 80a1 	bne.w	8005196 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005068:	66bb      	str	r3, [r7, #104]	; 0x68
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005072:	65bb      	str	r3, [r7, #88]	; 0x58
 8005074:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e6      	bne.n	8005054 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3308      	adds	r3, #8
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	667b      	str	r3, [r7, #100]	; 0x64
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3308      	adds	r3, #8
 80050a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050a6:	647a      	str	r2, [r7, #68]	; 0x44
 80050a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e5      	bne.n	8005086 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a33      	ldr	r2, [pc, #204]	; (80051a0 <UART_RxISR_8BIT+0x1b4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d01f      	beq.n	8005118 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d018      	beq.n	8005118 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	e853 3f00 	ldrex	r3, [r3]
 80050f2:	623b      	str	r3, [r7, #32]
   return(result);
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050fa:	663b      	str	r3, [r7, #96]	; 0x60
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	461a      	mov	r2, r3
 8005102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005104:	633b      	str	r3, [r7, #48]	; 0x30
 8005106:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800510a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e6      	bne.n	80050e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d12e      	bne.n	800517e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	60fb      	str	r3, [r7, #12]
   return(result);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0310 	bic.w	r3, r3, #16
 800513a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	69b9      	ldr	r1, [r7, #24]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	617b      	str	r3, [r7, #20]
   return(result);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e6      	bne.n	8005126 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b10      	cmp	r3, #16
 8005164:	d103      	bne.n	800516e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2210      	movs	r2, #16
 800516c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005174:	4619      	mov	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fe ff9c 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800517c:	e00b      	b.n	8005196 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fb fa70 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 8005184:	e007      	b.n	8005196 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0208 	orr.w	r2, r2, #8
 8005194:	619a      	str	r2, [r3, #24]
}
 8005196:	bf00      	nop
 8005198:	3770      	adds	r7, #112	; 0x70
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40008000 	.word	0x40008000

080051a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b09c      	sub	sp, #112	; 0x70
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80051b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051bc:	2b22      	cmp	r3, #34	; 0x22
 80051be:	f040 80be 	bne.w	800533e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80051d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80051d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80051da:	4013      	ands	r3, r2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	1c9a      	adds	r2, r3, #2
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005204:	b29b      	uxth	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 80a1 	bne.w	800534e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800521a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005220:	667b      	str	r3, [r7, #100]	; 0x64
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800522a:	657b      	str	r3, [r7, #84]	; 0x54
 800522c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e6      	bne.n	800520c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3308      	adds	r3, #8
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	663b      	str	r3, [r7, #96]	; 0x60
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800525e:	643a      	str	r2, [r7, #64]	; 0x40
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a33      	ldr	r2, [pc, #204]	; (8005358 <UART_RxISR_16BIT+0x1b4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d01f      	beq.n	80052d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d018      	beq.n	80052d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	e853 3f00 	ldrex	r3, [r3]
 80052aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052be:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c4:	e841 2300 	strex	r3, r2, [r1]
 80052c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1e6      	bne.n	800529e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d12e      	bne.n	8005336 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 0310 	bic.w	r3, r3, #16
 80052f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	613b      	str	r3, [r7, #16]
   return(result);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 0310 	and.w	r3, r3, #16
 800531a:	2b10      	cmp	r3, #16
 800531c:	d103      	bne.n	8005326 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2210      	movs	r2, #16
 8005324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fe fec0 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005334:	e00b      	b.n	800534e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fb f994 	bl	8000664 <HAL_UART_RxCpltCallback>
}
 800533c:	e007      	b.n	800534e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0208 	orr.w	r2, r2, #8
 800534c:	619a      	str	r2, [r3, #24]
}
 800534e:	bf00      	nop
 8005350:	3770      	adds	r7, #112	; 0x70
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	40008000 	.word	0x40008000

0800535c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b0ac      	sub	sp, #176	; 0xb0
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800536a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005392:	2b22      	cmp	r3, #34	; 0x22
 8005394:	f040 8182 	bne.w	800569c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800539e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053a2:	e125      	b.n	80055f0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80053b2:	b2d9      	uxtb	r1, r3
 80053b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	400a      	ands	r2, r1
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80053ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d053      	beq.n	800549e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d011      	beq.n	8005426 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005402:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2201      	movs	r2, #1
 8005414:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541c:	f043 0201 	orr.w	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d011      	beq.n	8005456 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005432:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2202      	movs	r2, #2
 8005444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800544c:	f043 0204 	orr.w	r2, r3, #4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800545a:	f003 0304 	and.w	r3, r3, #4
 800545e:	2b00      	cmp	r3, #0
 8005460:	d011      	beq.n	8005486 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2204      	movs	r2, #4
 8005474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	f043 0202 	orr.w	r2, r3, #2
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548c:	2b00      	cmp	r3, #0
 800548e:	d006      	beq.n	800549e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fb f8b7 	bl	8000604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 80a2 	bne.w	80055f0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054b4:	e853 3f00 	ldrex	r3, [r3]
 80054b8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80054ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054d0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80054d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80054dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e4      	bne.n	80054ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80054f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3308      	adds	r3, #8
 8005506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800550a:	66ba      	str	r2, [r7, #104]	; 0x68
 800550c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005510:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e1      	bne.n	80054e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a5f      	ldr	r2, [pc, #380]	; (80056b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d021      	beq.n	8005580 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01a      	beq.n	8005580 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800555a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800555e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800556c:	657b      	str	r3, [r7, #84]	; 0x54
 800556e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005570:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005572:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005574:	e841 2300 	strex	r3, r2, [r1]
 8005578:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800557a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1e4      	bne.n	800554a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d130      	bne.n	80055ea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055b0:	643b      	str	r3, [r7, #64]	; 0x40
 80055b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e4      	bne.n	800558e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f003 0310 	and.w	r3, r3, #16
 80055ce:	2b10      	cmp	r3, #16
 80055d0:	d103      	bne.n	80055da <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2210      	movs	r2, #16
 80055d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055e0:	4619      	mov	r1, r3
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fe fd66 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
 80055e8:	e002      	b.n	80055f0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fb f83a 	bl	8000664 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d006      	beq.n	8005606 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80055f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	f47f aecf 	bne.w	80053a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800560c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005610:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005614:	2b00      	cmp	r3, #0
 8005616:	d049      	beq.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x350>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800561e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005622:	429a      	cmp	r2, r3
 8005624:	d242      	bcs.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	61fb      	str	r3, [r7, #28]
   return(result);
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3308      	adds	r3, #8
 8005646:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800564a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800564c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e3      	bne.n	8005626 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005662:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	60bb      	str	r3, [r7, #8]
   return(result);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f043 0320 	orr.w	r3, r3, #32
 8005678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	6979      	ldr	r1, [r7, #20]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	613b      	str	r3, [r7, #16]
   return(result);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1e4      	bne.n	8005664 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800569a:	e007      	b.n	80056ac <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	619a      	str	r2, [r3, #24]
}
 80056ac:	bf00      	nop
 80056ae:	37b0      	adds	r7, #176	; 0xb0
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40008000 	.word	0x40008000
 80056b8:	08004fed 	.word	0x08004fed

080056bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b0ae      	sub	sp, #184	; 0xb8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056f2:	2b22      	cmp	r3, #34	; 0x22
 80056f4:	f040 8186 	bne.w	8005a04 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005702:	e129      	b.n	8005958 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005716:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800571a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800571e:	4013      	ands	r3, r2
 8005720:	b29a      	uxth	r2, r3
 8005722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005726:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	1c9a      	adds	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800574e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	2b00      	cmp	r3, #0
 8005758:	d053      	beq.n	8005802 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800575a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d011      	beq.n	800578a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2201      	movs	r2, #1
 8005778:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	f043 0201 	orr.w	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800578a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2202      	movs	r2, #2
 80057a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b0:	f043 0204 	orr.w	r2, r3, #4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d011      	beq.n	80057ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80057c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2204      	movs	r2, #4
 80057d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f043 0202 	orr.w	r2, r3, #2
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d006      	beq.n	8005802 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7fa ff05 	bl	8000604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 80a4 	bne.w	8005958 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800581e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005832:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005836:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800583a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e2      	bne.n	8005810 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800585a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3308      	adds	r3, #8
 800586e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005872:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005874:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005878:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e1      	bne.n	800584a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a5f      	ldr	r2, [pc, #380]	; (8005a1c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d021      	beq.n	80058e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d01a      	beq.n	80058e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80058d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80058d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e4      	bne.n	80058b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d130      	bne.n	8005952 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005906:	f023 0310 	bic.w	r3, r3, #16
 800590a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005918:	647b      	str	r3, [r7, #68]	; 0x44
 800591a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800591e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e4      	bne.n	80058f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b10      	cmp	r3, #16
 8005938:	d103      	bne.n	8005942 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2210      	movs	r2, #16
 8005940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fe fbb2 	bl	80040b4 <HAL_UARTEx_RxEventCallback>
 8005950:	e002      	b.n	8005958 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fa fe86 	bl	8000664 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005958:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800595c:	2b00      	cmp	r3, #0
 800595e:	d006      	beq.n	800596e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	f47f aecb 	bne.w	8005704 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005974:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005978:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800597c:	2b00      	cmp	r3, #0
 800597e:	d049      	beq.n	8005a14 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005986:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800598a:	429a      	cmp	r2, r3
 800598c:	d242      	bcs.n	8005a14 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	623b      	str	r3, [r7, #32]
   return(result);
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80059b2:	633a      	str	r2, [r7, #48]	; 0x30
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e3      	bne.n	800598e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80059ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f043 0320 	orr.w	r3, r3, #32
 80059e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	69b9      	ldr	r1, [r7, #24]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	617b      	str	r3, [r7, #20]
   return(result);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e4      	bne.n	80059cc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a02:	e007      	b.n	8005a14 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0208 	orr.w	r2, r2, #8
 8005a12:	619a      	str	r2, [r3, #24]
}
 8005a14:	bf00      	nop
 8005a16:	37b8      	adds	r7, #184	; 0xb8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40008000 	.word	0x40008000
 8005a20:	080051a5 	.word	0x080051a5

08005a24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr

08005a36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc80      	pop	{r7}
 8005a46:	4770      	bx	lr

08005a48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bc80      	pop	{r7}
 8005a58:	4770      	bx	lr

08005a5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b085      	sub	sp, #20
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e027      	b.n	8005ac0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2224      	movs	r2, #36	; 0x24
 8005a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e02d      	b.n	8005b3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2224      	movs	r2, #36	; 0x24
 8005aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f850 	bl	8005bc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d101      	bne.n	8005b5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	e02d      	b.n	8005bba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2224      	movs	r2, #36	; 0x24
 8005b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0201 	bic.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f812 	bl	8005bc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d108      	bne.n	8005be6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005be4:	e031      	b.n	8005c4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005be6:	2308      	movs	r3, #8
 8005be8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bea:	2308      	movs	r3, #8
 8005bec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	0e5b      	lsrs	r3, r3, #25
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	0f5b      	lsrs	r3, r3, #29
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	7b3a      	ldrb	r2, [r7, #12]
 8005c12:	4910      	ldr	r1, [pc, #64]	; (8005c54 <UARTEx_SetNbDataToProcess+0x90>)
 8005c14:	5c8a      	ldrb	r2, [r1, r2]
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c1a:	7b3a      	ldrb	r2, [r7, #12]
 8005c1c:	490e      	ldr	r1, [pc, #56]	; (8005c58 <UARTEx_SetNbDataToProcess+0x94>)
 8005c1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c20:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	7b7a      	ldrb	r2, [r7, #13]
 8005c30:	4908      	ldr	r1, [pc, #32]	; (8005c54 <UARTEx_SetNbDataToProcess+0x90>)
 8005c32:	5c8a      	ldrb	r2, [r1, r2]
 8005c34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c38:	7b7a      	ldrb	r2, [r7, #13]
 8005c3a:	4907      	ldr	r1, [pc, #28]	; (8005c58 <UARTEx_SetNbDataToProcess+0x94>)
 8005c3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bc80      	pop	{r7}
 8005c52:	4770      	bx	lr
 8005c54:	080066e0 	.word	0x080066e0
 8005c58:	080066e8 	.word	0x080066e8

08005c5c <__errno>:
 8005c5c:	4b01      	ldr	r3, [pc, #4]	; (8005c64 <__errno+0x8>)
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	2000000c 	.word	0x2000000c

08005c68 <__libc_init_array>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4d0d      	ldr	r5, [pc, #52]	; (8005ca0 <__libc_init_array+0x38>)
 8005c6c:	4c0d      	ldr	r4, [pc, #52]	; (8005ca4 <__libc_init_array+0x3c>)
 8005c6e:	1b64      	subs	r4, r4, r5
 8005c70:	10a4      	asrs	r4, r4, #2
 8005c72:	2600      	movs	r6, #0
 8005c74:	42a6      	cmp	r6, r4
 8005c76:	d109      	bne.n	8005c8c <__libc_init_array+0x24>
 8005c78:	4d0b      	ldr	r5, [pc, #44]	; (8005ca8 <__libc_init_array+0x40>)
 8005c7a:	4c0c      	ldr	r4, [pc, #48]	; (8005cac <__libc_init_array+0x44>)
 8005c7c:	f000 fca0 	bl	80065c0 <_init>
 8005c80:	1b64      	subs	r4, r4, r5
 8005c82:	10a4      	asrs	r4, r4, #2
 8005c84:	2600      	movs	r6, #0
 8005c86:	42a6      	cmp	r6, r4
 8005c88:	d105      	bne.n	8005c96 <__libc_init_array+0x2e>
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c90:	4798      	blx	r3
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7ee      	b.n	8005c74 <__libc_init_array+0xc>
 8005c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9a:	4798      	blx	r3
 8005c9c:	3601      	adds	r6, #1
 8005c9e:	e7f2      	b.n	8005c86 <__libc_init_array+0x1e>
 8005ca0:	0800672c 	.word	0x0800672c
 8005ca4:	0800672c 	.word	0x0800672c
 8005ca8:	0800672c 	.word	0x0800672c
 8005cac:	08006730 	.word	0x08006730

08005cb0 <memcpy>:
 8005cb0:	440a      	add	r2, r1
 8005cb2:	4291      	cmp	r1, r2
 8005cb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005cb8:	d100      	bne.n	8005cbc <memcpy+0xc>
 8005cba:	4770      	bx	lr
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cc6:	4291      	cmp	r1, r2
 8005cc8:	d1f9      	bne.n	8005cbe <memcpy+0xe>
 8005cca:	bd10      	pop	{r4, pc}

08005ccc <memset>:
 8005ccc:	4402      	add	r2, r0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d100      	bne.n	8005cd6 <memset+0xa>
 8005cd4:	4770      	bx	lr
 8005cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cda:	e7f9      	b.n	8005cd0 <memset+0x4>

08005cdc <sniprintf>:
 8005cdc:	b40c      	push	{r2, r3}
 8005cde:	b530      	push	{r4, r5, lr}
 8005ce0:	4b17      	ldr	r3, [pc, #92]	; (8005d40 <sniprintf+0x64>)
 8005ce2:	1e0c      	subs	r4, r1, #0
 8005ce4:	681d      	ldr	r5, [r3, #0]
 8005ce6:	b09d      	sub	sp, #116	; 0x74
 8005ce8:	da08      	bge.n	8005cfc <sniprintf+0x20>
 8005cea:	238b      	movs	r3, #139	; 0x8b
 8005cec:	602b      	str	r3, [r5, #0]
 8005cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf2:	b01d      	add	sp, #116	; 0x74
 8005cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cf8:	b002      	add	sp, #8
 8005cfa:	4770      	bx	lr
 8005cfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005d04:	bf14      	ite	ne
 8005d06:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005d0a:	4623      	moveq	r3, r4
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	9307      	str	r3, [sp, #28]
 8005d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d14:	9002      	str	r0, [sp, #8]
 8005d16:	9006      	str	r0, [sp, #24]
 8005d18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005d1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d1e:	ab21      	add	r3, sp, #132	; 0x84
 8005d20:	a902      	add	r1, sp, #8
 8005d22:	4628      	mov	r0, r5
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	f000 f869 	bl	8005dfc <_svfiprintf_r>
 8005d2a:	1c43      	adds	r3, r0, #1
 8005d2c:	bfbc      	itt	lt
 8005d2e:	238b      	movlt	r3, #139	; 0x8b
 8005d30:	602b      	strlt	r3, [r5, #0]
 8005d32:	2c00      	cmp	r4, #0
 8005d34:	d0dd      	beq.n	8005cf2 <sniprintf+0x16>
 8005d36:	9b02      	ldr	r3, [sp, #8]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e7d9      	b.n	8005cf2 <sniprintf+0x16>
 8005d3e:	bf00      	nop
 8005d40:	2000000c 	.word	0x2000000c

08005d44 <__ssputs_r>:
 8005d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	688e      	ldr	r6, [r1, #8]
 8005d4a:	429e      	cmp	r6, r3
 8005d4c:	4682      	mov	sl, r0
 8005d4e:	460c      	mov	r4, r1
 8005d50:	4690      	mov	r8, r2
 8005d52:	461f      	mov	r7, r3
 8005d54:	d838      	bhi.n	8005dc8 <__ssputs_r+0x84>
 8005d56:	898a      	ldrh	r2, [r1, #12]
 8005d58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d5c:	d032      	beq.n	8005dc4 <__ssputs_r+0x80>
 8005d5e:	6825      	ldr	r5, [r4, #0]
 8005d60:	6909      	ldr	r1, [r1, #16]
 8005d62:	eba5 0901 	sub.w	r9, r5, r1
 8005d66:	6965      	ldr	r5, [r4, #20]
 8005d68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d70:	3301      	adds	r3, #1
 8005d72:	444b      	add	r3, r9
 8005d74:	106d      	asrs	r5, r5, #1
 8005d76:	429d      	cmp	r5, r3
 8005d78:	bf38      	it	cc
 8005d7a:	461d      	movcc	r5, r3
 8005d7c:	0553      	lsls	r3, r2, #21
 8005d7e:	d531      	bpl.n	8005de4 <__ssputs_r+0xa0>
 8005d80:	4629      	mov	r1, r5
 8005d82:	f000 fb53 	bl	800642c <_malloc_r>
 8005d86:	4606      	mov	r6, r0
 8005d88:	b950      	cbnz	r0, 8005da0 <__ssputs_r+0x5c>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	f8ca 3000 	str.w	r3, [sl]
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da0:	6921      	ldr	r1, [r4, #16]
 8005da2:	464a      	mov	r2, r9
 8005da4:	f7ff ff84 	bl	8005cb0 <memcpy>
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db2:	81a3      	strh	r3, [r4, #12]
 8005db4:	6126      	str	r6, [r4, #16]
 8005db6:	6165      	str	r5, [r4, #20]
 8005db8:	444e      	add	r6, r9
 8005dba:	eba5 0509 	sub.w	r5, r5, r9
 8005dbe:	6026      	str	r6, [r4, #0]
 8005dc0:	60a5      	str	r5, [r4, #8]
 8005dc2:	463e      	mov	r6, r7
 8005dc4:	42be      	cmp	r6, r7
 8005dc6:	d900      	bls.n	8005dca <__ssputs_r+0x86>
 8005dc8:	463e      	mov	r6, r7
 8005dca:	6820      	ldr	r0, [r4, #0]
 8005dcc:	4632      	mov	r2, r6
 8005dce:	4641      	mov	r1, r8
 8005dd0:	f000 faa8 	bl	8006324 <memmove>
 8005dd4:	68a3      	ldr	r3, [r4, #8]
 8005dd6:	1b9b      	subs	r3, r3, r6
 8005dd8:	60a3      	str	r3, [r4, #8]
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	4433      	add	r3, r6
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	2000      	movs	r0, #0
 8005de2:	e7db      	b.n	8005d9c <__ssputs_r+0x58>
 8005de4:	462a      	mov	r2, r5
 8005de6:	f000 fb95 	bl	8006514 <_realloc_r>
 8005dea:	4606      	mov	r6, r0
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d1e1      	bne.n	8005db4 <__ssputs_r+0x70>
 8005df0:	6921      	ldr	r1, [r4, #16]
 8005df2:	4650      	mov	r0, sl
 8005df4:	f000 fab0 	bl	8006358 <_free_r>
 8005df8:	e7c7      	b.n	8005d8a <__ssputs_r+0x46>
	...

08005dfc <_svfiprintf_r>:
 8005dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e00:	4698      	mov	r8, r3
 8005e02:	898b      	ldrh	r3, [r1, #12]
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	b09d      	sub	sp, #116	; 0x74
 8005e08:	4607      	mov	r7, r0
 8005e0a:	460d      	mov	r5, r1
 8005e0c:	4614      	mov	r4, r2
 8005e0e:	d50e      	bpl.n	8005e2e <_svfiprintf_r+0x32>
 8005e10:	690b      	ldr	r3, [r1, #16]
 8005e12:	b963      	cbnz	r3, 8005e2e <_svfiprintf_r+0x32>
 8005e14:	2140      	movs	r1, #64	; 0x40
 8005e16:	f000 fb09 	bl	800642c <_malloc_r>
 8005e1a:	6028      	str	r0, [r5, #0]
 8005e1c:	6128      	str	r0, [r5, #16]
 8005e1e:	b920      	cbnz	r0, 8005e2a <_svfiprintf_r+0x2e>
 8005e20:	230c      	movs	r3, #12
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e28:	e0d1      	b.n	8005fce <_svfiprintf_r+0x1d2>
 8005e2a:	2340      	movs	r3, #64	; 0x40
 8005e2c:	616b      	str	r3, [r5, #20]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9309      	str	r3, [sp, #36]	; 0x24
 8005e32:	2320      	movs	r3, #32
 8005e34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e38:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e3c:	2330      	movs	r3, #48	; 0x30
 8005e3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005fe8 <_svfiprintf_r+0x1ec>
 8005e42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e46:	f04f 0901 	mov.w	r9, #1
 8005e4a:	4623      	mov	r3, r4
 8005e4c:	469a      	mov	sl, r3
 8005e4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e52:	b10a      	cbz	r2, 8005e58 <_svfiprintf_r+0x5c>
 8005e54:	2a25      	cmp	r2, #37	; 0x25
 8005e56:	d1f9      	bne.n	8005e4c <_svfiprintf_r+0x50>
 8005e58:	ebba 0b04 	subs.w	fp, sl, r4
 8005e5c:	d00b      	beq.n	8005e76 <_svfiprintf_r+0x7a>
 8005e5e:	465b      	mov	r3, fp
 8005e60:	4622      	mov	r2, r4
 8005e62:	4629      	mov	r1, r5
 8005e64:	4638      	mov	r0, r7
 8005e66:	f7ff ff6d 	bl	8005d44 <__ssputs_r>
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	f000 80aa 	beq.w	8005fc4 <_svfiprintf_r+0x1c8>
 8005e70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e72:	445a      	add	r2, fp
 8005e74:	9209      	str	r2, [sp, #36]	; 0x24
 8005e76:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f000 80a2 	beq.w	8005fc4 <_svfiprintf_r+0x1c8>
 8005e80:	2300      	movs	r3, #0
 8005e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e8a:	f10a 0a01 	add.w	sl, sl, #1
 8005e8e:	9304      	str	r3, [sp, #16]
 8005e90:	9307      	str	r3, [sp, #28]
 8005e92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e96:	931a      	str	r3, [sp, #104]	; 0x68
 8005e98:	4654      	mov	r4, sl
 8005e9a:	2205      	movs	r2, #5
 8005e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea0:	4851      	ldr	r0, [pc, #324]	; (8005fe8 <_svfiprintf_r+0x1ec>)
 8005ea2:	f7fa f96d 	bl	8000180 <memchr>
 8005ea6:	9a04      	ldr	r2, [sp, #16]
 8005ea8:	b9d8      	cbnz	r0, 8005ee2 <_svfiprintf_r+0xe6>
 8005eaa:	06d0      	lsls	r0, r2, #27
 8005eac:	bf44      	itt	mi
 8005eae:	2320      	movmi	r3, #32
 8005eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb4:	0711      	lsls	r1, r2, #28
 8005eb6:	bf44      	itt	mi
 8005eb8:	232b      	movmi	r3, #43	; 0x2b
 8005eba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ec4:	d015      	beq.n	8005ef2 <_svfiprintf_r+0xf6>
 8005ec6:	9a07      	ldr	r2, [sp, #28]
 8005ec8:	4654      	mov	r4, sl
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f04f 0c0a 	mov.w	ip, #10
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ed6:	3b30      	subs	r3, #48	; 0x30
 8005ed8:	2b09      	cmp	r3, #9
 8005eda:	d94e      	bls.n	8005f7a <_svfiprintf_r+0x17e>
 8005edc:	b1b0      	cbz	r0, 8005f0c <_svfiprintf_r+0x110>
 8005ede:	9207      	str	r2, [sp, #28]
 8005ee0:	e014      	b.n	8005f0c <_svfiprintf_r+0x110>
 8005ee2:	eba0 0308 	sub.w	r3, r0, r8
 8005ee6:	fa09 f303 	lsl.w	r3, r9, r3
 8005eea:	4313      	orrs	r3, r2
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	46a2      	mov	sl, r4
 8005ef0:	e7d2      	b.n	8005e98 <_svfiprintf_r+0x9c>
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	1d19      	adds	r1, r3, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	9103      	str	r1, [sp, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	bfbb      	ittet	lt
 8005efe:	425b      	neglt	r3, r3
 8005f00:	f042 0202 	orrlt.w	r2, r2, #2
 8005f04:	9307      	strge	r3, [sp, #28]
 8005f06:	9307      	strlt	r3, [sp, #28]
 8005f08:	bfb8      	it	lt
 8005f0a:	9204      	strlt	r2, [sp, #16]
 8005f0c:	7823      	ldrb	r3, [r4, #0]
 8005f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f10:	d10c      	bne.n	8005f2c <_svfiprintf_r+0x130>
 8005f12:	7863      	ldrb	r3, [r4, #1]
 8005f14:	2b2a      	cmp	r3, #42	; 0x2a
 8005f16:	d135      	bne.n	8005f84 <_svfiprintf_r+0x188>
 8005f18:	9b03      	ldr	r3, [sp, #12]
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	9203      	str	r2, [sp, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bfb8      	it	lt
 8005f24:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f28:	3402      	adds	r4, #2
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005fec <_svfiprintf_r+0x1f0>
 8005f30:	7821      	ldrb	r1, [r4, #0]
 8005f32:	2203      	movs	r2, #3
 8005f34:	4650      	mov	r0, sl
 8005f36:	f7fa f923 	bl	8000180 <memchr>
 8005f3a:	b140      	cbz	r0, 8005f4e <_svfiprintf_r+0x152>
 8005f3c:	2340      	movs	r3, #64	; 0x40
 8005f3e:	eba0 000a 	sub.w	r0, r0, sl
 8005f42:	fa03 f000 	lsl.w	r0, r3, r0
 8005f46:	9b04      	ldr	r3, [sp, #16]
 8005f48:	4303      	orrs	r3, r0
 8005f4a:	3401      	adds	r4, #1
 8005f4c:	9304      	str	r3, [sp, #16]
 8005f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f52:	4827      	ldr	r0, [pc, #156]	; (8005ff0 <_svfiprintf_r+0x1f4>)
 8005f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f58:	2206      	movs	r2, #6
 8005f5a:	f7fa f911 	bl	8000180 <memchr>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d038      	beq.n	8005fd4 <_svfiprintf_r+0x1d8>
 8005f62:	4b24      	ldr	r3, [pc, #144]	; (8005ff4 <_svfiprintf_r+0x1f8>)
 8005f64:	bb1b      	cbnz	r3, 8005fae <_svfiprintf_r+0x1b2>
 8005f66:	9b03      	ldr	r3, [sp, #12]
 8005f68:	3307      	adds	r3, #7
 8005f6a:	f023 0307 	bic.w	r3, r3, #7
 8005f6e:	3308      	adds	r3, #8
 8005f70:	9303      	str	r3, [sp, #12]
 8005f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f74:	4433      	add	r3, r6
 8005f76:	9309      	str	r3, [sp, #36]	; 0x24
 8005f78:	e767      	b.n	8005e4a <_svfiprintf_r+0x4e>
 8005f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f7e:	460c      	mov	r4, r1
 8005f80:	2001      	movs	r0, #1
 8005f82:	e7a5      	b.n	8005ed0 <_svfiprintf_r+0xd4>
 8005f84:	2300      	movs	r3, #0
 8005f86:	3401      	adds	r4, #1
 8005f88:	9305      	str	r3, [sp, #20]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	f04f 0c0a 	mov.w	ip, #10
 8005f90:	4620      	mov	r0, r4
 8005f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f96:	3a30      	subs	r2, #48	; 0x30
 8005f98:	2a09      	cmp	r2, #9
 8005f9a:	d903      	bls.n	8005fa4 <_svfiprintf_r+0x1a8>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0c5      	beq.n	8005f2c <_svfiprintf_r+0x130>
 8005fa0:	9105      	str	r1, [sp, #20]
 8005fa2:	e7c3      	b.n	8005f2c <_svfiprintf_r+0x130>
 8005fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fa8:	4604      	mov	r4, r0
 8005faa:	2301      	movs	r3, #1
 8005fac:	e7f0      	b.n	8005f90 <_svfiprintf_r+0x194>
 8005fae:	ab03      	add	r3, sp, #12
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <_svfiprintf_r+0x1fc>)
 8005fb6:	a904      	add	r1, sp, #16
 8005fb8:	4638      	mov	r0, r7
 8005fba:	f3af 8000 	nop.w
 8005fbe:	1c42      	adds	r2, r0, #1
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	d1d6      	bne.n	8005f72 <_svfiprintf_r+0x176>
 8005fc4:	89ab      	ldrh	r3, [r5, #12]
 8005fc6:	065b      	lsls	r3, r3, #25
 8005fc8:	f53f af2c 	bmi.w	8005e24 <_svfiprintf_r+0x28>
 8005fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fce:	b01d      	add	sp, #116	; 0x74
 8005fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd4:	ab03      	add	r3, sp, #12
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <_svfiprintf_r+0x1fc>)
 8005fdc:	a904      	add	r1, sp, #16
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f000 f87a 	bl	80060d8 <_printf_i>
 8005fe4:	e7eb      	b.n	8005fbe <_svfiprintf_r+0x1c2>
 8005fe6:	bf00      	nop
 8005fe8:	080066f0 	.word	0x080066f0
 8005fec:	080066f6 	.word	0x080066f6
 8005ff0:	080066fa 	.word	0x080066fa
 8005ff4:	00000000 	.word	0x00000000
 8005ff8:	08005d45 	.word	0x08005d45

08005ffc <_printf_common>:
 8005ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006000:	4616      	mov	r6, r2
 8006002:	4699      	mov	r9, r3
 8006004:	688a      	ldr	r2, [r1, #8]
 8006006:	690b      	ldr	r3, [r1, #16]
 8006008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800600c:	4293      	cmp	r3, r2
 800600e:	bfb8      	it	lt
 8006010:	4613      	movlt	r3, r2
 8006012:	6033      	str	r3, [r6, #0]
 8006014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006018:	4607      	mov	r7, r0
 800601a:	460c      	mov	r4, r1
 800601c:	b10a      	cbz	r2, 8006022 <_printf_common+0x26>
 800601e:	3301      	adds	r3, #1
 8006020:	6033      	str	r3, [r6, #0]
 8006022:	6823      	ldr	r3, [r4, #0]
 8006024:	0699      	lsls	r1, r3, #26
 8006026:	bf42      	ittt	mi
 8006028:	6833      	ldrmi	r3, [r6, #0]
 800602a:	3302      	addmi	r3, #2
 800602c:	6033      	strmi	r3, [r6, #0]
 800602e:	6825      	ldr	r5, [r4, #0]
 8006030:	f015 0506 	ands.w	r5, r5, #6
 8006034:	d106      	bne.n	8006044 <_printf_common+0x48>
 8006036:	f104 0a19 	add.w	sl, r4, #25
 800603a:	68e3      	ldr	r3, [r4, #12]
 800603c:	6832      	ldr	r2, [r6, #0]
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	42ab      	cmp	r3, r5
 8006042:	dc26      	bgt.n	8006092 <_printf_common+0x96>
 8006044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006048:	1e13      	subs	r3, r2, #0
 800604a:	6822      	ldr	r2, [r4, #0]
 800604c:	bf18      	it	ne
 800604e:	2301      	movne	r3, #1
 8006050:	0692      	lsls	r2, r2, #26
 8006052:	d42b      	bmi.n	80060ac <_printf_common+0xb0>
 8006054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006058:	4649      	mov	r1, r9
 800605a:	4638      	mov	r0, r7
 800605c:	47c0      	blx	r8
 800605e:	3001      	adds	r0, #1
 8006060:	d01e      	beq.n	80060a0 <_printf_common+0xa4>
 8006062:	6823      	ldr	r3, [r4, #0]
 8006064:	68e5      	ldr	r5, [r4, #12]
 8006066:	6832      	ldr	r2, [r6, #0]
 8006068:	f003 0306 	and.w	r3, r3, #6
 800606c:	2b04      	cmp	r3, #4
 800606e:	bf08      	it	eq
 8006070:	1aad      	subeq	r5, r5, r2
 8006072:	68a3      	ldr	r3, [r4, #8]
 8006074:	6922      	ldr	r2, [r4, #16]
 8006076:	bf0c      	ite	eq
 8006078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800607c:	2500      	movne	r5, #0
 800607e:	4293      	cmp	r3, r2
 8006080:	bfc4      	itt	gt
 8006082:	1a9b      	subgt	r3, r3, r2
 8006084:	18ed      	addgt	r5, r5, r3
 8006086:	2600      	movs	r6, #0
 8006088:	341a      	adds	r4, #26
 800608a:	42b5      	cmp	r5, r6
 800608c:	d11a      	bne.n	80060c4 <_printf_common+0xc8>
 800608e:	2000      	movs	r0, #0
 8006090:	e008      	b.n	80060a4 <_printf_common+0xa8>
 8006092:	2301      	movs	r3, #1
 8006094:	4652      	mov	r2, sl
 8006096:	4649      	mov	r1, r9
 8006098:	4638      	mov	r0, r7
 800609a:	47c0      	blx	r8
 800609c:	3001      	adds	r0, #1
 800609e:	d103      	bne.n	80060a8 <_printf_common+0xac>
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a8:	3501      	adds	r5, #1
 80060aa:	e7c6      	b.n	800603a <_printf_common+0x3e>
 80060ac:	18e1      	adds	r1, r4, r3
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	2030      	movs	r0, #48	; 0x30
 80060b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060b6:	4422      	add	r2, r4
 80060b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060c0:	3302      	adds	r3, #2
 80060c2:	e7c7      	b.n	8006054 <_printf_common+0x58>
 80060c4:	2301      	movs	r3, #1
 80060c6:	4622      	mov	r2, r4
 80060c8:	4649      	mov	r1, r9
 80060ca:	4638      	mov	r0, r7
 80060cc:	47c0      	blx	r8
 80060ce:	3001      	adds	r0, #1
 80060d0:	d0e6      	beq.n	80060a0 <_printf_common+0xa4>
 80060d2:	3601      	adds	r6, #1
 80060d4:	e7d9      	b.n	800608a <_printf_common+0x8e>
	...

080060d8 <_printf_i>:
 80060d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	7e0f      	ldrb	r7, [r1, #24]
 80060de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060e0:	2f78      	cmp	r7, #120	; 0x78
 80060e2:	4691      	mov	r9, r2
 80060e4:	4680      	mov	r8, r0
 80060e6:	460c      	mov	r4, r1
 80060e8:	469a      	mov	sl, r3
 80060ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060ee:	d807      	bhi.n	8006100 <_printf_i+0x28>
 80060f0:	2f62      	cmp	r7, #98	; 0x62
 80060f2:	d80a      	bhi.n	800610a <_printf_i+0x32>
 80060f4:	2f00      	cmp	r7, #0
 80060f6:	f000 80d8 	beq.w	80062aa <_printf_i+0x1d2>
 80060fa:	2f58      	cmp	r7, #88	; 0x58
 80060fc:	f000 80a3 	beq.w	8006246 <_printf_i+0x16e>
 8006100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006108:	e03a      	b.n	8006180 <_printf_i+0xa8>
 800610a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800610e:	2b15      	cmp	r3, #21
 8006110:	d8f6      	bhi.n	8006100 <_printf_i+0x28>
 8006112:	a101      	add	r1, pc, #4	; (adr r1, 8006118 <_printf_i+0x40>)
 8006114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006118:	08006171 	.word	0x08006171
 800611c:	08006185 	.word	0x08006185
 8006120:	08006101 	.word	0x08006101
 8006124:	08006101 	.word	0x08006101
 8006128:	08006101 	.word	0x08006101
 800612c:	08006101 	.word	0x08006101
 8006130:	08006185 	.word	0x08006185
 8006134:	08006101 	.word	0x08006101
 8006138:	08006101 	.word	0x08006101
 800613c:	08006101 	.word	0x08006101
 8006140:	08006101 	.word	0x08006101
 8006144:	08006291 	.word	0x08006291
 8006148:	080061b5 	.word	0x080061b5
 800614c:	08006273 	.word	0x08006273
 8006150:	08006101 	.word	0x08006101
 8006154:	08006101 	.word	0x08006101
 8006158:	080062b3 	.word	0x080062b3
 800615c:	08006101 	.word	0x08006101
 8006160:	080061b5 	.word	0x080061b5
 8006164:	08006101 	.word	0x08006101
 8006168:	08006101 	.word	0x08006101
 800616c:	0800627b 	.word	0x0800627b
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	1d1a      	adds	r2, r3, #4
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	602a      	str	r2, [r5, #0]
 8006178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800617c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006180:	2301      	movs	r3, #1
 8006182:	e0a3      	b.n	80062cc <_printf_i+0x1f4>
 8006184:	6820      	ldr	r0, [r4, #0]
 8006186:	6829      	ldr	r1, [r5, #0]
 8006188:	0606      	lsls	r6, r0, #24
 800618a:	f101 0304 	add.w	r3, r1, #4
 800618e:	d50a      	bpl.n	80061a6 <_printf_i+0xce>
 8006190:	680e      	ldr	r6, [r1, #0]
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	2e00      	cmp	r6, #0
 8006196:	da03      	bge.n	80061a0 <_printf_i+0xc8>
 8006198:	232d      	movs	r3, #45	; 0x2d
 800619a:	4276      	negs	r6, r6
 800619c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061a0:	485e      	ldr	r0, [pc, #376]	; (800631c <_printf_i+0x244>)
 80061a2:	230a      	movs	r3, #10
 80061a4:	e019      	b.n	80061da <_printf_i+0x102>
 80061a6:	680e      	ldr	r6, [r1, #0]
 80061a8:	602b      	str	r3, [r5, #0]
 80061aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061ae:	bf18      	it	ne
 80061b0:	b236      	sxthne	r6, r6
 80061b2:	e7ef      	b.n	8006194 <_printf_i+0xbc>
 80061b4:	682b      	ldr	r3, [r5, #0]
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	1d19      	adds	r1, r3, #4
 80061ba:	6029      	str	r1, [r5, #0]
 80061bc:	0601      	lsls	r1, r0, #24
 80061be:	d501      	bpl.n	80061c4 <_printf_i+0xec>
 80061c0:	681e      	ldr	r6, [r3, #0]
 80061c2:	e002      	b.n	80061ca <_printf_i+0xf2>
 80061c4:	0646      	lsls	r6, r0, #25
 80061c6:	d5fb      	bpl.n	80061c0 <_printf_i+0xe8>
 80061c8:	881e      	ldrh	r6, [r3, #0]
 80061ca:	4854      	ldr	r0, [pc, #336]	; (800631c <_printf_i+0x244>)
 80061cc:	2f6f      	cmp	r7, #111	; 0x6f
 80061ce:	bf0c      	ite	eq
 80061d0:	2308      	moveq	r3, #8
 80061d2:	230a      	movne	r3, #10
 80061d4:	2100      	movs	r1, #0
 80061d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061da:	6865      	ldr	r5, [r4, #4]
 80061dc:	60a5      	str	r5, [r4, #8]
 80061de:	2d00      	cmp	r5, #0
 80061e0:	bfa2      	ittt	ge
 80061e2:	6821      	ldrge	r1, [r4, #0]
 80061e4:	f021 0104 	bicge.w	r1, r1, #4
 80061e8:	6021      	strge	r1, [r4, #0]
 80061ea:	b90e      	cbnz	r6, 80061f0 <_printf_i+0x118>
 80061ec:	2d00      	cmp	r5, #0
 80061ee:	d04d      	beq.n	800628c <_printf_i+0x1b4>
 80061f0:	4615      	mov	r5, r2
 80061f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80061f6:	fb03 6711 	mls	r7, r3, r1, r6
 80061fa:	5dc7      	ldrb	r7, [r0, r7]
 80061fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006200:	4637      	mov	r7, r6
 8006202:	42bb      	cmp	r3, r7
 8006204:	460e      	mov	r6, r1
 8006206:	d9f4      	bls.n	80061f2 <_printf_i+0x11a>
 8006208:	2b08      	cmp	r3, #8
 800620a:	d10b      	bne.n	8006224 <_printf_i+0x14c>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	07de      	lsls	r6, r3, #31
 8006210:	d508      	bpl.n	8006224 <_printf_i+0x14c>
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	6861      	ldr	r1, [r4, #4]
 8006216:	4299      	cmp	r1, r3
 8006218:	bfde      	ittt	le
 800621a:	2330      	movle	r3, #48	; 0x30
 800621c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006220:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006224:	1b52      	subs	r2, r2, r5
 8006226:	6122      	str	r2, [r4, #16]
 8006228:	f8cd a000 	str.w	sl, [sp]
 800622c:	464b      	mov	r3, r9
 800622e:	aa03      	add	r2, sp, #12
 8006230:	4621      	mov	r1, r4
 8006232:	4640      	mov	r0, r8
 8006234:	f7ff fee2 	bl	8005ffc <_printf_common>
 8006238:	3001      	adds	r0, #1
 800623a:	d14c      	bne.n	80062d6 <_printf_i+0x1fe>
 800623c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006240:	b004      	add	sp, #16
 8006242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006246:	4835      	ldr	r0, [pc, #212]	; (800631c <_printf_i+0x244>)
 8006248:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800624c:	6829      	ldr	r1, [r5, #0]
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	f851 6b04 	ldr.w	r6, [r1], #4
 8006254:	6029      	str	r1, [r5, #0]
 8006256:	061d      	lsls	r5, r3, #24
 8006258:	d514      	bpl.n	8006284 <_printf_i+0x1ac>
 800625a:	07df      	lsls	r7, r3, #31
 800625c:	bf44      	itt	mi
 800625e:	f043 0320 	orrmi.w	r3, r3, #32
 8006262:	6023      	strmi	r3, [r4, #0]
 8006264:	b91e      	cbnz	r6, 800626e <_printf_i+0x196>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	f023 0320 	bic.w	r3, r3, #32
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	2310      	movs	r3, #16
 8006270:	e7b0      	b.n	80061d4 <_printf_i+0xfc>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f043 0320 	orr.w	r3, r3, #32
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	2378      	movs	r3, #120	; 0x78
 800627c:	4828      	ldr	r0, [pc, #160]	; (8006320 <_printf_i+0x248>)
 800627e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006282:	e7e3      	b.n	800624c <_printf_i+0x174>
 8006284:	0659      	lsls	r1, r3, #25
 8006286:	bf48      	it	mi
 8006288:	b2b6      	uxthmi	r6, r6
 800628a:	e7e6      	b.n	800625a <_printf_i+0x182>
 800628c:	4615      	mov	r5, r2
 800628e:	e7bb      	b.n	8006208 <_printf_i+0x130>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	6826      	ldr	r6, [r4, #0]
 8006294:	6961      	ldr	r1, [r4, #20]
 8006296:	1d18      	adds	r0, r3, #4
 8006298:	6028      	str	r0, [r5, #0]
 800629a:	0635      	lsls	r5, r6, #24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0x1cc>
 80062a0:	6019      	str	r1, [r3, #0]
 80062a2:	e002      	b.n	80062aa <_printf_i+0x1d2>
 80062a4:	0670      	lsls	r0, r6, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0x1c8>
 80062a8:	8019      	strh	r1, [r3, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	4615      	mov	r5, r2
 80062b0:	e7ba      	b.n	8006228 <_printf_i+0x150>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	1d1a      	adds	r2, r3, #4
 80062b6:	602a      	str	r2, [r5, #0]
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	6862      	ldr	r2, [r4, #4]
 80062bc:	2100      	movs	r1, #0
 80062be:	4628      	mov	r0, r5
 80062c0:	f7f9 ff5e 	bl	8000180 <memchr>
 80062c4:	b108      	cbz	r0, 80062ca <_printf_i+0x1f2>
 80062c6:	1b40      	subs	r0, r0, r5
 80062c8:	6060      	str	r0, [r4, #4]
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	2300      	movs	r3, #0
 80062d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062d4:	e7a8      	b.n	8006228 <_printf_i+0x150>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	462a      	mov	r2, r5
 80062da:	4649      	mov	r1, r9
 80062dc:	4640      	mov	r0, r8
 80062de:	47d0      	blx	sl
 80062e0:	3001      	adds	r0, #1
 80062e2:	d0ab      	beq.n	800623c <_printf_i+0x164>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	079b      	lsls	r3, r3, #30
 80062e8:	d413      	bmi.n	8006312 <_printf_i+0x23a>
 80062ea:	68e0      	ldr	r0, [r4, #12]
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	4298      	cmp	r0, r3
 80062f0:	bfb8      	it	lt
 80062f2:	4618      	movlt	r0, r3
 80062f4:	e7a4      	b.n	8006240 <_printf_i+0x168>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4632      	mov	r2, r6
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d09b      	beq.n	800623c <_printf_i+0x164>
 8006304:	3501      	adds	r5, #1
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	9903      	ldr	r1, [sp, #12]
 800630a:	1a5b      	subs	r3, r3, r1
 800630c:	42ab      	cmp	r3, r5
 800630e:	dcf2      	bgt.n	80062f6 <_printf_i+0x21e>
 8006310:	e7eb      	b.n	80062ea <_printf_i+0x212>
 8006312:	2500      	movs	r5, #0
 8006314:	f104 0619 	add.w	r6, r4, #25
 8006318:	e7f5      	b.n	8006306 <_printf_i+0x22e>
 800631a:	bf00      	nop
 800631c:	08006701 	.word	0x08006701
 8006320:	08006712 	.word	0x08006712

08006324 <memmove>:
 8006324:	4288      	cmp	r0, r1
 8006326:	b510      	push	{r4, lr}
 8006328:	eb01 0402 	add.w	r4, r1, r2
 800632c:	d902      	bls.n	8006334 <memmove+0x10>
 800632e:	4284      	cmp	r4, r0
 8006330:	4623      	mov	r3, r4
 8006332:	d807      	bhi.n	8006344 <memmove+0x20>
 8006334:	1e43      	subs	r3, r0, #1
 8006336:	42a1      	cmp	r1, r4
 8006338:	d008      	beq.n	800634c <memmove+0x28>
 800633a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800633e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006342:	e7f8      	b.n	8006336 <memmove+0x12>
 8006344:	4402      	add	r2, r0
 8006346:	4601      	mov	r1, r0
 8006348:	428a      	cmp	r2, r1
 800634a:	d100      	bne.n	800634e <memmove+0x2a>
 800634c:	bd10      	pop	{r4, pc}
 800634e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006356:	e7f7      	b.n	8006348 <memmove+0x24>

08006358 <_free_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	4605      	mov	r5, r0
 800635c:	2900      	cmp	r1, #0
 800635e:	d041      	beq.n	80063e4 <_free_r+0x8c>
 8006360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006364:	1f0c      	subs	r4, r1, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfb8      	it	lt
 800636a:	18e4      	addlt	r4, r4, r3
 800636c:	f000 f912 	bl	8006594 <__malloc_lock>
 8006370:	4a1d      	ldr	r2, [pc, #116]	; (80063e8 <_free_r+0x90>)
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	b933      	cbnz	r3, 8006384 <_free_r+0x2c>
 8006376:	6063      	str	r3, [r4, #4]
 8006378:	6014      	str	r4, [r2, #0]
 800637a:	4628      	mov	r0, r5
 800637c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006380:	f000 b90e 	b.w	80065a0 <__malloc_unlock>
 8006384:	42a3      	cmp	r3, r4
 8006386:	d908      	bls.n	800639a <_free_r+0x42>
 8006388:	6820      	ldr	r0, [r4, #0]
 800638a:	1821      	adds	r1, r4, r0
 800638c:	428b      	cmp	r3, r1
 800638e:	bf01      	itttt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	1809      	addeq	r1, r1, r0
 8006396:	6021      	streq	r1, [r4, #0]
 8006398:	e7ed      	b.n	8006376 <_free_r+0x1e>
 800639a:	461a      	mov	r2, r3
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b10b      	cbz	r3, 80063a4 <_free_r+0x4c>
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d9fa      	bls.n	800639a <_free_r+0x42>
 80063a4:	6811      	ldr	r1, [r2, #0]
 80063a6:	1850      	adds	r0, r2, r1
 80063a8:	42a0      	cmp	r0, r4
 80063aa:	d10b      	bne.n	80063c4 <_free_r+0x6c>
 80063ac:	6820      	ldr	r0, [r4, #0]
 80063ae:	4401      	add	r1, r0
 80063b0:	1850      	adds	r0, r2, r1
 80063b2:	4283      	cmp	r3, r0
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	d1e0      	bne.n	800637a <_free_r+0x22>
 80063b8:	6818      	ldr	r0, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	6053      	str	r3, [r2, #4]
 80063be:	4401      	add	r1, r0
 80063c0:	6011      	str	r1, [r2, #0]
 80063c2:	e7da      	b.n	800637a <_free_r+0x22>
 80063c4:	d902      	bls.n	80063cc <_free_r+0x74>
 80063c6:	230c      	movs	r3, #12
 80063c8:	602b      	str	r3, [r5, #0]
 80063ca:	e7d6      	b.n	800637a <_free_r+0x22>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	1821      	adds	r1, r4, r0
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf04      	itt	eq
 80063d4:	6819      	ldreq	r1, [r3, #0]
 80063d6:	685b      	ldreq	r3, [r3, #4]
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	bf04      	itt	eq
 80063dc:	1809      	addeq	r1, r1, r0
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	6054      	str	r4, [r2, #4]
 80063e2:	e7ca      	b.n	800637a <_free_r+0x22>
 80063e4:	bd38      	pop	{r3, r4, r5, pc}
 80063e6:	bf00      	nop
 80063e8:	200001b4 	.word	0x200001b4

080063ec <sbrk_aligned>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	4e0e      	ldr	r6, [pc, #56]	; (8006428 <sbrk_aligned+0x3c>)
 80063f0:	460c      	mov	r4, r1
 80063f2:	6831      	ldr	r1, [r6, #0]
 80063f4:	4605      	mov	r5, r0
 80063f6:	b911      	cbnz	r1, 80063fe <sbrk_aligned+0x12>
 80063f8:	f000 f8bc 	bl	8006574 <_sbrk_r>
 80063fc:	6030      	str	r0, [r6, #0]
 80063fe:	4621      	mov	r1, r4
 8006400:	4628      	mov	r0, r5
 8006402:	f000 f8b7 	bl	8006574 <_sbrk_r>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d00a      	beq.n	8006420 <sbrk_aligned+0x34>
 800640a:	1cc4      	adds	r4, r0, #3
 800640c:	f024 0403 	bic.w	r4, r4, #3
 8006410:	42a0      	cmp	r0, r4
 8006412:	d007      	beq.n	8006424 <sbrk_aligned+0x38>
 8006414:	1a21      	subs	r1, r4, r0
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f8ac 	bl	8006574 <_sbrk_r>
 800641c:	3001      	adds	r0, #1
 800641e:	d101      	bne.n	8006424 <sbrk_aligned+0x38>
 8006420:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006424:	4620      	mov	r0, r4
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	200001b8 	.word	0x200001b8

0800642c <_malloc_r>:
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	1ccd      	adds	r5, r1, #3
 8006432:	f025 0503 	bic.w	r5, r5, #3
 8006436:	3508      	adds	r5, #8
 8006438:	2d0c      	cmp	r5, #12
 800643a:	bf38      	it	cc
 800643c:	250c      	movcc	r5, #12
 800643e:	2d00      	cmp	r5, #0
 8006440:	4607      	mov	r7, r0
 8006442:	db01      	blt.n	8006448 <_malloc_r+0x1c>
 8006444:	42a9      	cmp	r1, r5
 8006446:	d905      	bls.n	8006454 <_malloc_r+0x28>
 8006448:	230c      	movs	r3, #12
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	2600      	movs	r6, #0
 800644e:	4630      	mov	r0, r6
 8006450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006454:	4e2e      	ldr	r6, [pc, #184]	; (8006510 <_malloc_r+0xe4>)
 8006456:	f000 f89d 	bl	8006594 <__malloc_lock>
 800645a:	6833      	ldr	r3, [r6, #0]
 800645c:	461c      	mov	r4, r3
 800645e:	bb34      	cbnz	r4, 80064ae <_malloc_r+0x82>
 8006460:	4629      	mov	r1, r5
 8006462:	4638      	mov	r0, r7
 8006464:	f7ff ffc2 	bl	80063ec <sbrk_aligned>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	4604      	mov	r4, r0
 800646c:	d14d      	bne.n	800650a <_malloc_r+0xde>
 800646e:	6834      	ldr	r4, [r6, #0]
 8006470:	4626      	mov	r6, r4
 8006472:	2e00      	cmp	r6, #0
 8006474:	d140      	bne.n	80064f8 <_malloc_r+0xcc>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	4631      	mov	r1, r6
 800647a:	4638      	mov	r0, r7
 800647c:	eb04 0803 	add.w	r8, r4, r3
 8006480:	f000 f878 	bl	8006574 <_sbrk_r>
 8006484:	4580      	cmp	r8, r0
 8006486:	d13a      	bne.n	80064fe <_malloc_r+0xd2>
 8006488:	6821      	ldr	r1, [r4, #0]
 800648a:	3503      	adds	r5, #3
 800648c:	1a6d      	subs	r5, r5, r1
 800648e:	f025 0503 	bic.w	r5, r5, #3
 8006492:	3508      	adds	r5, #8
 8006494:	2d0c      	cmp	r5, #12
 8006496:	bf38      	it	cc
 8006498:	250c      	movcc	r5, #12
 800649a:	4629      	mov	r1, r5
 800649c:	4638      	mov	r0, r7
 800649e:	f7ff ffa5 	bl	80063ec <sbrk_aligned>
 80064a2:	3001      	adds	r0, #1
 80064a4:	d02b      	beq.n	80064fe <_malloc_r+0xd2>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	442b      	add	r3, r5
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	e00e      	b.n	80064cc <_malloc_r+0xa0>
 80064ae:	6822      	ldr	r2, [r4, #0]
 80064b0:	1b52      	subs	r2, r2, r5
 80064b2:	d41e      	bmi.n	80064f2 <_malloc_r+0xc6>
 80064b4:	2a0b      	cmp	r2, #11
 80064b6:	d916      	bls.n	80064e6 <_malloc_r+0xba>
 80064b8:	1961      	adds	r1, r4, r5
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	6025      	str	r5, [r4, #0]
 80064be:	bf18      	it	ne
 80064c0:	6059      	strne	r1, [r3, #4]
 80064c2:	6863      	ldr	r3, [r4, #4]
 80064c4:	bf08      	it	eq
 80064c6:	6031      	streq	r1, [r6, #0]
 80064c8:	5162      	str	r2, [r4, r5]
 80064ca:	604b      	str	r3, [r1, #4]
 80064cc:	4638      	mov	r0, r7
 80064ce:	f104 060b 	add.w	r6, r4, #11
 80064d2:	f000 f865 	bl	80065a0 <__malloc_unlock>
 80064d6:	f026 0607 	bic.w	r6, r6, #7
 80064da:	1d23      	adds	r3, r4, #4
 80064dc:	1af2      	subs	r2, r6, r3
 80064de:	d0b6      	beq.n	800644e <_malloc_r+0x22>
 80064e0:	1b9b      	subs	r3, r3, r6
 80064e2:	50a3      	str	r3, [r4, r2]
 80064e4:	e7b3      	b.n	800644e <_malloc_r+0x22>
 80064e6:	6862      	ldr	r2, [r4, #4]
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	bf0c      	ite	eq
 80064ec:	6032      	streq	r2, [r6, #0]
 80064ee:	605a      	strne	r2, [r3, #4]
 80064f0:	e7ec      	b.n	80064cc <_malloc_r+0xa0>
 80064f2:	4623      	mov	r3, r4
 80064f4:	6864      	ldr	r4, [r4, #4]
 80064f6:	e7b2      	b.n	800645e <_malloc_r+0x32>
 80064f8:	4634      	mov	r4, r6
 80064fa:	6876      	ldr	r6, [r6, #4]
 80064fc:	e7b9      	b.n	8006472 <_malloc_r+0x46>
 80064fe:	230c      	movs	r3, #12
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	4638      	mov	r0, r7
 8006504:	f000 f84c 	bl	80065a0 <__malloc_unlock>
 8006508:	e7a1      	b.n	800644e <_malloc_r+0x22>
 800650a:	6025      	str	r5, [r4, #0]
 800650c:	e7de      	b.n	80064cc <_malloc_r+0xa0>
 800650e:	bf00      	nop
 8006510:	200001b4 	.word	0x200001b4

08006514 <_realloc_r>:
 8006514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006518:	4680      	mov	r8, r0
 800651a:	4614      	mov	r4, r2
 800651c:	460e      	mov	r6, r1
 800651e:	b921      	cbnz	r1, 800652a <_realloc_r+0x16>
 8006520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006524:	4611      	mov	r1, r2
 8006526:	f7ff bf81 	b.w	800642c <_malloc_r>
 800652a:	b92a      	cbnz	r2, 8006538 <_realloc_r+0x24>
 800652c:	f7ff ff14 	bl	8006358 <_free_r>
 8006530:	4625      	mov	r5, r4
 8006532:	4628      	mov	r0, r5
 8006534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006538:	f000 f838 	bl	80065ac <_malloc_usable_size_r>
 800653c:	4284      	cmp	r4, r0
 800653e:	4607      	mov	r7, r0
 8006540:	d802      	bhi.n	8006548 <_realloc_r+0x34>
 8006542:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006546:	d812      	bhi.n	800656e <_realloc_r+0x5a>
 8006548:	4621      	mov	r1, r4
 800654a:	4640      	mov	r0, r8
 800654c:	f7ff ff6e 	bl	800642c <_malloc_r>
 8006550:	4605      	mov	r5, r0
 8006552:	2800      	cmp	r0, #0
 8006554:	d0ed      	beq.n	8006532 <_realloc_r+0x1e>
 8006556:	42bc      	cmp	r4, r7
 8006558:	4622      	mov	r2, r4
 800655a:	4631      	mov	r1, r6
 800655c:	bf28      	it	cs
 800655e:	463a      	movcs	r2, r7
 8006560:	f7ff fba6 	bl	8005cb0 <memcpy>
 8006564:	4631      	mov	r1, r6
 8006566:	4640      	mov	r0, r8
 8006568:	f7ff fef6 	bl	8006358 <_free_r>
 800656c:	e7e1      	b.n	8006532 <_realloc_r+0x1e>
 800656e:	4635      	mov	r5, r6
 8006570:	e7df      	b.n	8006532 <_realloc_r+0x1e>
	...

08006574 <_sbrk_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4d06      	ldr	r5, [pc, #24]	; (8006590 <_sbrk_r+0x1c>)
 8006578:	2300      	movs	r3, #0
 800657a:	4604      	mov	r4, r0
 800657c:	4608      	mov	r0, r1
 800657e:	602b      	str	r3, [r5, #0]
 8006580:	f7fa fcd0 	bl	8000f24 <_sbrk>
 8006584:	1c43      	adds	r3, r0, #1
 8006586:	d102      	bne.n	800658e <_sbrk_r+0x1a>
 8006588:	682b      	ldr	r3, [r5, #0]
 800658a:	b103      	cbz	r3, 800658e <_sbrk_r+0x1a>
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	bd38      	pop	{r3, r4, r5, pc}
 8006590:	200001bc 	.word	0x200001bc

08006594 <__malloc_lock>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__malloc_lock+0x8>)
 8006596:	f000 b811 	b.w	80065bc <__retarget_lock_acquire_recursive>
 800659a:	bf00      	nop
 800659c:	200001c0 	.word	0x200001c0

080065a0 <__malloc_unlock>:
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <__malloc_unlock+0x8>)
 80065a2:	f000 b80c 	b.w	80065be <__retarget_lock_release_recursive>
 80065a6:	bf00      	nop
 80065a8:	200001c0 	.word	0x200001c0

080065ac <_malloc_usable_size_r>:
 80065ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b0:	1f18      	subs	r0, r3, #4
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	bfbc      	itt	lt
 80065b6:	580b      	ldrlt	r3, [r1, r0]
 80065b8:	18c0      	addlt	r0, r0, r3
 80065ba:	4770      	bx	lr

080065bc <__retarget_lock_acquire_recursive>:
 80065bc:	4770      	bx	lr

080065be <__retarget_lock_release_recursive>:
 80065be:	4770      	bx	lr

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr

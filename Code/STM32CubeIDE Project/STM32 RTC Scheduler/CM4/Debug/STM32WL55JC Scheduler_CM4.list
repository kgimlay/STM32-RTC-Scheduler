
STM32WL55JC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c9c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004dd4  08004dd4  00014dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb8  08004eb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec0  08004ec0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08004ed4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08004ed4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107e5  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002562  00000000  00000000  0003081b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00032d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00033db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1b2  00000000  00000000  00034d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc11  00000000  00000000  00050eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afde4  00000000  00000000  00060adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001108bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004290  00000000  00000000  00110910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08004dbc 	.word	0x08004dbc

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08004dbc 	.word	0x08004dbc

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000188:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000498:	f023 0218 	bic.w	r2, r3, #24
 800049c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b085      	sub	sp, #20
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4013      	ands	r3, r2
 80004d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	bf00      	nop
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
	...

080004e4 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <HAL_UART_ErrorCallback+0x28>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d006      	beq.n	8000504 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <HAL_UART_ErrorCallback+0x2c>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d101      	bne.n	8000504 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000500:	f000 fa68 	bl	80009d4 <uartBasic_Error_ISR>
}
 8000504:	bf00      	nop
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40013800 	.word	0x40013800
 8000510:	40004400 	.word	0x40004400

08000514 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <HAL_UART_TxCpltCallback+0x28>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d006      	beq.n	8000534 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a05      	ldr	r2, [pc, #20]	; (8000540 <HAL_UART_TxCpltCallback+0x2c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d101      	bne.n	8000534 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 8000530:	f000 fa44 	bl	80009bc <uartBasic_TX_Complete_ISR>
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40013800 	.word	0x40013800
 8000540:	40004400 	.word	0x40004400

08000544 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <HAL_UART_RxCpltCallback+0x28>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d006      	beq.n	8000564 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <HAL_UART_RxCpltCallback+0x2c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d101      	bne.n	8000564 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000560:	f000 fa20 	bl	80009a4 <uartBasic_RX_Complete_ISR>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40013800 	.word	0x40013800
 8000570:	40004400 	.word	0x40004400

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fab7 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f82b 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 f8d9 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 f881 	bl	800068c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fe74 	bl	8001278 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <main+0x60>)
 8000592:	f000 f999 	bl	80008c8 <uartBasic_init>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 8000596:	f000 f9c7 	bl	8000928 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {
	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 800059e:	463a      	mov	r2, r7
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f9d2 	bl	8000950 <uartBasic_get_RX>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  // if message present, handle message
	  if (messageStatus == true) {
 80005b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f1      	beq.n	800059e <main+0x2a>
		  // echo back to computer
		  uartBasic_TX_IT(messageHeader, messageBody);
 80005ba:	463a      	mov	r2, r7
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4611      	mov	r1, r2
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f98e 	bl	80008e4 <uartBasic_TX_IT>
		  messageCount++;
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ca:	3301      	adds	r3, #1
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
		  uartBasic_RX_IT();
 80005ce:	f000 f9ab 	bl	8000928 <uartBasic_RX_IT>
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 80005d2:	e7e4      	b.n	800059e <main+0x2a>
 80005d4:	20000028 	.word	0x20000028

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b09a      	sub	sp, #104	; 0x68
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2248      	movs	r2, #72	; 0x48
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f004 fbe0 	bl	8004dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005fe:	f000 fe13 	bl	8001228 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000602:	2000      	movs	r0, #0
 8000604:	f7ff ff40 	bl	8000488 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xb0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <SystemClock_Config+0xb0>)
 8000612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <SystemClock_Config+0xb0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000624:	2324      	movs	r3, #36	; 0x24
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000628:	2381      	movs	r3, #129	; 0x81
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000630:	2300      	movs	r3, #0
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000634:	2360      	movs	r3, #96	; 0x60
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f8db 	bl	80017fc <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800064c:	f000 f881 	bl	8000752 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000650:	236f      	movs	r3, #111	; 0x6f
 8000652:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fc45 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800067c:	f000 f869 	bl	8000752 <Error_Handler>
  }
}
 8000680:	bf00      	nop
 8000682:	3768      	adds	r7, #104	; 0x68
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	58000400 	.word	0x58000400

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 8000692:	4a28      	ldr	r2, [pc, #160]	; (8000734 <MX_USART2_UART_Init+0xa8>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000696:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 8000698:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b24      	ldr	r3, [pc, #144]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80006b0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006b4:	220c      	movs	r2, #12
 80006b6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006dc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006e8:	f002 f905 	bl	80028f6 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006f2:	f000 f82e 	bl	8000752 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 80006fa:	f004 fa5c 	bl	8004bb6 <HAL_UARTEx_SetTxFifoThreshold>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000704:	f000 f825 	bl	8000752 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 800070c:	f004 fa91 	bl	8004c32 <HAL_UARTEx_SetRxFifoThreshold>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000716:	f000 f81c 	bl	8000752 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0xa4>)
 800071c:	f004 fa13 	bl	8004b46 <HAL_UARTEx_DisableFifoMode>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x9e>
  {
    Error_Handler();
 8000726:	f000 f814 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000028 	.word	0x20000028
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff feb8 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2004      	movs	r0, #4
 8000744:	f7ff feb5 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff feb2 	bl	80004b2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}

08000752 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000756:	b672      	cpsid	i
}
 8000758:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075a:	e7fe      	b.n	800075a <Error_Handler+0x8>

0800075c <LL_AHB2_GRP1_EnableClock>:
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800076a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4313      	orrs	r3, r2
 8000772:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4013      	ands	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000780:	68fb      	ldr	r3, [r7, #12]
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800079a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4013      	ands	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007b0:	68fb      	ldr	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b096      	sub	sp, #88	; 0x58
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2238      	movs	r2, #56	; 0x38
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f004 fadf 	bl	8004dac <memset>
  if(huart->Instance==USART2)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <HAL_UART_MspInit+0x98>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d12e      	bne.n	8000856 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007fc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000800:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4618      	mov	r0, r3
 8000808:	f001 ff3a 	bl	8002680 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000812:	f7ff ff9e 	bl	8000752 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000816:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800081a:	f7ff ffb7 	bl	800078c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2001      	movs	r0, #1
 8000820:	f7ff ff9c 	bl	800075c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000824:	230c      	movs	r3, #12
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000834:	2307      	movs	r3, #7
 8000836:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000838:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800083c:	4619      	mov	r1, r3
 800083e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000842:	f000 fb91 	bl	8000f68 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	2025      	movs	r0, #37	; 0x25
 800084c:	f000 fa9b 	bl	8000d86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000850:	2025      	movs	r0, #37	; 0x25
 8000852:	f000 fab2 	bl	8000dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000856:	bf00      	nop
 8000858:	3758      	adds	r7, #88	; 0x58
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40004400 	.word	0x40004400

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008aa:	f000 f979 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <USART2_IRQHandler+0x10>)
 80008ba:	f002 f94d 	bl	8002b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000028 	.word	0x20000028

080008c8 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 80008d0:	4a03      	ldr	r2, [pc, #12]	; (80008e0 <uartBasic_init+0x18>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	200000c0 	.word	0x200000c0

080008e4 <uartBasic_TX_IT>:
/*
 *
 */
bool uartBasic_TX_IT(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <uartBasic_TX_IT+0x3c>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	f083 0301 	eor.w	r3, r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00b      	beq.n	8000916 <uartBasic_TX_IT+0x32>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 80008fe:	4a09      	ldr	r2, [pc, #36]	; (8000924 <uartBasic_TX_IT+0x40>)
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f89c 	bl	8000a40 <composeMessage>
		_txBuffer_full = true;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <uartBasic_TX_IT+0x3c>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_IT();
 800090e:	f000 f867 	bl	80009e0 <_txMessage_IT>

		// report successfully queued
		return true;
 8000912:	2301      	movs	r3, #1
 8000914:	e000      	b.n	8000918 <uartBasic_TX_IT+0x34>
	}

	else
	{
		// return full buffer
		return false;
 8000916:	2300      	movs	r3, #0
	}
}
 8000918:	4618      	mov	r0, r3
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000104 	.word	0x20000104
 8000924:	200000c4 	.word	0x200000c4

08000928 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <uartBasic_RX_IT+0x24>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f083 0301 	eor.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 800093c:	f000 f868 	bl	8000a10 <_rxMessage_IT>

		// return success
		return true;
 8000940:	2301      	movs	r3, #1
 8000942:	e000      	b.n	8000946 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 8000944:	2300      	movs	r3, #0
	}
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000105 	.word	0x20000105

08000950 <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <uartBasic_get_RX+0x4c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d015      	beq.n	8000990 <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <uartBasic_get_RX+0x50>)
 8000966:	f107 0408 	add.w	r4, r7, #8
 800096a:	461d      	mov	r5, r3
 800096c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000970:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <uartBasic_get_RX+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	461a      	mov	r2, r3
 8000984:	6839      	ldr	r1, [r7, #0]
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f870 	bl	8000a6c <decomposeMessage>

		// report successfully dequeued
		return true;
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 8000990:	2300      	movs	r3, #0
	}
}
 8000992:	4618      	mov	r0, r3
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bdb0      	pop	{r4, r5, r7, pc}
 800099a:	bf00      	nop
 800099c:	20000105 	.word	0x20000105
 80009a0:	200000e4 	.word	0x200000e4

080009a4 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <uartBasic_RX_Complete_ISR+0x14>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000105 	.word	0x20000105

080009bc <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <uartBasic_TX_Complete_ISR+0x14>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000104 	.word	0x20000104

080009d4 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <_txMessage_IT>:

/*
 *
 */
void _txMessage_IT(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <_txMessage_IT+0x24>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2220      	movs	r2, #32
 80009ea:	4907      	ldr	r1, [pc, #28]	; (8000a08 <_txMessage_IT+0x28>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 ffd3 	bl	8002998 <HAL_UART_Transmit_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d102      	bne.n	80009fe <_txMessage_IT+0x1e>
		_txError = true;
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <_txMessage_IT+0x2c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	200000c4 	.word	0x200000c4
 8000a0c:	200000bc 	.word	0x200000bc

08000a10 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <_rxMessage_IT+0x24>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2220      	movs	r2, #32
 8000a1a:	4907      	ldr	r1, [pc, #28]	; (8000a38 <_rxMessage_IT+0x28>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 f84f 	bl	8002ac0 <HAL_UART_Receive_IT>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d102      	bne.n	8000a2e <_rxMessage_IT+0x1e>
		_rxError = true;
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <_rxMessage_IT+0x2c>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000c0 	.word	0x200000c0
 8000a38:	200000e4 	.word	0x200000e4
 8000a3c:	200000bd 	.word	0x200000bd

08000a40 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	221c      	movs	r2, #28
 8000a5c:	68b9      	ldr	r1, [r7, #8]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 f996 	bl	8004d90 <memcpy>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3304      	adds	r3, #4
 8000a86:	221c      	movs	r2, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	68b8      	ldr	r0, [r7, #8]
 8000a8c:	f004 f980 	bl	8004d90 <memcpy>
}
 8000a90:	bf00      	nop
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a9c:	f7ff fcee 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ac6:	f004 f93f 	bl	8004d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aca:	f7ff fd53 	bl	8000574 <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   r0, =_estack
 8000ad0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000adc:	08004ec8 	.word	0x08004ec8
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae4:	2000010c 	.word	0x2000010c

08000ae8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af6:	2003      	movs	r0, #3
 8000af8:	f000 f93a 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000afc:	f001 fbe2 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_Init+0x3c>)
 8000b04:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f810 	bl	8000b2c <HAL_InitTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e001      	b.n	8000b1c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b18:	f7ff fe50 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000000 	.word	0x20000000

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_InitTick+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d024      	beq.n	8000b8a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b40:	f001 fbc0 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 8000b44:	4602      	mov	r2, r0
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_InitTick+0x6c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b50:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f93c 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10f      	bne.n	8000b84 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b0f      	cmp	r3, #15
 8000b68:	d809      	bhi.n	8000b7e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b72:	f000 f908 	bl	8000d86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <HAL_InitTick+0x70>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	e007      	b.n	8000b8e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e004      	b.n	8000b8e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
 8000b88:	e001      	b.n	8000b8e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000008 	.word	0x20000008
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a03      	ldr	r2, [pc, #12]	; (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000108 	.word	0x20000108

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000108 	.word	0x20000108

08000bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bee:	68ba      	ldr	r2, [r7, #8]
 8000bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <__NVIC_GetPriorityGrouping+0x18>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	0a1b      	lsrs	r3, r3, #8
 8000c2a:	f003 0307 	and.w	r3, r3, #7
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	db0b      	blt.n	8000c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f003 021f 	and.w	r2, r3, #31
 8000c54:	4906      	ldr	r1, [pc, #24]	; (8000c70 <__NVIC_EnableIRQ+0x34>)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	; (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	; 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d50:	f7ff ff90 	bl	8000c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff2d 	bl	8000bd8 <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff44 	bl	8000c20 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff92 	bl	8000cc8 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff61 	bl	8000c74 <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff37 	bl	8000c3c <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa4 	bl	8000d2c <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e04f      	b.n	8000ea0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d008      	beq.n	8000e1e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2204      	movs	r2, #4
 8000e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e040      	b.n	8000ea0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f022 020e 	bic.w	r2, r2, #14
 8000e2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f022 0201 	bic.w	r2, r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f003 021c 	and.w	r2, r3, #28
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00c      	beq.n	8000e8e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d005      	beq.n	8000ece <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e047      	b.n	8000f5e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 020e 	bic.w	r2, r2, #14
 8000edc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 0201 	bic.w	r2, r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000efc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f003 021c 	and.w	r2, r3, #28
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f1a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00c      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f3c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	4798      	blx	r3
    }
  }
  return status;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e140      	b.n	80011fa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8132 	beq.w	80011f4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x40>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	f003 0201 	and.w	r2, r3, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b03      	cmp	r3, #3
 8001014:	d017      	beq.n	8001046 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	6939      	ldr	r1, [r7, #16]
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0203 	and.w	r2, r3, #3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 808c 	beq.w	80011f4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80010dc:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <HAL_GPIO_Init+0x2b0>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	2207      	movs	r2, #7
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1bc>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a44      	ldr	r2, [pc, #272]	; (800121c <HAL_GPIO_Init+0x2b4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1b8>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a43      	ldr	r2, [pc, #268]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1b4>
 8001118:	2302      	movs	r3, #2
 800111a:	e004      	b.n	8001126 <HAL_GPIO_Init+0x1be>
 800111c:	2307      	movs	r3, #7
 800111e:	e002      	b.n	8001126 <HAL_GPIO_Init+0x1be>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <HAL_GPIO_Init+0x1be>
 8001124:	2300      	movs	r3, #0
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	f002 0203 	and.w	r2, r2, #3
 800112c:	0092      	lsls	r2, r2, #2
 800112e:	4093      	lsls	r3, r2
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001136:	4938      	ldr	r1, [pc, #224]	; (8001218 <HAL_GPIO_Init+0x2b0>)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3302      	adds	r3, #2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001168:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001192:	4a24      	ldr	r2, [pc, #144]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001198:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 800119a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800119e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80011be:	4a19      	ldr	r2, [pc, #100]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 80011c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011cc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80011ec:	4a0d      	ldr	r2, [pc, #52]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f aeb7 	bne.w	8000f78 <HAL_GPIO_Init+0x10>
  }
}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	58000800 	.word	0x58000800

08001228 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_PWR_EnableBkUpAccess+0x18>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	58000400 	.word	0x58000400

08001244 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <LL_PWR_EnableBootC2+0x18>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4a03      	ldr	r2, [pc, #12]	; (800125c <LL_PWR_EnableBootC2+0x18>)
 800124e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	58000400 	.word	0x58000400

08001260 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_PWREx_GetVoltageRange+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	58000400 	.word	0x58000400

08001278 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001280:	f7ff ffe0 	bl	8001244 <LL_PWR_EnableBootC2>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <LL_PWR_IsEnabledBkUpAccess>:
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800129c:	d101      	bne.n	80012a2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	58000400 	.word	0x58000400

080012b0 <LL_RCC_HSE_EnableTcxo>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80012b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c2:	6013      	str	r3, [r2, #0]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <LL_RCC_HSE_DisableTcxo>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80012ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80012fa:	d101      	bne.n	8001300 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <LL_RCC_HSE_Enable>:
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800130e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <LL_RCC_HSE_Disable>:
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800132a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr

08001342 <LL_RCC_HSE_IsReady>:
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001354:	d101      	bne.n	800135a <LL_RCC_HSE_IsReady+0x18>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <LL_RCC_HSE_IsReady+0x1a>
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <LL_RCC_HSI_Enable>:
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <LL_RCC_HSI_Disable>:
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800138e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <LL_RCC_HSI_IsReady>:
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ae:	d101      	bne.n	80013b4 <LL_RCC_HSI_IsReady+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_RCC_HSI_IsReady+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <LL_RCC_HSI_SetCalibTrimming>:
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80013c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	061b      	lsls	r3, r3, #24
 80013d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80013ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d101      	bne.n	80013fe <LL_RCC_LSE_IsReady+0x18>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <LL_RCC_LSE_IsReady+0x1a>
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800140c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001414:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001430:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800144c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b02      	cmp	r3, #2
 800145a:	d101      	bne.n	8001460 <LL_RCC_LSI_IsReady+0x18>
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <LL_RCC_LSI_IsReady+0x1a>
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800146e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800148a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d101      	bne.n	80014b8 <LL_RCC_MSI_IsReady+0x16>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <LL_RCC_MSI_IsReady+0x18>
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d101      	bne.n	80014d8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr

080014e2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001504:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr

08001510 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f023 0203 	bic.w	r2, r3, #3
 800154a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015d4:	f023 020f 	bic.w	r2, r3, #15
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	091b      	lsrs	r3, r3, #4
 80015dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015e0:	4313      	orrs	r3, r2
 80015e2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr

0800163c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80016b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016e2:	d101      	bne.n	80016e8 <LL_RCC_PLL_IsReady+0x18>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LL_RCC_PLL_IsReady+0x1a>
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800173a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0303 	and.w	r3, r3, #3
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175e:	d101      	bne.n	8001764 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001776:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001782:	d101      	bne.n	8001788 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001784:	2301      	movs	r3, #1
 8001786:	e000      	b.n	800178a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr

08001792 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800179a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800179e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a6:	d101      	bne.n	80017ac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80017ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017c8:	d101      	bne.n	80017ce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80017dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017ea:	d101      	bne.n	80017f0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e36f      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180e:	f7ff fea6 	bl	800155e <LL_RCC_GetSysClkSource>
 8001812:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001814:	f7ff ff8f 	bl	8001736 <LL_RCC_PLL_GetMainSource>
 8001818:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80c4 	beq.w	80019b0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d005      	beq.n	800183a <HAL_RCC_OscConfig+0x3e>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d176      	bne.n	8001922 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d173      	bne.n	8001922 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e353      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x68>
 8001858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001862:	e006      	b.n	8001872 <HAL_RCC_OscConfig+0x76>
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800186c:	091b      	lsrs	r3, r3, #4
 800186e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001872:	4293      	cmp	r3, r2
 8001874:	d222      	bcs.n	80018bc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fd5a 	bl	8002334 <RCC_SetFlashLatencyFromMSIRange>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e331      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001894:	f043 0308 	orr.w	r3, r3, #8
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe2b 	bl	8001510 <LL_RCC_MSI_SetCalibTrimming>
 80018ba:	e021      	b.n	8001900 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fe12 	bl	8001510 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fd1f 	bl	8002334 <RCC_SetFlashLatencyFromMSIRange>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e2f6      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001900:	f000 fce0 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 8001904:	4603      	mov	r3, r0
 8001906:	4aa7      	ldr	r2, [pc, #668]	; (8001ba4 <HAL_RCC_OscConfig+0x3a8>)
 8001908:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800190a:	4ba7      	ldr	r3, [pc, #668]	; (8001ba8 <HAL_RCC_OscConfig+0x3ac>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff f90c 	bl	8000b2c <HAL_InitTick>
 8001914:	4603      	mov	r3, r0
 8001916:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001918:	7cfb      	ldrb	r3, [r7, #19]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d047      	beq.n	80019ae <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800191e:	7cfb      	ldrb	r3, [r7, #19]
 8001920:	e2e5      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d02c      	beq.n	8001984 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800192a:	f7ff fd9e 	bl	800146a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800192e:	f7ff f949 	bl	8000bc4 <HAL_GetTick>
 8001932:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001936:	f7ff f945 	bl	8000bc4 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e2d2      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001948:	f7ff fdab 	bl	80014a2 <LL_RCC_MSI_IsReady>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f1      	beq.n	8001936 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fdc7 	bl	8001510 <LL_RCC_MSI_SetCalibTrimming>
 8001982:	e015      	b.n	80019b0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001984:	f7ff fd7f 	bl	8001486 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001988:	f7ff f91c 	bl	8000bc4 <HAL_GetTick>
 800198c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001990:	f7ff f918 	bl	8000bc4 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e2a5      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80019a2:	f7ff fd7e 	bl	80014a2 <LL_RCC_MSI_IsReady>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f1      	bne.n	8001990 <HAL_RCC_OscConfig+0x194>
 80019ac:	e000      	b.n	80019b0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019ae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d058      	beq.n	8001a6e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x1d2>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d108      	bne.n	80019da <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	d105      	bne.n	80019da <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d14b      	bne.n	8001a6e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e289      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ec:	4313      	orrs	r3, r2
 80019ee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0x204>
 80019fa:	f7ff fc86 	bl	800130a <LL_RCC_HSE_Enable>
 80019fe:	e00d      	b.n	8001a1c <HAL_RCC_OscConfig+0x220>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001a08:	d104      	bne.n	8001a14 <HAL_RCC_OscConfig+0x218>
 8001a0a:	f7ff fc51 	bl	80012b0 <LL_RCC_HSE_EnableTcxo>
 8001a0e:	f7ff fc7c 	bl	800130a <LL_RCC_HSE_Enable>
 8001a12:	e003      	b.n	8001a1c <HAL_RCC_OscConfig+0x220>
 8001a14:	f7ff fc87 	bl	8001326 <LL_RCC_HSE_Disable>
 8001a18:	f7ff fc58 	bl	80012cc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d012      	beq.n	8001a4a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff f8ce 	bl	8000bc4 <HAL_GetTick>
 8001a28:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a2c:	f7ff f8ca 	bl	8000bc4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b64      	cmp	r3, #100	; 0x64
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e257      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a3e:	f7ff fc80 	bl	8001342 <LL_RCC_HSE_IsReady>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f1      	beq.n	8001a2c <HAL_RCC_OscConfig+0x230>
 8001a48:	e011      	b.n	8001a6e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff f8bb 	bl	8000bc4 <HAL_GetTick>
 8001a4e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff f8b7 	bl	8000bc4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b64      	cmp	r3, #100	; 0x64
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e244      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a64:	f7ff fc6d 	bl	8001342 <LL_RCC_HSE_IsReady>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f1      	bne.n	8001a52 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d046      	beq.n	8001b08 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_OscConfig+0x290>
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d10e      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e22a      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fc8e 	bl	80013be <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001aa2:	e031      	b.n	8001b08 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d019      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aac:	f7ff fc5a 	bl	8001364 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f888 	bl	8000bc4 <HAL_GetTick>
 8001ab4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff f884 	bl	8000bc4 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e211      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001aca:	f7ff fc67 	bl	800139c <LL_RCC_HSI_IsReady>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f1      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fc70 	bl	80013be <LL_RCC_HSI_SetCalibTrimming>
 8001ade:	e013      	b.n	8001b08 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae0:	f7ff fc4e 	bl	8001380 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f86e 	bl	8000bc4 <HAL_GetTick>
 8001ae8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff f86a 	bl	8000bc4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1f7      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001afe:	f7ff fc4d 	bl	800139c <LL_RCC_HSI_IsReady>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f1      	bne.n	8001aec <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d06e      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d056      	beq.n	8001bca <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b24:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d031      	beq.n	8001b98 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d006      	beq.n	8001b4c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e1d0      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d013      	beq.n	8001b7e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b56:	f7ff fc67 	bl	8001428 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b5a:	f7ff f833 	bl	8000bc4 <HAL_GetTick>
 8001b5e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff f82f 	bl	8000bc4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b11      	cmp	r3, #17
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1bc      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b74:	f7ff fc68 	bl	8001448 <LL_RCC_LSI_IsReady>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f1      	bne.n	8001b62 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b86:	f023 0210 	bic.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b98:	f7ff fc36 	bl	8001408 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff f812 	bl	8000bc4 <HAL_GetTick>
 8001ba0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001ba2:	e00c      	b.n	8001bbe <HAL_RCC_OscConfig+0x3c2>
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f80a 	bl	8000bc4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b11      	cmp	r3, #17
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e197      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001bbe:	f7ff fc43 	bl	8001448 <LL_RCC_LSI_IsReady>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f1      	beq.n	8001bac <HAL_RCC_OscConfig+0x3b0>
 8001bc8:	e013      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	f7ff fc2d 	bl	8001428 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7fe fff9 	bl	8000bc4 <HAL_GetTick>
 8001bd2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7fe fff5 	bl	8000bc4 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b11      	cmp	r3, #17
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e182      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001be8:	f7ff fc2e 	bl	8001448 <LL_RCC_LSI_IsReady>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f1      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 80d8 	beq.w	8001db0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c00:	f7ff fb44 	bl	800128c <LL_PWR_IsEnabledBkUpAccess>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d113      	bne.n	8001c32 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001c0a:	f7ff fb0d 	bl	8001228 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7fe ffd9 	bl	8000bc4 <HAL_GetTick>
 8001c12:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7fe ffd5 	bl	8000bc4 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e162      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c28:	f7ff fb30 	bl	800128c <LL_PWR_IsEnabledBkUpAccess>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f1      	beq.n	8001c16 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d07b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b85      	cmp	r3, #133	; 0x85
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5e:	f7fe ffb1 	bl	8000bc4 <HAL_GetTick>
 8001c62:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7fe ffa3 	bl	8000bc4 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e12e      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c90:	f7ff fba9 	bl	80013e6 <LL_RCC_LSE_IsReady>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0ef      	beq.n	8001c7a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b81      	cmp	r3, #129	; 0x81
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b85      	cmp	r3, #133	; 0x85
 8001ca8:	d121      	bne.n	8001cee <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe ff8b 	bl	8000bc4 <HAL_GetTick>
 8001cae:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe ff7d 	bl	8000bc4 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e108      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0ec      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001cec:	e060      	b.n	8001db0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7fe ff69 	bl	8000bc4 <HAL_GetTick>
 8001cf2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe ff5b 	bl	8000bc4 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0e6      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ec      	bne.n	8001d0a <HAL_RCC_OscConfig+0x50e>
 8001d30:	e03e      	b.n	8001db0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7fe ff47 	bl	8000bc4 <HAL_GetTick>
 8001d36:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7fe ff39 	bl	8000bc4 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0c4      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ec      	bne.n	8001d4e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7fe ff26 	bl	8000bc4 <HAL_GetTick>
 8001d78:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7fe ff18 	bl	8000bc4 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0a3      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001da6:	f7ff fb1e 	bl	80013e6 <LL_RCC_LSE_IsReady>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ef      	bne.n	8001d90 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8099 	beq.w	8001eec <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	2b0c      	cmp	r3, #12
 8001dbe:	d06c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d14b      	bne.n	8001e60 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc8:	f7ff fc74 	bl	80016b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe fefa 	bl	8000bc4 <HAL_GetTick>
 8001dd0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe fef6 	bl	8000bc4 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b0a      	cmp	r3, #10
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e083      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001de6:	f7ff fc73 	bl	80016d0 <LL_RCC_PLL_IsReady>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f1      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <HAL_RCC_OscConfig+0x6fc>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e08:	0212      	lsls	r2, r2, #8
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e10:	4311      	orrs	r1, r2
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e16:	4311      	orrs	r1, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e26:	f7ff fc37 	bl	8001698 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fec3 	bl	8000bc4 <HAL_GetTick>
 8001e3e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7fe febf 	bl	8000bc4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b0a      	cmp	r3, #10
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e04c      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e54:	f7ff fc3c 	bl	80016d0 <LL_RCC_PLL_IsReady>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f1      	beq.n	8001e42 <HAL_RCC_OscConfig+0x646>
 8001e5e:	e045      	b.n	8001eec <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	f7ff fc28 	bl	80016b4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe feae 	bl	8000bc4 <HAL_GetTick>
 8001e68:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe feaa 	bl	8000bc4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e037      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e7e:	f7ff fc27 	bl	80016d0 <LL_RCC_PLL_IsReady>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1f1      	bne.n	8001e6c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_RCC_OscConfig+0x700>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
 8001e98:	e028      	b.n	8001eec <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e023      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 0203 	and.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d115      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	11c1808c 	.word	0x11c1808c
 8001efc:	eefefffc 	.word	0xeefefffc

08001f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e12c      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b98      	ldr	r3, [pc, #608]	; (8002178 <HAL_RCC_ClockConfig+0x278>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d91b      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b95      	ldr	r3, [pc, #596]	; (8002178 <HAL_RCC_ClockConfig+0x278>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 0207 	bic.w	r2, r3, #7
 8001f2a:	4993      	ldr	r1, [pc, #588]	; (8002178 <HAL_RCC_ClockConfig+0x278>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f32:	f7fe fe47 	bl	8000bc4 <HAL_GetTick>
 8001f36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f3a:	f7fe fe43 	bl	8000bc4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e110      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4c:	4b8a      	ldr	r3, [pc, #552]	; (8002178 <HAL_RCC_ClockConfig+0x278>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d1ef      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d016      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fb02 	bl	8001574 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f70:	f7fe fe28 	bl	8000bc4 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f78:	f7fe fe24 	bl	8000bc4 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0f1      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f8a:	f7ff fbdf 	bl	800174c <LL_RCC_IsActiveFlag_HPRE>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f1      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d016      	beq.n	8001fce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff faf8 	bl	800159a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001faa:	f7fe fe0b 	bl	8000bc4 <HAL_GetTick>
 8001fae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fb2:	f7fe fe07 	bl	8000bc4 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0d4      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001fc4:	f7ff fbd3 	bl	800176e <LL_RCC_IsActiveFlag_C2HPRE>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f1      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d016      	beq.n	8002008 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff faf0 	bl	80015c4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fdee 	bl	8000bc4 <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fec:	f7fe fdea 	bl	8000bc4 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0b7      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001ffe:	f7ff fbc8 	bl	8001792 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f1      	beq.n	8001fec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d016      	beq.n	8002042 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fae9 	bl	80015f0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800201e:	f7fe fdd1 	bl	8000bc4 <HAL_GetTick>
 8002022:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002026:	f7fe fdcd 	bl	8000bc4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e09a      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002038:	f7ff fbbd 	bl	80017b6 <LL_RCC_IsActiveFlag_PPRE1>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f1      	beq.n	8002026 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d017      	beq.n	800207e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fade 	bl	8001616 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800205a:	f7fe fdb3 	bl	8000bc4 <HAL_GetTick>
 800205e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002062:	f7fe fdaf 	bl	8000bc4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e07c      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002074:	f7ff fbb0 	bl	80017d8 <LL_RCC_IsActiveFlag_PPRE2>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f1      	beq.n	8002062 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d043      	beq.n	8002112 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002092:	f7ff f956 	bl	8001342 <LL_RCC_HSE_IsReady>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d11e      	bne.n	80020da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e066      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80020a8:	f7ff fb12 	bl	80016d0 <LL_RCC_PLL_IsReady>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d113      	bne.n	80020da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e05b      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80020be:	f7ff f9f0 	bl	80014a2 <LL_RCC_MSI_IsReady>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d108      	bne.n	80020da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e050      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80020cc:	f7ff f966 	bl	800139c <LL_RCC_HSI_IsReady>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e049      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fa2a 	bl	8001538 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020e4:	f7fe fd6e 	bl	8000bc4 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ec:	f7fe fd6a 	bl	8000bc4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e035      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	f7ff fa2c 	bl	800155e <LL_RCC_GetSysClkSource>
 8002106:	4602      	mov	r2, r0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	429a      	cmp	r2, r3
 8002110:	d1ec      	bne.n	80020ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_RCC_ClockConfig+0x278>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d21b      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_RCC_ClockConfig+0x278>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f023 0207 	bic.w	r2, r3, #7
 8002128:	4913      	ldr	r1, [pc, #76]	; (8002178 <HAL_RCC_ClockConfig+0x278>)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7fe fd48 	bl	8000bc4 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	e008      	b.n	800214a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002138:	f7fe fd44 	bl	8000bc4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e011      	b.n	800216e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_ClockConfig+0x278>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d1ef      	bne.n	8002138 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002158:	f000 f8b4 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 800215c:	4603      	mov	r3, r0
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_RCC_ClockConfig+0x27c>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_RCC_ClockConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fce0 	bl	8000b2c <HAL_InitTick>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	58004000 	.word	0x58004000
 800217c:	20000000 	.word	0x20000000
 8002180:	20000004 	.word	0x20000004

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002192:	f7ff f9e4 	bl	800155e <LL_RCC_GetSysClkSource>
 8002196:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002198:	f7ff facd 	bl	8001736 <LL_RCC_PLL_GetMainSource>
 800219c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x2c>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b0c      	cmp	r3, #12
 80021a8:	d139      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d136      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80021b0:	f7ff f987 	bl	80014c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_GetSysClockFreq+0x62>
 80021ba:	f7ff f982 	bl	80014c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0x4e>
 80021c4:	f7ff f98d 	bl	80014e2 <LL_RCC_MSI_GetRange>
 80021c8:	4603      	mov	r3, r0
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	e005      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x5a>
 80021d2:	f7ff f991 	bl	80014f8 <LL_RCC_MSI_GetRangeAfterStandby>
 80021d6:	4603      	mov	r3, r0
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	4a36      	ldr	r2, [pc, #216]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x134>)
 80021e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e4:	e014      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x8c>
 80021e6:	f7ff f96c 	bl	80014c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x7a>
 80021f0:	f7ff f977 	bl	80014e2 <LL_RCC_MSI_GetRange>
 80021f4:	4603      	mov	r3, r0
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	f003 030f 	and.w	r3, r3, #15
 80021fc:	e005      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x86>
 80021fe:	f7ff f97b 	bl	80014f8 <LL_RCC_MSI_GetRangeAfterStandby>
 8002202:	4603      	mov	r3, r0
 8002204:	091b      	lsrs	r3, r3, #4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	4a2b      	ldr	r2, [pc, #172]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x134>)
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d115      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800221c:	e012      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d102      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002224:	4b25      	ldr	r3, [pc, #148]	; (80022bc <HAL_RCC_GetSysClockFreq+0x138>)
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e00c      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b08      	cmp	r3, #8
 800222e:	d109      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002230:	f7ff f85a 	bl	80012e8 <LL_RCC_HSE_IsEnabledDiv2>
 8002234:	4603      	mov	r3, r0
 8002236:	2b01      	cmp	r3, #1
 8002238:	d102      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800223a:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HAL_RCC_GetSysClockFreq+0x138>)
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e001      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002242:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002244:	f7ff f98b 	bl	800155e <LL_RCC_GetSysClkSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b0c      	cmp	r3, #12
 800224c:	d12f      	bne.n	80022ae <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800224e:	f7ff fa72 	bl	8001736 <LL_RCC_PLL_GetMainSource>
 8002252:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d003      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0xde>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d003      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0xe4>
 8002260:	e00d      	b.n	800227e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_RCC_GetSysClockFreq+0x138>)
 8002264:	60fb      	str	r3, [r7, #12]
        break;
 8002266:	e00d      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002268:	f7ff f83e 	bl	80012e8 <LL_RCC_HSE_IsEnabledDiv2>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_GetSysClockFreq+0x138>)
 8002274:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002276:	e005      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800227a:	60fb      	str	r3, [r7, #12]
        break;
 800227c:	e002      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	60fb      	str	r3, [r7, #12]
        break;
 8002282:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002284:	f7ff fa35 	bl	80016f2 <LL_RCC_PLL_GetN>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	fb03 f402 	mul.w	r4, r3, r2
 8002290:	f7ff fa46 	bl	8001720 <LL_RCC_PLL_GetDivider>
 8002294:	4603      	mov	r3, r0
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	3301      	adds	r3, #1
 800229a:	fbb4 f4f3 	udiv	r4, r4, r3
 800229e:	f7ff fa34 	bl	800170a <LL_RCC_PLL_GetR>
 80022a2:	4603      	mov	r3, r0
 80022a4:	0f5b      	lsrs	r3, r3, #29
 80022a6:	3301      	adds	r3, #1
 80022a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80022ac:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80022ae:	697b      	ldr	r3, [r7, #20]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	371c      	adds	r7, #28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd90      	pop	{r4, r7, pc}
 80022b8:	08004e50 	.word	0x08004e50
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	01e84800 	.word	0x01e84800

080022c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b598      	push	{r3, r4, r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80022c8:	f7ff ff5c 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 80022cc:	4604      	mov	r4, r0
 80022ce:	f7ff f9b5 	bl	800163c <LL_RCC_GetAHBPrescaler>
 80022d2:	4603      	mov	r3, r0
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	4a03      	ldr	r2, [pc, #12]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	bd98      	pop	{r3, r4, r7, pc}
 80022e8:	08004df0 	.word	0x08004df0

080022ec <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b598      	push	{r3, r4, r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022f0:	f7ff ffe8 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022f4:	4604      	mov	r4, r0
 80022f6:	f7ff f9b9 	bl	800166c <LL_RCC_GetAPB1Prescaler>
 80022fa:	4603      	mov	r3, r0
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002304:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd98      	pop	{r3, r4, r7, pc}
 800230c:	08004e30 	.word	0x08004e30

08002310 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b598      	push	{r3, r4, r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002314:	f7ff ffd6 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 8002318:	4604      	mov	r4, r0
 800231a:	f7ff f9b2 	bl	8001682 <LL_RCC_GetAPB2Prescaler>
 800231e:	4603      	mov	r3, r0
 8002320:	0adb      	lsrs	r3, r3, #11
 8002322:	4a03      	ldr	r2, [pc, #12]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002328:	fa24 f303 	lsr.w	r3, r4, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd98      	pop	{r3, r4, r7, pc}
 8002330:	08004e30 	.word	0x08004e30

08002334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4a10      	ldr	r2, [pc, #64]	; (8002388 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800234c:	f7ff f981 	bl	8001652 <LL_RCC_GetAHB3Prescaler>
 8002350:	4603      	mov	r3, r0
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800235a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4a09      	ldr	r2, [pc, #36]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0c9c      	lsrs	r4, r3, #18
 8002370:	f7fe ff76 	bl	8001260 <HAL_PWREx_GetVoltageRange>
 8002374:	4603      	mov	r3, r0
 8002376:	4619      	mov	r1, r3
 8002378:	4620      	mov	r0, r4
 800237a:	f000 f80b 	bl	8002394 <RCC_SetFlashLatency>
 800237e:	4603      	mov	r3, r0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bd90      	pop	{r4, r7, pc}
 8002388:	08004e50 	.word	0x08004e50
 800238c:	08004df0 	.word	0x08004df0
 8002390:	431bde83 	.word	0x431bde83

08002394 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	; 0x38
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800239e:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <RCC_SetFlashLatency+0xf4>)
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023a8:	6018      	str	r0, [r3, #0]
 80023aa:	3304      	adds	r3, #4
 80023ac:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80023ae:	4a37      	ldr	r2, [pc, #220]	; (800248c <RCC_SetFlashLatency+0xf8>)
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023b8:	6018      	str	r0, [r3, #0]
 80023ba:	3304      	adds	r3, #4
 80023bc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80023be:	4a34      	ldr	r2, [pc, #208]	; (8002490 <RCC_SetFlashLatency+0xfc>)
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80023c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80023ca:	2300      	movs	r3, #0
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d11b      	bne.n	800240e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
 80023da:	e014      	b.n	8002406 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80023dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	3338      	adds	r3, #56	; 0x38
 80023e2:	443b      	add	r3, r7
 80023e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d807      	bhi.n	8002400 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	3338      	adds	r3, #56	; 0x38
 80023f6:	443b      	add	r3, r7
 80023f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80023fe:	e021      	b.n	8002444 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	3301      	adds	r3, #1
 8002404:	633b      	str	r3, [r7, #48]	; 0x30
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	2b02      	cmp	r3, #2
 800240a:	d9e7      	bls.n	80023dc <RCC_SetFlashLatency+0x48>
 800240c:	e01a      	b.n	8002444 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002412:	e014      	b.n	800243e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	3338      	adds	r3, #56	; 0x38
 800241a:	443b      	add	r3, r7
 800241c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4293      	cmp	r3, r2
 8002426:	d807      	bhi.n	8002438 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	3338      	adds	r3, #56	; 0x38
 800242e:	443b      	add	r3, r7
 8002430:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002436:	e005      	b.n	8002444 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	3301      	adds	r3, #1
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	2b02      	cmp	r3, #2
 8002442:	d9e7      	bls.n	8002414 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <RCC_SetFlashLatency+0x100>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 0207 	bic.w	r2, r3, #7
 800244c:	4911      	ldr	r1, [pc, #68]	; (8002494 <RCC_SetFlashLatency+0x100>)
 800244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002454:	f7fe fbb6 	bl	8000bc4 <HAL_GetTick>
 8002458:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800245a:	e008      	b.n	800246e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800245c:	f7fe fbb2 	bl	8000bc4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e007      	b.n	800247e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <RCC_SetFlashLatency+0x100>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002478:	429a      	cmp	r2, r3
 800247a:	d1ef      	bne.n	800245c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3738      	adds	r7, #56	; 0x38
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	08004dd4 	.word	0x08004dd4
 800248c:	08004ddc 	.word	0x08004ddc
 8002490:	08004de4 	.word	0x08004de4
 8002494:	58004000 	.word	0x58004000

08002498 <LL_RCC_LSE_IsReady>:
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d101      	bne.n	80024b0 <LL_RCC_LSE_IsReady+0x18>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <LL_RCC_LSE_IsReady+0x1a>
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <LL_RCC_SetUSARTClockSource>:
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	43db      	mvns	r3, r3
 80024d0:	401a      	ands	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <LL_RCC_SetI2SClockSource>:
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <LL_RCC_SetLPUARTClockSource>:
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002528:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <LL_RCC_SetI2CClockSource>:
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002556:	43db      	mvns	r3, r3
 8002558:	401a      	ands	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <LL_RCC_SetLPTIMClockSource>:
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800257e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002582:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	041b      	lsls	r3, r3, #16
 8002594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <LL_RCC_SetRNGClockSource>:
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80025b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80025bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <LL_RCC_SetADCClockSource>:
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <LL_RCC_SetRTCClockSource>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002610:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <LL_RCC_GetRTCClockSource>:
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800262a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <LL_RCC_ForceBackupDomainReset>:
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <LL_RCC_ReleaseBackupDomainReset>:
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800266e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002672:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
	...

08002680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800268c:	2300      	movs	r3, #0
 800268e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002690:	2300      	movs	r3, #0
 8002692:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d058      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80026a0:	f7fe fdc2 	bl	8001228 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fa8e 	bl	8000bc4 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80026aa:	e009      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe fa8a 	bl	8000bc4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	74fb      	strb	r3, [r7, #19]
        break;
 80026be:	e006      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80026c0:	4b7b      	ldr	r3, [pc, #492]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026cc:	d1ee      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80026ce:	7cfb      	ldrb	r3, [r7, #19]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d13c      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80026d4:	f7ff ffa7 	bl	8002626 <LL_RCC_GetRTCClockSource>
 80026d8:	4602      	mov	r2, r0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	429a      	cmp	r2, r3
 80026e0:	d00f      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f0:	f7ff ffa5 	bl	800263e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026f4:	f7ff ffb3 	bl	800265e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d014      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fa5a 	bl	8000bc4 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002712:	e00b      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002714:	f7fe fa56 	bl	8000bc4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d902      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	74fb      	strb	r3, [r7, #19]
            break;
 800272a:	e004      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800272c:	f7ff feb4 	bl	8002498 <LL_RCC_LSE_IsReady>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d1ee      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5b 	bl	80025fc <LL_RCC_SetRTCClockSource>
 8002746:	e004      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	74bb      	strb	r3, [r7, #18]
 800274c:	e001      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fea9 	bl	80024ba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fe9e 	bl	80024ba <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fec0 	bl	8002514 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279c:	2b00      	cmp	r3, #0
 800279e:	d004      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fee6 	bl	8002576 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fedb 	bl	8002576 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fed0 	bl	8002576 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fea9 	bl	800253e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d004      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fe9e 	bl	800253e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fe93 	bl	800253e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	d011      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fe5e 	bl	80024ea <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002836:	d107      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002846:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fea5 	bl	80025a8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002870:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002874:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d011      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fea3 	bl	80025d2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002894:	d107      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80028a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	58000400 	.word	0x58000400

080028b4 <LL_RCC_GetUSARTClockSource>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	401a      	ands	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	4313      	orrs	r3, r2
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_GetLPUARTClockSource>:
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4013      	ands	r3, r2
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e042      	b.n	800298e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fd ff54 	bl	80007c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	; 0x24
 8002924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fc3d 	bl	80031b8 <UART_SetConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e022      	b.n	800298e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fea5 	bl	80036a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002964:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002974:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0201 	orr.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 ff2b 	bl	80037e2 <UART_CheckIdleState>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002998:	b480      	push	{r7}
 800299a:	b091      	sub	sp, #68	; 0x44
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d178      	bne.n	8002aa2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_UART_Transmit_IT+0x24>
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e071      	b.n	8002aa4 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2221      	movs	r2, #33	; 0x21
 80029e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f4:	d12a      	bne.n	8002a4c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fe:	d107      	bne.n	8002a10 <HAL_UART_Transmit_IT+0x78>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d103      	bne.n	8002a10 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <HAL_UART_Transmit_IT+0x118>)
 8002a0c:	679a      	str	r2, [r3, #120]	; 0x78
 8002a0e:	e002      	b.n	8002a16 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <HAL_UART_Transmit_IT+0x11c>)
 8002a14:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	e853 3f00 	ldrex	r3, [r3]
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3308      	adds	r3, #8
 8002a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a36:	637a      	str	r2, [r7, #52]	; 0x34
 8002a38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e5      	bne.n	8002a16 <HAL_UART_Transmit_IT+0x7e>
 8002a4a:	e028      	b.n	8002a9e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d107      	bne.n	8002a66 <HAL_UART_Transmit_IT+0xce>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <HAL_UART_Transmit_IT+0x120>)
 8002a62:	679a      	str	r2, [r3, #120]	; 0x78
 8002a64:	e002      	b.n	8002a6c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <HAL_UART_Transmit_IT+0x124>)
 8002a6a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	613b      	str	r3, [r7, #16]
   return(result);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	623b      	str	r3, [r7, #32]
 8002a8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8e:	69f9      	ldr	r1, [r7, #28]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	e841 2300 	strex	r3, r2, [r1]
 8002a96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1e6      	bne.n	8002a6c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3744      	adds	r7, #68	; 0x44
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	08003f9b 	.word	0x08003f9b
 8002ab4:	08003ebd 	.word	0x08003ebd
 8002ab8:	08003dfd 	.word	0x08003dfd
 8002abc:	08003d47 	.word	0x08003d47

08002ac0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ad4:	2b20      	cmp	r3, #32
 8002ad6:	d137      	bne.n	8002b48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_UART_Receive_IT+0x24>
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e030      	b.n	8002b4a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_UART_Receive_IT+0x94>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d01f      	beq.n	8002b38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	613b      	str	r3, [r7, #16]
   return(result);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	623b      	str	r3, [r7, #32]
 8002b26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	69f9      	ldr	r1, [r7, #28]
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e6      	bne.n	8002b06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 ff66 	bl	8003a10 <UART_Start_Receive_IT>
 8002b44:	4603      	mov	r3, r0
 8002b46:	e000      	b.n	8002b4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40008000 	.word	0x40008000

08002b58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b0ba      	sub	sp, #232	; 0xe8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b82:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b86:	4013      	ands	r3, r2
 8002b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11b      	bne.n	8002bcc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d015      	beq.n	8002bcc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 82e3 	beq.w	8003188 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
      }
      return;
 8002bca:	e2dd      	b.n	8003188 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002bcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8123 	beq.w	8002e1c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002bd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_UART_IRQHandler+0x2b8>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002be2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002be6:	4b8b      	ldr	r3, [pc, #556]	; (8002e14 <HAL_UART_IRQHandler+0x2bc>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8116 	beq.w	8002e1c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d011      	beq.n	8002c20 <HAL_UART_IRQHandler+0xc8>
 8002bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00b      	beq.n	8002c20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d011      	beq.n	8002c50 <HAL_UART_IRQHandler+0xf8>
 8002c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00b      	beq.n	8002c50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c46:	f043 0204 	orr.w	r2, r3, #4
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d011      	beq.n	8002c80 <HAL_UART_IRQHandler+0x128>
 8002c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00b      	beq.n	8002c80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2204      	movs	r2, #4
 8002c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c84:	f003 0308 	and.w	r3, r3, #8
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d017      	beq.n	8002cbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002c98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002c9c:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <HAL_UART_IRQHandler+0x2b8>)
 8002c9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00b      	beq.n	8002cbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f043 0208 	orr.w	r2, r3, #8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d012      	beq.n	8002cee <HAL_UART_IRQHandler+0x196>
 8002cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ccc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8249 	beq.w	800318c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d013      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d105      	bne.n	8002d1e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d005      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d054      	beq.n	8002dfc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 ff7c 	bl	8003c50 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d146      	bne.n	8002df4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1d9      	bne.n	8002d66 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d017      	beq.n	8002dec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc2:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <HAL_UART_IRQHandler+0x2c0>)
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe f86c 	bl	8000eaa <HAL_DMA_Abort_IT>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d019      	beq.n	8002e0c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002de6:	4610      	mov	r0, r2
 8002de8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dea:	e00f      	b.n	8002e0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fd fb79 	bl	80004e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df2:	e00b      	b.n	8002e0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fd fb75 	bl	80004e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfa:	e007      	b.n	8002e0c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7fd fb71 	bl	80004e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002e0a:	e1bf      	b.n	800318c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	bf00      	nop
    return;
 8002e0e:	e1bd      	b.n	800318c <HAL_UART_IRQHandler+0x634>
 8002e10:	10000001 	.word	0x10000001
 8002e14:	04000120 	.word	0x04000120
 8002e18:	08003d1b 	.word	0x08003d1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	f040 8153 	bne.w	80030cc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 814c 	beq.w	80030cc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8145 	beq.w	80030cc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2210      	movs	r2, #16
 8002e48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	f040 80bb 	bne.w	8002fd0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 818f 	beq.w	8003190 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f080 8187 	bcs.w	8003190 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 8087 	bne.w	8002fae <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eac:	e853 3f00 	ldrex	r3, [r3]
 8002eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ece:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ed6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1da      	bne.n	8002ea0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3308      	adds	r3, #8
 8002f0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e1      	bne.n	8002eea <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f30:	e853 3f00 	ldrex	r3, [r3]
 8002f34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3308      	adds	r3, #8
 8002f46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f52:	e841 2300 	strex	r3, r2, [r1]
 8002f56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e3      	bne.n	8002f26 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e4      	bne.n	8002f6c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd ff20 	bl	8000dee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8e9 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fce:	e0df      	b.n	8003190 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80d1 	beq.w	8003194 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8002ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 80cc 	beq.w	8003194 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	e853 3f00 	ldrex	r3, [r3]
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800301e:	647b      	str	r3, [r7, #68]	; 0x44
 8003020:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003026:	e841 2300 	strex	r3, r2, [r1]
 800302a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800302c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1e4      	bne.n	8002ffc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3308      	adds	r3, #8
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	623b      	str	r3, [r7, #32]
   return(result);
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3308      	adds	r3, #8
 8003056:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800305a:	633a      	str	r2, [r7, #48]	; 0x30
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e1      	bne.n	8003032 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2220      	movs	r2, #32
 8003072:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	e853 3f00 	ldrex	r3, [r3]
 800308e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0310 	bic.w	r3, r3, #16
 8003096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	69b9      	ldr	r1, [r7, #24]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	617b      	str	r3, [r7, #20]
   return(result);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e4      	bne.n	8003082 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030c2:	4619      	mov	r1, r3
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f86b 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030ca:	e063      	b.n	8003194 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <HAL_UART_IRQHandler+0x59e>
 80030d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f001 fd0e 	bl	8004b10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030f4:	e051      	b.n	800319a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80030f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d014      	beq.n	800312c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800310e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800311e:	2b00      	cmp	r3, #0
 8003120:	d03a      	beq.n	8003198 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
    }
    return;
 800312a:	e035      	b.n	8003198 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_UART_IRQHandler+0x5f4>
 8003138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 ff9c 	bl	8004082 <UART_EndTransmit_IT>
    return;
 800314a:	e026      	b.n	800319a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800314c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <HAL_UART_IRQHandler+0x614>
 8003158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f001 fce5 	bl	8004b34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800316a:	e016      	b.n	800319a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <HAL_UART_IRQHandler+0x642>
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317c:	2b00      	cmp	r3, #0
 800317e:	da0c      	bge.n	800319a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f001 fcce 	bl	8004b22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003186:	e008      	b.n	800319a <HAL_UART_IRQHandler+0x642>
      return;
 8003188:	bf00      	nop
 800318a:	e006      	b.n	800319a <HAL_UART_IRQHandler+0x642>
    return;
 800318c:	bf00      	nop
 800318e:	e004      	b.n	800319a <HAL_UART_IRQHandler+0x642>
      return;
 8003190:	bf00      	nop
 8003192:	e002      	b.n	800319a <HAL_UART_IRQHandler+0x642>
      return;
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <HAL_UART_IRQHandler+0x642>
    return;
 8003198:	bf00      	nop
  }
}
 800319a:	37e8      	adds	r7, #232	; 0xe8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
	...

080031b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031bc:	b08c      	sub	sp, #48	; 0x30
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4313      	orrs	r3, r2
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4b94      	ldr	r3, [pc, #592]	; (8003438 <UART_SetConfig+0x280>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a89      	ldr	r2, [pc, #548]	; (800343c <UART_SetConfig+0x284>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003220:	4313      	orrs	r3, r2
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800322e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003238:	430b      	orrs	r3, r1
 800323a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	f023 010f 	bic.w	r1, r3, #15
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7a      	ldr	r2, [pc, #488]	; (8003440 <UART_SetConfig+0x288>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d127      	bne.n	80032ac <UART_SetConfig+0xf4>
 800325c:	2003      	movs	r0, #3
 800325e:	f7ff fb29 	bl	80028b4 <LL_RCC_GetUSARTClockSource>
 8003262:	4603      	mov	r3, r0
 8003264:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003268:	2b03      	cmp	r3, #3
 800326a:	d81b      	bhi.n	80032a4 <UART_SetConfig+0xec>
 800326c:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <UART_SetConfig+0xbc>)
 800326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003272:	bf00      	nop
 8003274:	08003285 	.word	0x08003285
 8003278:	08003295 	.word	0x08003295
 800327c:	0800328d 	.word	0x0800328d
 8003280:	0800329d 	.word	0x0800329d
 8003284:	2301      	movs	r3, #1
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800328a:	e080      	b.n	800338e <UART_SetConfig+0x1d6>
 800328c:	2302      	movs	r3, #2
 800328e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003292:	e07c      	b.n	800338e <UART_SetConfig+0x1d6>
 8003294:	2304      	movs	r3, #4
 8003296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800329a:	e078      	b.n	800338e <UART_SetConfig+0x1d6>
 800329c:	2308      	movs	r3, #8
 800329e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a2:	e074      	b.n	800338e <UART_SetConfig+0x1d6>
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032aa:	e070      	b.n	800338e <UART_SetConfig+0x1d6>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a64      	ldr	r2, [pc, #400]	; (8003444 <UART_SetConfig+0x28c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d138      	bne.n	8003328 <UART_SetConfig+0x170>
 80032b6:	200c      	movs	r0, #12
 80032b8:	f7ff fafc 	bl	80028b4 <LL_RCC_GetUSARTClockSource>
 80032bc:	4603      	mov	r3, r0
 80032be:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d82c      	bhi.n	8003320 <UART_SetConfig+0x168>
 80032c6:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <UART_SetConfig+0x114>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	08003301 	.word	0x08003301
 80032d0:	08003321 	.word	0x08003321
 80032d4:	08003321 	.word	0x08003321
 80032d8:	08003321 	.word	0x08003321
 80032dc:	08003311 	.word	0x08003311
 80032e0:	08003321 	.word	0x08003321
 80032e4:	08003321 	.word	0x08003321
 80032e8:	08003321 	.word	0x08003321
 80032ec:	08003309 	.word	0x08003309
 80032f0:	08003321 	.word	0x08003321
 80032f4:	08003321 	.word	0x08003321
 80032f8:	08003321 	.word	0x08003321
 80032fc:	08003319 	.word	0x08003319
 8003300:	2300      	movs	r3, #0
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003306:	e042      	b.n	800338e <UART_SetConfig+0x1d6>
 8003308:	2302      	movs	r3, #2
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800330e:	e03e      	b.n	800338e <UART_SetConfig+0x1d6>
 8003310:	2304      	movs	r3, #4
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003316:	e03a      	b.n	800338e <UART_SetConfig+0x1d6>
 8003318:	2308      	movs	r3, #8
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800331e:	e036      	b.n	800338e <UART_SetConfig+0x1d6>
 8003320:	2310      	movs	r3, #16
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003326:	e032      	b.n	800338e <UART_SetConfig+0x1d6>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a43      	ldr	r2, [pc, #268]	; (800343c <UART_SetConfig+0x284>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d12a      	bne.n	8003388 <UART_SetConfig+0x1d0>
 8003332:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003336:	f7ff facf 	bl	80028d8 <LL_RCC_GetLPUARTClockSource>
 800333a:	4603      	mov	r3, r0
 800333c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003340:	d01a      	beq.n	8003378 <UART_SetConfig+0x1c0>
 8003342:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003346:	d81b      	bhi.n	8003380 <UART_SetConfig+0x1c8>
 8003348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334c:	d00c      	beq.n	8003368 <UART_SetConfig+0x1b0>
 800334e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003352:	d815      	bhi.n	8003380 <UART_SetConfig+0x1c8>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <UART_SetConfig+0x1a8>
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	d008      	beq.n	8003370 <UART_SetConfig+0x1b8>
 800335e:	e00f      	b.n	8003380 <UART_SetConfig+0x1c8>
 8003360:	2300      	movs	r3, #0
 8003362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003366:	e012      	b.n	800338e <UART_SetConfig+0x1d6>
 8003368:	2302      	movs	r3, #2
 800336a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800336e:	e00e      	b.n	800338e <UART_SetConfig+0x1d6>
 8003370:	2304      	movs	r3, #4
 8003372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003376:	e00a      	b.n	800338e <UART_SetConfig+0x1d6>
 8003378:	2308      	movs	r3, #8
 800337a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800337e:	e006      	b.n	800338e <UART_SetConfig+0x1d6>
 8003380:	2310      	movs	r3, #16
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003386:	e002      	b.n	800338e <UART_SetConfig+0x1d6>
 8003388:	2310      	movs	r3, #16
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2a      	ldr	r2, [pc, #168]	; (800343c <UART_SetConfig+0x284>)
 8003394:	4293      	cmp	r3, r2
 8003396:	f040 80a4 	bne.w	80034e2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800339a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d823      	bhi.n	80033ea <UART_SetConfig+0x232>
 80033a2:	a201      	add	r2, pc, #4	; (adr r2, 80033a8 <UART_SetConfig+0x1f0>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033cd 	.word	0x080033cd
 80033ac:	080033eb 	.word	0x080033eb
 80033b0:	080033d5 	.word	0x080033d5
 80033b4:	080033eb 	.word	0x080033eb
 80033b8:	080033db 	.word	0x080033db
 80033bc:	080033eb 	.word	0x080033eb
 80033c0:	080033eb 	.word	0x080033eb
 80033c4:	080033eb 	.word	0x080033eb
 80033c8:	080033e3 	.word	0x080033e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033cc:	f7fe ff8e 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 80033d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033d2:	e010      	b.n	80033f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d4:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <UART_SetConfig+0x290>)
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033d8:	e00d      	b.n	80033f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033da:	f7fe fed3 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 80033de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80033e0:	e009      	b.n	80033f6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80033e8:	e005      	b.n	80033f6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 8137 	beq.w	800366c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	4a12      	ldr	r2, [pc, #72]	; (800344c <UART_SetConfig+0x294>)
 8003404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003408:	461a      	mov	r2, r3
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003410:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	429a      	cmp	r2, r3
 8003420:	d305      	bcc.n	800342e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	429a      	cmp	r2, r3
 800342c:	d910      	bls.n	8003450 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003434:	e11a      	b.n	800366c <UART_SetConfig+0x4b4>
 8003436:	bf00      	nop
 8003438:	cfff69f3 	.word	0xcfff69f3
 800343c:	40008000 	.word	0x40008000
 8003440:	40013800 	.word	0x40013800
 8003444:	40004400 	.word	0x40004400
 8003448:	00f42400 	.word	0x00f42400
 800344c:	08004e90 	.word	0x08004e90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	2200      	movs	r2, #0
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	60fa      	str	r2, [r7, #12]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	4a8e      	ldr	r2, [pc, #568]	; (8003698 <UART_SetConfig+0x4e0>)
 800345e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003462:	b29b      	uxth	r3, r3
 8003464:	2200      	movs	r2, #0
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800346e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003472:	f7fc fe81 	bl	8000178 <__aeabi_uldivmod>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4610      	mov	r0, r2
 800347c:	4619      	mov	r1, r3
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	020b      	lsls	r3, r1, #8
 8003488:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800348c:	0202      	lsls	r2, r0, #8
 800348e:	6979      	ldr	r1, [r7, #20]
 8003490:	6849      	ldr	r1, [r1, #4]
 8003492:	0849      	lsrs	r1, r1, #1
 8003494:	2000      	movs	r0, #0
 8003496:	460c      	mov	r4, r1
 8003498:	4605      	mov	r5, r0
 800349a:	eb12 0804 	adds.w	r8, r2, r4
 800349e:	eb43 0905 	adc.w	r9, r3, r5
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	469a      	mov	sl, r3
 80034aa:	4693      	mov	fp, r2
 80034ac:	4652      	mov	r2, sl
 80034ae:	465b      	mov	r3, fp
 80034b0:	4640      	mov	r0, r8
 80034b2:	4649      	mov	r1, r9
 80034b4:	f7fc fe60 	bl	8000178 <__aeabi_uldivmod>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4613      	mov	r3, r2
 80034be:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c6:	d308      	bcc.n	80034da <UART_SetConfig+0x322>
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ce:	d204      	bcs.n	80034da <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	60da      	str	r2, [r3, #12]
 80034d8:	e0c8      	b.n	800366c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034e0:	e0c4      	b.n	800366c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ea:	d167      	bne.n	80035bc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80034ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d828      	bhi.n	8003546 <UART_SetConfig+0x38e>
 80034f4:	a201      	add	r2, pc, #4	; (adr r2, 80034fc <UART_SetConfig+0x344>)
 80034f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fa:	bf00      	nop
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003529 	.word	0x08003529
 8003504:	08003531 	.word	0x08003531
 8003508:	08003547 	.word	0x08003547
 800350c:	08003537 	.word	0x08003537
 8003510:	08003547 	.word	0x08003547
 8003514:	08003547 	.word	0x08003547
 8003518:	08003547 	.word	0x08003547
 800351c:	0800353f 	.word	0x0800353f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003520:	f7fe fee4 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 8003524:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003526:	e014      	b.n	8003552 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003528:	f7fe fef2 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 800352c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800352e:	e010      	b.n	8003552 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003530:	4b5a      	ldr	r3, [pc, #360]	; (800369c <UART_SetConfig+0x4e4>)
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003534:	e00d      	b.n	8003552 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003536:	f7fe fe25 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 800353a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800353c:	e009      	b.n	8003552 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003544:	e005      	b.n	8003552 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8089 	beq.w	800366c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	4a4e      	ldr	r2, [pc, #312]	; (8003698 <UART_SetConfig+0x4e0>)
 8003560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003564:	461a      	mov	r2, r3
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	fbb3 f3f2 	udiv	r3, r3, r2
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	441a      	add	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	2b0f      	cmp	r3, #15
 8003584:	d916      	bls.n	80035b4 <UART_SetConfig+0x3fc>
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d212      	bcs.n	80035b4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f023 030f 	bic.w	r3, r3, #15
 8003596:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	b29b      	uxth	r3, r3
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	8bfb      	ldrh	r3, [r7, #30]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	8bfa      	ldrh	r2, [r7, #30]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e05b      	b.n	800366c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035ba:	e057      	b.n	800366c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d828      	bhi.n	8003616 <UART_SetConfig+0x45e>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0x414>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	080035f9 	.word	0x080035f9
 80035d4:	08003601 	.word	0x08003601
 80035d8:	08003617 	.word	0x08003617
 80035dc:	08003607 	.word	0x08003607
 80035e0:	08003617 	.word	0x08003617
 80035e4:	08003617 	.word	0x08003617
 80035e8:	08003617 	.word	0x08003617
 80035ec:	0800360f 	.word	0x0800360f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f0:	f7fe fe7c 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 80035f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035f6:	e014      	b.n	8003622 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f8:	f7fe fe8a 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 80035fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035fe:	e010      	b.n	8003622 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003600:	4b26      	ldr	r3, [pc, #152]	; (800369c <UART_SetConfig+0x4e4>)
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003604:	e00d      	b.n	8003622 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003606:	f7fe fdbd 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800360c:	e009      	b.n	8003622 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003612:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003614:	e005      	b.n	8003622 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003620:	bf00      	nop
    }

    if (pclk != 0U)
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	2b00      	cmp	r3, #0
 8003626:	d021      	beq.n	800366c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <UART_SetConfig+0x4e0>)
 800362e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003632:	461a      	mov	r2, r3
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	fbb3 f2f2 	udiv	r2, r3, r2
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	441a      	add	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	d909      	bls.n	8003666 <UART_SetConfig+0x4ae>
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d205      	bcs.n	8003666 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	b29a      	uxth	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	e002      	b.n	800366c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	2201      	movs	r2, #1
 8003670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2201      	movs	r2, #1
 8003678:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	2200      	movs	r2, #0
 8003680:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2200      	movs	r2, #0
 8003686:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003688:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800368c:	4618      	mov	r0, r3
 800368e:	3730      	adds	r7, #48	; 0x30
 8003690:	46bd      	mov	sp, r7
 8003692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003696:	bf00      	nop
 8003698:	08004e90 	.word	0x08004e90
 800369c:	00f42400 	.word	0x00f42400

080036a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01a      	beq.n	80037b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800379e:	d10a      	bne.n	80037b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	430a      	orrs	r2, r1
 80037d6:	605a      	str	r2, [r3, #4]
  }
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af02      	add	r7, sp, #8
 80037e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037f2:	f7fd f9e7 	bl	8000bc4 <HAL_GetTick>
 80037f6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b08      	cmp	r3, #8
 8003804:	d10e      	bne.n	8003824 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003806:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f832 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e028      	b.n	8003876 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d10e      	bne.n	8003850 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003832:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f81c 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e012      	b.n	8003876 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b09c      	sub	sp, #112	; 0x70
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388e:	e0a9      	b.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003896:	f000 80a5 	beq.w	80039e4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fd f993 	bl	8000bc4 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80038aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d140      	bne.n	8003932 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c4:	667b      	str	r3, [r7, #100]	; 0x64
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e6      	bne.n	80038b0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3308      	adds	r3, #8
 80038e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	663b      	str	r3, [r7, #96]	; 0x60
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3308      	adds	r3, #8
 8003900:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003902:	64ba      	str	r2, [r7, #72]	; 0x48
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003908:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e069      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d051      	beq.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d149      	bne.n	80039e4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003958:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800396e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
 800397a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800397e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e6      	bne.n	800395a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3308      	adds	r3, #8
 8003992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	e853 3f00 	ldrex	r3, [r3]
 800399a:	613b      	str	r3, [r7, #16]
   return(result);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3308      	adds	r3, #8
 80039aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039ac:	623a      	str	r2, [r7, #32]
 80039ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b0:	69f9      	ldr	r1, [r7, #28]
 80039b2:	6a3a      	ldr	r2, [r7, #32]
 80039b4:	e841 2300 	strex	r3, r2, [r1]
 80039b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1e5      	bne.n	800398c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e010      	b.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4013      	ands	r3, r2
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	f43f af46 	beq.w	8003890 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3770      	adds	r7, #112	; 0x70
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b0a3      	sub	sp, #140	; 0x8c
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a42:	d10e      	bne.n	8003a62 <UART_Start_Receive_IT+0x52>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <UART_Start_Receive_IT+0x48>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a56:	e02d      	b.n	8003ab4 <UART_Start_Receive_IT+0xa4>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a60:	e028      	b.n	8003ab4 <UART_Start_Receive_IT+0xa4>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10d      	bne.n	8003a86 <UART_Start_Receive_IT+0x76>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <UART_Start_Receive_IT+0x6c>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	22ff      	movs	r2, #255	; 0xff
 8003a76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a7a:	e01b      	b.n	8003ab4 <UART_Start_Receive_IT+0xa4>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	227f      	movs	r2, #127	; 0x7f
 8003a80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003a84:	e016      	b.n	8003ab4 <UART_Start_Receive_IT+0xa4>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a8e:	d10d      	bne.n	8003aac <UART_Start_Receive_IT+0x9c>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <UART_Start_Receive_IT+0x92>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	227f      	movs	r2, #127	; 0x7f
 8003a9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003aa0:	e008      	b.n	8003ab4 <UART_Start_Receive_IT+0xa4>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	223f      	movs	r2, #63	; 0x3f
 8003aa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003aaa:	e003      	b.n	8003ab4 <UART_Start_Receive_IT+0xa4>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2222      	movs	r2, #34	; 0x22
 8003ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003ae8:	673a      	str	r2, [r7, #112]	; 0x70
 8003aea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003aee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e3      	bne.n	8003ac4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b04:	d14f      	bne.n	8003ba6 <UART_Start_Receive_IT+0x196>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d349      	bcc.n	8003ba6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1a:	d107      	bne.n	8003b2c <UART_Start_Receive_IT+0x11c>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a46      	ldr	r2, [pc, #280]	; (8003c40 <UART_Start_Receive_IT+0x230>)
 8003b28:	675a      	str	r2, [r3, #116]	; 0x74
 8003b2a:	e002      	b.n	8003b32 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a45      	ldr	r2, [pc, #276]	; (8003c44 <UART_Start_Receive_IT+0x234>)
 8003b30:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01a      	beq.n	8003b70 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e4      	bne.n	8003b3a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3308      	adds	r3, #8
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003b90:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e5      	bne.n	8003b70 <UART_Start_Receive_IT+0x160>
 8003ba4:	e046      	b.n	8003c34 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d107      	bne.n	8003bc0 <UART_Start_Receive_IT+0x1b0>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <UART_Start_Receive_IT+0x238>)
 8003bbc:	675a      	str	r2, [r3, #116]	; 0x74
 8003bbe:	e002      	b.n	8003bc6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <UART_Start_Receive_IT+0x23c>)
 8003bc4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d019      	beq.n	8003c02 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	e853 3f00 	ldrex	r3, [r3]
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003be2:	677b      	str	r3, [r7, #116]	; 0x74
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
 8003bee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bf4:	e841 2300 	strex	r3, r2, [r1]
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1e6      	bne.n	8003bce <UART_Start_Receive_IT+0x1be>
 8003c00:	e018      	b.n	8003c34 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	69f9      	ldr	r1, [r7, #28]
 8003c26:	6a3a      	ldr	r2, [r7, #32]
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e6      	bne.n	8003c02 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	378c      	adds	r7, #140	; 0x8c
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	080047a9 	.word	0x080047a9
 8003c44:	08004449 	.word	0x08004449
 8003c48:	08004291 	.word	0x08004291
 8003c4c:	080040d9 	.word	0x080040d9

08003c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b095      	sub	sp, #84	; 0x54
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	e853 3f00 	ldrex	r3, [r3]
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c76:	643b      	str	r3, [r7, #64]	; 0x40
 8003c78:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c7e:	e841 2300 	strex	r3, r2, [r1]
 8003c82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1e6      	bne.n	8003c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e3      	bne.n	8003c8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d118      	bne.n	8003cfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e6      	bne.n	8003cca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d10:	bf00      	nop
 8003d12:	3754      	adds	r7, #84	; 0x54
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7fc fbd3 	bl	80004e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b08f      	sub	sp, #60	; 0x3c
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	2b21      	cmp	r3, #33	; 0x21
 8003d56:	d14c      	bne.n	8003df2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d132      	bne.n	8003dca <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d78:	637b      	str	r3, [r7, #52]	; 0x34
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d84:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e6      	bne.n	8003d64 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e6      	bne.n	8003d96 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003dc8:	e013      	b.n	8003df2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dda:	1c5a      	adds	r2, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003df2:	bf00      	nop
 8003df4:	373c      	adds	r7, #60	; 0x3c
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b091      	sub	sp, #68	; 0x44
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	2b21      	cmp	r3, #33	; 0x21
 8003e0c:	d151      	bne.n	8003eb2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d132      	bne.n	8003e80 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	623b      	str	r3, [r7, #32]
   return(result);
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e6      	bne.n	8003e1a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	69b9      	ldr	r1, [r7, #24]
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	617b      	str	r3, [r7, #20]
   return(result);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003e7e:	e018      	b.n	8003eb2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003eb2:	bf00      	nop
 8003eb4:	3744      	adds	r7, #68	; 0x44
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b091      	sub	sp, #68	; 0x44
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eca:	2b21      	cmp	r3, #33	; 0x21
 8003ecc:	d160      	bne.n	8003f90 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003ed4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ed6:	e057      	b.n	8003f88 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d133      	bne.n	8003f4c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3308      	adds	r3, #8
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3308      	adds	r3, #8
 8003f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f04:	633a      	str	r2, [r7, #48]	; 0x30
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e5      	bne.n	8003ee4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	61fb      	str	r3, [r7, #28]
 8003f38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3a:	69b9      	ldr	r1, [r7, #24]
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	e841 2300 	strex	r3, r2, [r1]
 8003f42:	617b      	str	r3, [r7, #20]
   return(result);
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1e6      	bne.n	8003f18 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003f4a:	e021      	b.n	8003f90 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d013      	beq.n	8003f82 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003f82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f84:	3b01      	subs	r3, #1
 8003f86:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1a4      	bne.n	8003ed8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003f8e:	e7ff      	b.n	8003f90 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003f90:	bf00      	nop
 8003f92:	3744      	adds	r7, #68	; 0x44
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b091      	sub	sp, #68	; 0x44
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	2b21      	cmp	r3, #33	; 0x21
 8003faa:	d165      	bne.n	8004078 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003fb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fb4:	e05c      	b.n	8004070 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d133      	bne.n	800402a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	60bb      	str	r3, [r7, #8]
   return(result);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800400a:	633b      	str	r3, [r7, #48]	; 0x30
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	613b      	str	r3, [r7, #16]
   return(result);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e6      	bne.n	8003ff6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004028:	e026      	b.n	8004078 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004034:	2b00      	cmp	r3, #0
 8004036:	d018      	beq.n	800406a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800406a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800406c:	3b01      	subs	r3, #1
 800406e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004070:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004072:	2b00      	cmp	r3, #0
 8004074:	d19f      	bne.n	8003fb6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004076:	e7ff      	b.n	8004078 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004078:	bf00      	nop
 800407a:	3744      	adds	r7, #68	; 0x44
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b088      	sub	sp, #32
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	e853 3f00 	ldrex	r3, [r3]
 8004096:	60bb      	str	r3, [r7, #8]
   return(result);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6979      	ldr	r1, [r7, #20]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	613b      	str	r3, [r7, #16]
   return(result);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e6      	bne.n	800408a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fc fa22 	bl	8000514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d0:	bf00      	nop
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b09c      	sub	sp, #112	; 0x70
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80040e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f0:	2b22      	cmp	r3, #34	; 0x22
 80040f2:	f040 80be 	bne.w	8004272 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004100:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004104:	b2d9      	uxtb	r1, r3
 8004106:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800410a:	b2da      	uxtb	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004110:	400a      	ands	r2, r1
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 80a1 	bne.w	8004282 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800414e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004150:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004154:	66bb      	str	r3, [r7, #104]	; 0x68
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004160:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004164:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800416c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e6      	bne.n	8004140 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3308      	adds	r3, #8
 8004178:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	667b      	str	r3, [r7, #100]	; 0x64
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004192:	647a      	str	r2, [r7, #68]	; 0x44
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e5      	bne.n	8004172 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a33      	ldr	r2, [pc, #204]	; (800428c <UART_RxISR_8BIT+0x1b4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01f      	beq.n	8004204 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d018      	beq.n	8004204 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	623b      	str	r3, [r7, #32]
   return(result);
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e6:	663b      	str	r3, [r7, #96]	; 0x60
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f0:	633b      	str	r3, [r7, #48]	; 0x30
 80041f2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e6      	bne.n	80041d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d12e      	bne.n	800426a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0310 	bic.w	r3, r3, #16
 8004226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	617b      	str	r3, [r7, #20]
   return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b10      	cmp	r3, #16
 8004250:	d103      	bne.n	800425a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2210      	movs	r2, #16
 8004258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004260:	4619      	mov	r1, r3
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fe ff9c 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004268:	e00b      	b.n	8004282 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc f96a 	bl	8000544 <HAL_UART_RxCpltCallback>
}
 8004270:	e007      	b.n	8004282 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0208 	orr.w	r2, r2, #8
 8004280:	619a      	str	r2, [r3, #24]
}
 8004282:	bf00      	nop
 8004284:	3770      	adds	r7, #112	; 0x70
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40008000 	.word	0x40008000

08004290 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b09c      	sub	sp, #112	; 0x70
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800429e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	2b22      	cmp	r3, #34	; 0x22
 80042aa:	f040 80be 	bne.w	800442a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80042c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80042c6:	4013      	ands	r3, r2
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d2:	1c9a      	adds	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f040 80a1 	bne.w	800443a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800430c:	667b      	str	r3, [r7, #100]	; 0x64
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004316:	657b      	str	r3, [r7, #84]	; 0x54
 8004318:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800431c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e6      	bne.n	80042f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3308      	adds	r3, #8
 8004330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	663b      	str	r3, [r7, #96]	; 0x60
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3308      	adds	r3, #8
 8004348:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800434a:	643a      	str	r2, [r7, #64]	; 0x40
 800434c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e5      	bne.n	800432a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a33      	ldr	r2, [pc, #204]	; (8004444 <UART_RxISR_16BIT+0x1b4>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d01f      	beq.n	80043bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	61fb      	str	r3, [r7, #28]
   return(result);
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800439e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d12e      	bne.n	8004422 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f023 0310 	bic.w	r3, r3, #16
 80043de:	65bb      	str	r3, [r7, #88]	; 0x58
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ec:	6979      	ldr	r1, [r7, #20]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	e841 2300 	strex	r3, r2, [r1]
 80043f4:	613b      	str	r3, [r7, #16]
   return(result);
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e6      	bne.n	80043ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b10      	cmp	r3, #16
 8004408:	d103      	bne.n	8004412 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2210      	movs	r2, #16
 8004410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7fe fec0 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004420:	e00b      	b.n	800443a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f7fc f88e 	bl	8000544 <HAL_UART_RxCpltCallback>
}
 8004428:	e007      	b.n	800443a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699a      	ldr	r2, [r3, #24]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0208 	orr.w	r2, r2, #8
 8004438:	619a      	str	r2, [r3, #24]
}
 800443a:	bf00      	nop
 800443c:	3770      	adds	r7, #112	; 0x70
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40008000 	.word	0x40008000

08004448 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b0ac      	sub	sp, #176	; 0xb0
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004456:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447e:	2b22      	cmp	r3, #34	; 0x22
 8004480:	f040 8182 	bne.w	8004788 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800448a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800448e:	e125      	b.n	80046dc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800449a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800449e:	b2d9      	uxtb	r1, r3
 80044a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	400a      	ands	r2, r1
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80044d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d053      	beq.n	800458a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d011      	beq.n	8004512 <UART_RxISR_8BIT_FIFOEN+0xca>
 80044ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00b      	beq.n	8004512 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2201      	movs	r2, #1
 8004500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f043 0201 	orr.w	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d011      	beq.n	8004542 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800451e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2202      	movs	r2, #2
 8004530:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f043 0204 	orr.w	r2, r3, #4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d011      	beq.n	8004572 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800454e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2204      	movs	r2, #4
 8004560:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004568:	f043 0202 	orr.w	r2, r3, #2
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	2b00      	cmp	r3, #0
 800457a:	d006      	beq.n	800458a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fb ffb1 	bl	80004e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	f040 80a2 	bne.w	80046dc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80045a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045bc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80045c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80045c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e4      	bne.n	8004598 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3308      	adds	r3, #8
 80045d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80045de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045f6:	66ba      	str	r2, [r7, #104]	; 0x68
 80045f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80045fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004604:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e1      	bne.n	80045ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a5f      	ldr	r2, [pc, #380]	; (80047a0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d021      	beq.n	800466c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01a      	beq.n	800466c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004646:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800464a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004658:	657b      	str	r3, [r7, #84]	; 0x54
 800465a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800465e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e4      	bne.n	8004636 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004670:	2b01      	cmp	r3, #1
 8004672:	d130      	bne.n	80046d6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	f023 0310 	bic.w	r3, r3, #16
 800468e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800469c:	643b      	str	r3, [r7, #64]	; 0x40
 800469e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e4      	bne.n	800467a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	2b10      	cmp	r3, #16
 80046bc:	d103      	bne.n	80046c6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2210      	movs	r2, #16
 80046c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fe fd66 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
 80046d4:	e002      	b.n	80046dc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fb ff34 	bl	8000544 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80046dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d006      	beq.n	80046f2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80046e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f47f aecf 	bne.w	8004490 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80046fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004700:	2b00      	cmp	r3, #0
 8004702:	d049      	beq.n	8004798 <UART_RxISR_8BIT_FIFOEN+0x350>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800470a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800470e:	429a      	cmp	r2, r3
 8004710:	d242      	bcs.n	8004798 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3308      	adds	r3, #8
 8004718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	61fb      	str	r3, [r7, #28]
   return(result);
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3308      	adds	r3, #8
 8004732:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004736:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e3      	bne.n	8004712 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800474e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	e853 3f00 	ldrex	r3, [r3]
 800475c:	60bb      	str	r3, [r7, #8]
   return(result);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f043 0320 	orr.w	r3, r3, #32
 8004764:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	613b      	str	r3, [r7, #16]
   return(result);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e4      	bne.n	8004750 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004786:	e007      	b.n	8004798 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0208 	orr.w	r2, r2, #8
 8004796:	619a      	str	r2, [r3, #24]
}
 8004798:	bf00      	nop
 800479a:	37b0      	adds	r7, #176	; 0xb0
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40008000 	.word	0x40008000
 80047a4:	080040d9 	.word	0x080040d9

080047a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b0ae      	sub	sp, #184	; 0xb8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80047b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047de:	2b22      	cmp	r3, #34	; 0x22
 80047e0:	f040 8186 	bne.w	8004af0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80047ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047ee:	e129      	b.n	8004a44 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8004802:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004806:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800480a:	4013      	ands	r3, r2
 800480c:	b29a      	uxth	r2, r3
 800480e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004812:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	1c9a      	adds	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800483a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	2b00      	cmp	r3, #0
 8004844:	d053      	beq.n	80048ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d011      	beq.n	8004876 <UART_RxISR_16BIT_FIFOEN+0xce>
 8004852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2201      	movs	r2, #1
 8004864:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004876:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d011      	beq.n	80048a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004882:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2202      	movs	r2, #2
 8004894:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489c:	f043 0204 	orr.w	r2, r3, #4
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d011      	beq.n	80048d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80048b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2204      	movs	r2, #4
 80048c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f043 0202 	orr.w	r2, r3, #2
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d006      	beq.n	80048ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fb fdff 	bl	80004e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 80a4 	bne.w	8004a44 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004904:	e853 3f00 	ldrex	r3, [r3]
 8004908:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800490a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800490c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800491e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004922:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004926:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e2      	bne.n	80048fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3308      	adds	r3, #8
 800493c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004940:	e853 3f00 	ldrex	r3, [r3]
 8004944:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3308      	adds	r3, #8
 800495a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800495e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800496c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e1      	bne.n	8004936 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2220      	movs	r2, #32
 8004976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5f      	ldr	r2, [pc, #380]	; (8004b08 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d021      	beq.n	80049d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d01a      	beq.n	80049d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e4      	bne.n	800499e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d130      	bne.n	8004a3e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f2:	f023 0310 	bic.w	r3, r3, #16
 80049f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a04:	647b      	str	r3, [r7, #68]	; 0x44
 8004a06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a0c:	e841 2300 	strex	r3, r2, [r1]
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1e4      	bne.n	80049e2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f003 0310 	and.w	r3, r3, #16
 8004a22:	2b10      	cmp	r3, #16
 8004a24:	d103      	bne.n	8004a2e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2210      	movs	r2, #16
 8004a2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fe fbb2 	bl	80031a0 <HAL_UARTEx_RxEventCallback>
 8004a3c:	e002      	b.n	8004a44 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fb fd80 	bl	8000544 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a44:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d006      	beq.n	8004a5a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8004a4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f47f aecb 	bne.w	80047f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a60:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a64:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d049      	beq.n	8004b00 <UART_RxISR_16BIT_FIFOEN+0x358>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a72:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d242      	bcs.n	8004b00 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	623b      	str	r3, [r7, #32]
   return(result);
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3308      	adds	r3, #8
 8004a9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004a9e:	633a      	str	r2, [r7, #48]	; 0x30
 8004aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e3      	bne.n	8004a7a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8004ab6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	e853 3f00 	ldrex	r3, [r3]
 8004ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f043 0320 	orr.w	r3, r3, #32
 8004acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	69b9      	ldr	r1, [r7, #24]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e4      	bne.n	8004ab8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004aee:	e007      	b.n	8004b00 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0208 	orr.w	r2, r2, #8
 8004afe:	619a      	str	r2, [r3, #24]
}
 8004b00:	bf00      	nop
 8004b02:	37b8      	adds	r7, #184	; 0xb8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40008000 	.word	0x40008000
 8004b0c:	08004291 	.word	0x08004291

08004b10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr

08004b46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_UARTEx_DisableFifoMode+0x16>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e027      	b.n	8004bac <HAL_UARTEx_DisableFifoMode+0x66>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2224      	movs	r2, #36	; 0x24
 8004b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bc80      	pop	{r7}
 8004bb4:	4770      	bx	lr

08004bb6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e02d      	b.n	8004c2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2224      	movs	r2, #36	; 0x24
 8004bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f850 	bl	8004cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e02d      	b.n	8004ca6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2224      	movs	r2, #36	; 0x24
 8004c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	683a      	ldr	r2, [r7, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f812 	bl	8004cb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2220      	movs	r2, #32
 8004c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d108      	bne.n	8004cd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cd0:	e031      	b.n	8004d36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	0e5b      	lsrs	r3, r3, #25
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	0f5b      	lsrs	r3, r3, #29
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cfa:	7bbb      	ldrb	r3, [r7, #14]
 8004cfc:	7b3a      	ldrb	r2, [r7, #12]
 8004cfe:	4910      	ldr	r1, [pc, #64]	; (8004d40 <UARTEx_SetNbDataToProcess+0x90>)
 8004d00:	5c8a      	ldrb	r2, [r1, r2]
 8004d02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d06:	7b3a      	ldrb	r2, [r7, #12]
 8004d08:	490e      	ldr	r1, [pc, #56]	; (8004d44 <UARTEx_SetNbDataToProcess+0x94>)
 8004d0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	7b7a      	ldrb	r2, [r7, #13]
 8004d1c:	4908      	ldr	r1, [pc, #32]	; (8004d40 <UARTEx_SetNbDataToProcess+0x90>)
 8004d1e:	5c8a      	ldrb	r2, [r1, r2]
 8004d20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d24:	7b7a      	ldrb	r2, [r7, #13]
 8004d26:	4907      	ldr	r1, [pc, #28]	; (8004d44 <UARTEx_SetNbDataToProcess+0x94>)
 8004d28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	08004ea8 	.word	0x08004ea8
 8004d44:	08004eb0 	.word	0x08004eb0

08004d48 <__libc_init_array>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4d0d      	ldr	r5, [pc, #52]	; (8004d80 <__libc_init_array+0x38>)
 8004d4c:	4c0d      	ldr	r4, [pc, #52]	; (8004d84 <__libc_init_array+0x3c>)
 8004d4e:	1b64      	subs	r4, r4, r5
 8004d50:	10a4      	asrs	r4, r4, #2
 8004d52:	2600      	movs	r6, #0
 8004d54:	42a6      	cmp	r6, r4
 8004d56:	d109      	bne.n	8004d6c <__libc_init_array+0x24>
 8004d58:	4d0b      	ldr	r5, [pc, #44]	; (8004d88 <__libc_init_array+0x40>)
 8004d5a:	4c0c      	ldr	r4, [pc, #48]	; (8004d8c <__libc_init_array+0x44>)
 8004d5c:	f000 f82e 	bl	8004dbc <_init>
 8004d60:	1b64      	subs	r4, r4, r5
 8004d62:	10a4      	asrs	r4, r4, #2
 8004d64:	2600      	movs	r6, #0
 8004d66:	42a6      	cmp	r6, r4
 8004d68:	d105      	bne.n	8004d76 <__libc_init_array+0x2e>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d70:	4798      	blx	r3
 8004d72:	3601      	adds	r6, #1
 8004d74:	e7ee      	b.n	8004d54 <__libc_init_array+0xc>
 8004d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7a:	4798      	blx	r3
 8004d7c:	3601      	adds	r6, #1
 8004d7e:	e7f2      	b.n	8004d66 <__libc_init_array+0x1e>
 8004d80:	08004ec0 	.word	0x08004ec0
 8004d84:	08004ec0 	.word	0x08004ec0
 8004d88:	08004ec0 	.word	0x08004ec0
 8004d8c:	08004ec4 	.word	0x08004ec4

08004d90 <memcpy>:
 8004d90:	440a      	add	r2, r1
 8004d92:	4291      	cmp	r1, r2
 8004d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004d98:	d100      	bne.n	8004d9c <memcpy+0xc>
 8004d9a:	4770      	bx	lr
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da6:	4291      	cmp	r1, r2
 8004da8:	d1f9      	bne.n	8004d9e <memcpy+0xe>
 8004daa:	bd10      	pop	{r4, pc}

08004dac <memset>:
 8004dac:	4402      	add	r2, r0
 8004dae:	4603      	mov	r3, r0
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d100      	bne.n	8004db6 <memset+0xa>
 8004db4:	4770      	bx	lr
 8004db6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dba:	e7f9      	b.n	8004db0 <memset+0x4>

08004dbc <_init>:
 8004dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dbe:	bf00      	nop
 8004dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc2:	bc08      	pop	{r3}
 8004dc4:	469e      	mov	lr, r3
 8004dc6:	4770      	bx	lr

08004dc8 <_fini>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	bf00      	nop
 8004dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dce:	bc08      	pop	{r3}
 8004dd0:	469e      	mov	lr, r3
 8004dd2:	4770      	bx	lr


STM32WL55JC Scheduler_CM0PLUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d00  080200c0  080200c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08022dc0  08022dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022ed0  08022ed0  0001801c  2**0
                  CONTENTS
  4 .ARM          00000008  08022ed0  08022ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022ed8  08022ed8  0001801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022ed8  08022ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022edc  08022edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20008000  08022ee0  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000801c  08022efc  0001801c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200080d0  08022efc  000180d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001801c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e08a  00000000  00000000  00018044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb7  00000000  00000000  000260ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00027f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00028c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a307  00000000  00000000  00029810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d27b  00000000  00000000  00043b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5fcc  00000000  00000000  00050d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6d5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c98  00000000  00000000  000f6db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080200c0 <__do_global_dtors_aux>:
 80200c0:	b510      	push	{r4, lr}
 80200c2:	4c06      	ldr	r4, [pc, #24]	; (80200dc <__do_global_dtors_aux+0x1c>)
 80200c4:	7823      	ldrb	r3, [r4, #0]
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d107      	bne.n	80200da <__do_global_dtors_aux+0x1a>
 80200ca:	4b05      	ldr	r3, [pc, #20]	; (80200e0 <__do_global_dtors_aux+0x20>)
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d002      	beq.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d0:	4804      	ldr	r0, [pc, #16]	; (80200e4 <__do_global_dtors_aux+0x24>)
 80200d2:	e000      	b.n	80200d6 <__do_global_dtors_aux+0x16>
 80200d4:	bf00      	nop
 80200d6:	2301      	movs	r3, #1
 80200d8:	7023      	strb	r3, [r4, #0]
 80200da:	bd10      	pop	{r4, pc}
 80200dc:	2000801c 	.word	0x2000801c
 80200e0:	00000000 	.word	0x00000000
 80200e4:	08022da8 	.word	0x08022da8

080200e8 <frame_dummy>:
 80200e8:	4b04      	ldr	r3, [pc, #16]	; (80200fc <frame_dummy+0x14>)
 80200ea:	b510      	push	{r4, lr}
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d003      	beq.n	80200f8 <frame_dummy+0x10>
 80200f0:	4903      	ldr	r1, [pc, #12]	; (8020100 <frame_dummy+0x18>)
 80200f2:	4804      	ldr	r0, [pc, #16]	; (8020104 <frame_dummy+0x1c>)
 80200f4:	e000      	b.n	80200f8 <frame_dummy+0x10>
 80200f6:	bf00      	nop
 80200f8:	bd10      	pop	{r4, pc}
 80200fa:	46c0      	nop			; (mov r8, r8)
 80200fc:	00000000 	.word	0x00000000
 8020100:	20008020 	.word	0x20008020
 8020104:	08022da8 	.word	0x08022da8

08020108 <__udivsi3>:
 8020108:	2200      	movs	r2, #0
 802010a:	0843      	lsrs	r3, r0, #1
 802010c:	428b      	cmp	r3, r1
 802010e:	d374      	bcc.n	80201fa <__udivsi3+0xf2>
 8020110:	0903      	lsrs	r3, r0, #4
 8020112:	428b      	cmp	r3, r1
 8020114:	d35f      	bcc.n	80201d6 <__udivsi3+0xce>
 8020116:	0a03      	lsrs	r3, r0, #8
 8020118:	428b      	cmp	r3, r1
 802011a:	d344      	bcc.n	80201a6 <__udivsi3+0x9e>
 802011c:	0b03      	lsrs	r3, r0, #12
 802011e:	428b      	cmp	r3, r1
 8020120:	d328      	bcc.n	8020174 <__udivsi3+0x6c>
 8020122:	0c03      	lsrs	r3, r0, #16
 8020124:	428b      	cmp	r3, r1
 8020126:	d30d      	bcc.n	8020144 <__udivsi3+0x3c>
 8020128:	22ff      	movs	r2, #255	; 0xff
 802012a:	0209      	lsls	r1, r1, #8
 802012c:	ba12      	rev	r2, r2
 802012e:	0c03      	lsrs	r3, r0, #16
 8020130:	428b      	cmp	r3, r1
 8020132:	d302      	bcc.n	802013a <__udivsi3+0x32>
 8020134:	1212      	asrs	r2, r2, #8
 8020136:	0209      	lsls	r1, r1, #8
 8020138:	d065      	beq.n	8020206 <__udivsi3+0xfe>
 802013a:	0b03      	lsrs	r3, r0, #12
 802013c:	428b      	cmp	r3, r1
 802013e:	d319      	bcc.n	8020174 <__udivsi3+0x6c>
 8020140:	e000      	b.n	8020144 <__udivsi3+0x3c>
 8020142:	0a09      	lsrs	r1, r1, #8
 8020144:	0bc3      	lsrs	r3, r0, #15
 8020146:	428b      	cmp	r3, r1
 8020148:	d301      	bcc.n	802014e <__udivsi3+0x46>
 802014a:	03cb      	lsls	r3, r1, #15
 802014c:	1ac0      	subs	r0, r0, r3
 802014e:	4152      	adcs	r2, r2
 8020150:	0b83      	lsrs	r3, r0, #14
 8020152:	428b      	cmp	r3, r1
 8020154:	d301      	bcc.n	802015a <__udivsi3+0x52>
 8020156:	038b      	lsls	r3, r1, #14
 8020158:	1ac0      	subs	r0, r0, r3
 802015a:	4152      	adcs	r2, r2
 802015c:	0b43      	lsrs	r3, r0, #13
 802015e:	428b      	cmp	r3, r1
 8020160:	d301      	bcc.n	8020166 <__udivsi3+0x5e>
 8020162:	034b      	lsls	r3, r1, #13
 8020164:	1ac0      	subs	r0, r0, r3
 8020166:	4152      	adcs	r2, r2
 8020168:	0b03      	lsrs	r3, r0, #12
 802016a:	428b      	cmp	r3, r1
 802016c:	d301      	bcc.n	8020172 <__udivsi3+0x6a>
 802016e:	030b      	lsls	r3, r1, #12
 8020170:	1ac0      	subs	r0, r0, r3
 8020172:	4152      	adcs	r2, r2
 8020174:	0ac3      	lsrs	r3, r0, #11
 8020176:	428b      	cmp	r3, r1
 8020178:	d301      	bcc.n	802017e <__udivsi3+0x76>
 802017a:	02cb      	lsls	r3, r1, #11
 802017c:	1ac0      	subs	r0, r0, r3
 802017e:	4152      	adcs	r2, r2
 8020180:	0a83      	lsrs	r3, r0, #10
 8020182:	428b      	cmp	r3, r1
 8020184:	d301      	bcc.n	802018a <__udivsi3+0x82>
 8020186:	028b      	lsls	r3, r1, #10
 8020188:	1ac0      	subs	r0, r0, r3
 802018a:	4152      	adcs	r2, r2
 802018c:	0a43      	lsrs	r3, r0, #9
 802018e:	428b      	cmp	r3, r1
 8020190:	d301      	bcc.n	8020196 <__udivsi3+0x8e>
 8020192:	024b      	lsls	r3, r1, #9
 8020194:	1ac0      	subs	r0, r0, r3
 8020196:	4152      	adcs	r2, r2
 8020198:	0a03      	lsrs	r3, r0, #8
 802019a:	428b      	cmp	r3, r1
 802019c:	d301      	bcc.n	80201a2 <__udivsi3+0x9a>
 802019e:	020b      	lsls	r3, r1, #8
 80201a0:	1ac0      	subs	r0, r0, r3
 80201a2:	4152      	adcs	r2, r2
 80201a4:	d2cd      	bcs.n	8020142 <__udivsi3+0x3a>
 80201a6:	09c3      	lsrs	r3, r0, #7
 80201a8:	428b      	cmp	r3, r1
 80201aa:	d301      	bcc.n	80201b0 <__udivsi3+0xa8>
 80201ac:	01cb      	lsls	r3, r1, #7
 80201ae:	1ac0      	subs	r0, r0, r3
 80201b0:	4152      	adcs	r2, r2
 80201b2:	0983      	lsrs	r3, r0, #6
 80201b4:	428b      	cmp	r3, r1
 80201b6:	d301      	bcc.n	80201bc <__udivsi3+0xb4>
 80201b8:	018b      	lsls	r3, r1, #6
 80201ba:	1ac0      	subs	r0, r0, r3
 80201bc:	4152      	adcs	r2, r2
 80201be:	0943      	lsrs	r3, r0, #5
 80201c0:	428b      	cmp	r3, r1
 80201c2:	d301      	bcc.n	80201c8 <__udivsi3+0xc0>
 80201c4:	014b      	lsls	r3, r1, #5
 80201c6:	1ac0      	subs	r0, r0, r3
 80201c8:	4152      	adcs	r2, r2
 80201ca:	0903      	lsrs	r3, r0, #4
 80201cc:	428b      	cmp	r3, r1
 80201ce:	d301      	bcc.n	80201d4 <__udivsi3+0xcc>
 80201d0:	010b      	lsls	r3, r1, #4
 80201d2:	1ac0      	subs	r0, r0, r3
 80201d4:	4152      	adcs	r2, r2
 80201d6:	08c3      	lsrs	r3, r0, #3
 80201d8:	428b      	cmp	r3, r1
 80201da:	d301      	bcc.n	80201e0 <__udivsi3+0xd8>
 80201dc:	00cb      	lsls	r3, r1, #3
 80201de:	1ac0      	subs	r0, r0, r3
 80201e0:	4152      	adcs	r2, r2
 80201e2:	0883      	lsrs	r3, r0, #2
 80201e4:	428b      	cmp	r3, r1
 80201e6:	d301      	bcc.n	80201ec <__udivsi3+0xe4>
 80201e8:	008b      	lsls	r3, r1, #2
 80201ea:	1ac0      	subs	r0, r0, r3
 80201ec:	4152      	adcs	r2, r2
 80201ee:	0843      	lsrs	r3, r0, #1
 80201f0:	428b      	cmp	r3, r1
 80201f2:	d301      	bcc.n	80201f8 <__udivsi3+0xf0>
 80201f4:	004b      	lsls	r3, r1, #1
 80201f6:	1ac0      	subs	r0, r0, r3
 80201f8:	4152      	adcs	r2, r2
 80201fa:	1a41      	subs	r1, r0, r1
 80201fc:	d200      	bcs.n	8020200 <__udivsi3+0xf8>
 80201fe:	4601      	mov	r1, r0
 8020200:	4152      	adcs	r2, r2
 8020202:	4610      	mov	r0, r2
 8020204:	4770      	bx	lr
 8020206:	e7ff      	b.n	8020208 <__udivsi3+0x100>
 8020208:	b501      	push	{r0, lr}
 802020a:	2000      	movs	r0, #0
 802020c:	f000 f8f0 	bl	80203f0 <__aeabi_idiv0>
 8020210:	bd02      	pop	{r1, pc}
 8020212:	46c0      	nop			; (mov r8, r8)

08020214 <__aeabi_uidivmod>:
 8020214:	2900      	cmp	r1, #0
 8020216:	d0f7      	beq.n	8020208 <__udivsi3+0x100>
 8020218:	e776      	b.n	8020108 <__udivsi3>
 802021a:	4770      	bx	lr

0802021c <__divsi3>:
 802021c:	4603      	mov	r3, r0
 802021e:	430b      	orrs	r3, r1
 8020220:	d47f      	bmi.n	8020322 <__divsi3+0x106>
 8020222:	2200      	movs	r2, #0
 8020224:	0843      	lsrs	r3, r0, #1
 8020226:	428b      	cmp	r3, r1
 8020228:	d374      	bcc.n	8020314 <__divsi3+0xf8>
 802022a:	0903      	lsrs	r3, r0, #4
 802022c:	428b      	cmp	r3, r1
 802022e:	d35f      	bcc.n	80202f0 <__divsi3+0xd4>
 8020230:	0a03      	lsrs	r3, r0, #8
 8020232:	428b      	cmp	r3, r1
 8020234:	d344      	bcc.n	80202c0 <__divsi3+0xa4>
 8020236:	0b03      	lsrs	r3, r0, #12
 8020238:	428b      	cmp	r3, r1
 802023a:	d328      	bcc.n	802028e <__divsi3+0x72>
 802023c:	0c03      	lsrs	r3, r0, #16
 802023e:	428b      	cmp	r3, r1
 8020240:	d30d      	bcc.n	802025e <__divsi3+0x42>
 8020242:	22ff      	movs	r2, #255	; 0xff
 8020244:	0209      	lsls	r1, r1, #8
 8020246:	ba12      	rev	r2, r2
 8020248:	0c03      	lsrs	r3, r0, #16
 802024a:	428b      	cmp	r3, r1
 802024c:	d302      	bcc.n	8020254 <__divsi3+0x38>
 802024e:	1212      	asrs	r2, r2, #8
 8020250:	0209      	lsls	r1, r1, #8
 8020252:	d065      	beq.n	8020320 <__divsi3+0x104>
 8020254:	0b03      	lsrs	r3, r0, #12
 8020256:	428b      	cmp	r3, r1
 8020258:	d319      	bcc.n	802028e <__divsi3+0x72>
 802025a:	e000      	b.n	802025e <__divsi3+0x42>
 802025c:	0a09      	lsrs	r1, r1, #8
 802025e:	0bc3      	lsrs	r3, r0, #15
 8020260:	428b      	cmp	r3, r1
 8020262:	d301      	bcc.n	8020268 <__divsi3+0x4c>
 8020264:	03cb      	lsls	r3, r1, #15
 8020266:	1ac0      	subs	r0, r0, r3
 8020268:	4152      	adcs	r2, r2
 802026a:	0b83      	lsrs	r3, r0, #14
 802026c:	428b      	cmp	r3, r1
 802026e:	d301      	bcc.n	8020274 <__divsi3+0x58>
 8020270:	038b      	lsls	r3, r1, #14
 8020272:	1ac0      	subs	r0, r0, r3
 8020274:	4152      	adcs	r2, r2
 8020276:	0b43      	lsrs	r3, r0, #13
 8020278:	428b      	cmp	r3, r1
 802027a:	d301      	bcc.n	8020280 <__divsi3+0x64>
 802027c:	034b      	lsls	r3, r1, #13
 802027e:	1ac0      	subs	r0, r0, r3
 8020280:	4152      	adcs	r2, r2
 8020282:	0b03      	lsrs	r3, r0, #12
 8020284:	428b      	cmp	r3, r1
 8020286:	d301      	bcc.n	802028c <__divsi3+0x70>
 8020288:	030b      	lsls	r3, r1, #12
 802028a:	1ac0      	subs	r0, r0, r3
 802028c:	4152      	adcs	r2, r2
 802028e:	0ac3      	lsrs	r3, r0, #11
 8020290:	428b      	cmp	r3, r1
 8020292:	d301      	bcc.n	8020298 <__divsi3+0x7c>
 8020294:	02cb      	lsls	r3, r1, #11
 8020296:	1ac0      	subs	r0, r0, r3
 8020298:	4152      	adcs	r2, r2
 802029a:	0a83      	lsrs	r3, r0, #10
 802029c:	428b      	cmp	r3, r1
 802029e:	d301      	bcc.n	80202a4 <__divsi3+0x88>
 80202a0:	028b      	lsls	r3, r1, #10
 80202a2:	1ac0      	subs	r0, r0, r3
 80202a4:	4152      	adcs	r2, r2
 80202a6:	0a43      	lsrs	r3, r0, #9
 80202a8:	428b      	cmp	r3, r1
 80202aa:	d301      	bcc.n	80202b0 <__divsi3+0x94>
 80202ac:	024b      	lsls	r3, r1, #9
 80202ae:	1ac0      	subs	r0, r0, r3
 80202b0:	4152      	adcs	r2, r2
 80202b2:	0a03      	lsrs	r3, r0, #8
 80202b4:	428b      	cmp	r3, r1
 80202b6:	d301      	bcc.n	80202bc <__divsi3+0xa0>
 80202b8:	020b      	lsls	r3, r1, #8
 80202ba:	1ac0      	subs	r0, r0, r3
 80202bc:	4152      	adcs	r2, r2
 80202be:	d2cd      	bcs.n	802025c <__divsi3+0x40>
 80202c0:	09c3      	lsrs	r3, r0, #7
 80202c2:	428b      	cmp	r3, r1
 80202c4:	d301      	bcc.n	80202ca <__divsi3+0xae>
 80202c6:	01cb      	lsls	r3, r1, #7
 80202c8:	1ac0      	subs	r0, r0, r3
 80202ca:	4152      	adcs	r2, r2
 80202cc:	0983      	lsrs	r3, r0, #6
 80202ce:	428b      	cmp	r3, r1
 80202d0:	d301      	bcc.n	80202d6 <__divsi3+0xba>
 80202d2:	018b      	lsls	r3, r1, #6
 80202d4:	1ac0      	subs	r0, r0, r3
 80202d6:	4152      	adcs	r2, r2
 80202d8:	0943      	lsrs	r3, r0, #5
 80202da:	428b      	cmp	r3, r1
 80202dc:	d301      	bcc.n	80202e2 <__divsi3+0xc6>
 80202de:	014b      	lsls	r3, r1, #5
 80202e0:	1ac0      	subs	r0, r0, r3
 80202e2:	4152      	adcs	r2, r2
 80202e4:	0903      	lsrs	r3, r0, #4
 80202e6:	428b      	cmp	r3, r1
 80202e8:	d301      	bcc.n	80202ee <__divsi3+0xd2>
 80202ea:	010b      	lsls	r3, r1, #4
 80202ec:	1ac0      	subs	r0, r0, r3
 80202ee:	4152      	adcs	r2, r2
 80202f0:	08c3      	lsrs	r3, r0, #3
 80202f2:	428b      	cmp	r3, r1
 80202f4:	d301      	bcc.n	80202fa <__divsi3+0xde>
 80202f6:	00cb      	lsls	r3, r1, #3
 80202f8:	1ac0      	subs	r0, r0, r3
 80202fa:	4152      	adcs	r2, r2
 80202fc:	0883      	lsrs	r3, r0, #2
 80202fe:	428b      	cmp	r3, r1
 8020300:	d301      	bcc.n	8020306 <__divsi3+0xea>
 8020302:	008b      	lsls	r3, r1, #2
 8020304:	1ac0      	subs	r0, r0, r3
 8020306:	4152      	adcs	r2, r2
 8020308:	0843      	lsrs	r3, r0, #1
 802030a:	428b      	cmp	r3, r1
 802030c:	d301      	bcc.n	8020312 <__divsi3+0xf6>
 802030e:	004b      	lsls	r3, r1, #1
 8020310:	1ac0      	subs	r0, r0, r3
 8020312:	4152      	adcs	r2, r2
 8020314:	1a41      	subs	r1, r0, r1
 8020316:	d200      	bcs.n	802031a <__divsi3+0xfe>
 8020318:	4601      	mov	r1, r0
 802031a:	4152      	adcs	r2, r2
 802031c:	4610      	mov	r0, r2
 802031e:	4770      	bx	lr
 8020320:	e05d      	b.n	80203de <__divsi3+0x1c2>
 8020322:	0fca      	lsrs	r2, r1, #31
 8020324:	d000      	beq.n	8020328 <__divsi3+0x10c>
 8020326:	4249      	negs	r1, r1
 8020328:	1003      	asrs	r3, r0, #32
 802032a:	d300      	bcc.n	802032e <__divsi3+0x112>
 802032c:	4240      	negs	r0, r0
 802032e:	4053      	eors	r3, r2
 8020330:	2200      	movs	r2, #0
 8020332:	469c      	mov	ip, r3
 8020334:	0903      	lsrs	r3, r0, #4
 8020336:	428b      	cmp	r3, r1
 8020338:	d32d      	bcc.n	8020396 <__divsi3+0x17a>
 802033a:	0a03      	lsrs	r3, r0, #8
 802033c:	428b      	cmp	r3, r1
 802033e:	d312      	bcc.n	8020366 <__divsi3+0x14a>
 8020340:	22fc      	movs	r2, #252	; 0xfc
 8020342:	0189      	lsls	r1, r1, #6
 8020344:	ba12      	rev	r2, r2
 8020346:	0a03      	lsrs	r3, r0, #8
 8020348:	428b      	cmp	r3, r1
 802034a:	d30c      	bcc.n	8020366 <__divsi3+0x14a>
 802034c:	0189      	lsls	r1, r1, #6
 802034e:	1192      	asrs	r2, r2, #6
 8020350:	428b      	cmp	r3, r1
 8020352:	d308      	bcc.n	8020366 <__divsi3+0x14a>
 8020354:	0189      	lsls	r1, r1, #6
 8020356:	1192      	asrs	r2, r2, #6
 8020358:	428b      	cmp	r3, r1
 802035a:	d304      	bcc.n	8020366 <__divsi3+0x14a>
 802035c:	0189      	lsls	r1, r1, #6
 802035e:	d03a      	beq.n	80203d6 <__divsi3+0x1ba>
 8020360:	1192      	asrs	r2, r2, #6
 8020362:	e000      	b.n	8020366 <__divsi3+0x14a>
 8020364:	0989      	lsrs	r1, r1, #6
 8020366:	09c3      	lsrs	r3, r0, #7
 8020368:	428b      	cmp	r3, r1
 802036a:	d301      	bcc.n	8020370 <__divsi3+0x154>
 802036c:	01cb      	lsls	r3, r1, #7
 802036e:	1ac0      	subs	r0, r0, r3
 8020370:	4152      	adcs	r2, r2
 8020372:	0983      	lsrs	r3, r0, #6
 8020374:	428b      	cmp	r3, r1
 8020376:	d301      	bcc.n	802037c <__divsi3+0x160>
 8020378:	018b      	lsls	r3, r1, #6
 802037a:	1ac0      	subs	r0, r0, r3
 802037c:	4152      	adcs	r2, r2
 802037e:	0943      	lsrs	r3, r0, #5
 8020380:	428b      	cmp	r3, r1
 8020382:	d301      	bcc.n	8020388 <__divsi3+0x16c>
 8020384:	014b      	lsls	r3, r1, #5
 8020386:	1ac0      	subs	r0, r0, r3
 8020388:	4152      	adcs	r2, r2
 802038a:	0903      	lsrs	r3, r0, #4
 802038c:	428b      	cmp	r3, r1
 802038e:	d301      	bcc.n	8020394 <__divsi3+0x178>
 8020390:	010b      	lsls	r3, r1, #4
 8020392:	1ac0      	subs	r0, r0, r3
 8020394:	4152      	adcs	r2, r2
 8020396:	08c3      	lsrs	r3, r0, #3
 8020398:	428b      	cmp	r3, r1
 802039a:	d301      	bcc.n	80203a0 <__divsi3+0x184>
 802039c:	00cb      	lsls	r3, r1, #3
 802039e:	1ac0      	subs	r0, r0, r3
 80203a0:	4152      	adcs	r2, r2
 80203a2:	0883      	lsrs	r3, r0, #2
 80203a4:	428b      	cmp	r3, r1
 80203a6:	d301      	bcc.n	80203ac <__divsi3+0x190>
 80203a8:	008b      	lsls	r3, r1, #2
 80203aa:	1ac0      	subs	r0, r0, r3
 80203ac:	4152      	adcs	r2, r2
 80203ae:	d2d9      	bcs.n	8020364 <__divsi3+0x148>
 80203b0:	0843      	lsrs	r3, r0, #1
 80203b2:	428b      	cmp	r3, r1
 80203b4:	d301      	bcc.n	80203ba <__divsi3+0x19e>
 80203b6:	004b      	lsls	r3, r1, #1
 80203b8:	1ac0      	subs	r0, r0, r3
 80203ba:	4152      	adcs	r2, r2
 80203bc:	1a41      	subs	r1, r0, r1
 80203be:	d200      	bcs.n	80203c2 <__divsi3+0x1a6>
 80203c0:	4601      	mov	r1, r0
 80203c2:	4663      	mov	r3, ip
 80203c4:	4152      	adcs	r2, r2
 80203c6:	105b      	asrs	r3, r3, #1
 80203c8:	4610      	mov	r0, r2
 80203ca:	d301      	bcc.n	80203d0 <__divsi3+0x1b4>
 80203cc:	4240      	negs	r0, r0
 80203ce:	2b00      	cmp	r3, #0
 80203d0:	d500      	bpl.n	80203d4 <__divsi3+0x1b8>
 80203d2:	4249      	negs	r1, r1
 80203d4:	4770      	bx	lr
 80203d6:	4663      	mov	r3, ip
 80203d8:	105b      	asrs	r3, r3, #1
 80203da:	d300      	bcc.n	80203de <__divsi3+0x1c2>
 80203dc:	4240      	negs	r0, r0
 80203de:	b501      	push	{r0, lr}
 80203e0:	2000      	movs	r0, #0
 80203e2:	f000 f805 	bl	80203f0 <__aeabi_idiv0>
 80203e6:	bd02      	pop	{r1, pc}

080203e8 <__aeabi_idivmod>:
 80203e8:	2900      	cmp	r1, #0
 80203ea:	d0f8      	beq.n	80203de <__divsi3+0x1c2>
 80203ec:	e716      	b.n	802021c <__divsi3>
 80203ee:	4770      	bx	lr

080203f0 <__aeabi_idiv0>:
 80203f0:	4770      	bx	lr
 80203f2:	46c0      	nop			; (mov r8, r8)

080203f4 <__aeabi_uldivmod>:
 80203f4:	2b00      	cmp	r3, #0
 80203f6:	d111      	bne.n	802041c <__aeabi_uldivmod+0x28>
 80203f8:	2a00      	cmp	r2, #0
 80203fa:	d10f      	bne.n	802041c <__aeabi_uldivmod+0x28>
 80203fc:	2900      	cmp	r1, #0
 80203fe:	d100      	bne.n	8020402 <__aeabi_uldivmod+0xe>
 8020400:	2800      	cmp	r0, #0
 8020402:	d002      	beq.n	802040a <__aeabi_uldivmod+0x16>
 8020404:	2100      	movs	r1, #0
 8020406:	43c9      	mvns	r1, r1
 8020408:	0008      	movs	r0, r1
 802040a:	b407      	push	{r0, r1, r2}
 802040c:	4802      	ldr	r0, [pc, #8]	; (8020418 <__aeabi_uldivmod+0x24>)
 802040e:	a102      	add	r1, pc, #8	; (adr r1, 8020418 <__aeabi_uldivmod+0x24>)
 8020410:	1840      	adds	r0, r0, r1
 8020412:	9002      	str	r0, [sp, #8]
 8020414:	bd03      	pop	{r0, r1, pc}
 8020416:	46c0      	nop			; (mov r8, r8)
 8020418:	ffffffd9 	.word	0xffffffd9
 802041c:	b403      	push	{r0, r1}
 802041e:	4668      	mov	r0, sp
 8020420:	b501      	push	{r0, lr}
 8020422:	9802      	ldr	r0, [sp, #8]
 8020424:	f000 f806 	bl	8020434 <__udivmoddi4>
 8020428:	9b01      	ldr	r3, [sp, #4]
 802042a:	469e      	mov	lr, r3
 802042c:	b002      	add	sp, #8
 802042e:	bc0c      	pop	{r2, r3}
 8020430:	4770      	bx	lr
 8020432:	46c0      	nop			; (mov r8, r8)

08020434 <__udivmoddi4>:
 8020434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020436:	4657      	mov	r7, sl
 8020438:	464e      	mov	r6, r9
 802043a:	4645      	mov	r5, r8
 802043c:	46de      	mov	lr, fp
 802043e:	b5e0      	push	{r5, r6, r7, lr}
 8020440:	0004      	movs	r4, r0
 8020442:	000d      	movs	r5, r1
 8020444:	4692      	mov	sl, r2
 8020446:	4699      	mov	r9, r3
 8020448:	b083      	sub	sp, #12
 802044a:	428b      	cmp	r3, r1
 802044c:	d830      	bhi.n	80204b0 <__udivmoddi4+0x7c>
 802044e:	d02d      	beq.n	80204ac <__udivmoddi4+0x78>
 8020450:	4649      	mov	r1, r9
 8020452:	4650      	mov	r0, sl
 8020454:	f000 f8ba 	bl	80205cc <__clzdi2>
 8020458:	0029      	movs	r1, r5
 802045a:	0006      	movs	r6, r0
 802045c:	0020      	movs	r0, r4
 802045e:	f000 f8b5 	bl	80205cc <__clzdi2>
 8020462:	1a33      	subs	r3, r6, r0
 8020464:	4698      	mov	r8, r3
 8020466:	3b20      	subs	r3, #32
 8020468:	469b      	mov	fp, r3
 802046a:	d433      	bmi.n	80204d4 <__udivmoddi4+0xa0>
 802046c:	465a      	mov	r2, fp
 802046e:	4653      	mov	r3, sl
 8020470:	4093      	lsls	r3, r2
 8020472:	4642      	mov	r2, r8
 8020474:	001f      	movs	r7, r3
 8020476:	4653      	mov	r3, sl
 8020478:	4093      	lsls	r3, r2
 802047a:	001e      	movs	r6, r3
 802047c:	42af      	cmp	r7, r5
 802047e:	d83a      	bhi.n	80204f6 <__udivmoddi4+0xc2>
 8020480:	42af      	cmp	r7, r5
 8020482:	d100      	bne.n	8020486 <__udivmoddi4+0x52>
 8020484:	e078      	b.n	8020578 <__udivmoddi4+0x144>
 8020486:	465b      	mov	r3, fp
 8020488:	1ba4      	subs	r4, r4, r6
 802048a:	41bd      	sbcs	r5, r7
 802048c:	2b00      	cmp	r3, #0
 802048e:	da00      	bge.n	8020492 <__udivmoddi4+0x5e>
 8020490:	e075      	b.n	802057e <__udivmoddi4+0x14a>
 8020492:	2200      	movs	r2, #0
 8020494:	2300      	movs	r3, #0
 8020496:	9200      	str	r2, [sp, #0]
 8020498:	9301      	str	r3, [sp, #4]
 802049a:	2301      	movs	r3, #1
 802049c:	465a      	mov	r2, fp
 802049e:	4093      	lsls	r3, r2
 80204a0:	9301      	str	r3, [sp, #4]
 80204a2:	2301      	movs	r3, #1
 80204a4:	4642      	mov	r2, r8
 80204a6:	4093      	lsls	r3, r2
 80204a8:	9300      	str	r3, [sp, #0]
 80204aa:	e028      	b.n	80204fe <__udivmoddi4+0xca>
 80204ac:	4282      	cmp	r2, r0
 80204ae:	d9cf      	bls.n	8020450 <__udivmoddi4+0x1c>
 80204b0:	2200      	movs	r2, #0
 80204b2:	2300      	movs	r3, #0
 80204b4:	9200      	str	r2, [sp, #0]
 80204b6:	9301      	str	r3, [sp, #4]
 80204b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80204ba:	2b00      	cmp	r3, #0
 80204bc:	d001      	beq.n	80204c2 <__udivmoddi4+0x8e>
 80204be:	601c      	str	r4, [r3, #0]
 80204c0:	605d      	str	r5, [r3, #4]
 80204c2:	9800      	ldr	r0, [sp, #0]
 80204c4:	9901      	ldr	r1, [sp, #4]
 80204c6:	b003      	add	sp, #12
 80204c8:	bcf0      	pop	{r4, r5, r6, r7}
 80204ca:	46bb      	mov	fp, r7
 80204cc:	46b2      	mov	sl, r6
 80204ce:	46a9      	mov	r9, r5
 80204d0:	46a0      	mov	r8, r4
 80204d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204d4:	4642      	mov	r2, r8
 80204d6:	2320      	movs	r3, #32
 80204d8:	1a9b      	subs	r3, r3, r2
 80204da:	4652      	mov	r2, sl
 80204dc:	40da      	lsrs	r2, r3
 80204de:	4641      	mov	r1, r8
 80204e0:	0013      	movs	r3, r2
 80204e2:	464a      	mov	r2, r9
 80204e4:	408a      	lsls	r2, r1
 80204e6:	0017      	movs	r7, r2
 80204e8:	4642      	mov	r2, r8
 80204ea:	431f      	orrs	r7, r3
 80204ec:	4653      	mov	r3, sl
 80204ee:	4093      	lsls	r3, r2
 80204f0:	001e      	movs	r6, r3
 80204f2:	42af      	cmp	r7, r5
 80204f4:	d9c4      	bls.n	8020480 <__udivmoddi4+0x4c>
 80204f6:	2200      	movs	r2, #0
 80204f8:	2300      	movs	r3, #0
 80204fa:	9200      	str	r2, [sp, #0]
 80204fc:	9301      	str	r3, [sp, #4]
 80204fe:	4643      	mov	r3, r8
 8020500:	2b00      	cmp	r3, #0
 8020502:	d0d9      	beq.n	80204b8 <__udivmoddi4+0x84>
 8020504:	07fb      	lsls	r3, r7, #31
 8020506:	0872      	lsrs	r2, r6, #1
 8020508:	431a      	orrs	r2, r3
 802050a:	4646      	mov	r6, r8
 802050c:	087b      	lsrs	r3, r7, #1
 802050e:	e00e      	b.n	802052e <__udivmoddi4+0xfa>
 8020510:	42ab      	cmp	r3, r5
 8020512:	d101      	bne.n	8020518 <__udivmoddi4+0xe4>
 8020514:	42a2      	cmp	r2, r4
 8020516:	d80c      	bhi.n	8020532 <__udivmoddi4+0xfe>
 8020518:	1aa4      	subs	r4, r4, r2
 802051a:	419d      	sbcs	r5, r3
 802051c:	2001      	movs	r0, #1
 802051e:	1924      	adds	r4, r4, r4
 8020520:	416d      	adcs	r5, r5
 8020522:	2100      	movs	r1, #0
 8020524:	3e01      	subs	r6, #1
 8020526:	1824      	adds	r4, r4, r0
 8020528:	414d      	adcs	r5, r1
 802052a:	2e00      	cmp	r6, #0
 802052c:	d006      	beq.n	802053c <__udivmoddi4+0x108>
 802052e:	42ab      	cmp	r3, r5
 8020530:	d9ee      	bls.n	8020510 <__udivmoddi4+0xdc>
 8020532:	3e01      	subs	r6, #1
 8020534:	1924      	adds	r4, r4, r4
 8020536:	416d      	adcs	r5, r5
 8020538:	2e00      	cmp	r6, #0
 802053a:	d1f8      	bne.n	802052e <__udivmoddi4+0xfa>
 802053c:	9800      	ldr	r0, [sp, #0]
 802053e:	9901      	ldr	r1, [sp, #4]
 8020540:	465b      	mov	r3, fp
 8020542:	1900      	adds	r0, r0, r4
 8020544:	4169      	adcs	r1, r5
 8020546:	2b00      	cmp	r3, #0
 8020548:	db24      	blt.n	8020594 <__udivmoddi4+0x160>
 802054a:	002b      	movs	r3, r5
 802054c:	465a      	mov	r2, fp
 802054e:	4644      	mov	r4, r8
 8020550:	40d3      	lsrs	r3, r2
 8020552:	002a      	movs	r2, r5
 8020554:	40e2      	lsrs	r2, r4
 8020556:	001c      	movs	r4, r3
 8020558:	465b      	mov	r3, fp
 802055a:	0015      	movs	r5, r2
 802055c:	2b00      	cmp	r3, #0
 802055e:	db2a      	blt.n	80205b6 <__udivmoddi4+0x182>
 8020560:	0026      	movs	r6, r4
 8020562:	409e      	lsls	r6, r3
 8020564:	0033      	movs	r3, r6
 8020566:	0026      	movs	r6, r4
 8020568:	4647      	mov	r7, r8
 802056a:	40be      	lsls	r6, r7
 802056c:	0032      	movs	r2, r6
 802056e:	1a80      	subs	r0, r0, r2
 8020570:	4199      	sbcs	r1, r3
 8020572:	9000      	str	r0, [sp, #0]
 8020574:	9101      	str	r1, [sp, #4]
 8020576:	e79f      	b.n	80204b8 <__udivmoddi4+0x84>
 8020578:	42a3      	cmp	r3, r4
 802057a:	d8bc      	bhi.n	80204f6 <__udivmoddi4+0xc2>
 802057c:	e783      	b.n	8020486 <__udivmoddi4+0x52>
 802057e:	4642      	mov	r2, r8
 8020580:	2320      	movs	r3, #32
 8020582:	2100      	movs	r1, #0
 8020584:	1a9b      	subs	r3, r3, r2
 8020586:	2200      	movs	r2, #0
 8020588:	9100      	str	r1, [sp, #0]
 802058a:	9201      	str	r2, [sp, #4]
 802058c:	2201      	movs	r2, #1
 802058e:	40da      	lsrs	r2, r3
 8020590:	9201      	str	r2, [sp, #4]
 8020592:	e786      	b.n	80204a2 <__udivmoddi4+0x6e>
 8020594:	4642      	mov	r2, r8
 8020596:	2320      	movs	r3, #32
 8020598:	1a9b      	subs	r3, r3, r2
 802059a:	002a      	movs	r2, r5
 802059c:	4646      	mov	r6, r8
 802059e:	409a      	lsls	r2, r3
 80205a0:	0023      	movs	r3, r4
 80205a2:	40f3      	lsrs	r3, r6
 80205a4:	4644      	mov	r4, r8
 80205a6:	4313      	orrs	r3, r2
 80205a8:	002a      	movs	r2, r5
 80205aa:	40e2      	lsrs	r2, r4
 80205ac:	001c      	movs	r4, r3
 80205ae:	465b      	mov	r3, fp
 80205b0:	0015      	movs	r5, r2
 80205b2:	2b00      	cmp	r3, #0
 80205b4:	dad4      	bge.n	8020560 <__udivmoddi4+0x12c>
 80205b6:	4642      	mov	r2, r8
 80205b8:	002f      	movs	r7, r5
 80205ba:	2320      	movs	r3, #32
 80205bc:	0026      	movs	r6, r4
 80205be:	4097      	lsls	r7, r2
 80205c0:	1a9b      	subs	r3, r3, r2
 80205c2:	40de      	lsrs	r6, r3
 80205c4:	003b      	movs	r3, r7
 80205c6:	4333      	orrs	r3, r6
 80205c8:	e7cd      	b.n	8020566 <__udivmoddi4+0x132>
 80205ca:	46c0      	nop			; (mov r8, r8)

080205cc <__clzdi2>:
 80205cc:	b510      	push	{r4, lr}
 80205ce:	2900      	cmp	r1, #0
 80205d0:	d103      	bne.n	80205da <__clzdi2+0xe>
 80205d2:	f000 f807 	bl	80205e4 <__clzsi2>
 80205d6:	3020      	adds	r0, #32
 80205d8:	e002      	b.n	80205e0 <__clzdi2+0x14>
 80205da:	0008      	movs	r0, r1
 80205dc:	f000 f802 	bl	80205e4 <__clzsi2>
 80205e0:	bd10      	pop	{r4, pc}
 80205e2:	46c0      	nop			; (mov r8, r8)

080205e4 <__clzsi2>:
 80205e4:	211c      	movs	r1, #28
 80205e6:	2301      	movs	r3, #1
 80205e8:	041b      	lsls	r3, r3, #16
 80205ea:	4298      	cmp	r0, r3
 80205ec:	d301      	bcc.n	80205f2 <__clzsi2+0xe>
 80205ee:	0c00      	lsrs	r0, r0, #16
 80205f0:	3910      	subs	r1, #16
 80205f2:	0a1b      	lsrs	r3, r3, #8
 80205f4:	4298      	cmp	r0, r3
 80205f6:	d301      	bcc.n	80205fc <__clzsi2+0x18>
 80205f8:	0a00      	lsrs	r0, r0, #8
 80205fa:	3908      	subs	r1, #8
 80205fc:	091b      	lsrs	r3, r3, #4
 80205fe:	4298      	cmp	r0, r3
 8020600:	d301      	bcc.n	8020606 <__clzsi2+0x22>
 8020602:	0900      	lsrs	r0, r0, #4
 8020604:	3904      	subs	r1, #4
 8020606:	a202      	add	r2, pc, #8	; (adr r2, 8020610 <__clzsi2+0x2c>)
 8020608:	5c10      	ldrb	r0, [r2, r0]
 802060a:	1840      	adds	r0, r0, r1
 802060c:	4770      	bx	lr
 802060e:	46c0      	nop			; (mov r8, r8)
 8020610:	02020304 	.word	0x02020304
 8020614:	01010101 	.word	0x01010101
	...

08020620 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020620:	b580      	push	{r7, lr}
 8020622:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8020624:	46c0      	nop			; (mov r8, r8)
 8020626:	46bd      	mov	sp, r7
 8020628:	bd80      	pop	{r7, pc}

0802062a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 802062a:	b580      	push	{r7, lr}
 802062c:	b084      	sub	sp, #16
 802062e:	af00      	add	r7, sp, #0
 8020630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8020632:	23b0      	movs	r3, #176	; 0xb0
 8020634:	05da      	lsls	r2, r3, #23
 8020636:	23a6      	movs	r3, #166	; 0xa6
 8020638:	005b      	lsls	r3, r3, #1
 802063a:	58d1      	ldr	r1, [r2, r3]
 802063c:	23b0      	movs	r3, #176	; 0xb0
 802063e:	05da      	lsls	r2, r3, #23
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	4319      	orrs	r1, r3
 8020644:	23a6      	movs	r3, #166	; 0xa6
 8020646:	005b      	lsls	r3, r3, #1
 8020648:	50d1      	str	r1, [r2, r3]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 802064a:	23b0      	movs	r3, #176	; 0xb0
 802064c:	05da      	lsls	r2, r3, #23
 802064e:	23a6      	movs	r3, #166	; 0xa6
 8020650:	005b      	lsls	r3, r3, #1
 8020652:	58d3      	ldr	r3, [r2, r3]
 8020654:	687a      	ldr	r2, [r7, #4]
 8020656:	4013      	ands	r3, r2
 8020658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 802065a:	68fb      	ldr	r3, [r7, #12]
}
 802065c:	46c0      	nop			; (mov r8, r8)
 802065e:	46bd      	mov	sp, r7
 8020660:	b004      	add	sp, #16
 8020662:	bd80      	pop	{r7, pc}

08020664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020664:	b580      	push	{r7, lr}
 8020666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020668:	f000 f94e 	bl	8020908 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 802066c:	f000 f85c 	bl	8020728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8020670:	f000 f80c 	bl	802068c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t*)HelloWorldMessage, 14, 1000);
 8020674:	23fa      	movs	r3, #250	; 0xfa
 8020676:	009b      	lsls	r3, r3, #2
 8020678:	4902      	ldr	r1, [pc, #8]	; (8020684 <main+0x20>)
 802067a:	4803      	ldr	r0, [pc, #12]	; (8020688 <main+0x24>)
 802067c:	220e      	movs	r2, #14
 802067e:	f001 f91f 	bl	80218c0 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020682:	e7fe      	b.n	8020682 <main+0x1e>
 8020684:	20008004 	.word	0x20008004
 8020688:	20008038 	.word	0x20008038

0802068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 802068c:	b580      	push	{r7, lr}
 802068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8020690:	4b23      	ldr	r3, [pc, #140]	; (8020720 <MX_USART2_UART_Init+0x94>)
 8020692:	4a24      	ldr	r2, [pc, #144]	; (8020724 <MX_USART2_UART_Init+0x98>)
 8020694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8020696:	4b22      	ldr	r3, [pc, #136]	; (8020720 <MX_USART2_UART_Init+0x94>)
 8020698:	2296      	movs	r2, #150	; 0x96
 802069a:	0192      	lsls	r2, r2, #6
 802069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 802069e:	4b20      	ldr	r3, [pc, #128]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206a0:	2200      	movs	r2, #0
 80206a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80206a4:	4b1e      	ldr	r3, [pc, #120]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206a6:	2200      	movs	r2, #0
 80206a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80206aa:	4b1d      	ldr	r3, [pc, #116]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206ac:	22c0      	movs	r2, #192	; 0xc0
 80206ae:	00d2      	lsls	r2, r2, #3
 80206b0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80206b2:	4b1b      	ldr	r3, [pc, #108]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206b4:	220c      	movs	r2, #12
 80206b6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80206b8:	4b19      	ldr	r3, [pc, #100]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206ba:	2200      	movs	r2, #0
 80206bc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80206be:	4b18      	ldr	r3, [pc, #96]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206c0:	2200      	movs	r2, #0
 80206c2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80206c4:	4b16      	ldr	r3, [pc, #88]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206c6:	2200      	movs	r2, #0
 80206c8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80206ca:	4b15      	ldr	r3, [pc, #84]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206cc:	2200      	movs	r2, #0
 80206ce:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80206d0:	4b13      	ldr	r3, [pc, #76]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206d2:	2200      	movs	r2, #0
 80206d4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80206d6:	4b12      	ldr	r3, [pc, #72]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206d8:	0018      	movs	r0, r3
 80206da:	f001 f89b 	bl	8021814 <HAL_UART_Init>
 80206de:	1e03      	subs	r3, r0, #0
 80206e0:	d001      	beq.n	80206e6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80206e2:	f000 f829 	bl	8020738 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80206e6:	4b0e      	ldr	r3, [pc, #56]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206e8:	2100      	movs	r1, #0
 80206ea:	0018      	movs	r0, r3
 80206ec:	f002 fa50 	bl	8022b90 <HAL_UARTEx_SetTxFifoThreshold>
 80206f0:	1e03      	subs	r3, r0, #0
 80206f2:	d001      	beq.n	80206f8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80206f4:	f000 f820 	bl	8020738 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80206f8:	4b09      	ldr	r3, [pc, #36]	; (8020720 <MX_USART2_UART_Init+0x94>)
 80206fa:	2100      	movs	r1, #0
 80206fc:	0018      	movs	r0, r3
 80206fe:	f002 fa87 	bl	8022c10 <HAL_UARTEx_SetRxFifoThreshold>
 8020702:	1e03      	subs	r3, r0, #0
 8020704:	d001      	beq.n	802070a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8020706:	f000 f817 	bl	8020738 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 802070a:	4b05      	ldr	r3, [pc, #20]	; (8020720 <MX_USART2_UART_Init+0x94>)
 802070c:	0018      	movs	r0, r3
 802070e:	f002 fa05 	bl	8022b1c <HAL_UARTEx_DisableFifoMode>
 8020712:	1e03      	subs	r3, r0, #0
 8020714:	d001      	beq.n	802071a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8020716:	f000 f80f 	bl	8020738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 802071a:	46c0      	nop			; (mov r8, r8)
 802071c:	46bd      	mov	sp, r7
 802071e:	bd80      	pop	{r7, pc}
 8020720:	20008038 	.word	0x20008038
 8020724:	40004400 	.word	0x40004400

08020728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020728:	b580      	push	{r7, lr}
 802072a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802072c:	2001      	movs	r0, #1
 802072e:	f7ff ff7c 	bl	802062a <LL_C2_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8020732:	46c0      	nop			; (mov r8, r8)
 8020734:	46bd      	mov	sp, r7
 8020736:	bd80      	pop	{r7, pc}

08020738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020738:	b580      	push	{r7, lr}
 802073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802073c:	b672      	cpsid	i
}
 802073e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020740:	e7fe      	b.n	8020740 <Error_Handler+0x8>

08020742 <LL_C2_AHB2_GRP1_EnableClock>:
{
 8020742:	b580      	push	{r7, lr}
 8020744:	b084      	sub	sp, #16
 8020746:	af00      	add	r7, sp, #0
 8020748:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 802074a:	23b0      	movs	r3, #176	; 0xb0
 802074c:	05da      	lsls	r2, r3, #23
 802074e:	23a6      	movs	r3, #166	; 0xa6
 8020750:	005b      	lsls	r3, r3, #1
 8020752:	58d1      	ldr	r1, [r2, r3]
 8020754:	23b0      	movs	r3, #176	; 0xb0
 8020756:	05da      	lsls	r2, r3, #23
 8020758:	687b      	ldr	r3, [r7, #4]
 802075a:	4319      	orrs	r1, r3
 802075c:	23a6      	movs	r3, #166	; 0xa6
 802075e:	005b      	lsls	r3, r3, #1
 8020760:	50d1      	str	r1, [r2, r3]
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8020762:	23b0      	movs	r3, #176	; 0xb0
 8020764:	05da      	lsls	r2, r3, #23
 8020766:	23a6      	movs	r3, #166	; 0xa6
 8020768:	005b      	lsls	r3, r3, #1
 802076a:	58d3      	ldr	r3, [r2, r3]
 802076c:	687a      	ldr	r2, [r7, #4]
 802076e:	4013      	ands	r3, r2
 8020770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8020772:	68fb      	ldr	r3, [r7, #12]
}
 8020774:	46c0      	nop			; (mov r8, r8)
 8020776:	46bd      	mov	sp, r7
 8020778:	b004      	add	sp, #16
 802077a:	bd80      	pop	{r7, pc}

0802077c <LL_C2_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_C2_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_C2_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 802077c:	b580      	push	{r7, lr}
 802077e:	b084      	sub	sp, #16
 8020780:	af00      	add	r7, sp, #0
 8020782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2APB1ENR1, Periphs);
 8020784:	23b0      	movs	r3, #176	; 0xb0
 8020786:	05da      	lsls	r2, r3, #23
 8020788:	23ac      	movs	r3, #172	; 0xac
 802078a:	005b      	lsls	r3, r3, #1
 802078c:	58d1      	ldr	r1, [r2, r3]
 802078e:	23b0      	movs	r3, #176	; 0xb0
 8020790:	05da      	lsls	r2, r3, #23
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	4319      	orrs	r1, r3
 8020796:	23ac      	movs	r3, #172	; 0xac
 8020798:	005b      	lsls	r3, r3, #1
 802079a:	50d1      	str	r1, [r2, r3]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2APB1ENR1, Periphs);
 802079c:	23b0      	movs	r3, #176	; 0xb0
 802079e:	05da      	lsls	r2, r3, #23
 80207a0:	23ac      	movs	r3, #172	; 0xac
 80207a2:	005b      	lsls	r3, r3, #1
 80207a4:	58d3      	ldr	r3, [r2, r3]
 80207a6:	687a      	ldr	r2, [r7, #4]
 80207a8:	4013      	ands	r3, r2
 80207aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80207ac:	68fb      	ldr	r3, [r7, #12]
}
 80207ae:	46c0      	nop			; (mov r8, r8)
 80207b0:	46bd      	mov	sp, r7
 80207b2:	b004      	add	sp, #16
 80207b4:	bd80      	pop	{r7, pc}

080207b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80207b6:	b580      	push	{r7, lr}
 80207b8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80207ba:	46c0      	nop			; (mov r8, r8)
 80207bc:	46bd      	mov	sp, r7
 80207be:	bd80      	pop	{r7, pc}

080207c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80207c0:	b590      	push	{r4, r7, lr}
 80207c2:	b097      	sub	sp, #92	; 0x5c
 80207c4:	af00      	add	r7, sp, #0
 80207c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80207c8:	2344      	movs	r3, #68	; 0x44
 80207ca:	18fb      	adds	r3, r7, r3
 80207cc:	0018      	movs	r0, r3
 80207ce:	2314      	movs	r3, #20
 80207d0:	001a      	movs	r2, r3
 80207d2:	2100      	movs	r1, #0
 80207d4:	f002 fae0 	bl	8022d98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80207d8:	240c      	movs	r4, #12
 80207da:	193b      	adds	r3, r7, r4
 80207dc:	0018      	movs	r0, r3
 80207de:	2338      	movs	r3, #56	; 0x38
 80207e0:	001a      	movs	r2, r3
 80207e2:	2100      	movs	r1, #0
 80207e4:	f002 fad8 	bl	8022d98 <memset>
  if(huart->Instance==USART2)
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	681b      	ldr	r3, [r3, #0]
 80207ec:	4a1e      	ldr	r2, [pc, #120]	; (8020868 <HAL_UART_MspInit+0xa8>)
 80207ee:	4293      	cmp	r3, r2
 80207f0:	d135      	bne.n	802085e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80207f2:	193b      	adds	r3, r7, r4
 80207f4:	2202      	movs	r2, #2
 80207f6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80207f8:	193b      	adds	r3, r7, r4
 80207fa:	22c0      	movs	r2, #192	; 0xc0
 80207fc:	0312      	lsls	r2, r2, #12
 80207fe:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020800:	193b      	adds	r3, r7, r4
 8020802:	0018      	movs	r0, r3
 8020804:	f000 feb0 	bl	8021568 <HAL_RCCEx_PeriphCLKConfig>
 8020808:	1e03      	subs	r3, r0, #0
 802080a:	d001      	beq.n	8020810 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 802080c:	f7ff ff94 	bl	8020738 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8020810:	2380      	movs	r3, #128	; 0x80
 8020812:	029b      	lsls	r3, r3, #10
 8020814:	0018      	movs	r0, r3
 8020816:	f7ff ffb1 	bl	802077c <LL_C2_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802081a:	2001      	movs	r0, #1
 802081c:	f7ff ff91 	bl	8020742 <LL_C2_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8020820:	2144      	movs	r1, #68	; 0x44
 8020822:	187b      	adds	r3, r7, r1
 8020824:	220c      	movs	r2, #12
 8020826:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020828:	187b      	adds	r3, r7, r1
 802082a:	2202      	movs	r2, #2
 802082c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802082e:	187b      	adds	r3, r7, r1
 8020830:	2200      	movs	r2, #0
 8020832:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020834:	187b      	adds	r3, r7, r1
 8020836:	2200      	movs	r2, #0
 8020838:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 802083a:	187b      	adds	r3, r7, r1
 802083c:	2207      	movs	r2, #7
 802083e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020840:	187a      	adds	r2, r7, r1
 8020842:	2390      	movs	r3, #144	; 0x90
 8020844:	05db      	lsls	r3, r3, #23
 8020846:	0011      	movs	r1, r2
 8020848:	0018      	movs	r0, r3
 802084a:	f000 fa85 	bl	8020d58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 802084e:	2200      	movs	r2, #0
 8020850:	2100      	movs	r1, #0
 8020852:	201c      	movs	r0, #28
 8020854:	f000 f986 	bl	8020b64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8020858:	201c      	movs	r0, #28
 802085a:	f000 f998 	bl	8020b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 802085e:	46c0      	nop			; (mov r8, r8)
 8020860:	46bd      	mov	sp, r7
 8020862:	b017      	add	sp, #92	; 0x5c
 8020864:	bd90      	pop	{r4, r7, pc}
 8020866:	46c0      	nop			; (mov r8, r8)
 8020868:	40004400 	.word	0x40004400

0802086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 802086c:	b580      	push	{r7, lr}
 802086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8020870:	e7fe      	b.n	8020870 <NMI_Handler+0x4>

08020872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020872:	b580      	push	{r7, lr}
 8020874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020876:	e7fe      	b.n	8020876 <HardFault_Handler+0x4>

08020878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020878:	b580      	push	{r7, lr}
 802087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 802087c:	46c0      	nop			; (mov r8, r8)
 802087e:	46bd      	mov	sp, r7
 8020880:	bd80      	pop	{r7, pc}

08020882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020882:	b580      	push	{r7, lr}
 8020884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020886:	46c0      	nop			; (mov r8, r8)
 8020888:	46bd      	mov	sp, r7
 802088a:	bd80      	pop	{r7, pc}

0802088c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802088c:	b580      	push	{r7, lr}
 802088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8020890:	f000 f8a0 	bl	80209d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8020894:	46c0      	nop			; (mov r8, r8)
 8020896:	46bd      	mov	sp, r7
 8020898:	bd80      	pop	{r7, pc}
	...

0802089c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 802089c:	b580      	push	{r7, lr}
 802089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80208a0:	4b03      	ldr	r3, [pc, #12]	; (80208b0 <USART2_IRQHandler+0x14>)
 80208a2:	0018      	movs	r0, r3
 80208a4:	f001 f8a8 	bl	80219f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80208a8:	46c0      	nop			; (mov r8, r8)
 80208aa:	46bd      	mov	sp, r7
 80208ac:	bd80      	pop	{r7, pc}
 80208ae:	46c0      	nop			; (mov r8, r8)
 80208b0:	20008038 	.word	0x20008038

080208b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80208b4:	480d      	ldr	r0, [pc, #52]	; (80208ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80208b6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80208b8:	f7ff feb2 	bl	8020620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80208bc:	480c      	ldr	r0, [pc, #48]	; (80208f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80208be:	490d      	ldr	r1, [pc, #52]	; (80208f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80208c0:	4a0d      	ldr	r2, [pc, #52]	; (80208f8 <LoopForever+0xe>)
  movs r3, #0
 80208c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80208c4:	e002      	b.n	80208cc <LoopCopyDataInit>

080208c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80208c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80208c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80208ca:	3304      	adds	r3, #4

080208cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80208cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80208ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80208d0:	d3f9      	bcc.n	80208c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80208d2:	4a0a      	ldr	r2, [pc, #40]	; (80208fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80208d4:	4c0a      	ldr	r4, [pc, #40]	; (8020900 <LoopForever+0x16>)
  movs r3, #0
 80208d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80208d8:	e001      	b.n	80208de <LoopFillZerobss>

080208da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80208da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80208dc:	3204      	adds	r2, #4

080208de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80208de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80208e0:	d3fb      	bcc.n	80208da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80208e2:	f002 fa35 	bl	8022d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80208e6:	f7ff febd 	bl	8020664 <main>

080208ea <LoopForever>:

LoopForever:
    b LoopForever
 80208ea:	e7fe      	b.n	80208ea <LoopForever>
  ldr   r0, =_estack
 80208ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80208f0:	20008000 	.word	0x20008000
  ldr r1, =_edata
 80208f4:	2000801c 	.word	0x2000801c
  ldr r2, =_sidata
 80208f8:	08022ee0 	.word	0x08022ee0
  ldr r2, =_sbss
 80208fc:	2000801c 	.word	0x2000801c
  ldr r4, =_ebss
 8020900:	200080d0 	.word	0x200080d0

08020904 <ADC_COMP_DAC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8020904:	e7fe      	b.n	8020904 <ADC_COMP_DAC_IRQHandler>
	...

08020908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020908:	b580      	push	{r7, lr}
 802090a:	b082      	sub	sp, #8
 802090c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 802090e:	1dfb      	adds	r3, r7, #7
 8020910:	2200      	movs	r2, #0
 8020912:	701a      	strb	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
#endif

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
 8020914:	f000 fce4 	bl	80212e0 <HAL_RCC_GetHCLK2Freq>
 8020918:	0002      	movs	r2, r0
 802091a:	4b09      	ldr	r3, [pc, #36]	; (8020940 <HAL_Init+0x38>)
 802091c:	601a      	str	r2, [r3, #0]
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 802091e:	2000      	movs	r0, #0
 8020920:	f000 f810 	bl	8020944 <HAL_InitTick>
 8020924:	1e03      	subs	r3, r0, #0
 8020926:	d003      	beq.n	8020930 <HAL_Init+0x28>
  {
    status = HAL_ERROR;
 8020928:	1dfb      	adds	r3, r7, #7
 802092a:	2201      	movs	r2, #1
 802092c:	701a      	strb	r2, [r3, #0]
 802092e:	e001      	b.n	8020934 <HAL_Init+0x2c>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020930:	f7ff ff41 	bl	80207b6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020934:	1dfb      	adds	r3, r7, #7
 8020936:	781b      	ldrb	r3, [r3, #0]
}
 8020938:	0018      	movs	r0, r3
 802093a:	46bd      	mov	sp, r7
 802093c:	b002      	add	sp, #8
 802093e:	bd80      	pop	{r7, pc}
 8020940:	20008000 	.word	0x20008000

08020944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020944:	b590      	push	{r4, r7, lr}
 8020946:	b085      	sub	sp, #20
 8020948:	af00      	add	r7, sp, #0
 802094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 802094c:	230f      	movs	r3, #15
 802094e:	18fb      	adds	r3, r7, r3
 8020950:	2200      	movs	r2, #0
 8020952:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8020954:	4b1d      	ldr	r3, [pc, #116]	; (80209cc <HAL_InitTick+0x88>)
 8020956:	781b      	ldrb	r3, [r3, #0]
 8020958:	2b00      	cmp	r3, #0
 802095a:	d02c      	beq.n	80209b6 <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 802095c:	f000 fcc0 	bl	80212e0 <HAL_RCC_GetHCLK2Freq>
 8020960:	0004      	movs	r4, r0
 8020962:	4b1a      	ldr	r3, [pc, #104]	; (80209cc <HAL_InitTick+0x88>)
 8020964:	781b      	ldrb	r3, [r3, #0]
 8020966:	0019      	movs	r1, r3
 8020968:	23fa      	movs	r3, #250	; 0xfa
 802096a:	0098      	lsls	r0, r3, #2
 802096c:	f7ff fbcc 	bl	8020108 <__udivsi3>
 8020970:	0003      	movs	r3, r0
 8020972:	0019      	movs	r1, r3
 8020974:	0020      	movs	r0, r4
 8020976:	f7ff fbc7 	bl	8020108 <__udivsi3>
 802097a:	0003      	movs	r3, r0
 802097c:	0018      	movs	r0, r3
 802097e:	f000 f916 	bl	8020bae <HAL_SYSTICK_Config>
 8020982:	1e03      	subs	r3, r0, #0
 8020984:	d112      	bne.n	80209ac <HAL_InitTick+0x68>
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020986:	687b      	ldr	r3, [r7, #4]
 8020988:	2b03      	cmp	r3, #3
 802098a:	d80a      	bhi.n	80209a2 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802098c:	6879      	ldr	r1, [r7, #4]
 802098e:	2301      	movs	r3, #1
 8020990:	425b      	negs	r3, r3
 8020992:	2200      	movs	r2, #0
 8020994:	0018      	movs	r0, r3
 8020996:	f000 f8e5 	bl	8020b64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 802099a:	4b0d      	ldr	r3, [pc, #52]	; (80209d0 <HAL_InitTick+0x8c>)
 802099c:	687a      	ldr	r2, [r7, #4]
 802099e:	601a      	str	r2, [r3, #0]
 80209a0:	e00d      	b.n	80209be <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
 80209a2:	230f      	movs	r3, #15
 80209a4:	18fb      	adds	r3, r7, r3
 80209a6:	2201      	movs	r2, #1
 80209a8:	701a      	strb	r2, [r3, #0]
 80209aa:	e008      	b.n	80209be <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
 80209ac:	230f      	movs	r3, #15
 80209ae:	18fb      	adds	r3, r7, r3
 80209b0:	2201      	movs	r2, #1
 80209b2:	701a      	strb	r2, [r3, #0]
 80209b4:	e003      	b.n	80209be <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80209b6:	230f      	movs	r3, #15
 80209b8:	18fb      	adds	r3, r7, r3
 80209ba:	2201      	movs	r2, #1
 80209bc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80209be:	230f      	movs	r3, #15
 80209c0:	18fb      	adds	r3, r7, r3
 80209c2:	781b      	ldrb	r3, [r3, #0]
}
 80209c4:	0018      	movs	r0, r3
 80209c6:	46bd      	mov	sp, r7
 80209c8:	b005      	add	sp, #20
 80209ca:	bd90      	pop	{r4, r7, pc}
 80209cc:	20008018 	.word	0x20008018
 80209d0:	20008014 	.word	0x20008014

080209d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80209d4:	b580      	push	{r7, lr}
 80209d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80209d8:	4b05      	ldr	r3, [pc, #20]	; (80209f0 <HAL_IncTick+0x1c>)
 80209da:	781b      	ldrb	r3, [r3, #0]
 80209dc:	001a      	movs	r2, r3
 80209de:	4b05      	ldr	r3, [pc, #20]	; (80209f4 <HAL_IncTick+0x20>)
 80209e0:	681b      	ldr	r3, [r3, #0]
 80209e2:	18d2      	adds	r2, r2, r3
 80209e4:	4b03      	ldr	r3, [pc, #12]	; (80209f4 <HAL_IncTick+0x20>)
 80209e6:	601a      	str	r2, [r3, #0]
}
 80209e8:	46c0      	nop			; (mov r8, r8)
 80209ea:	46bd      	mov	sp, r7
 80209ec:	bd80      	pop	{r7, pc}
 80209ee:	46c0      	nop			; (mov r8, r8)
 80209f0:	20008018 	.word	0x20008018
 80209f4:	200080cc 	.word	0x200080cc

080209f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80209f8:	b580      	push	{r7, lr}
 80209fa:	af00      	add	r7, sp, #0
  return uwTick;
 80209fc:	4b02      	ldr	r3, [pc, #8]	; (8020a08 <HAL_GetTick+0x10>)
 80209fe:	681b      	ldr	r3, [r3, #0]
}
 8020a00:	0018      	movs	r0, r3
 8020a02:	46bd      	mov	sp, r7
 8020a04:	bd80      	pop	{r7, pc}
 8020a06:	46c0      	nop			; (mov r8, r8)
 8020a08:	200080cc 	.word	0x200080cc

08020a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020a0c:	b580      	push	{r7, lr}
 8020a0e:	b082      	sub	sp, #8
 8020a10:	af00      	add	r7, sp, #0
 8020a12:	0002      	movs	r2, r0
 8020a14:	1dfb      	adds	r3, r7, #7
 8020a16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8020a18:	1dfb      	adds	r3, r7, #7
 8020a1a:	781b      	ldrb	r3, [r3, #0]
 8020a1c:	2b7f      	cmp	r3, #127	; 0x7f
 8020a1e:	d809      	bhi.n	8020a34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020a20:	1dfb      	adds	r3, r7, #7
 8020a22:	781b      	ldrb	r3, [r3, #0]
 8020a24:	001a      	movs	r2, r3
 8020a26:	231f      	movs	r3, #31
 8020a28:	401a      	ands	r2, r3
 8020a2a:	4b04      	ldr	r3, [pc, #16]	; (8020a3c <__NVIC_EnableIRQ+0x30>)
 8020a2c:	2101      	movs	r1, #1
 8020a2e:	4091      	lsls	r1, r2
 8020a30:	000a      	movs	r2, r1
 8020a32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8020a34:	46c0      	nop			; (mov r8, r8)
 8020a36:	46bd      	mov	sp, r7
 8020a38:	b002      	add	sp, #8
 8020a3a:	bd80      	pop	{r7, pc}
 8020a3c:	e000e100 	.word	0xe000e100

08020a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020a40:	b590      	push	{r4, r7, lr}
 8020a42:	b083      	sub	sp, #12
 8020a44:	af00      	add	r7, sp, #0
 8020a46:	0002      	movs	r2, r0
 8020a48:	6039      	str	r1, [r7, #0]
 8020a4a:	1dfb      	adds	r3, r7, #7
 8020a4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8020a4e:	1dfb      	adds	r3, r7, #7
 8020a50:	781b      	ldrb	r3, [r3, #0]
 8020a52:	2b7f      	cmp	r3, #127	; 0x7f
 8020a54:	d828      	bhi.n	8020aa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020a56:	4a2f      	ldr	r2, [pc, #188]	; (8020b14 <__NVIC_SetPriority+0xd4>)
 8020a58:	1dfb      	adds	r3, r7, #7
 8020a5a:	781b      	ldrb	r3, [r3, #0]
 8020a5c:	b25b      	sxtb	r3, r3
 8020a5e:	089b      	lsrs	r3, r3, #2
 8020a60:	33c0      	adds	r3, #192	; 0xc0
 8020a62:	009b      	lsls	r3, r3, #2
 8020a64:	589b      	ldr	r3, [r3, r2]
 8020a66:	1dfa      	adds	r2, r7, #7
 8020a68:	7812      	ldrb	r2, [r2, #0]
 8020a6a:	0011      	movs	r1, r2
 8020a6c:	2203      	movs	r2, #3
 8020a6e:	400a      	ands	r2, r1
 8020a70:	00d2      	lsls	r2, r2, #3
 8020a72:	21ff      	movs	r1, #255	; 0xff
 8020a74:	4091      	lsls	r1, r2
 8020a76:	000a      	movs	r2, r1
 8020a78:	43d2      	mvns	r2, r2
 8020a7a:	401a      	ands	r2, r3
 8020a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8020a7e:	683b      	ldr	r3, [r7, #0]
 8020a80:	019b      	lsls	r3, r3, #6
 8020a82:	22ff      	movs	r2, #255	; 0xff
 8020a84:	401a      	ands	r2, r3
 8020a86:	1dfb      	adds	r3, r7, #7
 8020a88:	781b      	ldrb	r3, [r3, #0]
 8020a8a:	0018      	movs	r0, r3
 8020a8c:	2303      	movs	r3, #3
 8020a8e:	4003      	ands	r3, r0
 8020a90:	00db      	lsls	r3, r3, #3
 8020a92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020a94:	481f      	ldr	r0, [pc, #124]	; (8020b14 <__NVIC_SetPriority+0xd4>)
 8020a96:	1dfb      	adds	r3, r7, #7
 8020a98:	781b      	ldrb	r3, [r3, #0]
 8020a9a:	b25b      	sxtb	r3, r3
 8020a9c:	089b      	lsrs	r3, r3, #2
 8020a9e:	430a      	orrs	r2, r1
 8020aa0:	33c0      	adds	r3, #192	; 0xc0
 8020aa2:	009b      	lsls	r3, r3, #2
 8020aa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8020aa6:	e031      	b.n	8020b0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020aa8:	4a1b      	ldr	r2, [pc, #108]	; (8020b18 <__NVIC_SetPriority+0xd8>)
 8020aaa:	1dfb      	adds	r3, r7, #7
 8020aac:	781b      	ldrb	r3, [r3, #0]
 8020aae:	0019      	movs	r1, r3
 8020ab0:	230f      	movs	r3, #15
 8020ab2:	400b      	ands	r3, r1
 8020ab4:	3b08      	subs	r3, #8
 8020ab6:	089b      	lsrs	r3, r3, #2
 8020ab8:	3306      	adds	r3, #6
 8020aba:	009b      	lsls	r3, r3, #2
 8020abc:	18d3      	adds	r3, r2, r3
 8020abe:	3304      	adds	r3, #4
 8020ac0:	681b      	ldr	r3, [r3, #0]
 8020ac2:	1dfa      	adds	r2, r7, #7
 8020ac4:	7812      	ldrb	r2, [r2, #0]
 8020ac6:	0011      	movs	r1, r2
 8020ac8:	2203      	movs	r2, #3
 8020aca:	400a      	ands	r2, r1
 8020acc:	00d2      	lsls	r2, r2, #3
 8020ace:	21ff      	movs	r1, #255	; 0xff
 8020ad0:	4091      	lsls	r1, r2
 8020ad2:	000a      	movs	r2, r1
 8020ad4:	43d2      	mvns	r2, r2
 8020ad6:	401a      	ands	r2, r3
 8020ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8020ada:	683b      	ldr	r3, [r7, #0]
 8020adc:	019b      	lsls	r3, r3, #6
 8020ade:	22ff      	movs	r2, #255	; 0xff
 8020ae0:	401a      	ands	r2, r3
 8020ae2:	1dfb      	adds	r3, r7, #7
 8020ae4:	781b      	ldrb	r3, [r3, #0]
 8020ae6:	0018      	movs	r0, r3
 8020ae8:	2303      	movs	r3, #3
 8020aea:	4003      	ands	r3, r0
 8020aec:	00db      	lsls	r3, r3, #3
 8020aee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8020af0:	4809      	ldr	r0, [pc, #36]	; (8020b18 <__NVIC_SetPriority+0xd8>)
 8020af2:	1dfb      	adds	r3, r7, #7
 8020af4:	781b      	ldrb	r3, [r3, #0]
 8020af6:	001c      	movs	r4, r3
 8020af8:	230f      	movs	r3, #15
 8020afa:	4023      	ands	r3, r4
 8020afc:	3b08      	subs	r3, #8
 8020afe:	089b      	lsrs	r3, r3, #2
 8020b00:	430a      	orrs	r2, r1
 8020b02:	3306      	adds	r3, #6
 8020b04:	009b      	lsls	r3, r3, #2
 8020b06:	18c3      	adds	r3, r0, r3
 8020b08:	3304      	adds	r3, #4
 8020b0a:	601a      	str	r2, [r3, #0]
}
 8020b0c:	46c0      	nop			; (mov r8, r8)
 8020b0e:	46bd      	mov	sp, r7
 8020b10:	b003      	add	sp, #12
 8020b12:	bd90      	pop	{r4, r7, pc}
 8020b14:	e000e100 	.word	0xe000e100
 8020b18:	e000ed00 	.word	0xe000ed00

08020b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020b1c:	b580      	push	{r7, lr}
 8020b1e:	b082      	sub	sp, #8
 8020b20:	af00      	add	r7, sp, #0
 8020b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020b24:	687b      	ldr	r3, [r7, #4]
 8020b26:	1e5a      	subs	r2, r3, #1
 8020b28:	2380      	movs	r3, #128	; 0x80
 8020b2a:	045b      	lsls	r3, r3, #17
 8020b2c:	429a      	cmp	r2, r3
 8020b2e:	d301      	bcc.n	8020b34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020b30:	2301      	movs	r3, #1
 8020b32:	e010      	b.n	8020b56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020b34:	4b0a      	ldr	r3, [pc, #40]	; (8020b60 <SysTick_Config+0x44>)
 8020b36:	687a      	ldr	r2, [r7, #4]
 8020b38:	3a01      	subs	r2, #1
 8020b3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020b3c:	2301      	movs	r3, #1
 8020b3e:	425b      	negs	r3, r3
 8020b40:	2103      	movs	r1, #3
 8020b42:	0018      	movs	r0, r3
 8020b44:	f7ff ff7c 	bl	8020a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020b48:	4b05      	ldr	r3, [pc, #20]	; (8020b60 <SysTick_Config+0x44>)
 8020b4a:	2200      	movs	r2, #0
 8020b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020b4e:	4b04      	ldr	r3, [pc, #16]	; (8020b60 <SysTick_Config+0x44>)
 8020b50:	2207      	movs	r2, #7
 8020b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020b54:	2300      	movs	r3, #0
}
 8020b56:	0018      	movs	r0, r3
 8020b58:	46bd      	mov	sp, r7
 8020b5a:	b002      	add	sp, #8
 8020b5c:	bd80      	pop	{r7, pc}
 8020b5e:	46c0      	nop			; (mov r8, r8)
 8020b60:	e000e010 	.word	0xe000e010

08020b64 <HAL_NVIC_SetPriority>:
  *         with stm32wlxx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020b64:	b580      	push	{r7, lr}
 8020b66:	b084      	sub	sp, #16
 8020b68:	af00      	add	r7, sp, #0
 8020b6a:	60b9      	str	r1, [r7, #8]
 8020b6c:	607a      	str	r2, [r7, #4]
 8020b6e:	210f      	movs	r1, #15
 8020b70:	187b      	adds	r3, r7, r1
 8020b72:	1c02      	adds	r2, r0, #0
 8020b74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8020b76:	68ba      	ldr	r2, [r7, #8]
 8020b78:	187b      	adds	r3, r7, r1
 8020b7a:	781b      	ldrb	r3, [r3, #0]
 8020b7c:	b25b      	sxtb	r3, r3
 8020b7e:	0011      	movs	r1, r2
 8020b80:	0018      	movs	r0, r3
 8020b82:	f7ff ff5d 	bl	8020a40 <__NVIC_SetPriority>
}
 8020b86:	46c0      	nop			; (mov r8, r8)
 8020b88:	46bd      	mov	sp, r7
 8020b8a:	b004      	add	sp, #16
 8020b8c:	bd80      	pop	{r7, pc}

08020b8e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020b8e:	b580      	push	{r7, lr}
 8020b90:	b082      	sub	sp, #8
 8020b92:	af00      	add	r7, sp, #0
 8020b94:	0002      	movs	r2, r0
 8020b96:	1dfb      	adds	r3, r7, #7
 8020b98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8020b9a:	1dfb      	adds	r3, r7, #7
 8020b9c:	781b      	ldrb	r3, [r3, #0]
 8020b9e:	b25b      	sxtb	r3, r3
 8020ba0:	0018      	movs	r0, r3
 8020ba2:	f7ff ff33 	bl	8020a0c <__NVIC_EnableIRQ>
}
 8020ba6:	46c0      	nop			; (mov r8, r8)
 8020ba8:	46bd      	mov	sp, r7
 8020baa:	b002      	add	sp, #8
 8020bac:	bd80      	pop	{r7, pc}

08020bae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020bae:	b580      	push	{r7, lr}
 8020bb0:	b082      	sub	sp, #8
 8020bb2:	af00      	add	r7, sp, #0
 8020bb4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8020bb6:	687b      	ldr	r3, [r7, #4]
 8020bb8:	0018      	movs	r0, r3
 8020bba:	f7ff ffaf 	bl	8020b1c <SysTick_Config>
 8020bbe:	0003      	movs	r3, r0
}
 8020bc0:	0018      	movs	r0, r3
 8020bc2:	46bd      	mov	sp, r7
 8020bc4:	b002      	add	sp, #8
 8020bc6:	bd80      	pop	{r7, pc}

08020bc8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8020bc8:	b580      	push	{r7, lr}
 8020bca:	b082      	sub	sp, #8
 8020bcc:	af00      	add	r7, sp, #0
 8020bce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8020bd0:	687b      	ldr	r3, [r7, #4]
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d101      	bne.n	8020bda <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8020bd6:	2301      	movs	r3, #1
 8020bd8:	e04f      	b.n	8020c7a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8020bda:	687b      	ldr	r3, [r7, #4]
 8020bdc:	2225      	movs	r2, #37	; 0x25
 8020bde:	5c9b      	ldrb	r3, [r3, r2]
 8020be0:	b2db      	uxtb	r3, r3
 8020be2:	2b02      	cmp	r3, #2
 8020be4:	d008      	beq.n	8020bf8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	2204      	movs	r2, #4
 8020bea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	2224      	movs	r2, #36	; 0x24
 8020bf0:	2100      	movs	r1, #0
 8020bf2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8020bf4:	2301      	movs	r3, #1
 8020bf6:	e040      	b.n	8020c7a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8020bf8:	687b      	ldr	r3, [r7, #4]
 8020bfa:	681b      	ldr	r3, [r3, #0]
 8020bfc:	681a      	ldr	r2, [r3, #0]
 8020bfe:	687b      	ldr	r3, [r7, #4]
 8020c00:	681b      	ldr	r3, [r3, #0]
 8020c02:	210e      	movs	r1, #14
 8020c04:	438a      	bics	r2, r1
 8020c06:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020c0c:	681a      	ldr	r2, [r3, #0]
 8020c0e:	687b      	ldr	r3, [r7, #4]
 8020c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020c12:	491c      	ldr	r1, [pc, #112]	; (8020c84 <HAL_DMA_Abort+0xbc>)
 8020c14:	400a      	ands	r2, r1
 8020c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8020c18:	687b      	ldr	r3, [r7, #4]
 8020c1a:	681b      	ldr	r3, [r3, #0]
 8020c1c:	681a      	ldr	r2, [r3, #0]
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	2101      	movs	r1, #1
 8020c24:	438a      	bics	r2, r1
 8020c26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020c2c:	221c      	movs	r2, #28
 8020c2e:	401a      	ands	r2, r3
 8020c30:	687b      	ldr	r3, [r7, #4]
 8020c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c34:	2101      	movs	r1, #1
 8020c36:	4091      	lsls	r1, r2
 8020c38:	000a      	movs	r2, r1
 8020c3a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020c40:	687a      	ldr	r2, [r7, #4]
 8020c42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8020c44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8020c46:	687b      	ldr	r3, [r7, #4]
 8020c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020c4a:	2b00      	cmp	r3, #0
 8020c4c:	d00c      	beq.n	8020c68 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8020c4e:	687b      	ldr	r3, [r7, #4]
 8020c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020c52:	681a      	ldr	r2, [r3, #0]
 8020c54:	687b      	ldr	r3, [r7, #4]
 8020c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020c58:	490a      	ldr	r1, [pc, #40]	; (8020c84 <HAL_DMA_Abort+0xbc>)
 8020c5a:	400a      	ands	r2, r1
 8020c5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8020c5e:	687b      	ldr	r3, [r7, #4]
 8020c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020c62:	687a      	ldr	r2, [r7, #4]
 8020c64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8020c66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8020c68:	687b      	ldr	r3, [r7, #4]
 8020c6a:	2225      	movs	r2, #37	; 0x25
 8020c6c:	2101      	movs	r1, #1
 8020c6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	2224      	movs	r2, #36	; 0x24
 8020c74:	2100      	movs	r1, #0
 8020c76:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8020c78:	2300      	movs	r3, #0
}
 8020c7a:	0018      	movs	r0, r3
 8020c7c:	46bd      	mov	sp, r7
 8020c7e:	b002      	add	sp, #8
 8020c80:	bd80      	pop	{r7, pc}
 8020c82:	46c0      	nop			; (mov r8, r8)
 8020c84:	fffffeff 	.word	0xfffffeff

08020c88 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8020c88:	b580      	push	{r7, lr}
 8020c8a:	b084      	sub	sp, #16
 8020c8c:	af00      	add	r7, sp, #0
 8020c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8020c90:	210f      	movs	r1, #15
 8020c92:	187b      	adds	r3, r7, r1
 8020c94:	2200      	movs	r2, #0
 8020c96:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	2225      	movs	r2, #37	; 0x25
 8020c9c:	5c9b      	ldrb	r3, [r3, r2]
 8020c9e:	b2db      	uxtb	r3, r3
 8020ca0:	2b02      	cmp	r3, #2
 8020ca2:	d006      	beq.n	8020cb2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	2204      	movs	r2, #4
 8020ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8020caa:	187b      	adds	r3, r7, r1
 8020cac:	2201      	movs	r2, #1
 8020cae:	701a      	strb	r2, [r3, #0]
 8020cb0:	e048      	b.n	8020d44 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	681a      	ldr	r2, [r3, #0]
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	681b      	ldr	r3, [r3, #0]
 8020cbc:	210e      	movs	r1, #14
 8020cbe:	438a      	bics	r2, r1
 8020cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	681b      	ldr	r3, [r3, #0]
 8020cc6:	681a      	ldr	r2, [r3, #0]
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	681b      	ldr	r3, [r3, #0]
 8020ccc:	2101      	movs	r1, #1
 8020cce:	438a      	bics	r2, r1
 8020cd0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8020cd2:	687b      	ldr	r3, [r7, #4]
 8020cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020cd6:	681a      	ldr	r2, [r3, #0]
 8020cd8:	687b      	ldr	r3, [r7, #4]
 8020cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020cdc:	491d      	ldr	r1, [pc, #116]	; (8020d54 <HAL_DMA_Abort_IT+0xcc>)
 8020cde:	400a      	ands	r2, r1
 8020ce0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8020ce2:	687b      	ldr	r3, [r7, #4]
 8020ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020ce6:	221c      	movs	r2, #28
 8020ce8:	401a      	ands	r2, r3
 8020cea:	687b      	ldr	r3, [r7, #4]
 8020cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020cee:	2101      	movs	r1, #1
 8020cf0:	4091      	lsls	r1, r2
 8020cf2:	000a      	movs	r2, r1
 8020cf4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8020cf6:	687b      	ldr	r3, [r7, #4]
 8020cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8020cfa:	687a      	ldr	r2, [r7, #4]
 8020cfc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8020cfe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8020d00:	687b      	ldr	r3, [r7, #4]
 8020d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020d04:	2b00      	cmp	r3, #0
 8020d06:	d00c      	beq.n	8020d22 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8020d08:	687b      	ldr	r3, [r7, #4]
 8020d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020d0c:	681a      	ldr	r2, [r3, #0]
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020d12:	4910      	ldr	r1, [pc, #64]	; (8020d54 <HAL_DMA_Abort_IT+0xcc>)
 8020d14:	400a      	ands	r2, r1
 8020d16:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8020d18:	687b      	ldr	r3, [r7, #4]
 8020d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8020d1c:	687a      	ldr	r2, [r7, #4]
 8020d1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8020d20:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8020d22:	687b      	ldr	r3, [r7, #4]
 8020d24:	2225      	movs	r2, #37	; 0x25
 8020d26:	2101      	movs	r1, #1
 8020d28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020d2a:	687b      	ldr	r3, [r7, #4]
 8020d2c:	2224      	movs	r2, #36	; 0x24
 8020d2e:	2100      	movs	r1, #0
 8020d30:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8020d32:	687b      	ldr	r3, [r7, #4]
 8020d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d36:	2b00      	cmp	r3, #0
 8020d38:	d004      	beq.n	8020d44 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d3e:	687a      	ldr	r2, [r7, #4]
 8020d40:	0010      	movs	r0, r2
 8020d42:	4798      	blx	r3
    }
  }
  return status;
 8020d44:	230f      	movs	r3, #15
 8020d46:	18fb      	adds	r3, r7, r3
 8020d48:	781b      	ldrb	r3, [r3, #0]
}
 8020d4a:	0018      	movs	r0, r3
 8020d4c:	46bd      	mov	sp, r7
 8020d4e:	b004      	add	sp, #16
 8020d50:	bd80      	pop	{r7, pc}
 8020d52:	46c0      	nop			; (mov r8, r8)
 8020d54:	fffffeff 	.word	0xfffffeff

08020d58 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8020d58:	b580      	push	{r7, lr}
 8020d5a:	b086      	sub	sp, #24
 8020d5c:	af00      	add	r7, sp, #0
 8020d5e:	6078      	str	r0, [r7, #4]
 8020d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8020d62:	2300      	movs	r3, #0
 8020d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8020d66:	e141      	b.n	8020fec <HAL_GPIO_Init+0x294>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8020d68:	683b      	ldr	r3, [r7, #0]
 8020d6a:	681b      	ldr	r3, [r3, #0]
 8020d6c:	2101      	movs	r1, #1
 8020d6e:	697a      	ldr	r2, [r7, #20]
 8020d70:	4091      	lsls	r1, r2
 8020d72:	000a      	movs	r2, r1
 8020d74:	4013      	ands	r3, r2
 8020d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8020d78:	68fb      	ldr	r3, [r7, #12]
 8020d7a:	2b00      	cmp	r3, #0
 8020d7c:	d100      	bne.n	8020d80 <HAL_GPIO_Init+0x28>
 8020d7e:	e132      	b.n	8020fe6 <HAL_GPIO_Init+0x28e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8020d80:	683b      	ldr	r3, [r7, #0]
 8020d82:	685b      	ldr	r3, [r3, #4]
 8020d84:	2203      	movs	r2, #3
 8020d86:	4013      	ands	r3, r2
 8020d88:	2b01      	cmp	r3, #1
 8020d8a:	d005      	beq.n	8020d98 <HAL_GPIO_Init+0x40>
 8020d8c:	683b      	ldr	r3, [r7, #0]
 8020d8e:	685b      	ldr	r3, [r3, #4]
 8020d90:	2203      	movs	r2, #3
 8020d92:	4013      	ands	r3, r2
 8020d94:	2b02      	cmp	r3, #2
 8020d96:	d130      	bne.n	8020dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	689b      	ldr	r3, [r3, #8]
 8020d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8020d9e:	697b      	ldr	r3, [r7, #20]
 8020da0:	005b      	lsls	r3, r3, #1
 8020da2:	2203      	movs	r2, #3
 8020da4:	409a      	lsls	r2, r3
 8020da6:	0013      	movs	r3, r2
 8020da8:	43da      	mvns	r2, r3
 8020daa:	693b      	ldr	r3, [r7, #16]
 8020dac:	4013      	ands	r3, r2
 8020dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8020db0:	683b      	ldr	r3, [r7, #0]
 8020db2:	68da      	ldr	r2, [r3, #12]
 8020db4:	697b      	ldr	r3, [r7, #20]
 8020db6:	005b      	lsls	r3, r3, #1
 8020db8:	409a      	lsls	r2, r3
 8020dba:	0013      	movs	r3, r2
 8020dbc:	693a      	ldr	r2, [r7, #16]
 8020dbe:	4313      	orrs	r3, r2
 8020dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	693a      	ldr	r2, [r7, #16]
 8020dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8020dc8:	687b      	ldr	r3, [r7, #4]
 8020dca:	685b      	ldr	r3, [r3, #4]
 8020dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8020dce:	2201      	movs	r2, #1
 8020dd0:	697b      	ldr	r3, [r7, #20]
 8020dd2:	409a      	lsls	r2, r3
 8020dd4:	0013      	movs	r3, r2
 8020dd6:	43da      	mvns	r2, r3
 8020dd8:	693b      	ldr	r3, [r7, #16]
 8020dda:	4013      	ands	r3, r2
 8020ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8020dde:	683b      	ldr	r3, [r7, #0]
 8020de0:	685b      	ldr	r3, [r3, #4]
 8020de2:	091b      	lsrs	r3, r3, #4
 8020de4:	2201      	movs	r2, #1
 8020de6:	401a      	ands	r2, r3
 8020de8:	697b      	ldr	r3, [r7, #20]
 8020dea:	409a      	lsls	r2, r3
 8020dec:	0013      	movs	r3, r2
 8020dee:	693a      	ldr	r2, [r7, #16]
 8020df0:	4313      	orrs	r3, r2
 8020df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	693a      	ldr	r2, [r7, #16]
 8020df8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8020dfa:	683b      	ldr	r3, [r7, #0]
 8020dfc:	685b      	ldr	r3, [r3, #4]
 8020dfe:	2203      	movs	r2, #3
 8020e00:	4013      	ands	r3, r2
 8020e02:	2b03      	cmp	r3, #3
 8020e04:	d017      	beq.n	8020e36 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	68db      	ldr	r3, [r3, #12]
 8020e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8020e0c:	697b      	ldr	r3, [r7, #20]
 8020e0e:	005b      	lsls	r3, r3, #1
 8020e10:	2203      	movs	r2, #3
 8020e12:	409a      	lsls	r2, r3
 8020e14:	0013      	movs	r3, r2
 8020e16:	43da      	mvns	r2, r3
 8020e18:	693b      	ldr	r3, [r7, #16]
 8020e1a:	4013      	ands	r3, r2
 8020e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8020e1e:	683b      	ldr	r3, [r7, #0]
 8020e20:	689a      	ldr	r2, [r3, #8]
 8020e22:	697b      	ldr	r3, [r7, #20]
 8020e24:	005b      	lsls	r3, r3, #1
 8020e26:	409a      	lsls	r2, r3
 8020e28:	0013      	movs	r3, r2
 8020e2a:	693a      	ldr	r2, [r7, #16]
 8020e2c:	4313      	orrs	r3, r2
 8020e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	693a      	ldr	r2, [r7, #16]
 8020e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8020e36:	683b      	ldr	r3, [r7, #0]
 8020e38:	685b      	ldr	r3, [r3, #4]
 8020e3a:	2203      	movs	r2, #3
 8020e3c:	4013      	ands	r3, r2
 8020e3e:	2b02      	cmp	r3, #2
 8020e40:	d123      	bne.n	8020e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8020e42:	697b      	ldr	r3, [r7, #20]
 8020e44:	08da      	lsrs	r2, r3, #3
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	3208      	adds	r2, #8
 8020e4a:	0092      	lsls	r2, r2, #2
 8020e4c:	58d3      	ldr	r3, [r2, r3]
 8020e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8020e50:	697b      	ldr	r3, [r7, #20]
 8020e52:	2207      	movs	r2, #7
 8020e54:	4013      	ands	r3, r2
 8020e56:	009b      	lsls	r3, r3, #2
 8020e58:	220f      	movs	r2, #15
 8020e5a:	409a      	lsls	r2, r3
 8020e5c:	0013      	movs	r3, r2
 8020e5e:	43da      	mvns	r2, r3
 8020e60:	693b      	ldr	r3, [r7, #16]
 8020e62:	4013      	ands	r3, r2
 8020e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8020e66:	683b      	ldr	r3, [r7, #0]
 8020e68:	691a      	ldr	r2, [r3, #16]
 8020e6a:	697b      	ldr	r3, [r7, #20]
 8020e6c:	2107      	movs	r1, #7
 8020e6e:	400b      	ands	r3, r1
 8020e70:	009b      	lsls	r3, r3, #2
 8020e72:	409a      	lsls	r2, r3
 8020e74:	0013      	movs	r3, r2
 8020e76:	693a      	ldr	r2, [r7, #16]
 8020e78:	4313      	orrs	r3, r2
 8020e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8020e7c:	697b      	ldr	r3, [r7, #20]
 8020e7e:	08da      	lsrs	r2, r3, #3
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	3208      	adds	r2, #8
 8020e84:	0092      	lsls	r2, r2, #2
 8020e86:	6939      	ldr	r1, [r7, #16]
 8020e88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8020e8a:	687b      	ldr	r3, [r7, #4]
 8020e8c:	681b      	ldr	r3, [r3, #0]
 8020e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8020e90:	697b      	ldr	r3, [r7, #20]
 8020e92:	005b      	lsls	r3, r3, #1
 8020e94:	2203      	movs	r2, #3
 8020e96:	409a      	lsls	r2, r3
 8020e98:	0013      	movs	r3, r2
 8020e9a:	43da      	mvns	r2, r3
 8020e9c:	693b      	ldr	r3, [r7, #16]
 8020e9e:	4013      	ands	r3, r2
 8020ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8020ea2:	683b      	ldr	r3, [r7, #0]
 8020ea4:	685b      	ldr	r3, [r3, #4]
 8020ea6:	2203      	movs	r2, #3
 8020ea8:	401a      	ands	r2, r3
 8020eaa:	697b      	ldr	r3, [r7, #20]
 8020eac:	005b      	lsls	r3, r3, #1
 8020eae:	409a      	lsls	r2, r3
 8020eb0:	0013      	movs	r3, r2
 8020eb2:	693a      	ldr	r2, [r7, #16]
 8020eb4:	4313      	orrs	r3, r2
 8020eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	693a      	ldr	r2, [r7, #16]
 8020ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8020ebe:	683b      	ldr	r3, [r7, #0]
 8020ec0:	685a      	ldr	r2, [r3, #4]
 8020ec2:	23c0      	movs	r3, #192	; 0xc0
 8020ec4:	029b      	lsls	r3, r3, #10
 8020ec6:	4013      	ands	r3, r2
 8020ec8:	d100      	bne.n	8020ecc <HAL_GPIO_Init+0x174>
 8020eca:	e08c      	b.n	8020fe6 <HAL_GPIO_Init+0x28e>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8020ecc:	4a4d      	ldr	r2, [pc, #308]	; (8021004 <HAL_GPIO_Init+0x2ac>)
 8020ece:	697b      	ldr	r3, [r7, #20]
 8020ed0:	089b      	lsrs	r3, r3, #2
 8020ed2:	3302      	adds	r3, #2
 8020ed4:	009b      	lsls	r3, r3, #2
 8020ed6:	589b      	ldr	r3, [r3, r2]
 8020ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8020eda:	697b      	ldr	r3, [r7, #20]
 8020edc:	2203      	movs	r2, #3
 8020ede:	4013      	ands	r3, r2
 8020ee0:	009b      	lsls	r3, r3, #2
 8020ee2:	2207      	movs	r2, #7
 8020ee4:	409a      	lsls	r2, r3
 8020ee6:	0013      	movs	r3, r2
 8020ee8:	43da      	mvns	r2, r3
 8020eea:	693b      	ldr	r3, [r7, #16]
 8020eec:	4013      	ands	r3, r2
 8020eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8020ef0:	687a      	ldr	r2, [r7, #4]
 8020ef2:	2390      	movs	r3, #144	; 0x90
 8020ef4:	05db      	lsls	r3, r3, #23
 8020ef6:	429a      	cmp	r2, r3
 8020ef8:	d00d      	beq.n	8020f16 <HAL_GPIO_Init+0x1be>
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	4a42      	ldr	r2, [pc, #264]	; (8021008 <HAL_GPIO_Init+0x2b0>)
 8020efe:	4293      	cmp	r3, r2
 8020f00:	d007      	beq.n	8020f12 <HAL_GPIO_Init+0x1ba>
 8020f02:	687b      	ldr	r3, [r7, #4]
 8020f04:	4a41      	ldr	r2, [pc, #260]	; (802100c <HAL_GPIO_Init+0x2b4>)
 8020f06:	4293      	cmp	r3, r2
 8020f08:	d101      	bne.n	8020f0e <HAL_GPIO_Init+0x1b6>
 8020f0a:	2302      	movs	r3, #2
 8020f0c:	e004      	b.n	8020f18 <HAL_GPIO_Init+0x1c0>
 8020f0e:	2307      	movs	r3, #7
 8020f10:	e002      	b.n	8020f18 <HAL_GPIO_Init+0x1c0>
 8020f12:	2301      	movs	r3, #1
 8020f14:	e000      	b.n	8020f18 <HAL_GPIO_Init+0x1c0>
 8020f16:	2300      	movs	r3, #0
 8020f18:	697a      	ldr	r2, [r7, #20]
 8020f1a:	2103      	movs	r1, #3
 8020f1c:	400a      	ands	r2, r1
 8020f1e:	0092      	lsls	r2, r2, #2
 8020f20:	4093      	lsls	r3, r2
 8020f22:	693a      	ldr	r2, [r7, #16]
 8020f24:	4313      	orrs	r3, r2
 8020f26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8020f28:	4936      	ldr	r1, [pc, #216]	; (8021004 <HAL_GPIO_Init+0x2ac>)
 8020f2a:	697b      	ldr	r3, [r7, #20]
 8020f2c:	089b      	lsrs	r3, r3, #2
 8020f2e:	3302      	adds	r3, #2
 8020f30:	009b      	lsls	r3, r3, #2
 8020f32:	693a      	ldr	r2, [r7, #16]
 8020f34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8020f36:	4b36      	ldr	r3, [pc, #216]	; (8021010 <HAL_GPIO_Init+0x2b8>)
 8020f38:	681b      	ldr	r3, [r3, #0]
 8020f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020f3c:	68fb      	ldr	r3, [r7, #12]
 8020f3e:	43da      	mvns	r2, r3
 8020f40:	693b      	ldr	r3, [r7, #16]
 8020f42:	4013      	ands	r3, r2
 8020f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8020f46:	683b      	ldr	r3, [r7, #0]
 8020f48:	685a      	ldr	r2, [r3, #4]
 8020f4a:	2380      	movs	r3, #128	; 0x80
 8020f4c:	035b      	lsls	r3, r3, #13
 8020f4e:	4013      	ands	r3, r2
 8020f50:	d003      	beq.n	8020f5a <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8020f52:	693a      	ldr	r2, [r7, #16]
 8020f54:	68fb      	ldr	r3, [r7, #12]
 8020f56:	4313      	orrs	r3, r2
 8020f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8020f5a:	4b2d      	ldr	r3, [pc, #180]	; (8021010 <HAL_GPIO_Init+0x2b8>)
 8020f5c:	693a      	ldr	r2, [r7, #16]
 8020f5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8020f60:	4b2b      	ldr	r3, [pc, #172]	; (8021010 <HAL_GPIO_Init+0x2b8>)
 8020f62:	685b      	ldr	r3, [r3, #4]
 8020f64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8020f66:	68fb      	ldr	r3, [r7, #12]
 8020f68:	43da      	mvns	r2, r3
 8020f6a:	693b      	ldr	r3, [r7, #16]
 8020f6c:	4013      	ands	r3, r2
 8020f6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8020f70:	683b      	ldr	r3, [r7, #0]
 8020f72:	685a      	ldr	r2, [r3, #4]
 8020f74:	2380      	movs	r3, #128	; 0x80
 8020f76:	039b      	lsls	r3, r3, #14
 8020f78:	4013      	ands	r3, r2
 8020f7a:	d003      	beq.n	8020f84 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8020f7c:	693a      	ldr	r2, [r7, #16]
 8020f7e:	68fb      	ldr	r3, [r7, #12]
 8020f80:	4313      	orrs	r3, r2
 8020f82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8020f84:	4b22      	ldr	r3, [pc, #136]	; (8021010 <HAL_GPIO_Init+0x2b8>)
 8020f86:	693a      	ldr	r2, [r7, #16]
 8020f88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
 8020f8a:	4a21      	ldr	r2, [pc, #132]	; (8021010 <HAL_GPIO_Init+0x2b8>)
 8020f8c:	23c0      	movs	r3, #192	; 0xc0
 8020f8e:	58d3      	ldr	r3, [r2, r3]
 8020f90:	613b      	str	r3, [r7, #16]
#else
        temp = EXTI->IMR1;
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8020f92:	68fb      	ldr	r3, [r7, #12]
 8020f94:	43da      	mvns	r2, r3
 8020f96:	693b      	ldr	r3, [r7, #16]
 8020f98:	4013      	ands	r3, r2
 8020f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8020f9c:	683b      	ldr	r3, [r7, #0]
 8020f9e:	685a      	ldr	r2, [r3, #4]
 8020fa0:	2380      	movs	r3, #128	; 0x80
 8020fa2:	025b      	lsls	r3, r3, #9
 8020fa4:	4013      	ands	r3, r2
 8020fa6:	d003      	beq.n	8020fb0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8020fa8:	693a      	ldr	r2, [r7, #16]
 8020faa:	68fb      	ldr	r3, [r7, #12]
 8020fac:	4313      	orrs	r3, r2
 8020fae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
 8020fb0:	4917      	ldr	r1, [pc, #92]	; (8021010 <HAL_GPIO_Init+0x2b8>)
 8020fb2:	22c0      	movs	r2, #192	; 0xc0
 8020fb4:	693b      	ldr	r3, [r7, #16]
 8020fb6:	508b      	str	r3, [r1, r2]
#else
        EXTI->IMR1 = temp;
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
 8020fb8:	4a15      	ldr	r2, [pc, #84]	; (8021010 <HAL_GPIO_Init+0x2b8>)
 8020fba:	23c4      	movs	r3, #196	; 0xc4
 8020fbc:	58d3      	ldr	r3, [r2, r3]
 8020fbe:	613b      	str	r3, [r7, #16]
#else
        temp = EXTI->EMR1;
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8020fc0:	68fb      	ldr	r3, [r7, #12]
 8020fc2:	43da      	mvns	r2, r3
 8020fc4:	693b      	ldr	r3, [r7, #16]
 8020fc6:	4013      	ands	r3, r2
 8020fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8020fca:	683b      	ldr	r3, [r7, #0]
 8020fcc:	685a      	ldr	r2, [r3, #4]
 8020fce:	2380      	movs	r3, #128	; 0x80
 8020fd0:	029b      	lsls	r3, r3, #10
 8020fd2:	4013      	ands	r3, r2
 8020fd4:	d003      	beq.n	8020fde <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8020fd6:	693a      	ldr	r2, [r7, #16]
 8020fd8:	68fb      	ldr	r3, [r7, #12]
 8020fda:	4313      	orrs	r3, r2
 8020fdc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
 8020fde:	490c      	ldr	r1, [pc, #48]	; (8021010 <HAL_GPIO_Init+0x2b8>)
 8020fe0:	22c4      	movs	r2, #196	; 0xc4
 8020fe2:	693b      	ldr	r3, [r7, #16]
 8020fe4:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 = temp;
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8020fe6:	697b      	ldr	r3, [r7, #20]
 8020fe8:	3301      	adds	r3, #1
 8020fea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8020fec:	683b      	ldr	r3, [r7, #0]
 8020fee:	681a      	ldr	r2, [r3, #0]
 8020ff0:	697b      	ldr	r3, [r7, #20]
 8020ff2:	40da      	lsrs	r2, r3
 8020ff4:	1e13      	subs	r3, r2, #0
 8020ff6:	d000      	beq.n	8020ffa <HAL_GPIO_Init+0x2a2>
 8020ff8:	e6b6      	b.n	8020d68 <HAL_GPIO_Init+0x10>
  }
}
 8020ffa:	46c0      	nop			; (mov r8, r8)
 8020ffc:	46c0      	nop			; (mov r8, r8)
 8020ffe:	46bd      	mov	sp, r7
 8021000:	b006      	add	sp, #24
 8021002:	bd80      	pop	{r7, pc}
 8021004:	40010000 	.word	0x40010000
 8021008:	48000400 	.word	0x48000400
 802100c:	48000800 	.word	0x48000800
 8021010:	58000800 	.word	0x58000800

08021014 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8021014:	b580      	push	{r7, lr}
 8021016:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8021018:	4b04      	ldr	r3, [pc, #16]	; (802102c <HAL_PWR_EnableBkUpAccess+0x18>)
 802101a:	681a      	ldr	r2, [r3, #0]
 802101c:	4b03      	ldr	r3, [pc, #12]	; (802102c <HAL_PWR_EnableBkUpAccess+0x18>)
 802101e:	2180      	movs	r1, #128	; 0x80
 8021020:	0049      	lsls	r1, r1, #1
 8021022:	430a      	orrs	r2, r1
 8021024:	601a      	str	r2, [r3, #0]
}
 8021026:	46c0      	nop			; (mov r8, r8)
 8021028:	46bd      	mov	sp, r7
 802102a:	bd80      	pop	{r7, pc}
 802102c:	58000400 	.word	0x58000400

08021030 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8021030:	b580      	push	{r7, lr}
 8021032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8021034:	23b0      	movs	r3, #176	; 0xb0
 8021036:	05db      	lsls	r3, r3, #23
 8021038:	681a      	ldr	r2, [r3, #0]
 802103a:	2380      	movs	r3, #128	; 0x80
 802103c:	035b      	lsls	r3, r3, #13
 802103e:	401a      	ands	r2, r3
 8021040:	2380      	movs	r3, #128	; 0x80
 8021042:	035b      	lsls	r3, r3, #13
 8021044:	429a      	cmp	r2, r3
 8021046:	d101      	bne.n	802104c <LL_RCC_HSE_IsEnabledDiv2+0x1c>
 8021048:	2301      	movs	r3, #1
 802104a:	e000      	b.n	802104e <LL_RCC_HSE_IsEnabledDiv2+0x1e>
 802104c:	2300      	movs	r3, #0
}
 802104e:	0018      	movs	r0, r3
 8021050:	46bd      	mov	sp, r7
 8021052:	bd80      	pop	{r7, pc}

08021054 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8021054:	b580      	push	{r7, lr}
 8021056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8021058:	23b0      	movs	r3, #176	; 0xb0
 802105a:	05db      	lsls	r3, r3, #23
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	2208      	movs	r2, #8
 8021060:	4013      	ands	r3, r2
 8021062:	2b08      	cmp	r3, #8
 8021064:	d101      	bne.n	802106a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8021066:	2301      	movs	r3, #1
 8021068:	e000      	b.n	802106c <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 802106a:	2300      	movs	r3, #0
}
 802106c:	0018      	movs	r0, r3
 802106e:	46bd      	mov	sp, r7
 8021070:	bd80      	pop	{r7, pc}

08021072 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8021072:	b580      	push	{r7, lr}
 8021074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8021076:	23b0      	movs	r3, #176	; 0xb0
 8021078:	05db      	lsls	r3, r3, #23
 802107a:	681b      	ldr	r3, [r3, #0]
 802107c:	22f0      	movs	r2, #240	; 0xf0
 802107e:	4013      	ands	r3, r2
}
 8021080:	0018      	movs	r0, r3
 8021082:	46bd      	mov	sp, r7
 8021084:	bd80      	pop	{r7, pc}

08021086 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8021086:	b580      	push	{r7, lr}
 8021088:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 802108a:	23b0      	movs	r3, #176	; 0xb0
 802108c:	05db      	lsls	r3, r3, #23
 802108e:	2294      	movs	r2, #148	; 0x94
 8021090:	589a      	ldr	r2, [r3, r2]
 8021092:	23f0      	movs	r3, #240	; 0xf0
 8021094:	011b      	lsls	r3, r3, #4
 8021096:	4013      	ands	r3, r2
}
 8021098:	0018      	movs	r0, r3
 802109a:	46bd      	mov	sp, r7
 802109c:	bd80      	pop	{r7, pc}

0802109e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 802109e:	b580      	push	{r7, lr}
 80210a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80210a2:	23b0      	movs	r3, #176	; 0xb0
 80210a4:	05db      	lsls	r3, r3, #23
 80210a6:	689b      	ldr	r3, [r3, #8]
 80210a8:	220c      	movs	r2, #12
 80210aa:	4013      	ands	r3, r2
}
 80210ac:	0018      	movs	r0, r3
 80210ae:	46bd      	mov	sp, r7
 80210b0:	bd80      	pop	{r7, pc}

080210b2 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80210b2:	b580      	push	{r7, lr}
 80210b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80210b6:	23b0      	movs	r3, #176	; 0xb0
 80210b8:	05db      	lsls	r3, r3, #23
 80210ba:	689b      	ldr	r3, [r3, #8]
 80210bc:	22f0      	movs	r2, #240	; 0xf0
 80210be:	4013      	ands	r3, r2
}
 80210c0:	0018      	movs	r0, r3
 80210c2:	46bd      	mov	sp, r7
 80210c4:	bd80      	pop	{r7, pc}

080210c6 <LL_C2_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_C2_RCC_GetAHBPrescaler(void)
{
 80210c6:	b580      	push	{r7, lr}
 80210c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80210ca:	23b0      	movs	r3, #176	; 0xb0
 80210cc:	05da      	lsls	r2, r3, #23
 80210ce:	2384      	movs	r3, #132	; 0x84
 80210d0:	005b      	lsls	r3, r3, #1
 80210d2:	58d3      	ldr	r3, [r2, r3]
 80210d4:	22f0      	movs	r2, #240	; 0xf0
 80210d6:	4013      	ands	r3, r2
}
 80210d8:	0018      	movs	r0, r3
 80210da:	46bd      	mov	sp, r7
 80210dc:	bd80      	pop	{r7, pc}

080210de <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80210de:	b580      	push	{r7, lr}
 80210e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80210e2:	23b0      	movs	r3, #176	; 0xb0
 80210e4:	05db      	lsls	r3, r3, #23
 80210e6:	689a      	ldr	r2, [r3, #8]
 80210e8:	23e0      	movs	r3, #224	; 0xe0
 80210ea:	00db      	lsls	r3, r3, #3
 80210ec:	4013      	ands	r3, r2
}
 80210ee:	0018      	movs	r0, r3
 80210f0:	46bd      	mov	sp, r7
 80210f2:	bd80      	pop	{r7, pc}

080210f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80210f4:	b580      	push	{r7, lr}
 80210f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80210f8:	23b0      	movs	r3, #176	; 0xb0
 80210fa:	05db      	lsls	r3, r3, #23
 80210fc:	689a      	ldr	r2, [r3, #8]
 80210fe:	23e0      	movs	r3, #224	; 0xe0
 8021100:	019b      	lsls	r3, r3, #6
 8021102:	4013      	ands	r3, r2
}
 8021104:	0018      	movs	r0, r3
 8021106:	46bd      	mov	sp, r7
 8021108:	bd80      	pop	{r7, pc}

0802110a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 802110a:	b580      	push	{r7, lr}
 802110c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 802110e:	23b0      	movs	r3, #176	; 0xb0
 8021110:	05db      	lsls	r3, r3, #23
 8021112:	68db      	ldr	r3, [r3, #12]
 8021114:	0a1b      	lsrs	r3, r3, #8
 8021116:	227f      	movs	r2, #127	; 0x7f
 8021118:	4013      	ands	r3, r2
}
 802111a:	0018      	movs	r0, r3
 802111c:	46bd      	mov	sp, r7
 802111e:	bd80      	pop	{r7, pc}

08021120 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8021120:	b580      	push	{r7, lr}
 8021122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8021124:	23b0      	movs	r3, #176	; 0xb0
 8021126:	05db      	lsls	r3, r3, #23
 8021128:	68db      	ldr	r3, [r3, #12]
 802112a:	0f5b      	lsrs	r3, r3, #29
 802112c:	075b      	lsls	r3, r3, #29
}
 802112e:	0018      	movs	r0, r3
 8021130:	46bd      	mov	sp, r7
 8021132:	bd80      	pop	{r7, pc}

08021134 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8021134:	b580      	push	{r7, lr}
 8021136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8021138:	23b0      	movs	r3, #176	; 0xb0
 802113a:	05db      	lsls	r3, r3, #23
 802113c:	68db      	ldr	r3, [r3, #12]
 802113e:	2270      	movs	r2, #112	; 0x70
 8021140:	4013      	ands	r3, r2
}
 8021142:	0018      	movs	r0, r3
 8021144:	46bd      	mov	sp, r7
 8021146:	bd80      	pop	{r7, pc}

08021148 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8021148:	b580      	push	{r7, lr}
 802114a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 802114c:	23b0      	movs	r3, #176	; 0xb0
 802114e:	05db      	lsls	r3, r3, #23
 8021150:	68db      	ldr	r3, [r3, #12]
 8021152:	2203      	movs	r2, #3
 8021154:	4013      	ands	r3, r2
}
 8021156:	0018      	movs	r0, r3
 8021158:	46bd      	mov	sp, r7
 802115a:	bd80      	pop	{r7, pc}

0802115c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802115c:	b590      	push	{r4, r7, lr}
 802115e:	b087      	sub	sp, #28
 8021160:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8021162:	2300      	movs	r3, #0
 8021164:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8021166:	2300      	movs	r3, #0
 8021168:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 802116a:	f7ff ff98 	bl	802109e <LL_RCC_GetSysClkSource>
 802116e:	0003      	movs	r3, r0
 8021170:	60bb      	str	r3, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021172:	f7ff ffe9 	bl	8021148 <LL_RCC_PLL_GetMainSource>
 8021176:	0003      	movs	r3, r0
 8021178:	607b      	str	r3, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 802117a:	68bb      	ldr	r3, [r7, #8]
 802117c:	2b00      	cmp	r3, #0
 802117e:	d005      	beq.n	802118c <HAL_RCC_GetSysClockFreq+0x30>
 8021180:	68bb      	ldr	r3, [r7, #8]
 8021182:	2b0c      	cmp	r3, #12
 8021184:	d138      	bne.n	80211f8 <HAL_RCC_GetSysClockFreq+0x9c>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	2b01      	cmp	r3, #1
 802118a:	d135      	bne.n	80211f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 802118c:	f7ff ff62 	bl	8021054 <LL_RCC_MSI_IsEnabledRangeSelect>
 8021190:	1e03      	subs	r3, r0, #0
 8021192:	d115      	bne.n	80211c0 <HAL_RCC_GetSysClockFreq+0x64>
 8021194:	f7ff ff5e 	bl	8021054 <LL_RCC_MSI_IsEnabledRangeSelect>
 8021198:	0003      	movs	r3, r0
 802119a:	2b01      	cmp	r3, #1
 802119c:	d106      	bne.n	80211ac <HAL_RCC_GetSysClockFreq+0x50>
 802119e:	f7ff ff68 	bl	8021072 <LL_RCC_MSI_GetRange>
 80211a2:	0003      	movs	r3, r0
 80211a4:	0a1b      	lsrs	r3, r3, #8
 80211a6:	220f      	movs	r2, #15
 80211a8:	4013      	ands	r3, r2
 80211aa:	e005      	b.n	80211b8 <HAL_RCC_GetSysClockFreq+0x5c>
 80211ac:	f7ff ff6b 	bl	8021086 <LL_RCC_MSI_GetRangeAfterStandby>
 80211b0:	0003      	movs	r3, r0
 80211b2:	0a1b      	lsrs	r3, r3, #8
 80211b4:	220f      	movs	r2, #15
 80211b6:	4013      	ands	r3, r2
 80211b8:	4a3a      	ldr	r2, [pc, #232]	; (80212a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80211ba:	009b      	lsls	r3, r3, #2
 80211bc:	589b      	ldr	r3, [r3, r2]
 80211be:	e014      	b.n	80211ea <HAL_RCC_GetSysClockFreq+0x8e>
 80211c0:	f7ff ff48 	bl	8021054 <LL_RCC_MSI_IsEnabledRangeSelect>
 80211c4:	0003      	movs	r3, r0
 80211c6:	2b01      	cmp	r3, #1
 80211c8:	d106      	bne.n	80211d8 <HAL_RCC_GetSysClockFreq+0x7c>
 80211ca:	f7ff ff52 	bl	8021072 <LL_RCC_MSI_GetRange>
 80211ce:	0003      	movs	r3, r0
 80211d0:	091b      	lsrs	r3, r3, #4
 80211d2:	220f      	movs	r2, #15
 80211d4:	4013      	ands	r3, r2
 80211d6:	e005      	b.n	80211e4 <HAL_RCC_GetSysClockFreq+0x88>
 80211d8:	f7ff ff55 	bl	8021086 <LL_RCC_MSI_GetRangeAfterStandby>
 80211dc:	0003      	movs	r3, r0
 80211de:	091b      	lsrs	r3, r3, #4
 80211e0:	220f      	movs	r2, #15
 80211e2:	4013      	ands	r3, r2
 80211e4:	4a2f      	ldr	r2, [pc, #188]	; (80212a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80211e6:	009b      	lsls	r3, r3, #2
 80211e8:	589b      	ldr	r3, [r3, r2]
 80211ea:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80211ec:	68bb      	ldr	r3, [r7, #8]
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d115      	bne.n	802121e <HAL_RCC_GetSysClockFreq+0xc2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80211f2:	693b      	ldr	r3, [r7, #16]
 80211f4:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80211f6:	e012      	b.n	802121e <HAL_RCC_GetSysClockFreq+0xc2>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80211f8:	68bb      	ldr	r3, [r7, #8]
 80211fa:	2b04      	cmp	r3, #4
 80211fc:	d102      	bne.n	8021204 <HAL_RCC_GetSysClockFreq+0xa8>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80211fe:	4b2a      	ldr	r3, [pc, #168]	; (80212a8 <HAL_RCC_GetSysClockFreq+0x14c>)
 8021200:	617b      	str	r3, [r7, #20]
 8021202:	e00c      	b.n	802121e <HAL_RCC_GetSysClockFreq+0xc2>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8021204:	68bb      	ldr	r3, [r7, #8]
 8021206:	2b08      	cmp	r3, #8
 8021208:	d109      	bne.n	802121e <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 802120a:	f7ff ff11 	bl	8021030 <LL_RCC_HSE_IsEnabledDiv2>
 802120e:	0003      	movs	r3, r0
 8021210:	2b01      	cmp	r3, #1
 8021212:	d102      	bne.n	802121a <HAL_RCC_GetSysClockFreq+0xbe>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8021214:	4b24      	ldr	r3, [pc, #144]	; (80212a8 <HAL_RCC_GetSysClockFreq+0x14c>)
 8021216:	617b      	str	r3, [r7, #20]
 8021218:	e001      	b.n	802121e <HAL_RCC_GetSysClockFreq+0xc2>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 802121a:	4b24      	ldr	r3, [pc, #144]	; (80212ac <HAL_RCC_GetSysClockFreq+0x150>)
 802121c:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 802121e:	f7ff ff3e 	bl	802109e <LL_RCC_GetSysClkSource>
 8021222:	0003      	movs	r3, r0
 8021224:	2b0c      	cmp	r3, #12
 8021226:	d137      	bne.n	8021298 <HAL_RCC_GetSysClockFreq+0x13c>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8021228:	f7ff ff8e 	bl	8021148 <LL_RCC_PLL_GetMainSource>
 802122c:	0003      	movs	r3, r0
 802122e:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8021230:	687b      	ldr	r3, [r7, #4]
 8021232:	2b02      	cmp	r3, #2
 8021234:	d003      	beq.n	802123e <HAL_RCC_GetSysClockFreq+0xe2>
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	2b03      	cmp	r3, #3
 802123a:	d003      	beq.n	8021244 <HAL_RCC_GetSysClockFreq+0xe8>
 802123c:	e00d      	b.n	802125a <HAL_RCC_GetSysClockFreq+0xfe>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 802123e:	4b1a      	ldr	r3, [pc, #104]	; (80212a8 <HAL_RCC_GetSysClockFreq+0x14c>)
 8021240:	60fb      	str	r3, [r7, #12]
        break;
 8021242:	e00d      	b.n	8021260 <HAL_RCC_GetSysClockFreq+0x104>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8021244:	f7ff fef4 	bl	8021030 <LL_RCC_HSE_IsEnabledDiv2>
 8021248:	0003      	movs	r3, r0
 802124a:	2b01      	cmp	r3, #1
 802124c:	d102      	bne.n	8021254 <HAL_RCC_GetSysClockFreq+0xf8>
        {
          pllinputfreq = HSE_VALUE / 2U;
 802124e:	4b16      	ldr	r3, [pc, #88]	; (80212a8 <HAL_RCC_GetSysClockFreq+0x14c>)
 8021250:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8021252:	e005      	b.n	8021260 <HAL_RCC_GetSysClockFreq+0x104>
          pllinputfreq = HSE_VALUE;
 8021254:	4b15      	ldr	r3, [pc, #84]	; (80212ac <HAL_RCC_GetSysClockFreq+0x150>)
 8021256:	60fb      	str	r3, [r7, #12]
        break;
 8021258:	e002      	b.n	8021260 <HAL_RCC_GetSysClockFreq+0x104>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 802125a:	693b      	ldr	r3, [r7, #16]
 802125c:	60fb      	str	r3, [r7, #12]
        break;
 802125e:	46c0      	nop			; (mov r8, r8)
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8021260:	f7ff ff53 	bl	802110a <LL_RCC_PLL_GetN>
 8021264:	0002      	movs	r2, r0
 8021266:	68fb      	ldr	r3, [r7, #12]
 8021268:	4353      	muls	r3, r2
 802126a:	001c      	movs	r4, r3
 802126c:	f7ff ff62 	bl	8021134 <LL_RCC_PLL_GetDivider>
 8021270:	0003      	movs	r3, r0
 8021272:	091b      	lsrs	r3, r3, #4
 8021274:	3301      	adds	r3, #1
 8021276:	0019      	movs	r1, r3
 8021278:	0020      	movs	r0, r4
 802127a:	f7fe ff45 	bl	8020108 <__udivsi3>
 802127e:	0003      	movs	r3, r0
 8021280:	001c      	movs	r4, r3
 8021282:	f7ff ff4d 	bl	8021120 <LL_RCC_PLL_GetR>
 8021286:	0003      	movs	r3, r0
 8021288:	0f5b      	lsrs	r3, r3, #29
 802128a:	3301      	adds	r3, #1
 802128c:	0019      	movs	r1, r3
 802128e:	0020      	movs	r0, r4
 8021290:	f7fe ff3a 	bl	8020108 <__udivsi3>
 8021294:	0003      	movs	r3, r0
 8021296:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8021298:	697b      	ldr	r3, [r7, #20]
}
 802129a:	0018      	movs	r0, r3
 802129c:	46bd      	mov	sp, r7
 802129e:	b007      	add	sp, #28
 80212a0:	bd90      	pop	{r4, r7, pc}
 80212a2:	46c0      	nop			; (mov r8, r8)
 80212a4:	08022e20 	.word	0x08022e20
 80212a8:	00f42400 	.word	0x00f42400
 80212ac:	01e84800 	.word	0x01e84800

080212b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80212b0:	b5b0      	push	{r4, r5, r7, lr}
 80212b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80212b4:	f7ff ff52 	bl	802115c <HAL_RCC_GetSysClockFreq>
 80212b8:	0004      	movs	r4, r0
 80212ba:	f7ff fefa 	bl	80210b2 <LL_RCC_GetAHBPrescaler>
 80212be:	0003      	movs	r3, r0
 80212c0:	091b      	lsrs	r3, r3, #4
 80212c2:	220f      	movs	r2, #15
 80212c4:	401a      	ands	r2, r3
 80212c6:	4b05      	ldr	r3, [pc, #20]	; (80212dc <HAL_RCC_GetHCLKFreq+0x2c>)
 80212c8:	0092      	lsls	r2, r2, #2
 80212ca:	58d3      	ldr	r3, [r2, r3]
 80212cc:	0019      	movs	r1, r3
 80212ce:	0020      	movs	r0, r4
 80212d0:	f7fe ff1a 	bl	8020108 <__udivsi3>
 80212d4:	0003      	movs	r3, r0
}
 80212d6:	0018      	movs	r0, r3
 80212d8:	46bd      	mov	sp, r7
 80212da:	bdb0      	pop	{r4, r5, r7, pc}
 80212dc:	08022dc0 	.word	0x08022dc0

080212e0 <HAL_RCC_GetHCLK2Freq>:
/**
  * @brief  Return the HCLK2 frequency.
  * @retval HCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetHCLK2Freq(void)
{
 80212e0:	b5b0      	push	{r4, r5, r7, lr}
 80212e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK2 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK2_FREQ(HAL_RCC_GetSysClockFreq(), LL_C2_RCC_GetAHBPrescaler())));
 80212e4:	f7ff ff3a 	bl	802115c <HAL_RCC_GetSysClockFreq>
 80212e8:	0004      	movs	r4, r0
 80212ea:	f7ff feec 	bl	80210c6 <LL_C2_RCC_GetAHBPrescaler>
 80212ee:	0003      	movs	r3, r0
 80212f0:	091b      	lsrs	r3, r3, #4
 80212f2:	220f      	movs	r2, #15
 80212f4:	401a      	ands	r2, r3
 80212f6:	4b05      	ldr	r3, [pc, #20]	; (802130c <HAL_RCC_GetHCLK2Freq+0x2c>)
 80212f8:	0092      	lsls	r2, r2, #2
 80212fa:	58d3      	ldr	r3, [r2, r3]
 80212fc:	0019      	movs	r1, r3
 80212fe:	0020      	movs	r0, r4
 8021300:	f7fe ff02 	bl	8020108 <__udivsi3>
 8021304:	0003      	movs	r3, r0
}
 8021306:	0018      	movs	r0, r3
 8021308:	46bd      	mov	sp, r7
 802130a:	bdb0      	pop	{r4, r5, r7, pc}
 802130c:	08022dc0 	.word	0x08022dc0

08021310 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8021310:	b5b0      	push	{r4, r5, r7, lr}
 8021312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8021314:	f7ff ffcc 	bl	80212b0 <HAL_RCC_GetHCLKFreq>
 8021318:	0004      	movs	r4, r0
 802131a:	f7ff fee0 	bl	80210de <LL_RCC_GetAPB1Prescaler>
 802131e:	0003      	movs	r3, r0
 8021320:	0a1a      	lsrs	r2, r3, #8
 8021322:	4b04      	ldr	r3, [pc, #16]	; (8021334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8021324:	0092      	lsls	r2, r2, #2
 8021326:	58d3      	ldr	r3, [r2, r3]
 8021328:	40dc      	lsrs	r4, r3
 802132a:	0023      	movs	r3, r4
}
 802132c:	0018      	movs	r0, r3
 802132e:	46bd      	mov	sp, r7
 8021330:	bdb0      	pop	{r4, r5, r7, pc}
 8021332:	46c0      	nop			; (mov r8, r8)
 8021334:	08022e00 	.word	0x08022e00

08021338 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8021338:	b5b0      	push	{r4, r5, r7, lr}
 802133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 802133c:	f7ff ffb8 	bl	80212b0 <HAL_RCC_GetHCLKFreq>
 8021340:	0004      	movs	r4, r0
 8021342:	f7ff fed7 	bl	80210f4 <LL_RCC_GetAPB2Prescaler>
 8021346:	0003      	movs	r3, r0
 8021348:	0ada      	lsrs	r2, r3, #11
 802134a:	4b04      	ldr	r3, [pc, #16]	; (802135c <HAL_RCC_GetPCLK2Freq+0x24>)
 802134c:	0092      	lsls	r2, r2, #2
 802134e:	58d3      	ldr	r3, [r2, r3]
 8021350:	40dc      	lsrs	r4, r3
 8021352:	0023      	movs	r3, r4
}
 8021354:	0018      	movs	r0, r3
 8021356:	46bd      	mov	sp, r7
 8021358:	bdb0      	pop	{r4, r5, r7, pc}
 802135a:	46c0      	nop			; (mov r8, r8)
 802135c:	08022e00 	.word	0x08022e00

08021360 <LL_RCC_LSE_IsReady>:
{
 8021360:	b580      	push	{r7, lr}
 8021362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8021364:	23b0      	movs	r3, #176	; 0xb0
 8021366:	05db      	lsls	r3, r3, #23
 8021368:	2290      	movs	r2, #144	; 0x90
 802136a:	589b      	ldr	r3, [r3, r2]
 802136c:	2202      	movs	r2, #2
 802136e:	4013      	ands	r3, r2
 8021370:	2b02      	cmp	r3, #2
 8021372:	d101      	bne.n	8021378 <LL_RCC_LSE_IsReady+0x18>
 8021374:	2301      	movs	r3, #1
 8021376:	e000      	b.n	802137a <LL_RCC_LSE_IsReady+0x1a>
 8021378:	2300      	movs	r3, #0
}
 802137a:	0018      	movs	r0, r3
 802137c:	46bd      	mov	sp, r7
 802137e:	bd80      	pop	{r7, pc}

08021380 <LL_RCC_SetUSARTClockSource>:
{
 8021380:	b580      	push	{r7, lr}
 8021382:	b082      	sub	sp, #8
 8021384:	af00      	add	r7, sp, #0
 8021386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8021388:	23b0      	movs	r3, #176	; 0xb0
 802138a:	05db      	lsls	r3, r3, #23
 802138c:	2288      	movs	r2, #136	; 0x88
 802138e:	589b      	ldr	r3, [r3, r2]
 8021390:	687a      	ldr	r2, [r7, #4]
 8021392:	0c12      	lsrs	r2, r2, #16
 8021394:	43d2      	mvns	r2, r2
 8021396:	401a      	ands	r2, r3
 8021398:	0011      	movs	r1, r2
 802139a:	687b      	ldr	r3, [r7, #4]
 802139c:	041b      	lsls	r3, r3, #16
 802139e:	0c1a      	lsrs	r2, r3, #16
 80213a0:	23b0      	movs	r3, #176	; 0xb0
 80213a2:	05db      	lsls	r3, r3, #23
 80213a4:	430a      	orrs	r2, r1
 80213a6:	2188      	movs	r1, #136	; 0x88
 80213a8:	505a      	str	r2, [r3, r1]
}
 80213aa:	46c0      	nop			; (mov r8, r8)
 80213ac:	46bd      	mov	sp, r7
 80213ae:	b002      	add	sp, #8
 80213b0:	bd80      	pop	{r7, pc}
	...

080213b4 <LL_RCC_SetI2SClockSource>:
{
 80213b4:	b580      	push	{r7, lr}
 80213b6:	b082      	sub	sp, #8
 80213b8:	af00      	add	r7, sp, #0
 80213ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80213bc:	23b0      	movs	r3, #176	; 0xb0
 80213be:	05db      	lsls	r3, r3, #23
 80213c0:	2288      	movs	r2, #136	; 0x88
 80213c2:	589b      	ldr	r3, [r3, r2]
 80213c4:	4a06      	ldr	r2, [pc, #24]	; (80213e0 <LL_RCC_SetI2SClockSource+0x2c>)
 80213c6:	4013      	ands	r3, r2
 80213c8:	0019      	movs	r1, r3
 80213ca:	23b0      	movs	r3, #176	; 0xb0
 80213cc:	05db      	lsls	r3, r3, #23
 80213ce:	687a      	ldr	r2, [r7, #4]
 80213d0:	430a      	orrs	r2, r1
 80213d2:	2188      	movs	r1, #136	; 0x88
 80213d4:	505a      	str	r2, [r3, r1]
}
 80213d6:	46c0      	nop			; (mov r8, r8)
 80213d8:	46bd      	mov	sp, r7
 80213da:	b002      	add	sp, #8
 80213dc:	bd80      	pop	{r7, pc}
 80213de:	46c0      	nop			; (mov r8, r8)
 80213e0:	fffffcff 	.word	0xfffffcff

080213e4 <LL_RCC_SetLPUARTClockSource>:
{
 80213e4:	b580      	push	{r7, lr}
 80213e6:	b082      	sub	sp, #8
 80213e8:	af00      	add	r7, sp, #0
 80213ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80213ec:	23b0      	movs	r3, #176	; 0xb0
 80213ee:	05db      	lsls	r3, r3, #23
 80213f0:	2288      	movs	r2, #136	; 0x88
 80213f2:	589b      	ldr	r3, [r3, r2]
 80213f4:	4a06      	ldr	r2, [pc, #24]	; (8021410 <LL_RCC_SetLPUARTClockSource+0x2c>)
 80213f6:	4013      	ands	r3, r2
 80213f8:	0019      	movs	r1, r3
 80213fa:	23b0      	movs	r3, #176	; 0xb0
 80213fc:	05db      	lsls	r3, r3, #23
 80213fe:	687a      	ldr	r2, [r7, #4]
 8021400:	430a      	orrs	r2, r1
 8021402:	2188      	movs	r1, #136	; 0x88
 8021404:	505a      	str	r2, [r3, r1]
}
 8021406:	46c0      	nop			; (mov r8, r8)
 8021408:	46bd      	mov	sp, r7
 802140a:	b002      	add	sp, #8
 802140c:	bd80      	pop	{r7, pc}
 802140e:	46c0      	nop			; (mov r8, r8)
 8021410:	fffff3ff 	.word	0xfffff3ff

08021414 <LL_RCC_SetI2CClockSource>:
{
 8021414:	b580      	push	{r7, lr}
 8021416:	b082      	sub	sp, #8
 8021418:	af00      	add	r7, sp, #0
 802141a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 802141c:	23b0      	movs	r3, #176	; 0xb0
 802141e:	05db      	lsls	r3, r3, #23
 8021420:	2288      	movs	r2, #136	; 0x88
 8021422:	589b      	ldr	r3, [r3, r2]
 8021424:	687a      	ldr	r2, [r7, #4]
 8021426:	0911      	lsrs	r1, r2, #4
 8021428:	22ff      	movs	r2, #255	; 0xff
 802142a:	0312      	lsls	r2, r2, #12
 802142c:	400a      	ands	r2, r1
 802142e:	43d2      	mvns	r2, r2
 8021430:	401a      	ands	r2, r3
 8021432:	0011      	movs	r1, r2
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	011a      	lsls	r2, r3, #4
 8021438:	23ff      	movs	r3, #255	; 0xff
 802143a:	031b      	lsls	r3, r3, #12
 802143c:	401a      	ands	r2, r3
 802143e:	23b0      	movs	r3, #176	; 0xb0
 8021440:	05db      	lsls	r3, r3, #23
 8021442:	430a      	orrs	r2, r1
 8021444:	2188      	movs	r1, #136	; 0x88
 8021446:	505a      	str	r2, [r3, r1]
}
 8021448:	46c0      	nop			; (mov r8, r8)
 802144a:	46bd      	mov	sp, r7
 802144c:	b002      	add	sp, #8
 802144e:	bd80      	pop	{r7, pc}

08021450 <LL_RCC_SetLPTIMClockSource>:
{
 8021450:	b580      	push	{r7, lr}
 8021452:	b082      	sub	sp, #8
 8021454:	af00      	add	r7, sp, #0
 8021456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8021458:	23b0      	movs	r3, #176	; 0xb0
 802145a:	05db      	lsls	r3, r3, #23
 802145c:	2288      	movs	r2, #136	; 0x88
 802145e:	589b      	ldr	r3, [r3, r2]
 8021460:	687a      	ldr	r2, [r7, #4]
 8021462:	0c12      	lsrs	r2, r2, #16
 8021464:	0412      	lsls	r2, r2, #16
 8021466:	43d2      	mvns	r2, r2
 8021468:	401a      	ands	r2, r3
 802146a:	0011      	movs	r1, r2
 802146c:	687b      	ldr	r3, [r7, #4]
 802146e:	041a      	lsls	r2, r3, #16
 8021470:	23b0      	movs	r3, #176	; 0xb0
 8021472:	05db      	lsls	r3, r3, #23
 8021474:	430a      	orrs	r2, r1
 8021476:	2188      	movs	r1, #136	; 0x88
 8021478:	505a      	str	r2, [r3, r1]
}
 802147a:	46c0      	nop			; (mov r8, r8)
 802147c:	46bd      	mov	sp, r7
 802147e:	b002      	add	sp, #8
 8021480:	bd80      	pop	{r7, pc}

08021482 <LL_RCC_SetRNGClockSource>:
{
 8021482:	b580      	push	{r7, lr}
 8021484:	b082      	sub	sp, #8
 8021486:	af00      	add	r7, sp, #0
 8021488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 802148a:	23b0      	movs	r3, #176	; 0xb0
 802148c:	05db      	lsls	r3, r3, #23
 802148e:	2288      	movs	r2, #136	; 0x88
 8021490:	589b      	ldr	r3, [r3, r2]
 8021492:	009b      	lsls	r3, r3, #2
 8021494:	0899      	lsrs	r1, r3, #2
 8021496:	23b0      	movs	r3, #176	; 0xb0
 8021498:	05db      	lsls	r3, r3, #23
 802149a:	687a      	ldr	r2, [r7, #4]
 802149c:	430a      	orrs	r2, r1
 802149e:	2188      	movs	r1, #136	; 0x88
 80214a0:	505a      	str	r2, [r3, r1]
}
 80214a2:	46c0      	nop			; (mov r8, r8)
 80214a4:	46bd      	mov	sp, r7
 80214a6:	b002      	add	sp, #8
 80214a8:	bd80      	pop	{r7, pc}
	...

080214ac <LL_RCC_SetADCClockSource>:
{
 80214ac:	b580      	push	{r7, lr}
 80214ae:	b082      	sub	sp, #8
 80214b0:	af00      	add	r7, sp, #0
 80214b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80214b4:	23b0      	movs	r3, #176	; 0xb0
 80214b6:	05db      	lsls	r3, r3, #23
 80214b8:	2288      	movs	r2, #136	; 0x88
 80214ba:	589b      	ldr	r3, [r3, r2]
 80214bc:	4a06      	ldr	r2, [pc, #24]	; (80214d8 <LL_RCC_SetADCClockSource+0x2c>)
 80214be:	4013      	ands	r3, r2
 80214c0:	0019      	movs	r1, r3
 80214c2:	23b0      	movs	r3, #176	; 0xb0
 80214c4:	05db      	lsls	r3, r3, #23
 80214c6:	687a      	ldr	r2, [r7, #4]
 80214c8:	430a      	orrs	r2, r1
 80214ca:	2188      	movs	r1, #136	; 0x88
 80214cc:	505a      	str	r2, [r3, r1]
}
 80214ce:	46c0      	nop			; (mov r8, r8)
 80214d0:	46bd      	mov	sp, r7
 80214d2:	b002      	add	sp, #8
 80214d4:	bd80      	pop	{r7, pc}
 80214d6:	46c0      	nop			; (mov r8, r8)
 80214d8:	cfffffff 	.word	0xcfffffff

080214dc <LL_RCC_SetRTCClockSource>:
{
 80214dc:	b580      	push	{r7, lr}
 80214de:	b082      	sub	sp, #8
 80214e0:	af00      	add	r7, sp, #0
 80214e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80214e4:	23b0      	movs	r3, #176	; 0xb0
 80214e6:	05db      	lsls	r3, r3, #23
 80214e8:	2290      	movs	r2, #144	; 0x90
 80214ea:	589b      	ldr	r3, [r3, r2]
 80214ec:	4a06      	ldr	r2, [pc, #24]	; (8021508 <LL_RCC_SetRTCClockSource+0x2c>)
 80214ee:	4013      	ands	r3, r2
 80214f0:	0019      	movs	r1, r3
 80214f2:	23b0      	movs	r3, #176	; 0xb0
 80214f4:	05db      	lsls	r3, r3, #23
 80214f6:	687a      	ldr	r2, [r7, #4]
 80214f8:	430a      	orrs	r2, r1
 80214fa:	2190      	movs	r1, #144	; 0x90
 80214fc:	505a      	str	r2, [r3, r1]
}
 80214fe:	46c0      	nop			; (mov r8, r8)
 8021500:	46bd      	mov	sp, r7
 8021502:	b002      	add	sp, #8
 8021504:	bd80      	pop	{r7, pc}
 8021506:	46c0      	nop			; (mov r8, r8)
 8021508:	fffffcff 	.word	0xfffffcff

0802150c <LL_RCC_GetRTCClockSource>:
{
 802150c:	b580      	push	{r7, lr}
 802150e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8021510:	23b0      	movs	r3, #176	; 0xb0
 8021512:	05db      	lsls	r3, r3, #23
 8021514:	2290      	movs	r2, #144	; 0x90
 8021516:	589a      	ldr	r2, [r3, r2]
 8021518:	23c0      	movs	r3, #192	; 0xc0
 802151a:	009b      	lsls	r3, r3, #2
 802151c:	4013      	ands	r3, r2
}
 802151e:	0018      	movs	r0, r3
 8021520:	46bd      	mov	sp, r7
 8021522:	bd80      	pop	{r7, pc}

08021524 <LL_RCC_ForceBackupDomainReset>:
{
 8021524:	b580      	push	{r7, lr}
 8021526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8021528:	23b0      	movs	r3, #176	; 0xb0
 802152a:	05db      	lsls	r3, r3, #23
 802152c:	2290      	movs	r2, #144	; 0x90
 802152e:	589a      	ldr	r2, [r3, r2]
 8021530:	23b0      	movs	r3, #176	; 0xb0
 8021532:	05db      	lsls	r3, r3, #23
 8021534:	2180      	movs	r1, #128	; 0x80
 8021536:	0249      	lsls	r1, r1, #9
 8021538:	430a      	orrs	r2, r1
 802153a:	2190      	movs	r1, #144	; 0x90
 802153c:	505a      	str	r2, [r3, r1]
}
 802153e:	46c0      	nop			; (mov r8, r8)
 8021540:	46bd      	mov	sp, r7
 8021542:	bd80      	pop	{r7, pc}

08021544 <LL_RCC_ReleaseBackupDomainReset>:
{
 8021544:	b580      	push	{r7, lr}
 8021546:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8021548:	23b0      	movs	r3, #176	; 0xb0
 802154a:	05db      	lsls	r3, r3, #23
 802154c:	2290      	movs	r2, #144	; 0x90
 802154e:	589a      	ldr	r2, [r3, r2]
 8021550:	23b0      	movs	r3, #176	; 0xb0
 8021552:	05db      	lsls	r3, r3, #23
 8021554:	4903      	ldr	r1, [pc, #12]	; (8021564 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8021556:	400a      	ands	r2, r1
 8021558:	2190      	movs	r1, #144	; 0x90
 802155a:	505a      	str	r2, [r3, r1]
}
 802155c:	46c0      	nop			; (mov r8, r8)
 802155e:	46bd      	mov	sp, r7
 8021560:	bd80      	pop	{r7, pc}
 8021562:	46c0      	nop			; (mov r8, r8)
 8021564:	fffeffff 	.word	0xfffeffff

08021568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8021568:	b580      	push	{r7, lr}
 802156a:	b086      	sub	sp, #24
 802156c:	af00      	add	r7, sp, #0
 802156e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8021570:	2300      	movs	r3, #0
 8021572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8021574:	2313      	movs	r3, #19
 8021576:	18fb      	adds	r3, r7, r3
 8021578:	2200      	movs	r2, #0
 802157a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 802157c:	2312      	movs	r3, #18
 802157e:	18fb      	adds	r3, r7, r3
 8021580:	2200      	movs	r2, #0
 8021582:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	681a      	ldr	r2, [r3, #0]
 8021588:	2380      	movs	r3, #128	; 0x80
 802158a:	025b      	lsls	r3, r3, #9
 802158c:	4013      	ands	r3, r2
 802158e:	d100      	bne.n	8021592 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8021590:	e06a      	b.n	8021668 <HAL_RCCEx_PeriphCLKConfig+0x100>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8021592:	f7ff fd3f 	bl	8021014 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8021596:	f7ff fa2f 	bl	80209f8 <HAL_GetTick>
 802159a:	0003      	movs	r3, r0
 802159c:	60fb      	str	r3, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 802159e:	e00b      	b.n	80215b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80215a0:	f7ff fa2a 	bl	80209f8 <HAL_GetTick>
 80215a4:	0002      	movs	r2, r0
 80215a6:	68fb      	ldr	r3, [r7, #12]
 80215a8:	1ad3      	subs	r3, r2, r3
 80215aa:	2b02      	cmp	r3, #2
 80215ac:	d904      	bls.n	80215b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
      {
        ret = HAL_TIMEOUT;
 80215ae:	2313      	movs	r3, #19
 80215b0:	18fb      	adds	r3, r7, r3
 80215b2:	2203      	movs	r2, #3
 80215b4:	701a      	strb	r2, [r3, #0]
        break;
 80215b6:	e008      	b.n	80215ca <HAL_RCCEx_PeriphCLKConfig+0x62>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80215b8:	4b83      	ldr	r3, [pc, #524]	; (80217c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80215ba:	681a      	ldr	r2, [r3, #0]
 80215bc:	2380      	movs	r3, #128	; 0x80
 80215be:	005b      	lsls	r3, r3, #1
 80215c0:	401a      	ands	r2, r3
 80215c2:	2380      	movs	r3, #128	; 0x80
 80215c4:	005b      	lsls	r3, r3, #1
 80215c6:	429a      	cmp	r2, r3
 80215c8:	d1ea      	bne.n	80215a0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      }
    }

    if (ret == HAL_OK)
 80215ca:	2313      	movs	r3, #19
 80215cc:	18fb      	adds	r3, r7, r3
 80215ce:	781b      	ldrb	r3, [r3, #0]
 80215d0:	2b00      	cmp	r3, #0
 80215d2:	d143      	bne.n	802165c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80215d4:	f7ff ff9a 	bl	802150c <LL_RCC_GetRTCClockSource>
 80215d8:	0002      	movs	r2, r0
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80215de:	429a      	cmp	r2, r3
 80215e0:	d00f      	beq.n	8021602 <HAL_RCCEx_PeriphCLKConfig+0x9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80215e2:	23b0      	movs	r3, #176	; 0xb0
 80215e4:	05db      	lsls	r3, r3, #23
 80215e6:	2290      	movs	r2, #144	; 0x90
 80215e8:	589b      	ldr	r3, [r3, r2]
 80215ea:	4a78      	ldr	r2, [pc, #480]	; (80217cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80215ec:	4013      	ands	r3, r2
 80215ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80215f0:	f7ff ff98 	bl	8021524 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80215f4:	f7ff ffa6 	bl	8021544 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80215f8:	23b0      	movs	r3, #176	; 0xb0
 80215fa:	05db      	lsls	r3, r3, #23
 80215fc:	2190      	movs	r1, #144	; 0x90
 80215fe:	697a      	ldr	r2, [r7, #20]
 8021600:	505a      	str	r2, [r3, r1]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8021602:	697b      	ldr	r3, [r7, #20]
 8021604:	2202      	movs	r2, #2
 8021606:	4013      	ands	r3, r2
 8021608:	d016      	beq.n	8021638 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802160a:	f7ff f9f5 	bl	80209f8 <HAL_GetTick>
 802160e:	0003      	movs	r3, r0
 8021610:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8021612:	e00c      	b.n	802162e <HAL_RCCEx_PeriphCLKConfig+0xc6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021614:	f7ff f9f0 	bl	80209f8 <HAL_GetTick>
 8021618:	0002      	movs	r2, r0
 802161a:	68fb      	ldr	r3, [r7, #12]
 802161c:	1ad3      	subs	r3, r2, r3
 802161e:	4a6c      	ldr	r2, [pc, #432]	; (80217d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8021620:	4293      	cmp	r3, r2
 8021622:	d904      	bls.n	802162e <HAL_RCCEx_PeriphCLKConfig+0xc6>
          {
            ret = HAL_TIMEOUT;
 8021624:	2313      	movs	r3, #19
 8021626:	18fb      	adds	r3, r7, r3
 8021628:	2203      	movs	r2, #3
 802162a:	701a      	strb	r2, [r3, #0]
            break;
 802162c:	e004      	b.n	8021638 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (LL_RCC_LSE_IsReady() != 1U)
 802162e:	f7ff fe97 	bl	8021360 <LL_RCC_LSE_IsReady>
 8021632:	0003      	movs	r3, r0
 8021634:	2b01      	cmp	r3, #1
 8021636:	d1ed      	bne.n	8021614 <HAL_RCCEx_PeriphCLKConfig+0xac>
          }
        }
      }

      if (ret == HAL_OK)
 8021638:	2313      	movs	r3, #19
 802163a:	18fb      	adds	r3, r7, r3
 802163c:	781b      	ldrb	r3, [r3, #0]
 802163e:	2b00      	cmp	r3, #0
 8021640:	d105      	bne.n	802164e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8021642:	687b      	ldr	r3, [r7, #4]
 8021644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021646:	0018      	movs	r0, r3
 8021648:	f7ff ff48 	bl	80214dc <LL_RCC_SetRTCClockSource>
 802164c:	e00c      	b.n	8021668 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802164e:	2312      	movs	r3, #18
 8021650:	18fb      	adds	r3, r7, r3
 8021652:	2213      	movs	r2, #19
 8021654:	18ba      	adds	r2, r7, r2
 8021656:	7812      	ldrb	r2, [r2, #0]
 8021658:	701a      	strb	r2, [r3, #0]
 802165a:	e005      	b.n	8021668 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 802165c:	2312      	movs	r3, #18
 802165e:	18fb      	adds	r3, r7, r3
 8021660:	2213      	movs	r2, #19
 8021662:	18ba      	adds	r2, r7, r2
 8021664:	7812      	ldrb	r2, [r2, #0]
 8021666:	701a      	strb	r2, [r3, #0]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8021668:	687b      	ldr	r3, [r7, #4]
 802166a:	681b      	ldr	r3, [r3, #0]
 802166c:	2201      	movs	r2, #1
 802166e:	4013      	ands	r3, r2
 8021670:	d004      	beq.n	802167c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	685b      	ldr	r3, [r3, #4]
 8021676:	0018      	movs	r0, r3
 8021678:	f7ff fe82 	bl	8021380 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	2202      	movs	r2, #2
 8021682:	4013      	ands	r3, r2
 8021684:	d004      	beq.n	8021690 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	689b      	ldr	r3, [r3, #8]
 802168a:	0018      	movs	r0, r3
 802168c:	f7ff fe78 	bl	8021380 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	681b      	ldr	r3, [r3, #0]
 8021694:	2220      	movs	r2, #32
 8021696:	4013      	ands	r3, r2
 8021698:	d004      	beq.n	80216a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	691b      	ldr	r3, [r3, #16]
 802169e:	0018      	movs	r0, r3
 80216a0:	f7ff fea0 	bl	80213e4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	681a      	ldr	r2, [r3, #0]
 80216a8:	2380      	movs	r3, #128	; 0x80
 80216aa:	009b      	lsls	r3, r3, #2
 80216ac:	4013      	ands	r3, r2
 80216ae:	d004      	beq.n	80216ba <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	6a1b      	ldr	r3, [r3, #32]
 80216b4:	0018      	movs	r0, r3
 80216b6:	f7ff fecb 	bl	8021450 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	681a      	ldr	r2, [r3, #0]
 80216be:	2380      	movs	r3, #128	; 0x80
 80216c0:	00db      	lsls	r3, r3, #3
 80216c2:	4013      	ands	r3, r2
 80216c4:	d004      	beq.n	80216d0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80216c6:	687b      	ldr	r3, [r7, #4]
 80216c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80216ca:	0018      	movs	r0, r3
 80216cc:	f7ff fec0 	bl	8021450 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80216d0:	687b      	ldr	r3, [r7, #4]
 80216d2:	681a      	ldr	r2, [r3, #0]
 80216d4:	2380      	movs	r3, #128	; 0x80
 80216d6:	011b      	lsls	r3, r3, #4
 80216d8:	4013      	ands	r3, r2
 80216da:	d004      	beq.n	80216e6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80216dc:	687b      	ldr	r3, [r7, #4]
 80216de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80216e0:	0018      	movs	r0, r3
 80216e2:	f7ff feb5 	bl	8021450 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80216e6:	687b      	ldr	r3, [r7, #4]
 80216e8:	681b      	ldr	r3, [r3, #0]
 80216ea:	2240      	movs	r2, #64	; 0x40
 80216ec:	4013      	ands	r3, r2
 80216ee:	d004      	beq.n	80216fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	695b      	ldr	r3, [r3, #20]
 80216f4:	0018      	movs	r0, r3
 80216f6:	f7ff fe8d 	bl	8021414 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	681b      	ldr	r3, [r3, #0]
 80216fe:	2280      	movs	r2, #128	; 0x80
 8021700:	4013      	ands	r3, r2
 8021702:	d004      	beq.n	802170e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8021704:	687b      	ldr	r3, [r7, #4]
 8021706:	699b      	ldr	r3, [r3, #24]
 8021708:	0018      	movs	r0, r3
 802170a:	f7ff fe83 	bl	8021414 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	681a      	ldr	r2, [r3, #0]
 8021712:	2380      	movs	r3, #128	; 0x80
 8021714:	005b      	lsls	r3, r3, #1
 8021716:	4013      	ands	r3, r2
 8021718:	d004      	beq.n	8021724 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	69db      	ldr	r3, [r3, #28]
 802171e:	0018      	movs	r0, r3
 8021720:	f7ff fe78 	bl	8021414 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8021724:	687b      	ldr	r3, [r7, #4]
 8021726:	681b      	ldr	r3, [r3, #0]
 8021728:	2210      	movs	r2, #16
 802172a:	4013      	ands	r3, r2
 802172c:	d013      	beq.n	8021756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	68db      	ldr	r3, [r3, #12]
 8021732:	0018      	movs	r0, r3
 8021734:	f7ff fe3e 	bl	80213b4 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8021738:	687b      	ldr	r3, [r7, #4]
 802173a:	68da      	ldr	r2, [r3, #12]
 802173c:	2380      	movs	r3, #128	; 0x80
 802173e:	005b      	lsls	r3, r3, #1
 8021740:	429a      	cmp	r2, r3
 8021742:	d108      	bne.n	8021756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8021744:	23b0      	movs	r3, #176	; 0xb0
 8021746:	05db      	lsls	r3, r3, #23
 8021748:	68da      	ldr	r2, [r3, #12]
 802174a:	23b0      	movs	r3, #176	; 0xb0
 802174c:	05db      	lsls	r3, r3, #23
 802174e:	2180      	movs	r1, #128	; 0x80
 8021750:	0449      	lsls	r1, r1, #17
 8021752:	430a      	orrs	r2, r1
 8021754:	60da      	str	r2, [r3, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8021756:	687b      	ldr	r3, [r7, #4]
 8021758:	681a      	ldr	r2, [r3, #0]
 802175a:	2380      	movs	r3, #128	; 0x80
 802175c:	021b      	lsls	r3, r3, #8
 802175e:	4013      	ands	r3, r2
 8021760:	d011      	beq.n	8021786 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021766:	0018      	movs	r0, r3
 8021768:	f7ff fe8b 	bl	8021482 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021770:	2b00      	cmp	r3, #0
 8021772:	d108      	bne.n	8021786 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8021774:	23b0      	movs	r3, #176	; 0xb0
 8021776:	05db      	lsls	r3, r3, #23
 8021778:	68da      	ldr	r2, [r3, #12]
 802177a:	23b0      	movs	r3, #176	; 0xb0
 802177c:	05db      	lsls	r3, r3, #23
 802177e:	2180      	movs	r1, #128	; 0x80
 8021780:	0449      	lsls	r1, r1, #17
 8021782:	430a      	orrs	r2, r1
 8021784:	60da      	str	r2, [r3, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8021786:	687b      	ldr	r3, [r7, #4]
 8021788:	681a      	ldr	r2, [r3, #0]
 802178a:	2380      	movs	r3, #128	; 0x80
 802178c:	01db      	lsls	r3, r3, #7
 802178e:	4013      	ands	r3, r2
 8021790:	d013      	beq.n	80217ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021796:	0018      	movs	r0, r3
 8021798:	f7ff fe88 	bl	80214ac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 802179c:	687b      	ldr	r3, [r7, #4]
 802179e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80217a0:	2380      	movs	r3, #128	; 0x80
 80217a2:	059b      	lsls	r3, r3, #22
 80217a4:	429a      	cmp	r2, r3
 80217a6:	d108      	bne.n	80217ba <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80217a8:	23b0      	movs	r3, #176	; 0xb0
 80217aa:	05db      	lsls	r3, r3, #23
 80217ac:	68da      	ldr	r2, [r3, #12]
 80217ae:	23b0      	movs	r3, #176	; 0xb0
 80217b0:	05db      	lsls	r3, r3, #23
 80217b2:	2180      	movs	r1, #128	; 0x80
 80217b4:	0249      	lsls	r1, r1, #9
 80217b6:	430a      	orrs	r2, r1
 80217b8:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80217ba:	2312      	movs	r3, #18
 80217bc:	18fb      	adds	r3, r7, r3
 80217be:	781b      	ldrb	r3, [r3, #0]
}
 80217c0:	0018      	movs	r0, r3
 80217c2:	46bd      	mov	sp, r7
 80217c4:	b006      	add	sp, #24
 80217c6:	bd80      	pop	{r7, pc}
 80217c8:	58000400 	.word	0x58000400
 80217cc:	fffffcff 	.word	0xfffffcff
 80217d0:	00001388 	.word	0x00001388

080217d4 <LL_RCC_GetUSARTClockSource>:
{
 80217d4:	b580      	push	{r7, lr}
 80217d6:	b082      	sub	sp, #8
 80217d8:	af00      	add	r7, sp, #0
 80217da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80217dc:	23b0      	movs	r3, #176	; 0xb0
 80217de:	05db      	lsls	r3, r3, #23
 80217e0:	2288      	movs	r2, #136	; 0x88
 80217e2:	589b      	ldr	r3, [r3, r2]
 80217e4:	687a      	ldr	r2, [r7, #4]
 80217e6:	401a      	ands	r2, r3
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	041b      	lsls	r3, r3, #16
 80217ec:	4313      	orrs	r3, r2
}
 80217ee:	0018      	movs	r0, r3
 80217f0:	46bd      	mov	sp, r7
 80217f2:	b002      	add	sp, #8
 80217f4:	bd80      	pop	{r7, pc}

080217f6 <LL_RCC_GetLPUARTClockSource>:
{
 80217f6:	b580      	push	{r7, lr}
 80217f8:	b082      	sub	sp, #8
 80217fa:	af00      	add	r7, sp, #0
 80217fc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80217fe:	23b0      	movs	r3, #176	; 0xb0
 8021800:	05db      	lsls	r3, r3, #23
 8021802:	2288      	movs	r2, #136	; 0x88
 8021804:	589b      	ldr	r3, [r3, r2]
 8021806:	687a      	ldr	r2, [r7, #4]
 8021808:	4013      	ands	r3, r2
}
 802180a:	0018      	movs	r0, r3
 802180c:	46bd      	mov	sp, r7
 802180e:	b002      	add	sp, #8
 8021810:	bd80      	pop	{r7, pc}
	...

08021814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021814:	b580      	push	{r7, lr}
 8021816:	b082      	sub	sp, #8
 8021818:	af00      	add	r7, sp, #0
 802181a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802181c:	687b      	ldr	r3, [r7, #4]
 802181e:	2b00      	cmp	r3, #0
 8021820:	d101      	bne.n	8021826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021822:	2301      	movs	r3, #1
 8021824:	e046      	b.n	80218b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8021826:	687b      	ldr	r3, [r7, #4]
 8021828:	2288      	movs	r2, #136	; 0x88
 802182a:	589b      	ldr	r3, [r3, r2]
 802182c:	2b00      	cmp	r3, #0
 802182e:	d107      	bne.n	8021840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021830:	687b      	ldr	r3, [r7, #4]
 8021832:	2284      	movs	r2, #132	; 0x84
 8021834:	2100      	movs	r1, #0
 8021836:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021838:	687b      	ldr	r3, [r7, #4]
 802183a:	0018      	movs	r0, r3
 802183c:	f7fe ffc0 	bl	80207c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8021840:	687b      	ldr	r3, [r7, #4]
 8021842:	2288      	movs	r2, #136	; 0x88
 8021844:	2124      	movs	r1, #36	; 0x24
 8021846:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	681a      	ldr	r2, [r3, #0]
 802184e:	687b      	ldr	r3, [r7, #4]
 8021850:	681b      	ldr	r3, [r3, #0]
 8021852:	2101      	movs	r1, #1
 8021854:	438a      	bics	r2, r1
 8021856:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	0018      	movs	r0, r3
 802185c:	f000 fc0e 	bl	802207c <UART_SetConfig>
 8021860:	0003      	movs	r3, r0
 8021862:	2b01      	cmp	r3, #1
 8021864:	d101      	bne.n	802186a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8021866:	2301      	movs	r3, #1
 8021868:	e024      	b.n	80218b4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802186a:	687b      	ldr	r3, [r7, #4]
 802186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802186e:	2b00      	cmp	r3, #0
 8021870:	d003      	beq.n	802187a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	0018      	movs	r0, r3
 8021876:	f000 fec5 	bl	8022604 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	681b      	ldr	r3, [r3, #0]
 802187e:	685a      	ldr	r2, [r3, #4]
 8021880:	687b      	ldr	r3, [r7, #4]
 8021882:	681b      	ldr	r3, [r3, #0]
 8021884:	490d      	ldr	r1, [pc, #52]	; (80218bc <HAL_UART_Init+0xa8>)
 8021886:	400a      	ands	r2, r1
 8021888:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802188a:	687b      	ldr	r3, [r7, #4]
 802188c:	681b      	ldr	r3, [r3, #0]
 802188e:	689a      	ldr	r2, [r3, #8]
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	681b      	ldr	r3, [r3, #0]
 8021894:	212a      	movs	r1, #42	; 0x2a
 8021896:	438a      	bics	r2, r1
 8021898:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	681b      	ldr	r3, [r3, #0]
 802189e:	681a      	ldr	r2, [r3, #0]
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	681b      	ldr	r3, [r3, #0]
 80218a4:	2101      	movs	r1, #1
 80218a6:	430a      	orrs	r2, r1
 80218a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80218aa:	687b      	ldr	r3, [r7, #4]
 80218ac:	0018      	movs	r0, r3
 80218ae:	f000 ff5d 	bl	802276c <UART_CheckIdleState>
 80218b2:	0003      	movs	r3, r0
}
 80218b4:	0018      	movs	r0, r3
 80218b6:	46bd      	mov	sp, r7
 80218b8:	b002      	add	sp, #8
 80218ba:	bd80      	pop	{r7, pc}
 80218bc:	ffffb7ff 	.word	0xffffb7ff

080218c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80218c0:	b580      	push	{r7, lr}
 80218c2:	b08a      	sub	sp, #40	; 0x28
 80218c4:	af02      	add	r7, sp, #8
 80218c6:	60f8      	str	r0, [r7, #12]
 80218c8:	60b9      	str	r1, [r7, #8]
 80218ca:	603b      	str	r3, [r7, #0]
 80218cc:	1dbb      	adds	r3, r7, #6
 80218ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80218d0:	68fb      	ldr	r3, [r7, #12]
 80218d2:	2288      	movs	r2, #136	; 0x88
 80218d4:	589b      	ldr	r3, [r3, r2]
 80218d6:	2b20      	cmp	r3, #32
 80218d8:	d000      	beq.n	80218dc <HAL_UART_Transmit+0x1c>
 80218da:	e088      	b.n	80219ee <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80218dc:	68bb      	ldr	r3, [r7, #8]
 80218de:	2b00      	cmp	r3, #0
 80218e0:	d003      	beq.n	80218ea <HAL_UART_Transmit+0x2a>
 80218e2:	1dbb      	adds	r3, r7, #6
 80218e4:	881b      	ldrh	r3, [r3, #0]
 80218e6:	2b00      	cmp	r3, #0
 80218e8:	d101      	bne.n	80218ee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80218ea:	2301      	movs	r3, #1
 80218ec:	e080      	b.n	80219f0 <HAL_UART_Transmit+0x130>

#if defined(CORE_CM0PLUS)
    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80218ee:	68fb      	ldr	r3, [r7, #12]
 80218f0:	689a      	ldr	r2, [r3, #8]
 80218f2:	2380      	movs	r3, #128	; 0x80
 80218f4:	015b      	lsls	r3, r3, #5
 80218f6:	429a      	cmp	r2, r3
 80218f8:	d109      	bne.n	802190e <HAL_UART_Transmit+0x4e>
 80218fa:	68fb      	ldr	r3, [r7, #12]
 80218fc:	691b      	ldr	r3, [r3, #16]
 80218fe:	2b00      	cmp	r3, #0
 8021900:	d105      	bne.n	802190e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8021902:	68bb      	ldr	r3, [r7, #8]
 8021904:	2201      	movs	r2, #1
 8021906:	4013      	ands	r3, r2
 8021908:	d001      	beq.n	802190e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 802190a:	2301      	movs	r3, #1
 802190c:	e070      	b.n	80219f0 <HAL_UART_Transmit+0x130>
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802190e:	68fb      	ldr	r3, [r7, #12]
 8021910:	2290      	movs	r2, #144	; 0x90
 8021912:	2100      	movs	r1, #0
 8021914:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021916:	68fb      	ldr	r3, [r7, #12]
 8021918:	2288      	movs	r2, #136	; 0x88
 802191a:	2121      	movs	r1, #33	; 0x21
 802191c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 802191e:	f7ff f86b 	bl	80209f8 <HAL_GetTick>
 8021922:	0003      	movs	r3, r0
 8021924:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8021926:	68fb      	ldr	r3, [r7, #12]
 8021928:	1dba      	adds	r2, r7, #6
 802192a:	2154      	movs	r1, #84	; 0x54
 802192c:	8812      	ldrh	r2, [r2, #0]
 802192e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8021930:	68fb      	ldr	r3, [r7, #12]
 8021932:	1dba      	adds	r2, r7, #6
 8021934:	2156      	movs	r1, #86	; 0x56
 8021936:	8812      	ldrh	r2, [r2, #0]
 8021938:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 802193a:	68fb      	ldr	r3, [r7, #12]
 802193c:	689a      	ldr	r2, [r3, #8]
 802193e:	2380      	movs	r3, #128	; 0x80
 8021940:	015b      	lsls	r3, r3, #5
 8021942:	429a      	cmp	r2, r3
 8021944:	d108      	bne.n	8021958 <HAL_UART_Transmit+0x98>
 8021946:	68fb      	ldr	r3, [r7, #12]
 8021948:	691b      	ldr	r3, [r3, #16]
 802194a:	2b00      	cmp	r3, #0
 802194c:	d104      	bne.n	8021958 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 802194e:	2300      	movs	r3, #0
 8021950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8021952:	68bb      	ldr	r3, [r7, #8]
 8021954:	61bb      	str	r3, [r7, #24]
 8021956:	e003      	b.n	8021960 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8021958:	68bb      	ldr	r3, [r7, #8]
 802195a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 802195c:	2300      	movs	r3, #0
 802195e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8021960:	e02c      	b.n	80219bc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021962:	697a      	ldr	r2, [r7, #20]
 8021964:	68f8      	ldr	r0, [r7, #12]
 8021966:	683b      	ldr	r3, [r7, #0]
 8021968:	9300      	str	r3, [sp, #0]
 802196a:	0013      	movs	r3, r2
 802196c:	2200      	movs	r2, #0
 802196e:	2180      	movs	r1, #128	; 0x80
 8021970:	f000 ff4a 	bl	8022808 <UART_WaitOnFlagUntilTimeout>
 8021974:	1e03      	subs	r3, r0, #0
 8021976:	d001      	beq.n	802197c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8021978:	2303      	movs	r3, #3
 802197a:	e039      	b.n	80219f0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 802197c:	69fb      	ldr	r3, [r7, #28]
 802197e:	2b00      	cmp	r3, #0
 8021980:	d10b      	bne.n	802199a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8021982:	69bb      	ldr	r3, [r7, #24]
 8021984:	881b      	ldrh	r3, [r3, #0]
 8021986:	001a      	movs	r2, r3
 8021988:	68fb      	ldr	r3, [r7, #12]
 802198a:	681b      	ldr	r3, [r3, #0]
 802198c:	05d2      	lsls	r2, r2, #23
 802198e:	0dd2      	lsrs	r2, r2, #23
 8021990:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8021992:	69bb      	ldr	r3, [r7, #24]
 8021994:	3302      	adds	r3, #2
 8021996:	61bb      	str	r3, [r7, #24]
 8021998:	e007      	b.n	80219aa <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 802199a:	69fb      	ldr	r3, [r7, #28]
 802199c:	781a      	ldrb	r2, [r3, #0]
 802199e:	68fb      	ldr	r3, [r7, #12]
 80219a0:	681b      	ldr	r3, [r3, #0]
 80219a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80219a4:	69fb      	ldr	r3, [r7, #28]
 80219a6:	3301      	adds	r3, #1
 80219a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80219aa:	68fb      	ldr	r3, [r7, #12]
 80219ac:	2256      	movs	r2, #86	; 0x56
 80219ae:	5a9b      	ldrh	r3, [r3, r2]
 80219b0:	b29b      	uxth	r3, r3
 80219b2:	3b01      	subs	r3, #1
 80219b4:	b299      	uxth	r1, r3
 80219b6:	68fb      	ldr	r3, [r7, #12]
 80219b8:	2256      	movs	r2, #86	; 0x56
 80219ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80219bc:	68fb      	ldr	r3, [r7, #12]
 80219be:	2256      	movs	r2, #86	; 0x56
 80219c0:	5a9b      	ldrh	r3, [r3, r2]
 80219c2:	b29b      	uxth	r3, r3
 80219c4:	2b00      	cmp	r3, #0
 80219c6:	d1cc      	bne.n	8021962 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80219c8:	697a      	ldr	r2, [r7, #20]
 80219ca:	68f8      	ldr	r0, [r7, #12]
 80219cc:	683b      	ldr	r3, [r7, #0]
 80219ce:	9300      	str	r3, [sp, #0]
 80219d0:	0013      	movs	r3, r2
 80219d2:	2200      	movs	r2, #0
 80219d4:	2140      	movs	r1, #64	; 0x40
 80219d6:	f000 ff17 	bl	8022808 <UART_WaitOnFlagUntilTimeout>
 80219da:	1e03      	subs	r3, r0, #0
 80219dc:	d001      	beq.n	80219e2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80219de:	2303      	movs	r3, #3
 80219e0:	e006      	b.n	80219f0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80219e2:	68fb      	ldr	r3, [r7, #12]
 80219e4:	2288      	movs	r2, #136	; 0x88
 80219e6:	2120      	movs	r1, #32
 80219e8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80219ea:	2300      	movs	r3, #0
 80219ec:	e000      	b.n	80219f0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80219ee:	2302      	movs	r3, #2
  }
}
 80219f0:	0018      	movs	r0, r3
 80219f2:	46bd      	mov	sp, r7
 80219f4:	b008      	add	sp, #32
 80219f6:	bd80      	pop	{r7, pc}

080219f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80219f8:	b5b0      	push	{r4, r5, r7, lr}
 80219fa:	b0aa      	sub	sp, #168	; 0xa8
 80219fc:	af00      	add	r7, sp, #0
 80219fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8021a00:	687b      	ldr	r3, [r7, #4]
 8021a02:	681b      	ldr	r3, [r3, #0]
 8021a04:	69db      	ldr	r3, [r3, #28]
 8021a06:	22a4      	movs	r2, #164	; 0xa4
 8021a08:	18b9      	adds	r1, r7, r2
 8021a0a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8021a0c:	687b      	ldr	r3, [r7, #4]
 8021a0e:	681b      	ldr	r3, [r3, #0]
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	20a0      	movs	r0, #160	; 0xa0
 8021a14:	1839      	adds	r1, r7, r0
 8021a16:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8021a18:	687b      	ldr	r3, [r7, #4]
 8021a1a:	681b      	ldr	r3, [r3, #0]
 8021a1c:	689b      	ldr	r3, [r3, #8]
 8021a1e:	249c      	movs	r4, #156	; 0x9c
 8021a20:	1939      	adds	r1, r7, r4
 8021a22:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8021a24:	0011      	movs	r1, r2
 8021a26:	18bb      	adds	r3, r7, r2
 8021a28:	681b      	ldr	r3, [r3, #0]
 8021a2a:	4aa2      	ldr	r2, [pc, #648]	; (8021cb4 <HAL_UART_IRQHandler+0x2bc>)
 8021a2c:	4013      	ands	r3, r2
 8021a2e:	2298      	movs	r2, #152	; 0x98
 8021a30:	18bd      	adds	r5, r7, r2
 8021a32:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8021a34:	18bb      	adds	r3, r7, r2
 8021a36:	681b      	ldr	r3, [r3, #0]
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d11a      	bne.n	8021a72 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8021a3c:	187b      	adds	r3, r7, r1
 8021a3e:	681b      	ldr	r3, [r3, #0]
 8021a40:	2220      	movs	r2, #32
 8021a42:	4013      	ands	r3, r2
 8021a44:	d015      	beq.n	8021a72 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8021a46:	183b      	adds	r3, r7, r0
 8021a48:	681b      	ldr	r3, [r3, #0]
 8021a4a:	2220      	movs	r2, #32
 8021a4c:	4013      	ands	r3, r2
 8021a4e:	d105      	bne.n	8021a5c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8021a50:	193b      	adds	r3, r7, r4
 8021a52:	681a      	ldr	r2, [r3, #0]
 8021a54:	2380      	movs	r3, #128	; 0x80
 8021a56:	055b      	lsls	r3, r3, #21
 8021a58:	4013      	ands	r3, r2
 8021a5a:	d00a      	beq.n	8021a72 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d100      	bne.n	8021a66 <HAL_UART_IRQHandler+0x6e>
 8021a64:	e2dc      	b.n	8022020 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8021a66:	687b      	ldr	r3, [r7, #4]
 8021a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021a6a:	687a      	ldr	r2, [r7, #4]
 8021a6c:	0010      	movs	r0, r2
 8021a6e:	4798      	blx	r3
      }
      return;
 8021a70:	e2d6      	b.n	8022020 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8021a72:	2398      	movs	r3, #152	; 0x98
 8021a74:	18fb      	adds	r3, r7, r3
 8021a76:	681b      	ldr	r3, [r3, #0]
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	d100      	bne.n	8021a7e <HAL_UART_IRQHandler+0x86>
 8021a7c:	e122      	b.n	8021cc4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8021a7e:	239c      	movs	r3, #156	; 0x9c
 8021a80:	18fb      	adds	r3, r7, r3
 8021a82:	681b      	ldr	r3, [r3, #0]
 8021a84:	4a8c      	ldr	r2, [pc, #560]	; (8021cb8 <HAL_UART_IRQHandler+0x2c0>)
 8021a86:	4013      	ands	r3, r2
 8021a88:	d106      	bne.n	8021a98 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8021a8a:	23a0      	movs	r3, #160	; 0xa0
 8021a8c:	18fb      	adds	r3, r7, r3
 8021a8e:	681b      	ldr	r3, [r3, #0]
 8021a90:	4a8a      	ldr	r2, [pc, #552]	; (8021cbc <HAL_UART_IRQHandler+0x2c4>)
 8021a92:	4013      	ands	r3, r2
 8021a94:	d100      	bne.n	8021a98 <HAL_UART_IRQHandler+0xa0>
 8021a96:	e115      	b.n	8021cc4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8021a98:	23a4      	movs	r3, #164	; 0xa4
 8021a9a:	18fb      	adds	r3, r7, r3
 8021a9c:	681b      	ldr	r3, [r3, #0]
 8021a9e:	2201      	movs	r2, #1
 8021aa0:	4013      	ands	r3, r2
 8021aa2:	d012      	beq.n	8021aca <HAL_UART_IRQHandler+0xd2>
 8021aa4:	23a0      	movs	r3, #160	; 0xa0
 8021aa6:	18fb      	adds	r3, r7, r3
 8021aa8:	681a      	ldr	r2, [r3, #0]
 8021aaa:	2380      	movs	r3, #128	; 0x80
 8021aac:	005b      	lsls	r3, r3, #1
 8021aae:	4013      	ands	r3, r2
 8021ab0:	d00b      	beq.n	8021aca <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8021ab2:	687b      	ldr	r3, [r7, #4]
 8021ab4:	681b      	ldr	r3, [r3, #0]
 8021ab6:	2201      	movs	r2, #1
 8021ab8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021aba:	687b      	ldr	r3, [r7, #4]
 8021abc:	2290      	movs	r2, #144	; 0x90
 8021abe:	589b      	ldr	r3, [r3, r2]
 8021ac0:	2201      	movs	r2, #1
 8021ac2:	431a      	orrs	r2, r3
 8021ac4:	687b      	ldr	r3, [r7, #4]
 8021ac6:	2190      	movs	r1, #144	; 0x90
 8021ac8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8021aca:	23a4      	movs	r3, #164	; 0xa4
 8021acc:	18fb      	adds	r3, r7, r3
 8021ace:	681b      	ldr	r3, [r3, #0]
 8021ad0:	2202      	movs	r2, #2
 8021ad2:	4013      	ands	r3, r2
 8021ad4:	d011      	beq.n	8021afa <HAL_UART_IRQHandler+0x102>
 8021ad6:	239c      	movs	r3, #156	; 0x9c
 8021ad8:	18fb      	adds	r3, r7, r3
 8021ada:	681b      	ldr	r3, [r3, #0]
 8021adc:	2201      	movs	r2, #1
 8021ade:	4013      	ands	r3, r2
 8021ae0:	d00b      	beq.n	8021afa <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8021ae2:	687b      	ldr	r3, [r7, #4]
 8021ae4:	681b      	ldr	r3, [r3, #0]
 8021ae6:	2202      	movs	r2, #2
 8021ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8021aea:	687b      	ldr	r3, [r7, #4]
 8021aec:	2290      	movs	r2, #144	; 0x90
 8021aee:	589b      	ldr	r3, [r3, r2]
 8021af0:	2204      	movs	r2, #4
 8021af2:	431a      	orrs	r2, r3
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	2190      	movs	r1, #144	; 0x90
 8021af8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8021afa:	23a4      	movs	r3, #164	; 0xa4
 8021afc:	18fb      	adds	r3, r7, r3
 8021afe:	681b      	ldr	r3, [r3, #0]
 8021b00:	2204      	movs	r2, #4
 8021b02:	4013      	ands	r3, r2
 8021b04:	d011      	beq.n	8021b2a <HAL_UART_IRQHandler+0x132>
 8021b06:	239c      	movs	r3, #156	; 0x9c
 8021b08:	18fb      	adds	r3, r7, r3
 8021b0a:	681b      	ldr	r3, [r3, #0]
 8021b0c:	2201      	movs	r2, #1
 8021b0e:	4013      	ands	r3, r2
 8021b10:	d00b      	beq.n	8021b2a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	681b      	ldr	r3, [r3, #0]
 8021b16:	2204      	movs	r2, #4
 8021b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	2290      	movs	r2, #144	; 0x90
 8021b1e:	589b      	ldr	r3, [r3, r2]
 8021b20:	2202      	movs	r2, #2
 8021b22:	431a      	orrs	r2, r3
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	2190      	movs	r1, #144	; 0x90
 8021b28:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8021b2a:	23a4      	movs	r3, #164	; 0xa4
 8021b2c:	18fb      	adds	r3, r7, r3
 8021b2e:	681b      	ldr	r3, [r3, #0]
 8021b30:	2208      	movs	r2, #8
 8021b32:	4013      	ands	r3, r2
 8021b34:	d017      	beq.n	8021b66 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8021b36:	23a0      	movs	r3, #160	; 0xa0
 8021b38:	18fb      	adds	r3, r7, r3
 8021b3a:	681b      	ldr	r3, [r3, #0]
 8021b3c:	2220      	movs	r2, #32
 8021b3e:	4013      	ands	r3, r2
 8021b40:	d105      	bne.n	8021b4e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8021b42:	239c      	movs	r3, #156	; 0x9c
 8021b44:	18fb      	adds	r3, r7, r3
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	4a5b      	ldr	r2, [pc, #364]	; (8021cb8 <HAL_UART_IRQHandler+0x2c0>)
 8021b4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8021b4c:	d00b      	beq.n	8021b66 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8021b4e:	687b      	ldr	r3, [r7, #4]
 8021b50:	681b      	ldr	r3, [r3, #0]
 8021b52:	2208      	movs	r2, #8
 8021b54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8021b56:	687b      	ldr	r3, [r7, #4]
 8021b58:	2290      	movs	r2, #144	; 0x90
 8021b5a:	589b      	ldr	r3, [r3, r2]
 8021b5c:	2208      	movs	r2, #8
 8021b5e:	431a      	orrs	r2, r3
 8021b60:	687b      	ldr	r3, [r7, #4]
 8021b62:	2190      	movs	r1, #144	; 0x90
 8021b64:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8021b66:	23a4      	movs	r3, #164	; 0xa4
 8021b68:	18fb      	adds	r3, r7, r3
 8021b6a:	681a      	ldr	r2, [r3, #0]
 8021b6c:	2380      	movs	r3, #128	; 0x80
 8021b6e:	011b      	lsls	r3, r3, #4
 8021b70:	4013      	ands	r3, r2
 8021b72:	d013      	beq.n	8021b9c <HAL_UART_IRQHandler+0x1a4>
 8021b74:	23a0      	movs	r3, #160	; 0xa0
 8021b76:	18fb      	adds	r3, r7, r3
 8021b78:	681a      	ldr	r2, [r3, #0]
 8021b7a:	2380      	movs	r3, #128	; 0x80
 8021b7c:	04db      	lsls	r3, r3, #19
 8021b7e:	4013      	ands	r3, r2
 8021b80:	d00c      	beq.n	8021b9c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	2280      	movs	r2, #128	; 0x80
 8021b88:	0112      	lsls	r2, r2, #4
 8021b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8021b8c:	687b      	ldr	r3, [r7, #4]
 8021b8e:	2290      	movs	r2, #144	; 0x90
 8021b90:	589b      	ldr	r3, [r3, r2]
 8021b92:	2220      	movs	r2, #32
 8021b94:	431a      	orrs	r2, r3
 8021b96:	687b      	ldr	r3, [r7, #4]
 8021b98:	2190      	movs	r1, #144	; 0x90
 8021b9a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8021b9c:	687b      	ldr	r3, [r7, #4]
 8021b9e:	2290      	movs	r2, #144	; 0x90
 8021ba0:	589b      	ldr	r3, [r3, r2]
 8021ba2:	2b00      	cmp	r3, #0
 8021ba4:	d100      	bne.n	8021ba8 <HAL_UART_IRQHandler+0x1b0>
 8021ba6:	e23d      	b.n	8022024 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8021ba8:	23a4      	movs	r3, #164	; 0xa4
 8021baa:	18fb      	adds	r3, r7, r3
 8021bac:	681b      	ldr	r3, [r3, #0]
 8021bae:	2220      	movs	r2, #32
 8021bb0:	4013      	ands	r3, r2
 8021bb2:	d015      	beq.n	8021be0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8021bb4:	23a0      	movs	r3, #160	; 0xa0
 8021bb6:	18fb      	adds	r3, r7, r3
 8021bb8:	681b      	ldr	r3, [r3, #0]
 8021bba:	2220      	movs	r2, #32
 8021bbc:	4013      	ands	r3, r2
 8021bbe:	d106      	bne.n	8021bce <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8021bc0:	239c      	movs	r3, #156	; 0x9c
 8021bc2:	18fb      	adds	r3, r7, r3
 8021bc4:	681a      	ldr	r2, [r3, #0]
 8021bc6:	2380      	movs	r3, #128	; 0x80
 8021bc8:	055b      	lsls	r3, r3, #21
 8021bca:	4013      	ands	r3, r2
 8021bcc:	d008      	beq.n	8021be0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8021bce:	687b      	ldr	r3, [r7, #4]
 8021bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	d004      	beq.n	8021be0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8021bd6:	687b      	ldr	r3, [r7, #4]
 8021bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8021bda:	687a      	ldr	r2, [r7, #4]
 8021bdc:	0010      	movs	r0, r2
 8021bde:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	2290      	movs	r2, #144	; 0x90
 8021be4:	589b      	ldr	r3, [r3, r2]
 8021be6:	2194      	movs	r1, #148	; 0x94
 8021be8:	187a      	adds	r2, r7, r1
 8021bea:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8021bec:	687b      	ldr	r3, [r7, #4]
 8021bee:	681b      	ldr	r3, [r3, #0]
 8021bf0:	689b      	ldr	r3, [r3, #8]
 8021bf2:	2240      	movs	r2, #64	; 0x40
 8021bf4:	4013      	ands	r3, r2
 8021bf6:	2b40      	cmp	r3, #64	; 0x40
 8021bf8:	d004      	beq.n	8021c04 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8021bfa:	187b      	adds	r3, r7, r1
 8021bfc:	681b      	ldr	r3, [r3, #0]
 8021bfe:	2228      	movs	r2, #40	; 0x28
 8021c00:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8021c02:	d04c      	beq.n	8021c9e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8021c04:	687b      	ldr	r3, [r7, #4]
 8021c06:	0018      	movs	r0, r3
 8021c08:	f000 fec6 	bl	8022998 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	689b      	ldr	r3, [r3, #8]
 8021c12:	2240      	movs	r2, #64	; 0x40
 8021c14:	4013      	ands	r3, r2
 8021c16:	2b40      	cmp	r3, #64	; 0x40
 8021c18:	d13c      	bne.n	8021c94 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8021c1e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8021c20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021c22:	2090      	movs	r0, #144	; 0x90
 8021c24:	183a      	adds	r2, r7, r0
 8021c26:	6013      	str	r3, [r2, #0]
 8021c28:	2301      	movs	r3, #1
 8021c2a:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8021c2e:	f383 8810 	msr	PRIMASK, r3
}
 8021c32:	46c0      	nop			; (mov r8, r8)
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	681b      	ldr	r3, [r3, #0]
 8021c38:	689a      	ldr	r2, [r3, #8]
 8021c3a:	687b      	ldr	r3, [r7, #4]
 8021c3c:	681b      	ldr	r3, [r3, #0]
 8021c3e:	2140      	movs	r1, #64	; 0x40
 8021c40:	438a      	bics	r2, r1
 8021c42:	609a      	str	r2, [r3, #8]
 8021c44:	183b      	adds	r3, r7, r0
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8021c4c:	f383 8810 	msr	PRIMASK, r3
}
 8021c50:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	2280      	movs	r2, #128	; 0x80
 8021c56:	589b      	ldr	r3, [r3, r2]
 8021c58:	2b00      	cmp	r3, #0
 8021c5a:	d016      	beq.n	8021c8a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	2280      	movs	r2, #128	; 0x80
 8021c60:	589b      	ldr	r3, [r3, r2]
 8021c62:	4a17      	ldr	r2, [pc, #92]	; (8021cc0 <HAL_UART_IRQHandler+0x2c8>)
 8021c64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021c66:	687b      	ldr	r3, [r7, #4]
 8021c68:	2280      	movs	r2, #128	; 0x80
 8021c6a:	589b      	ldr	r3, [r3, r2]
 8021c6c:	0018      	movs	r0, r3
 8021c6e:	f7ff f80b 	bl	8020c88 <HAL_DMA_Abort_IT>
 8021c72:	1e03      	subs	r3, r0, #0
 8021c74:	d01c      	beq.n	8021cb0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8021c76:	687b      	ldr	r3, [r7, #4]
 8021c78:	2280      	movs	r2, #128	; 0x80
 8021c7a:	589b      	ldr	r3, [r3, r2]
 8021c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021c7e:	687a      	ldr	r2, [r7, #4]
 8021c80:	2180      	movs	r1, #128	; 0x80
 8021c82:	5852      	ldr	r2, [r2, r1]
 8021c84:	0010      	movs	r0, r2
 8021c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021c88:	e012      	b.n	8021cb0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	0018      	movs	r0, r3
 8021c8e:	f000 f9e1 	bl	8022054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021c92:	e00d      	b.n	8021cb0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021c94:	687b      	ldr	r3, [r7, #4]
 8021c96:	0018      	movs	r0, r3
 8021c98:	f000 f9dc 	bl	8022054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021c9c:	e008      	b.n	8021cb0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8021c9e:	687b      	ldr	r3, [r7, #4]
 8021ca0:	0018      	movs	r0, r3
 8021ca2:	f000 f9d7 	bl	8022054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	2290      	movs	r2, #144	; 0x90
 8021caa:	2100      	movs	r1, #0
 8021cac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8021cae:	e1b9      	b.n	8022024 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021cb0:	46c0      	nop			; (mov r8, r8)
    return;
 8021cb2:	e1b7      	b.n	8022024 <HAL_UART_IRQHandler+0x62c>
 8021cb4:	0000080f 	.word	0x0000080f
 8021cb8:	10000001 	.word	0x10000001
 8021cbc:	04000120 	.word	0x04000120
 8021cc0:	08022a65 	.word	0x08022a65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021cc4:	687b      	ldr	r3, [r7, #4]
 8021cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8021cc8:	2b01      	cmp	r3, #1
 8021cca:	d000      	beq.n	8021cce <HAL_UART_IRQHandler+0x2d6>
 8021ccc:	e13e      	b.n	8021f4c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8021cce:	23a4      	movs	r3, #164	; 0xa4
 8021cd0:	18fb      	adds	r3, r7, r3
 8021cd2:	681b      	ldr	r3, [r3, #0]
 8021cd4:	2210      	movs	r2, #16
 8021cd6:	4013      	ands	r3, r2
 8021cd8:	d100      	bne.n	8021cdc <HAL_UART_IRQHandler+0x2e4>
 8021cda:	e137      	b.n	8021f4c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8021cdc:	23a0      	movs	r3, #160	; 0xa0
 8021cde:	18fb      	adds	r3, r7, r3
 8021ce0:	681b      	ldr	r3, [r3, #0]
 8021ce2:	2210      	movs	r2, #16
 8021ce4:	4013      	ands	r3, r2
 8021ce6:	d100      	bne.n	8021cea <HAL_UART_IRQHandler+0x2f2>
 8021ce8:	e130      	b.n	8021f4c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	681b      	ldr	r3, [r3, #0]
 8021cee:	2210      	movs	r2, #16
 8021cf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021cf2:	687b      	ldr	r3, [r7, #4]
 8021cf4:	681b      	ldr	r3, [r3, #0]
 8021cf6:	689b      	ldr	r3, [r3, #8]
 8021cf8:	2240      	movs	r2, #64	; 0x40
 8021cfa:	4013      	ands	r3, r2
 8021cfc:	2b40      	cmp	r3, #64	; 0x40
 8021cfe:	d000      	beq.n	8021d02 <HAL_UART_IRQHandler+0x30a>
 8021d00:	e0a4      	b.n	8021e4c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8021d02:	687b      	ldr	r3, [r7, #4]
 8021d04:	2280      	movs	r2, #128	; 0x80
 8021d06:	589b      	ldr	r3, [r3, r2]
 8021d08:	681b      	ldr	r3, [r3, #0]
 8021d0a:	685a      	ldr	r2, [r3, #4]
 8021d0c:	217e      	movs	r1, #126	; 0x7e
 8021d0e:	187b      	adds	r3, r7, r1
 8021d10:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8021d12:	187b      	adds	r3, r7, r1
 8021d14:	881b      	ldrh	r3, [r3, #0]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d100      	bne.n	8021d1c <HAL_UART_IRQHandler+0x324>
 8021d1a:	e185      	b.n	8022028 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	225c      	movs	r2, #92	; 0x5c
 8021d20:	5a9b      	ldrh	r3, [r3, r2]
 8021d22:	187a      	adds	r2, r7, r1
 8021d24:	8812      	ldrh	r2, [r2, #0]
 8021d26:	429a      	cmp	r2, r3
 8021d28:	d300      	bcc.n	8021d2c <HAL_UART_IRQHandler+0x334>
 8021d2a:	e17d      	b.n	8022028 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8021d2c:	687b      	ldr	r3, [r7, #4]
 8021d2e:	187a      	adds	r2, r7, r1
 8021d30:	215e      	movs	r1, #94	; 0x5e
 8021d32:	8812      	ldrh	r2, [r2, #0]
 8021d34:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	2280      	movs	r2, #128	; 0x80
 8021d3a:	589b      	ldr	r3, [r3, r2]
 8021d3c:	681b      	ldr	r3, [r3, #0]
 8021d3e:	681b      	ldr	r3, [r3, #0]
 8021d40:	2220      	movs	r2, #32
 8021d42:	4013      	ands	r3, r2
 8021d44:	d170      	bne.n	8021e28 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021d46:	f3ef 8310 	mrs	r3, PRIMASK
 8021d4a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8021d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8021d4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8021d50:	2301      	movs	r3, #1
 8021d52:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021d56:	f383 8810 	msr	PRIMASK, r3
}
 8021d5a:	46c0      	nop			; (mov r8, r8)
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	681b      	ldr	r3, [r3, #0]
 8021d60:	681a      	ldr	r2, [r3, #0]
 8021d62:	687b      	ldr	r3, [r7, #4]
 8021d64:	681b      	ldr	r3, [r3, #0]
 8021d66:	49b4      	ldr	r1, [pc, #720]	; (8022038 <HAL_UART_IRQHandler+0x640>)
 8021d68:	400a      	ands	r2, r1
 8021d6a:	601a      	str	r2, [r3, #0]
 8021d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8021d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021d72:	f383 8810 	msr	PRIMASK, r3
}
 8021d76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021d78:	f3ef 8310 	mrs	r3, PRIMASK
 8021d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8021d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021d80:	677b      	str	r3, [r7, #116]	; 0x74
 8021d82:	2301      	movs	r3, #1
 8021d84:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8021d88:	f383 8810 	msr	PRIMASK, r3
}
 8021d8c:	46c0      	nop			; (mov r8, r8)
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	681b      	ldr	r3, [r3, #0]
 8021d92:	689a      	ldr	r2, [r3, #8]
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	2101      	movs	r1, #1
 8021d9a:	438a      	bics	r2, r1
 8021d9c:	609a      	str	r2, [r3, #8]
 8021d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8021da0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8021da4:	f383 8810 	msr	PRIMASK, r3
}
 8021da8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021daa:	f3ef 8310 	mrs	r3, PRIMASK
 8021dae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8021db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021db2:	673b      	str	r3, [r7, #112]	; 0x70
 8021db4:	2301      	movs	r3, #1
 8021db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8021dba:	f383 8810 	msr	PRIMASK, r3
}
 8021dbe:	46c0      	nop			; (mov r8, r8)
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	681b      	ldr	r3, [r3, #0]
 8021dc4:	689a      	ldr	r2, [r3, #8]
 8021dc6:	687b      	ldr	r3, [r7, #4]
 8021dc8:	681b      	ldr	r3, [r3, #0]
 8021dca:	2140      	movs	r1, #64	; 0x40
 8021dcc:	438a      	bics	r2, r1
 8021dce:	609a      	str	r2, [r3, #8]
 8021dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8021dd2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8021dd6:	f383 8810 	msr	PRIMASK, r3
}
 8021dda:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	228c      	movs	r2, #140	; 0x8c
 8021de0:	2120      	movs	r1, #32
 8021de2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021de4:	687b      	ldr	r3, [r7, #4]
 8021de6:	2200      	movs	r2, #0
 8021de8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021dea:	f3ef 8310 	mrs	r3, PRIMASK
 8021dee:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8021df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8021df4:	2301      	movs	r3, #1
 8021df6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021dfa:	f383 8810 	msr	PRIMASK, r3
}
 8021dfe:	46c0      	nop			; (mov r8, r8)
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	681b      	ldr	r3, [r3, #0]
 8021e04:	681a      	ldr	r2, [r3, #0]
 8021e06:	687b      	ldr	r3, [r7, #4]
 8021e08:	681b      	ldr	r3, [r3, #0]
 8021e0a:	2110      	movs	r1, #16
 8021e0c:	438a      	bics	r2, r1
 8021e0e:	601a      	str	r2, [r3, #0]
 8021e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8021e12:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021e16:	f383 8810 	msr	PRIMASK, r3
}
 8021e1a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8021e1c:	687b      	ldr	r3, [r7, #4]
 8021e1e:	2280      	movs	r2, #128	; 0x80
 8021e20:	589b      	ldr	r3, [r3, r2]
 8021e22:	0018      	movs	r0, r3
 8021e24:	f7fe fed0 	bl	8020bc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	2202      	movs	r2, #2
 8021e2c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8021e2e:	687b      	ldr	r3, [r7, #4]
 8021e30:	225c      	movs	r2, #92	; 0x5c
 8021e32:	5a9a      	ldrh	r2, [r3, r2]
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	215e      	movs	r1, #94	; 0x5e
 8021e38:	5a5b      	ldrh	r3, [r3, r1]
 8021e3a:	b29b      	uxth	r3, r3
 8021e3c:	1ad3      	subs	r3, r2, r3
 8021e3e:	b29a      	uxth	r2, r3
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	0011      	movs	r1, r2
 8021e44:	0018      	movs	r0, r3
 8021e46:	f000 f90d 	bl	8022064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8021e4a:	e0ed      	b.n	8022028 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	225c      	movs	r2, #92	; 0x5c
 8021e50:	5a99      	ldrh	r1, [r3, r2]
 8021e52:	687b      	ldr	r3, [r7, #4]
 8021e54:	225e      	movs	r2, #94	; 0x5e
 8021e56:	5a9b      	ldrh	r3, [r3, r2]
 8021e58:	b29a      	uxth	r2, r3
 8021e5a:	208e      	movs	r0, #142	; 0x8e
 8021e5c:	183b      	adds	r3, r7, r0
 8021e5e:	1a8a      	subs	r2, r1, r2
 8021e60:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8021e62:	687b      	ldr	r3, [r7, #4]
 8021e64:	225e      	movs	r2, #94	; 0x5e
 8021e66:	5a9b      	ldrh	r3, [r3, r2]
 8021e68:	b29b      	uxth	r3, r3
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d100      	bne.n	8021e70 <HAL_UART_IRQHandler+0x478>
 8021e6e:	e0dd      	b.n	802202c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8021e70:	183b      	adds	r3, r7, r0
 8021e72:	881b      	ldrh	r3, [r3, #0]
 8021e74:	2b00      	cmp	r3, #0
 8021e76:	d100      	bne.n	8021e7a <HAL_UART_IRQHandler+0x482>
 8021e78:	e0d8      	b.n	802202c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8021e7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8021e80:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021e82:	2488      	movs	r4, #136	; 0x88
 8021e84:	193a      	adds	r2, r7, r4
 8021e86:	6013      	str	r3, [r2, #0]
 8021e88:	2301      	movs	r3, #1
 8021e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021e8c:	693b      	ldr	r3, [r7, #16]
 8021e8e:	f383 8810 	msr	PRIMASK, r3
}
 8021e92:	46c0      	nop			; (mov r8, r8)
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	681b      	ldr	r3, [r3, #0]
 8021e98:	681a      	ldr	r2, [r3, #0]
 8021e9a:	687b      	ldr	r3, [r7, #4]
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	4967      	ldr	r1, [pc, #412]	; (802203c <HAL_UART_IRQHandler+0x644>)
 8021ea0:	400a      	ands	r2, r1
 8021ea2:	601a      	str	r2, [r3, #0]
 8021ea4:	193b      	adds	r3, r7, r4
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021eaa:	697b      	ldr	r3, [r7, #20]
 8021eac:	f383 8810 	msr	PRIMASK, r3
}
 8021eb0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021eb2:	f3ef 8310 	mrs	r3, PRIMASK
 8021eb6:	61bb      	str	r3, [r7, #24]
  return(result);
 8021eb8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8021eba:	2484      	movs	r4, #132	; 0x84
 8021ebc:	193a      	adds	r2, r7, r4
 8021ebe:	6013      	str	r3, [r2, #0]
 8021ec0:	2301      	movs	r3, #1
 8021ec2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021ec4:	69fb      	ldr	r3, [r7, #28]
 8021ec6:	f383 8810 	msr	PRIMASK, r3
}
 8021eca:	46c0      	nop			; (mov r8, r8)
 8021ecc:	687b      	ldr	r3, [r7, #4]
 8021ece:	681b      	ldr	r3, [r3, #0]
 8021ed0:	689a      	ldr	r2, [r3, #8]
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	681b      	ldr	r3, [r3, #0]
 8021ed6:	495a      	ldr	r1, [pc, #360]	; (8022040 <HAL_UART_IRQHandler+0x648>)
 8021ed8:	400a      	ands	r2, r1
 8021eda:	609a      	str	r2, [r3, #8]
 8021edc:	193b      	adds	r3, r7, r4
 8021ede:	681b      	ldr	r3, [r3, #0]
 8021ee0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021ee2:	6a3b      	ldr	r3, [r7, #32]
 8021ee4:	f383 8810 	msr	PRIMASK, r3
}
 8021ee8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8021eea:	687b      	ldr	r3, [r7, #4]
 8021eec:	228c      	movs	r2, #140	; 0x8c
 8021eee:	2120      	movs	r1, #32
 8021ef0:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	2200      	movs	r2, #0
 8021ef6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	2200      	movs	r2, #0
 8021efc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8021efe:	f3ef 8310 	mrs	r3, PRIMASK
 8021f02:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8021f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021f06:	2480      	movs	r4, #128	; 0x80
 8021f08:	193a      	adds	r2, r7, r4
 8021f0a:	6013      	str	r3, [r2, #0]
 8021f0c:	2301      	movs	r3, #1
 8021f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f12:	f383 8810 	msr	PRIMASK, r3
}
 8021f16:	46c0      	nop			; (mov r8, r8)
 8021f18:	687b      	ldr	r3, [r7, #4]
 8021f1a:	681b      	ldr	r3, [r3, #0]
 8021f1c:	681a      	ldr	r2, [r3, #0]
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	681b      	ldr	r3, [r3, #0]
 8021f22:	2110      	movs	r1, #16
 8021f24:	438a      	bics	r2, r1
 8021f26:	601a      	str	r2, [r3, #0]
 8021f28:	193b      	adds	r3, r7, r4
 8021f2a:	681b      	ldr	r3, [r3, #0]
 8021f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8021f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f30:	f383 8810 	msr	PRIMASK, r3
}
 8021f34:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8021f36:	687b      	ldr	r3, [r7, #4]
 8021f38:	2202      	movs	r2, #2
 8021f3a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8021f3c:	183b      	adds	r3, r7, r0
 8021f3e:	881a      	ldrh	r2, [r3, #0]
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	0011      	movs	r1, r2
 8021f44:	0018      	movs	r0, r3
 8021f46:	f000 f88d 	bl	8022064 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8021f4a:	e06f      	b.n	802202c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8021f4c:	23a4      	movs	r3, #164	; 0xa4
 8021f4e:	18fb      	adds	r3, r7, r3
 8021f50:	681a      	ldr	r2, [r3, #0]
 8021f52:	2380      	movs	r3, #128	; 0x80
 8021f54:	035b      	lsls	r3, r3, #13
 8021f56:	4013      	ands	r3, r2
 8021f58:	d010      	beq.n	8021f7c <HAL_UART_IRQHandler+0x584>
 8021f5a:	239c      	movs	r3, #156	; 0x9c
 8021f5c:	18fb      	adds	r3, r7, r3
 8021f5e:	681a      	ldr	r2, [r3, #0]
 8021f60:	2380      	movs	r3, #128	; 0x80
 8021f62:	03db      	lsls	r3, r3, #15
 8021f64:	4013      	ands	r3, r2
 8021f66:	d009      	beq.n	8021f7c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	2280      	movs	r2, #128	; 0x80
 8021f6e:	0352      	lsls	r2, r2, #13
 8021f70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	0018      	movs	r0, r3
 8021f76:	f000 fdb8 	bl	8022aea <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8021f7a:	e05a      	b.n	8022032 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8021f7c:	23a4      	movs	r3, #164	; 0xa4
 8021f7e:	18fb      	adds	r3, r7, r3
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	2280      	movs	r2, #128	; 0x80
 8021f84:	4013      	ands	r3, r2
 8021f86:	d016      	beq.n	8021fb6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8021f88:	23a0      	movs	r3, #160	; 0xa0
 8021f8a:	18fb      	adds	r3, r7, r3
 8021f8c:	681b      	ldr	r3, [r3, #0]
 8021f8e:	2280      	movs	r2, #128	; 0x80
 8021f90:	4013      	ands	r3, r2
 8021f92:	d106      	bne.n	8021fa2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8021f94:	239c      	movs	r3, #156	; 0x9c
 8021f96:	18fb      	adds	r3, r7, r3
 8021f98:	681a      	ldr	r2, [r3, #0]
 8021f9a:	2380      	movs	r3, #128	; 0x80
 8021f9c:	041b      	lsls	r3, r3, #16
 8021f9e:	4013      	ands	r3, r2
 8021fa0:	d009      	beq.n	8021fb6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d042      	beq.n	8022030 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8021fae:	687a      	ldr	r2, [r7, #4]
 8021fb0:	0010      	movs	r0, r2
 8021fb2:	4798      	blx	r3
    }
    return;
 8021fb4:	e03c      	b.n	8022030 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8021fb6:	23a4      	movs	r3, #164	; 0xa4
 8021fb8:	18fb      	adds	r3, r7, r3
 8021fba:	681b      	ldr	r3, [r3, #0]
 8021fbc:	2240      	movs	r2, #64	; 0x40
 8021fbe:	4013      	ands	r3, r2
 8021fc0:	d00a      	beq.n	8021fd8 <HAL_UART_IRQHandler+0x5e0>
 8021fc2:	23a0      	movs	r3, #160	; 0xa0
 8021fc4:	18fb      	adds	r3, r7, r3
 8021fc6:	681b      	ldr	r3, [r3, #0]
 8021fc8:	2240      	movs	r2, #64	; 0x40
 8021fca:	4013      	ands	r3, r2
 8021fcc:	d004      	beq.n	8021fd8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8021fce:	687b      	ldr	r3, [r7, #4]
 8021fd0:	0018      	movs	r0, r3
 8021fd2:	f000 fd5e 	bl	8022a92 <UART_EndTransmit_IT>
    return;
 8021fd6:	e02c      	b.n	8022032 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8021fd8:	23a4      	movs	r3, #164	; 0xa4
 8021fda:	18fb      	adds	r3, r7, r3
 8021fdc:	681a      	ldr	r2, [r3, #0]
 8021fde:	2380      	movs	r3, #128	; 0x80
 8021fe0:	041b      	lsls	r3, r3, #16
 8021fe2:	4013      	ands	r3, r2
 8021fe4:	d00b      	beq.n	8021ffe <HAL_UART_IRQHandler+0x606>
 8021fe6:	23a0      	movs	r3, #160	; 0xa0
 8021fe8:	18fb      	adds	r3, r7, r3
 8021fea:	681a      	ldr	r2, [r3, #0]
 8021fec:	2380      	movs	r3, #128	; 0x80
 8021fee:	05db      	lsls	r3, r3, #23
 8021ff0:	4013      	ands	r3, r2
 8021ff2:	d004      	beq.n	8021ffe <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	0018      	movs	r0, r3
 8021ff8:	f000 fd87 	bl	8022b0a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8021ffc:	e019      	b.n	8022032 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8021ffe:	23a4      	movs	r3, #164	; 0xa4
 8022000:	18fb      	adds	r3, r7, r3
 8022002:	681a      	ldr	r2, [r3, #0]
 8022004:	2380      	movs	r3, #128	; 0x80
 8022006:	045b      	lsls	r3, r3, #17
 8022008:	4013      	ands	r3, r2
 802200a:	d012      	beq.n	8022032 <HAL_UART_IRQHandler+0x63a>
 802200c:	23a0      	movs	r3, #160	; 0xa0
 802200e:	18fb      	adds	r3, r7, r3
 8022010:	681b      	ldr	r3, [r3, #0]
 8022012:	2b00      	cmp	r3, #0
 8022014:	da0d      	bge.n	8022032 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8022016:	687b      	ldr	r3, [r7, #4]
 8022018:	0018      	movs	r0, r3
 802201a:	f000 fd6e 	bl	8022afa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 802201e:	e008      	b.n	8022032 <HAL_UART_IRQHandler+0x63a>
      return;
 8022020:	46c0      	nop			; (mov r8, r8)
 8022022:	e006      	b.n	8022032 <HAL_UART_IRQHandler+0x63a>
    return;
 8022024:	46c0      	nop			; (mov r8, r8)
 8022026:	e004      	b.n	8022032 <HAL_UART_IRQHandler+0x63a>
      return;
 8022028:	46c0      	nop			; (mov r8, r8)
 802202a:	e002      	b.n	8022032 <HAL_UART_IRQHandler+0x63a>
      return;
 802202c:	46c0      	nop			; (mov r8, r8)
 802202e:	e000      	b.n	8022032 <HAL_UART_IRQHandler+0x63a>
    return;
 8022030:	46c0      	nop			; (mov r8, r8)
  }
}
 8022032:	46bd      	mov	sp, r7
 8022034:	b02a      	add	sp, #168	; 0xa8
 8022036:	bdb0      	pop	{r4, r5, r7, pc}
 8022038:	fffffeff 	.word	0xfffffeff
 802203c:	fffffedf 	.word	0xfffffedf
 8022040:	effffffe 	.word	0xeffffffe

08022044 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8022044:	b580      	push	{r7, lr}
 8022046:	b082      	sub	sp, #8
 8022048:	af00      	add	r7, sp, #0
 802204a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 802204c:	46c0      	nop			; (mov r8, r8)
 802204e:	46bd      	mov	sp, r7
 8022050:	b002      	add	sp, #8
 8022052:	bd80      	pop	{r7, pc}

08022054 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8022054:	b580      	push	{r7, lr}
 8022056:	b082      	sub	sp, #8
 8022058:	af00      	add	r7, sp, #0
 802205a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 802205c:	46c0      	nop			; (mov r8, r8)
 802205e:	46bd      	mov	sp, r7
 8022060:	b002      	add	sp, #8
 8022062:	bd80      	pop	{r7, pc}

08022064 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8022064:	b580      	push	{r7, lr}
 8022066:	b082      	sub	sp, #8
 8022068:	af00      	add	r7, sp, #0
 802206a:	6078      	str	r0, [r7, #4]
 802206c:	000a      	movs	r2, r1
 802206e:	1cbb      	adds	r3, r7, #2
 8022070:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8022072:	46c0      	nop			; (mov r8, r8)
 8022074:	46bd      	mov	sp, r7
 8022076:	b002      	add	sp, #8
 8022078:	bd80      	pop	{r7, pc}
	...

0802207c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 802207c:	b5b0      	push	{r4, r5, r7, lr}
 802207e:	b090      	sub	sp, #64	; 0x40
 8022080:	af00      	add	r7, sp, #0
 8022082:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8022084:	231a      	movs	r3, #26
 8022086:	2220      	movs	r2, #32
 8022088:	189b      	adds	r3, r3, r2
 802208a:	19db      	adds	r3, r3, r7
 802208c:	2200      	movs	r2, #0
 802208e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8022090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022092:	689a      	ldr	r2, [r3, #8]
 8022094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022096:	691b      	ldr	r3, [r3, #16]
 8022098:	431a      	orrs	r2, r3
 802209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802209c:	695b      	ldr	r3, [r3, #20]
 802209e:	431a      	orrs	r2, r3
 80220a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220a2:	69db      	ldr	r3, [r3, #28]
 80220a4:	4313      	orrs	r3, r2
 80220a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80220a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220aa:	681b      	ldr	r3, [r3, #0]
 80220ac:	681b      	ldr	r3, [r3, #0]
 80220ae:	4acb      	ldr	r2, [pc, #812]	; (80223dc <UART_SetConfig+0x360>)
 80220b0:	4013      	ands	r3, r2
 80220b2:	0019      	movs	r1, r3
 80220b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220b6:	681a      	ldr	r2, [r3, #0]
 80220b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80220ba:	430b      	orrs	r3, r1
 80220bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80220be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220c0:	681b      	ldr	r3, [r3, #0]
 80220c2:	685b      	ldr	r3, [r3, #4]
 80220c4:	4ac6      	ldr	r2, [pc, #792]	; (80223e0 <UART_SetConfig+0x364>)
 80220c6:	4013      	ands	r3, r2
 80220c8:	0018      	movs	r0, r3
 80220ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220cc:	68d9      	ldr	r1, [r3, #12]
 80220ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220d0:	681a      	ldr	r2, [r3, #0]
 80220d2:	0003      	movs	r3, r0
 80220d4:	430b      	orrs	r3, r1
 80220d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80220d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220da:	699b      	ldr	r3, [r3, #24]
 80220dc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80220de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220e0:	681b      	ldr	r3, [r3, #0]
 80220e2:	4ac0      	ldr	r2, [pc, #768]	; (80223e4 <UART_SetConfig+0x368>)
 80220e4:	4293      	cmp	r3, r2
 80220e6:	d004      	beq.n	80220f2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80220e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220ea:	6a1b      	ldr	r3, [r3, #32]
 80220ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80220ee:	4313      	orrs	r3, r2
 80220f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80220f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220f4:	681b      	ldr	r3, [r3, #0]
 80220f6:	689b      	ldr	r3, [r3, #8]
 80220f8:	4abb      	ldr	r2, [pc, #748]	; (80223e8 <UART_SetConfig+0x36c>)
 80220fa:	4013      	ands	r3, r2
 80220fc:	0019      	movs	r1, r3
 80220fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022100:	681a      	ldr	r2, [r3, #0]
 8022102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022104:	430b      	orrs	r3, r1
 8022106:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8022108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802210a:	681b      	ldr	r3, [r3, #0]
 802210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802210e:	220f      	movs	r2, #15
 8022110:	4393      	bics	r3, r2
 8022112:	0018      	movs	r0, r3
 8022114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022116:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8022118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802211a:	681a      	ldr	r2, [r3, #0]
 802211c:	0003      	movs	r3, r0
 802211e:	430b      	orrs	r3, r1
 8022120:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8022122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022124:	681b      	ldr	r3, [r3, #0]
 8022126:	4ab1      	ldr	r2, [pc, #708]	; (80223ec <UART_SetConfig+0x370>)
 8022128:	4293      	cmp	r3, r2
 802212a:	d13a      	bne.n	80221a2 <UART_SetConfig+0x126>
 802212c:	2003      	movs	r0, #3
 802212e:	f7ff fb51 	bl	80217d4 <LL_RCC_GetUSARTClockSource>
 8022132:	0003      	movs	r3, r0
 8022134:	4aae      	ldr	r2, [pc, #696]	; (80223f0 <UART_SetConfig+0x374>)
 8022136:	4293      	cmp	r3, r2
 8022138:	d025      	beq.n	8022186 <UART_SetConfig+0x10a>
 802213a:	4aad      	ldr	r2, [pc, #692]	; (80223f0 <UART_SetConfig+0x374>)
 802213c:	4293      	cmp	r3, r2
 802213e:	d829      	bhi.n	8022194 <UART_SetConfig+0x118>
 8022140:	4aac      	ldr	r2, [pc, #688]	; (80223f4 <UART_SetConfig+0x378>)
 8022142:	4293      	cmp	r3, r2
 8022144:	d011      	beq.n	802216a <UART_SetConfig+0xee>
 8022146:	4aab      	ldr	r2, [pc, #684]	; (80223f4 <UART_SetConfig+0x378>)
 8022148:	4293      	cmp	r3, r2
 802214a:	d823      	bhi.n	8022194 <UART_SetConfig+0x118>
 802214c:	22c0      	movs	r2, #192	; 0xc0
 802214e:	0292      	lsls	r2, r2, #10
 8022150:	4293      	cmp	r3, r2
 8022152:	d003      	beq.n	802215c <UART_SetConfig+0xe0>
 8022154:	4aa8      	ldr	r2, [pc, #672]	; (80223f8 <UART_SetConfig+0x37c>)
 8022156:	4293      	cmp	r3, r2
 8022158:	d00e      	beq.n	8022178 <UART_SetConfig+0xfc>
 802215a:	e01b      	b.n	8022194 <UART_SetConfig+0x118>
 802215c:	231b      	movs	r3, #27
 802215e:	2220      	movs	r2, #32
 8022160:	189b      	adds	r3, r3, r2
 8022162:	19db      	adds	r3, r3, r7
 8022164:	2201      	movs	r2, #1
 8022166:	701a      	strb	r2, [r3, #0]
 8022168:	e0a6      	b.n	80222b8 <UART_SetConfig+0x23c>
 802216a:	231b      	movs	r3, #27
 802216c:	2220      	movs	r2, #32
 802216e:	189b      	adds	r3, r3, r2
 8022170:	19db      	adds	r3, r3, r7
 8022172:	2202      	movs	r2, #2
 8022174:	701a      	strb	r2, [r3, #0]
 8022176:	e09f      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022178:	231b      	movs	r3, #27
 802217a:	2220      	movs	r2, #32
 802217c:	189b      	adds	r3, r3, r2
 802217e:	19db      	adds	r3, r3, r7
 8022180:	2204      	movs	r2, #4
 8022182:	701a      	strb	r2, [r3, #0]
 8022184:	e098      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022186:	231b      	movs	r3, #27
 8022188:	2220      	movs	r2, #32
 802218a:	189b      	adds	r3, r3, r2
 802218c:	19db      	adds	r3, r3, r7
 802218e:	2208      	movs	r2, #8
 8022190:	701a      	strb	r2, [r3, #0]
 8022192:	e091      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022194:	231b      	movs	r3, #27
 8022196:	2220      	movs	r2, #32
 8022198:	189b      	adds	r3, r3, r2
 802219a:	19db      	adds	r3, r3, r7
 802219c:	2210      	movs	r2, #16
 802219e:	701a      	strb	r2, [r3, #0]
 80221a0:	e08a      	b.n	80222b8 <UART_SetConfig+0x23c>
 80221a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80221a4:	681b      	ldr	r3, [r3, #0]
 80221a6:	4a95      	ldr	r2, [pc, #596]	; (80223fc <UART_SetConfig+0x380>)
 80221a8:	4293      	cmp	r3, r2
 80221aa:	d13a      	bne.n	8022222 <UART_SetConfig+0x1a6>
 80221ac:	200c      	movs	r0, #12
 80221ae:	f7ff fb11 	bl	80217d4 <LL_RCC_GetUSARTClockSource>
 80221b2:	0003      	movs	r3, r0
 80221b4:	4a92      	ldr	r2, [pc, #584]	; (8022400 <UART_SetConfig+0x384>)
 80221b6:	4293      	cmp	r3, r2
 80221b8:	d025      	beq.n	8022206 <UART_SetConfig+0x18a>
 80221ba:	4a91      	ldr	r2, [pc, #580]	; (8022400 <UART_SetConfig+0x384>)
 80221bc:	4293      	cmp	r3, r2
 80221be:	d829      	bhi.n	8022214 <UART_SetConfig+0x198>
 80221c0:	4a90      	ldr	r2, [pc, #576]	; (8022404 <UART_SetConfig+0x388>)
 80221c2:	4293      	cmp	r3, r2
 80221c4:	d011      	beq.n	80221ea <UART_SetConfig+0x16e>
 80221c6:	4a8f      	ldr	r2, [pc, #572]	; (8022404 <UART_SetConfig+0x388>)
 80221c8:	4293      	cmp	r3, r2
 80221ca:	d823      	bhi.n	8022214 <UART_SetConfig+0x198>
 80221cc:	22c0      	movs	r2, #192	; 0xc0
 80221ce:	0312      	lsls	r2, r2, #12
 80221d0:	4293      	cmp	r3, r2
 80221d2:	d003      	beq.n	80221dc <UART_SetConfig+0x160>
 80221d4:	4a8c      	ldr	r2, [pc, #560]	; (8022408 <UART_SetConfig+0x38c>)
 80221d6:	4293      	cmp	r3, r2
 80221d8:	d00e      	beq.n	80221f8 <UART_SetConfig+0x17c>
 80221da:	e01b      	b.n	8022214 <UART_SetConfig+0x198>
 80221dc:	231b      	movs	r3, #27
 80221de:	2220      	movs	r2, #32
 80221e0:	189b      	adds	r3, r3, r2
 80221e2:	19db      	adds	r3, r3, r7
 80221e4:	2200      	movs	r2, #0
 80221e6:	701a      	strb	r2, [r3, #0]
 80221e8:	e066      	b.n	80222b8 <UART_SetConfig+0x23c>
 80221ea:	231b      	movs	r3, #27
 80221ec:	2220      	movs	r2, #32
 80221ee:	189b      	adds	r3, r3, r2
 80221f0:	19db      	adds	r3, r3, r7
 80221f2:	2202      	movs	r2, #2
 80221f4:	701a      	strb	r2, [r3, #0]
 80221f6:	e05f      	b.n	80222b8 <UART_SetConfig+0x23c>
 80221f8:	231b      	movs	r3, #27
 80221fa:	2220      	movs	r2, #32
 80221fc:	189b      	adds	r3, r3, r2
 80221fe:	19db      	adds	r3, r3, r7
 8022200:	2204      	movs	r2, #4
 8022202:	701a      	strb	r2, [r3, #0]
 8022204:	e058      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022206:	231b      	movs	r3, #27
 8022208:	2220      	movs	r2, #32
 802220a:	189b      	adds	r3, r3, r2
 802220c:	19db      	adds	r3, r3, r7
 802220e:	2208      	movs	r2, #8
 8022210:	701a      	strb	r2, [r3, #0]
 8022212:	e051      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022214:	231b      	movs	r3, #27
 8022216:	2220      	movs	r2, #32
 8022218:	189b      	adds	r3, r3, r2
 802221a:	19db      	adds	r3, r3, r7
 802221c:	2210      	movs	r2, #16
 802221e:	701a      	strb	r2, [r3, #0]
 8022220:	e04a      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022224:	681b      	ldr	r3, [r3, #0]
 8022226:	4a6f      	ldr	r2, [pc, #444]	; (80223e4 <UART_SetConfig+0x368>)
 8022228:	4293      	cmp	r3, r2
 802222a:	d13f      	bne.n	80222ac <UART_SetConfig+0x230>
 802222c:	23c0      	movs	r3, #192	; 0xc0
 802222e:	011b      	lsls	r3, r3, #4
 8022230:	0018      	movs	r0, r3
 8022232:	f7ff fae0 	bl	80217f6 <LL_RCC_GetLPUARTClockSource>
 8022236:	0003      	movs	r3, r0
 8022238:	22c0      	movs	r2, #192	; 0xc0
 802223a:	0112      	lsls	r2, r2, #4
 802223c:	4293      	cmp	r3, r2
 802223e:	d027      	beq.n	8022290 <UART_SetConfig+0x214>
 8022240:	22c0      	movs	r2, #192	; 0xc0
 8022242:	0112      	lsls	r2, r2, #4
 8022244:	4293      	cmp	r3, r2
 8022246:	d82a      	bhi.n	802229e <UART_SetConfig+0x222>
 8022248:	2280      	movs	r2, #128	; 0x80
 802224a:	0112      	lsls	r2, r2, #4
 802224c:	4293      	cmp	r3, r2
 802224e:	d011      	beq.n	8022274 <UART_SetConfig+0x1f8>
 8022250:	2280      	movs	r2, #128	; 0x80
 8022252:	0112      	lsls	r2, r2, #4
 8022254:	4293      	cmp	r3, r2
 8022256:	d822      	bhi.n	802229e <UART_SetConfig+0x222>
 8022258:	2b00      	cmp	r3, #0
 802225a:	d004      	beq.n	8022266 <UART_SetConfig+0x1ea>
 802225c:	2280      	movs	r2, #128	; 0x80
 802225e:	00d2      	lsls	r2, r2, #3
 8022260:	4293      	cmp	r3, r2
 8022262:	d00e      	beq.n	8022282 <UART_SetConfig+0x206>
 8022264:	e01b      	b.n	802229e <UART_SetConfig+0x222>
 8022266:	231b      	movs	r3, #27
 8022268:	2220      	movs	r2, #32
 802226a:	189b      	adds	r3, r3, r2
 802226c:	19db      	adds	r3, r3, r7
 802226e:	2200      	movs	r2, #0
 8022270:	701a      	strb	r2, [r3, #0]
 8022272:	e021      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022274:	231b      	movs	r3, #27
 8022276:	2220      	movs	r2, #32
 8022278:	189b      	adds	r3, r3, r2
 802227a:	19db      	adds	r3, r3, r7
 802227c:	2202      	movs	r2, #2
 802227e:	701a      	strb	r2, [r3, #0]
 8022280:	e01a      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022282:	231b      	movs	r3, #27
 8022284:	2220      	movs	r2, #32
 8022286:	189b      	adds	r3, r3, r2
 8022288:	19db      	adds	r3, r3, r7
 802228a:	2204      	movs	r2, #4
 802228c:	701a      	strb	r2, [r3, #0]
 802228e:	e013      	b.n	80222b8 <UART_SetConfig+0x23c>
 8022290:	231b      	movs	r3, #27
 8022292:	2220      	movs	r2, #32
 8022294:	189b      	adds	r3, r3, r2
 8022296:	19db      	adds	r3, r3, r7
 8022298:	2208      	movs	r2, #8
 802229a:	701a      	strb	r2, [r3, #0]
 802229c:	e00c      	b.n	80222b8 <UART_SetConfig+0x23c>
 802229e:	231b      	movs	r3, #27
 80222a0:	2220      	movs	r2, #32
 80222a2:	189b      	adds	r3, r3, r2
 80222a4:	19db      	adds	r3, r3, r7
 80222a6:	2210      	movs	r2, #16
 80222a8:	701a      	strb	r2, [r3, #0]
 80222aa:	e005      	b.n	80222b8 <UART_SetConfig+0x23c>
 80222ac:	231b      	movs	r3, #27
 80222ae:	2220      	movs	r2, #32
 80222b0:	189b      	adds	r3, r3, r2
 80222b2:	19db      	adds	r3, r3, r7
 80222b4:	2210      	movs	r2, #16
 80222b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80222b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	4a49      	ldr	r2, [pc, #292]	; (80223e4 <UART_SetConfig+0x368>)
 80222be:	4293      	cmp	r3, r2
 80222c0:	d000      	beq.n	80222c4 <UART_SetConfig+0x248>
 80222c2:	e0ae      	b.n	8022422 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80222c4:	231b      	movs	r3, #27
 80222c6:	2220      	movs	r2, #32
 80222c8:	189b      	adds	r3, r3, r2
 80222ca:	19db      	adds	r3, r3, r7
 80222cc:	781b      	ldrb	r3, [r3, #0]
 80222ce:	2b08      	cmp	r3, #8
 80222d0:	d015      	beq.n	80222fe <UART_SetConfig+0x282>
 80222d2:	dc18      	bgt.n	8022306 <UART_SetConfig+0x28a>
 80222d4:	2b04      	cmp	r3, #4
 80222d6:	d00d      	beq.n	80222f4 <UART_SetConfig+0x278>
 80222d8:	dc15      	bgt.n	8022306 <UART_SetConfig+0x28a>
 80222da:	2b00      	cmp	r3, #0
 80222dc:	d002      	beq.n	80222e4 <UART_SetConfig+0x268>
 80222de:	2b02      	cmp	r3, #2
 80222e0:	d005      	beq.n	80222ee <UART_SetConfig+0x272>
 80222e2:	e010      	b.n	8022306 <UART_SetConfig+0x28a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80222e4:	f7ff f814 	bl	8021310 <HAL_RCC_GetPCLK1Freq>
 80222e8:	0003      	movs	r3, r0
 80222ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80222ec:	e014      	b.n	8022318 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80222ee:	4b47      	ldr	r3, [pc, #284]	; (802240c <UART_SetConfig+0x390>)
 80222f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80222f2:	e011      	b.n	8022318 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80222f4:	f7fe ff32 	bl	802115c <HAL_RCC_GetSysClockFreq>
 80222f8:	0003      	movs	r3, r0
 80222fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80222fc:	e00c      	b.n	8022318 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80222fe:	2380      	movs	r3, #128	; 0x80
 8022300:	021b      	lsls	r3, r3, #8
 8022302:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8022304:	e008      	b.n	8022318 <UART_SetConfig+0x29c>
      default:
        pclk = 0U;
 8022306:	2300      	movs	r3, #0
 8022308:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 802230a:	231a      	movs	r3, #26
 802230c:	2220      	movs	r2, #32
 802230e:	189b      	adds	r3, r3, r2
 8022310:	19db      	adds	r3, r3, r7
 8022312:	2201      	movs	r2, #1
 8022314:	701a      	strb	r2, [r3, #0]
        break;
 8022316:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8022318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802231a:	2b00      	cmp	r3, #0
 802231c:	d100      	bne.n	8022320 <UART_SetConfig+0x2a4>
 802231e:	e152      	b.n	80225c6 <UART_SetConfig+0x54a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8022320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022324:	4b3a      	ldr	r3, [pc, #232]	; (8022410 <UART_SetConfig+0x394>)
 8022326:	0052      	lsls	r2, r2, #1
 8022328:	5ad3      	ldrh	r3, [r2, r3]
 802232a:	0019      	movs	r1, r3
 802232c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802232e:	f7fd feeb 	bl	8020108 <__udivsi3>
 8022332:	0003      	movs	r3, r0
 8022334:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8022336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022338:	685a      	ldr	r2, [r3, #4]
 802233a:	0013      	movs	r3, r2
 802233c:	005b      	lsls	r3, r3, #1
 802233e:	189b      	adds	r3, r3, r2
 8022340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022342:	429a      	cmp	r2, r3
 8022344:	d305      	bcc.n	8022352 <UART_SetConfig+0x2d6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8022346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022348:	685b      	ldr	r3, [r3, #4]
 802234a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802234c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802234e:	429a      	cmp	r2, r3
 8022350:	d906      	bls.n	8022360 <UART_SetConfig+0x2e4>
      {
        ret = HAL_ERROR;
 8022352:	231a      	movs	r3, #26
 8022354:	2220      	movs	r2, #32
 8022356:	189b      	adds	r3, r3, r2
 8022358:	19db      	adds	r3, r3, r7
 802235a:	2201      	movs	r2, #1
 802235c:	701a      	strb	r2, [r3, #0]
 802235e:	e132      	b.n	80225c6 <UART_SetConfig+0x54a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022362:	61bb      	str	r3, [r7, #24]
 8022364:	2300      	movs	r3, #0
 8022366:	61fb      	str	r3, [r7, #28]
 8022368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802236a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802236c:	4b28      	ldr	r3, [pc, #160]	; (8022410 <UART_SetConfig+0x394>)
 802236e:	0052      	lsls	r2, r2, #1
 8022370:	5ad3      	ldrh	r3, [r2, r3]
 8022372:	613b      	str	r3, [r7, #16]
 8022374:	2300      	movs	r3, #0
 8022376:	617b      	str	r3, [r7, #20]
 8022378:	693a      	ldr	r2, [r7, #16]
 802237a:	697b      	ldr	r3, [r7, #20]
 802237c:	69b8      	ldr	r0, [r7, #24]
 802237e:	69f9      	ldr	r1, [r7, #28]
 8022380:	f7fe f838 	bl	80203f4 <__aeabi_uldivmod>
 8022384:	0002      	movs	r2, r0
 8022386:	000b      	movs	r3, r1
 8022388:	0e11      	lsrs	r1, r2, #24
 802238a:	021d      	lsls	r5, r3, #8
 802238c:	430d      	orrs	r5, r1
 802238e:	0214      	lsls	r4, r2, #8
 8022390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022392:	685b      	ldr	r3, [r3, #4]
 8022394:	085b      	lsrs	r3, r3, #1
 8022396:	60bb      	str	r3, [r7, #8]
 8022398:	2300      	movs	r3, #0
 802239a:	60fb      	str	r3, [r7, #12]
 802239c:	68b8      	ldr	r0, [r7, #8]
 802239e:	68f9      	ldr	r1, [r7, #12]
 80223a0:	1900      	adds	r0, r0, r4
 80223a2:	4169      	adcs	r1, r5
 80223a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223a6:	685b      	ldr	r3, [r3, #4]
 80223a8:	603b      	str	r3, [r7, #0]
 80223aa:	2300      	movs	r3, #0
 80223ac:	607b      	str	r3, [r7, #4]
 80223ae:	683a      	ldr	r2, [r7, #0]
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	f7fe f81f 	bl	80203f4 <__aeabi_uldivmod>
 80223b6:	0002      	movs	r2, r0
 80223b8:	000b      	movs	r3, r1
 80223ba:	0013      	movs	r3, r2
 80223bc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80223be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80223c0:	23c0      	movs	r3, #192	; 0xc0
 80223c2:	009b      	lsls	r3, r3, #2
 80223c4:	429a      	cmp	r2, r3
 80223c6:	d325      	bcc.n	8022414 <UART_SetConfig+0x398>
 80223c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80223ca:	2380      	movs	r3, #128	; 0x80
 80223cc:	035b      	lsls	r3, r3, #13
 80223ce:	429a      	cmp	r2, r3
 80223d0:	d220      	bcs.n	8022414 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80223d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80223d4:	681b      	ldr	r3, [r3, #0]
 80223d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80223d8:	60da      	str	r2, [r3, #12]
 80223da:	e0f4      	b.n	80225c6 <UART_SetConfig+0x54a>
 80223dc:	cfff69f3 	.word	0xcfff69f3
 80223e0:	ffffcfff 	.word	0xffffcfff
 80223e4:	40008000 	.word	0x40008000
 80223e8:	11fff4ff 	.word	0x11fff4ff
 80223ec:	40013800 	.word	0x40013800
 80223f0:	00030003 	.word	0x00030003
 80223f4:	00030002 	.word	0x00030002
 80223f8:	00030001 	.word	0x00030001
 80223fc:	40004400 	.word	0x40004400
 8022400:	000c000c 	.word	0x000c000c
 8022404:	000c0008 	.word	0x000c0008
 8022408:	000c0004 	.word	0x000c0004
 802240c:	00f42400 	.word	0x00f42400
 8022410:	08022e60 	.word	0x08022e60
        }
        else
        {
          ret = HAL_ERROR;
 8022414:	231a      	movs	r3, #26
 8022416:	2220      	movs	r2, #32
 8022418:	189b      	adds	r3, r3, r2
 802241a:	19db      	adds	r3, r3, r7
 802241c:	2201      	movs	r2, #1
 802241e:	701a      	strb	r2, [r3, #0]
 8022420:	e0d1      	b.n	80225c6 <UART_SetConfig+0x54a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8022422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022424:	69da      	ldr	r2, [r3, #28]
 8022426:	2380      	movs	r3, #128	; 0x80
 8022428:	021b      	lsls	r3, r3, #8
 802242a:	429a      	cmp	r2, r3
 802242c:	d000      	beq.n	8022430 <UART_SetConfig+0x3b4>
 802242e:	e071      	b.n	8022514 <UART_SetConfig+0x498>
  {
    switch (clocksource)
 8022430:	231b      	movs	r3, #27
 8022432:	2220      	movs	r2, #32
 8022434:	189b      	adds	r3, r3, r2
 8022436:	19db      	adds	r3, r3, r7
 8022438:	781b      	ldrb	r3, [r3, #0]
 802243a:	2b08      	cmp	r3, #8
 802243c:	d81a      	bhi.n	8022474 <UART_SetConfig+0x3f8>
 802243e:	009a      	lsls	r2, r3, #2
 8022440:	4b6c      	ldr	r3, [pc, #432]	; (80225f4 <UART_SetConfig+0x578>)
 8022442:	18d3      	adds	r3, r2, r3
 8022444:	681b      	ldr	r3, [r3, #0]
 8022446:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8022448:	f7fe ff62 	bl	8021310 <HAL_RCC_GetPCLK1Freq>
 802244c:	0003      	movs	r3, r0
 802244e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8022450:	e019      	b.n	8022486 <UART_SetConfig+0x40a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8022452:	f7fe ff71 	bl	8021338 <HAL_RCC_GetPCLK2Freq>
 8022456:	0003      	movs	r3, r0
 8022458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 802245a:	e014      	b.n	8022486 <UART_SetConfig+0x40a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 802245c:	4b66      	ldr	r3, [pc, #408]	; (80225f8 <UART_SetConfig+0x57c>)
 802245e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8022460:	e011      	b.n	8022486 <UART_SetConfig+0x40a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8022462:	f7fe fe7b 	bl	802115c <HAL_RCC_GetSysClockFreq>
 8022466:	0003      	movs	r3, r0
 8022468:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 802246a:	e00c      	b.n	8022486 <UART_SetConfig+0x40a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 802246c:	2380      	movs	r3, #128	; 0x80
 802246e:	021b      	lsls	r3, r3, #8
 8022470:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8022472:	e008      	b.n	8022486 <UART_SetConfig+0x40a>
      default:
        pclk = 0U;
 8022474:	2300      	movs	r3, #0
 8022476:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8022478:	231a      	movs	r3, #26
 802247a:	2220      	movs	r2, #32
 802247c:	189b      	adds	r3, r3, r2
 802247e:	19db      	adds	r3, r3, r7
 8022480:	2201      	movs	r2, #1
 8022482:	701a      	strb	r2, [r3, #0]
        break;
 8022484:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8022486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022488:	2b00      	cmp	r3, #0
 802248a:	d100      	bne.n	802248e <UART_SetConfig+0x412>
 802248c:	e09b      	b.n	80225c6 <UART_SetConfig+0x54a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022492:	4b5a      	ldr	r3, [pc, #360]	; (80225fc <UART_SetConfig+0x580>)
 8022494:	0052      	lsls	r2, r2, #1
 8022496:	5ad3      	ldrh	r3, [r2, r3]
 8022498:	0019      	movs	r1, r3
 802249a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802249c:	f7fd fe34 	bl	8020108 <__udivsi3>
 80224a0:	0003      	movs	r3, r0
 80224a2:	005a      	lsls	r2, r3, #1
 80224a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224a6:	685b      	ldr	r3, [r3, #4]
 80224a8:	085b      	lsrs	r3, r3, #1
 80224aa:	18d2      	adds	r2, r2, r3
 80224ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ae:	685b      	ldr	r3, [r3, #4]
 80224b0:	0019      	movs	r1, r3
 80224b2:	0010      	movs	r0, r2
 80224b4:	f7fd fe28 	bl	8020108 <__udivsi3>
 80224b8:	0003      	movs	r3, r0
 80224ba:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80224bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224be:	2b0f      	cmp	r3, #15
 80224c0:	d921      	bls.n	8022506 <UART_SetConfig+0x48a>
 80224c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80224c4:	2380      	movs	r3, #128	; 0x80
 80224c6:	025b      	lsls	r3, r3, #9
 80224c8:	429a      	cmp	r2, r3
 80224ca:	d21c      	bcs.n	8022506 <UART_SetConfig+0x48a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80224cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224ce:	b29a      	uxth	r2, r3
 80224d0:	200e      	movs	r0, #14
 80224d2:	2420      	movs	r4, #32
 80224d4:	1903      	adds	r3, r0, r4
 80224d6:	19db      	adds	r3, r3, r7
 80224d8:	210f      	movs	r1, #15
 80224da:	438a      	bics	r2, r1
 80224dc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80224de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80224e0:	085b      	lsrs	r3, r3, #1
 80224e2:	b29b      	uxth	r3, r3
 80224e4:	2207      	movs	r2, #7
 80224e6:	4013      	ands	r3, r2
 80224e8:	b299      	uxth	r1, r3
 80224ea:	1903      	adds	r3, r0, r4
 80224ec:	19db      	adds	r3, r3, r7
 80224ee:	1902      	adds	r2, r0, r4
 80224f0:	19d2      	adds	r2, r2, r7
 80224f2:	8812      	ldrh	r2, [r2, #0]
 80224f4:	430a      	orrs	r2, r1
 80224f6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80224f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224fa:	681b      	ldr	r3, [r3, #0]
 80224fc:	1902      	adds	r2, r0, r4
 80224fe:	19d2      	adds	r2, r2, r7
 8022500:	8812      	ldrh	r2, [r2, #0]
 8022502:	60da      	str	r2, [r3, #12]
 8022504:	e05f      	b.n	80225c6 <UART_SetConfig+0x54a>
      }
      else
      {
        ret = HAL_ERROR;
 8022506:	231a      	movs	r3, #26
 8022508:	2220      	movs	r2, #32
 802250a:	189b      	adds	r3, r3, r2
 802250c:	19db      	adds	r3, r3, r7
 802250e:	2201      	movs	r2, #1
 8022510:	701a      	strb	r2, [r3, #0]
 8022512:	e058      	b.n	80225c6 <UART_SetConfig+0x54a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8022514:	231b      	movs	r3, #27
 8022516:	2220      	movs	r2, #32
 8022518:	189b      	adds	r3, r3, r2
 802251a:	19db      	adds	r3, r3, r7
 802251c:	781b      	ldrb	r3, [r3, #0]
 802251e:	2b08      	cmp	r3, #8
 8022520:	d81a      	bhi.n	8022558 <UART_SetConfig+0x4dc>
 8022522:	009a      	lsls	r2, r3, #2
 8022524:	4b36      	ldr	r3, [pc, #216]	; (8022600 <UART_SetConfig+0x584>)
 8022526:	18d3      	adds	r3, r2, r3
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802252c:	f7fe fef0 	bl	8021310 <HAL_RCC_GetPCLK1Freq>
 8022530:	0003      	movs	r3, r0
 8022532:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8022534:	e019      	b.n	802256a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8022536:	f7fe feff 	bl	8021338 <HAL_RCC_GetPCLK2Freq>
 802253a:	0003      	movs	r3, r0
 802253c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 802253e:	e014      	b.n	802256a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8022540:	4b2d      	ldr	r3, [pc, #180]	; (80225f8 <UART_SetConfig+0x57c>)
 8022542:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8022544:	e011      	b.n	802256a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8022546:	f7fe fe09 	bl	802115c <HAL_RCC_GetSysClockFreq>
 802254a:	0003      	movs	r3, r0
 802254c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 802254e:	e00c      	b.n	802256a <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8022550:	2380      	movs	r3, #128	; 0x80
 8022552:	021b      	lsls	r3, r3, #8
 8022554:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8022556:	e008      	b.n	802256a <UART_SetConfig+0x4ee>
      default:
        pclk = 0U;
 8022558:	2300      	movs	r3, #0
 802255a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 802255c:	231a      	movs	r3, #26
 802255e:	2220      	movs	r2, #32
 8022560:	189b      	adds	r3, r3, r2
 8022562:	19db      	adds	r3, r3, r7
 8022564:	2201      	movs	r2, #1
 8022566:	701a      	strb	r2, [r3, #0]
        break;
 8022568:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 802256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802256c:	2b00      	cmp	r3, #0
 802256e:	d02a      	beq.n	80225c6 <UART_SetConfig+0x54a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8022570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022574:	4b21      	ldr	r3, [pc, #132]	; (80225fc <UART_SetConfig+0x580>)
 8022576:	0052      	lsls	r2, r2, #1
 8022578:	5ad3      	ldrh	r3, [r2, r3]
 802257a:	0019      	movs	r1, r3
 802257c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802257e:	f7fd fdc3 	bl	8020108 <__udivsi3>
 8022582:	0003      	movs	r3, r0
 8022584:	001a      	movs	r2, r3
 8022586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022588:	685b      	ldr	r3, [r3, #4]
 802258a:	085b      	lsrs	r3, r3, #1
 802258c:	18d2      	adds	r2, r2, r3
 802258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022590:	685b      	ldr	r3, [r3, #4]
 8022592:	0019      	movs	r1, r3
 8022594:	0010      	movs	r0, r2
 8022596:	f7fd fdb7 	bl	8020108 <__udivsi3>
 802259a:	0003      	movs	r3, r0
 802259c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225a0:	2b0f      	cmp	r3, #15
 80225a2:	d90a      	bls.n	80225ba <UART_SetConfig+0x53e>
 80225a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80225a6:	2380      	movs	r3, #128	; 0x80
 80225a8:	025b      	lsls	r3, r3, #9
 80225aa:	429a      	cmp	r2, r3
 80225ac:	d205      	bcs.n	80225ba <UART_SetConfig+0x53e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80225ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225b0:	b29a      	uxth	r2, r3
 80225b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225b4:	681b      	ldr	r3, [r3, #0]
 80225b6:	60da      	str	r2, [r3, #12]
 80225b8:	e005      	b.n	80225c6 <UART_SetConfig+0x54a>
      }
      else
      {
        ret = HAL_ERROR;
 80225ba:	231a      	movs	r3, #26
 80225bc:	2220      	movs	r2, #32
 80225be:	189b      	adds	r3, r3, r2
 80225c0:	19db      	adds	r3, r3, r7
 80225c2:	2201      	movs	r2, #1
 80225c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80225c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225c8:	226a      	movs	r2, #106	; 0x6a
 80225ca:	2101      	movs	r1, #1
 80225cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80225ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225d0:	2268      	movs	r2, #104	; 0x68
 80225d2:	2101      	movs	r1, #1
 80225d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80225d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225d8:	2200      	movs	r2, #0
 80225da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80225dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225de:	2200      	movs	r2, #0
 80225e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80225e2:	231a      	movs	r3, #26
 80225e4:	2220      	movs	r2, #32
 80225e6:	189b      	adds	r3, r3, r2
 80225e8:	19db      	adds	r3, r3, r7
 80225ea:	781b      	ldrb	r3, [r3, #0]
}
 80225ec:	0018      	movs	r0, r3
 80225ee:	46bd      	mov	sp, r7
 80225f0:	b010      	add	sp, #64	; 0x40
 80225f2:	bdb0      	pop	{r4, r5, r7, pc}
 80225f4:	08022e78 	.word	0x08022e78
 80225f8:	00f42400 	.word	0x00f42400
 80225fc:	08022e60 	.word	0x08022e60
 8022600:	08022e9c 	.word	0x08022e9c

08022604 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8022604:	b580      	push	{r7, lr}
 8022606:	b082      	sub	sp, #8
 8022608:	af00      	add	r7, sp, #0
 802260a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802260c:	687b      	ldr	r3, [r7, #4]
 802260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022610:	2201      	movs	r2, #1
 8022612:	4013      	ands	r3, r2
 8022614:	d00b      	beq.n	802262e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	681b      	ldr	r3, [r3, #0]
 802261a:	685b      	ldr	r3, [r3, #4]
 802261c:	4a4a      	ldr	r2, [pc, #296]	; (8022748 <UART_AdvFeatureConfig+0x144>)
 802261e:	4013      	ands	r3, r2
 8022620:	0019      	movs	r1, r3
 8022622:	687b      	ldr	r3, [r7, #4]
 8022624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	681b      	ldr	r3, [r3, #0]
 802262a:	430a      	orrs	r2, r1
 802262c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022632:	2202      	movs	r2, #2
 8022634:	4013      	ands	r3, r2
 8022636:	d00b      	beq.n	8022650 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	681b      	ldr	r3, [r3, #0]
 802263c:	685b      	ldr	r3, [r3, #4]
 802263e:	4a43      	ldr	r2, [pc, #268]	; (802274c <UART_AdvFeatureConfig+0x148>)
 8022640:	4013      	ands	r3, r2
 8022642:	0019      	movs	r1, r3
 8022644:	687b      	ldr	r3, [r7, #4]
 8022646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8022648:	687b      	ldr	r3, [r7, #4]
 802264a:	681b      	ldr	r3, [r3, #0]
 802264c:	430a      	orrs	r2, r1
 802264e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8022650:	687b      	ldr	r3, [r7, #4]
 8022652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022654:	2204      	movs	r2, #4
 8022656:	4013      	ands	r3, r2
 8022658:	d00b      	beq.n	8022672 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	685b      	ldr	r3, [r3, #4]
 8022660:	4a3b      	ldr	r2, [pc, #236]	; (8022750 <UART_AdvFeatureConfig+0x14c>)
 8022662:	4013      	ands	r3, r2
 8022664:	0019      	movs	r1, r3
 8022666:	687b      	ldr	r3, [r7, #4]
 8022668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802266a:	687b      	ldr	r3, [r7, #4]
 802266c:	681b      	ldr	r3, [r3, #0]
 802266e:	430a      	orrs	r2, r1
 8022670:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8022672:	687b      	ldr	r3, [r7, #4]
 8022674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022676:	2208      	movs	r2, #8
 8022678:	4013      	ands	r3, r2
 802267a:	d00b      	beq.n	8022694 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802267c:	687b      	ldr	r3, [r7, #4]
 802267e:	681b      	ldr	r3, [r3, #0]
 8022680:	685b      	ldr	r3, [r3, #4]
 8022682:	4a34      	ldr	r2, [pc, #208]	; (8022754 <UART_AdvFeatureConfig+0x150>)
 8022684:	4013      	ands	r3, r2
 8022686:	0019      	movs	r1, r3
 8022688:	687b      	ldr	r3, [r7, #4]
 802268a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	681b      	ldr	r3, [r3, #0]
 8022690:	430a      	orrs	r2, r1
 8022692:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022698:	2210      	movs	r2, #16
 802269a:	4013      	ands	r3, r2
 802269c:	d00b      	beq.n	80226b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	681b      	ldr	r3, [r3, #0]
 80226a2:	689b      	ldr	r3, [r3, #8]
 80226a4:	4a2c      	ldr	r2, [pc, #176]	; (8022758 <UART_AdvFeatureConfig+0x154>)
 80226a6:	4013      	ands	r3, r2
 80226a8:	0019      	movs	r1, r3
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80226ae:	687b      	ldr	r3, [r7, #4]
 80226b0:	681b      	ldr	r3, [r3, #0]
 80226b2:	430a      	orrs	r2, r1
 80226b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226ba:	2220      	movs	r2, #32
 80226bc:	4013      	ands	r3, r2
 80226be:	d00b      	beq.n	80226d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80226c0:	687b      	ldr	r3, [r7, #4]
 80226c2:	681b      	ldr	r3, [r3, #0]
 80226c4:	689b      	ldr	r3, [r3, #8]
 80226c6:	4a25      	ldr	r2, [pc, #148]	; (802275c <UART_AdvFeatureConfig+0x158>)
 80226c8:	4013      	ands	r3, r2
 80226ca:	0019      	movs	r1, r3
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	681b      	ldr	r3, [r3, #0]
 80226d4:	430a      	orrs	r2, r1
 80226d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80226dc:	2240      	movs	r2, #64	; 0x40
 80226de:	4013      	ands	r3, r2
 80226e0:	d01d      	beq.n	802271e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80226e2:	687b      	ldr	r3, [r7, #4]
 80226e4:	681b      	ldr	r3, [r3, #0]
 80226e6:	685b      	ldr	r3, [r3, #4]
 80226e8:	4a1d      	ldr	r2, [pc, #116]	; (8022760 <UART_AdvFeatureConfig+0x15c>)
 80226ea:	4013      	ands	r3, r2
 80226ec:	0019      	movs	r1, r3
 80226ee:	687b      	ldr	r3, [r7, #4]
 80226f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	681b      	ldr	r3, [r3, #0]
 80226f6:	430a      	orrs	r2, r1
 80226f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80226fe:	2380      	movs	r3, #128	; 0x80
 8022700:	035b      	lsls	r3, r3, #13
 8022702:	429a      	cmp	r2, r3
 8022704:	d10b      	bne.n	802271e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	681b      	ldr	r3, [r3, #0]
 802270a:	685b      	ldr	r3, [r3, #4]
 802270c:	4a15      	ldr	r2, [pc, #84]	; (8022764 <UART_AdvFeatureConfig+0x160>)
 802270e:	4013      	ands	r3, r2
 8022710:	0019      	movs	r1, r3
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8022716:	687b      	ldr	r3, [r7, #4]
 8022718:	681b      	ldr	r3, [r3, #0]
 802271a:	430a      	orrs	r2, r1
 802271c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802271e:	687b      	ldr	r3, [r7, #4]
 8022720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022722:	2280      	movs	r2, #128	; 0x80
 8022724:	4013      	ands	r3, r2
 8022726:	d00b      	beq.n	8022740 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	681b      	ldr	r3, [r3, #0]
 802272c:	685b      	ldr	r3, [r3, #4]
 802272e:	4a0e      	ldr	r2, [pc, #56]	; (8022768 <UART_AdvFeatureConfig+0x164>)
 8022730:	4013      	ands	r3, r2
 8022732:	0019      	movs	r1, r3
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8022738:	687b      	ldr	r3, [r7, #4]
 802273a:	681b      	ldr	r3, [r3, #0]
 802273c:	430a      	orrs	r2, r1
 802273e:	605a      	str	r2, [r3, #4]
  }
}
 8022740:	46c0      	nop			; (mov r8, r8)
 8022742:	46bd      	mov	sp, r7
 8022744:	b002      	add	sp, #8
 8022746:	bd80      	pop	{r7, pc}
 8022748:	fffdffff 	.word	0xfffdffff
 802274c:	fffeffff 	.word	0xfffeffff
 8022750:	fffbffff 	.word	0xfffbffff
 8022754:	ffff7fff 	.word	0xffff7fff
 8022758:	ffffefff 	.word	0xffffefff
 802275c:	ffffdfff 	.word	0xffffdfff
 8022760:	ffefffff 	.word	0xffefffff
 8022764:	ff9fffff 	.word	0xff9fffff
 8022768:	fff7ffff 	.word	0xfff7ffff

0802276c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802276c:	b580      	push	{r7, lr}
 802276e:	b086      	sub	sp, #24
 8022770:	af02      	add	r7, sp, #8
 8022772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022774:	687b      	ldr	r3, [r7, #4]
 8022776:	2290      	movs	r2, #144	; 0x90
 8022778:	2100      	movs	r1, #0
 802277a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 802277c:	f7fe f93c 	bl	80209f8 <HAL_GetTick>
 8022780:	0003      	movs	r3, r0
 8022782:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8022784:	687b      	ldr	r3, [r7, #4]
 8022786:	681b      	ldr	r3, [r3, #0]
 8022788:	681b      	ldr	r3, [r3, #0]
 802278a:	2208      	movs	r2, #8
 802278c:	4013      	ands	r3, r2
 802278e:	2b08      	cmp	r3, #8
 8022790:	d10c      	bne.n	80227ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8022792:	68fb      	ldr	r3, [r7, #12]
 8022794:	2280      	movs	r2, #128	; 0x80
 8022796:	0391      	lsls	r1, r2, #14
 8022798:	6878      	ldr	r0, [r7, #4]
 802279a:	4a1a      	ldr	r2, [pc, #104]	; (8022804 <UART_CheckIdleState+0x98>)
 802279c:	9200      	str	r2, [sp, #0]
 802279e:	2200      	movs	r2, #0
 80227a0:	f000 f832 	bl	8022808 <UART_WaitOnFlagUntilTimeout>
 80227a4:	1e03      	subs	r3, r0, #0
 80227a6:	d001      	beq.n	80227ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80227a8:	2303      	movs	r3, #3
 80227aa:	e026      	b.n	80227fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	681b      	ldr	r3, [r3, #0]
 80227b2:	2204      	movs	r2, #4
 80227b4:	4013      	ands	r3, r2
 80227b6:	2b04      	cmp	r3, #4
 80227b8:	d10c      	bne.n	80227d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80227ba:	68fb      	ldr	r3, [r7, #12]
 80227bc:	2280      	movs	r2, #128	; 0x80
 80227be:	03d1      	lsls	r1, r2, #15
 80227c0:	6878      	ldr	r0, [r7, #4]
 80227c2:	4a10      	ldr	r2, [pc, #64]	; (8022804 <UART_CheckIdleState+0x98>)
 80227c4:	9200      	str	r2, [sp, #0]
 80227c6:	2200      	movs	r2, #0
 80227c8:	f000 f81e 	bl	8022808 <UART_WaitOnFlagUntilTimeout>
 80227cc:	1e03      	subs	r3, r0, #0
 80227ce:	d001      	beq.n	80227d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80227d0:	2303      	movs	r3, #3
 80227d2:	e012      	b.n	80227fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	2288      	movs	r2, #136	; 0x88
 80227d8:	2120      	movs	r1, #32
 80227da:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80227dc:	687b      	ldr	r3, [r7, #4]
 80227de:	228c      	movs	r2, #140	; 0x8c
 80227e0:	2120      	movs	r1, #32
 80227e2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	2200      	movs	r2, #0
 80227e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80227ea:	687b      	ldr	r3, [r7, #4]
 80227ec:	2200      	movs	r2, #0
 80227ee:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	2284      	movs	r2, #132	; 0x84
 80227f4:	2100      	movs	r1, #0
 80227f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80227f8:	2300      	movs	r3, #0
}
 80227fa:	0018      	movs	r0, r3
 80227fc:	46bd      	mov	sp, r7
 80227fe:	b004      	add	sp, #16
 8022800:	bd80      	pop	{r7, pc}
 8022802:	46c0      	nop			; (mov r8, r8)
 8022804:	01ffffff 	.word	0x01ffffff

08022808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8022808:	b580      	push	{r7, lr}
 802280a:	b094      	sub	sp, #80	; 0x50
 802280c:	af00      	add	r7, sp, #0
 802280e:	60f8      	str	r0, [r7, #12]
 8022810:	60b9      	str	r1, [r7, #8]
 8022812:	603b      	str	r3, [r7, #0]
 8022814:	1dfb      	adds	r3, r7, #7
 8022816:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8022818:	e0a7      	b.n	802296a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802281a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802281c:	3301      	adds	r3, #1
 802281e:	d100      	bne.n	8022822 <UART_WaitOnFlagUntilTimeout+0x1a>
 8022820:	e0a3      	b.n	802296a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8022822:	f7fe f8e9 	bl	80209f8 <HAL_GetTick>
 8022826:	0002      	movs	r2, r0
 8022828:	683b      	ldr	r3, [r7, #0]
 802282a:	1ad3      	subs	r3, r2, r3
 802282c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802282e:	429a      	cmp	r2, r3
 8022830:	d302      	bcc.n	8022838 <UART_WaitOnFlagUntilTimeout+0x30>
 8022832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8022834:	2b00      	cmp	r3, #0
 8022836:	d13f      	bne.n	80228b8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022838:	f3ef 8310 	mrs	r3, PRIMASK
 802283c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 802283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8022840:	647b      	str	r3, [r7, #68]	; 0x44
 8022842:	2301      	movs	r3, #1
 8022844:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022848:	f383 8810 	msr	PRIMASK, r3
}
 802284c:	46c0      	nop			; (mov r8, r8)
 802284e:	68fb      	ldr	r3, [r7, #12]
 8022850:	681b      	ldr	r3, [r3, #0]
 8022852:	681a      	ldr	r2, [r3, #0]
 8022854:	68fb      	ldr	r3, [r7, #12]
 8022856:	681b      	ldr	r3, [r3, #0]
 8022858:	494e      	ldr	r1, [pc, #312]	; (8022994 <UART_WaitOnFlagUntilTimeout+0x18c>)
 802285a:	400a      	ands	r2, r1
 802285c:	601a      	str	r2, [r3, #0]
 802285e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8022860:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022864:	f383 8810 	msr	PRIMASK, r3
}
 8022868:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802286a:	f3ef 8310 	mrs	r3, PRIMASK
 802286e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8022870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8022872:	643b      	str	r3, [r7, #64]	; 0x40
 8022874:	2301      	movs	r3, #1
 8022876:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802287a:	f383 8810 	msr	PRIMASK, r3
}
 802287e:	46c0      	nop			; (mov r8, r8)
 8022880:	68fb      	ldr	r3, [r7, #12]
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	689a      	ldr	r2, [r3, #8]
 8022886:	68fb      	ldr	r3, [r7, #12]
 8022888:	681b      	ldr	r3, [r3, #0]
 802288a:	2101      	movs	r1, #1
 802288c:	438a      	bics	r2, r1
 802288e:	609a      	str	r2, [r3, #8]
 8022890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8022892:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8022896:	f383 8810 	msr	PRIMASK, r3
}
 802289a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 802289c:	68fb      	ldr	r3, [r7, #12]
 802289e:	2288      	movs	r2, #136	; 0x88
 80228a0:	2120      	movs	r1, #32
 80228a2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80228a4:	68fb      	ldr	r3, [r7, #12]
 80228a6:	228c      	movs	r2, #140	; 0x8c
 80228a8:	2120      	movs	r1, #32
 80228aa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80228ac:	68fb      	ldr	r3, [r7, #12]
 80228ae:	2284      	movs	r2, #132	; 0x84
 80228b0:	2100      	movs	r1, #0
 80228b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80228b4:	2303      	movs	r3, #3
 80228b6:	e069      	b.n	802298c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80228b8:	68fb      	ldr	r3, [r7, #12]
 80228ba:	681b      	ldr	r3, [r3, #0]
 80228bc:	681b      	ldr	r3, [r3, #0]
 80228be:	2204      	movs	r2, #4
 80228c0:	4013      	ands	r3, r2
 80228c2:	d052      	beq.n	802296a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80228c4:	68fb      	ldr	r3, [r7, #12]
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	69da      	ldr	r2, [r3, #28]
 80228ca:	2380      	movs	r3, #128	; 0x80
 80228cc:	011b      	lsls	r3, r3, #4
 80228ce:	401a      	ands	r2, r3
 80228d0:	2380      	movs	r3, #128	; 0x80
 80228d2:	011b      	lsls	r3, r3, #4
 80228d4:	429a      	cmp	r2, r3
 80228d6:	d148      	bne.n	802296a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80228d8:	68fb      	ldr	r3, [r7, #12]
 80228da:	681b      	ldr	r3, [r3, #0]
 80228dc:	2280      	movs	r2, #128	; 0x80
 80228de:	0112      	lsls	r2, r2, #4
 80228e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80228e2:	f3ef 8310 	mrs	r3, PRIMASK
 80228e6:	613b      	str	r3, [r7, #16]
  return(result);
 80228e8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80228ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80228ec:	2301      	movs	r3, #1
 80228ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80228f0:	697b      	ldr	r3, [r7, #20]
 80228f2:	f383 8810 	msr	PRIMASK, r3
}
 80228f6:	46c0      	nop			; (mov r8, r8)
 80228f8:	68fb      	ldr	r3, [r7, #12]
 80228fa:	681b      	ldr	r3, [r3, #0]
 80228fc:	681a      	ldr	r2, [r3, #0]
 80228fe:	68fb      	ldr	r3, [r7, #12]
 8022900:	681b      	ldr	r3, [r3, #0]
 8022902:	4924      	ldr	r1, [pc, #144]	; (8022994 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8022904:	400a      	ands	r2, r1
 8022906:	601a      	str	r2, [r3, #0]
 8022908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802290a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802290c:	69bb      	ldr	r3, [r7, #24]
 802290e:	f383 8810 	msr	PRIMASK, r3
}
 8022912:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022914:	f3ef 8310 	mrs	r3, PRIMASK
 8022918:	61fb      	str	r3, [r7, #28]
  return(result);
 802291a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802291c:	64bb      	str	r3, [r7, #72]	; 0x48
 802291e:	2301      	movs	r3, #1
 8022920:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022922:	6a3b      	ldr	r3, [r7, #32]
 8022924:	f383 8810 	msr	PRIMASK, r3
}
 8022928:	46c0      	nop			; (mov r8, r8)
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	681b      	ldr	r3, [r3, #0]
 802292e:	689a      	ldr	r2, [r3, #8]
 8022930:	68fb      	ldr	r3, [r7, #12]
 8022932:	681b      	ldr	r3, [r3, #0]
 8022934:	2101      	movs	r1, #1
 8022936:	438a      	bics	r2, r1
 8022938:	609a      	str	r2, [r3, #8]
 802293a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802293c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022940:	f383 8810 	msr	PRIMASK, r3
}
 8022944:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8022946:	68fb      	ldr	r3, [r7, #12]
 8022948:	2288      	movs	r2, #136	; 0x88
 802294a:	2120      	movs	r1, #32
 802294c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 802294e:	68fb      	ldr	r3, [r7, #12]
 8022950:	228c      	movs	r2, #140	; 0x8c
 8022952:	2120      	movs	r1, #32
 8022954:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8022956:	68fb      	ldr	r3, [r7, #12]
 8022958:	2290      	movs	r2, #144	; 0x90
 802295a:	2120      	movs	r1, #32
 802295c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802295e:	68fb      	ldr	r3, [r7, #12]
 8022960:	2284      	movs	r2, #132	; 0x84
 8022962:	2100      	movs	r1, #0
 8022964:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8022966:	2303      	movs	r3, #3
 8022968:	e010      	b.n	802298c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802296a:	68fb      	ldr	r3, [r7, #12]
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	69db      	ldr	r3, [r3, #28]
 8022970:	68ba      	ldr	r2, [r7, #8]
 8022972:	4013      	ands	r3, r2
 8022974:	68ba      	ldr	r2, [r7, #8]
 8022976:	1ad3      	subs	r3, r2, r3
 8022978:	425a      	negs	r2, r3
 802297a:	4153      	adcs	r3, r2
 802297c:	b2db      	uxtb	r3, r3
 802297e:	001a      	movs	r2, r3
 8022980:	1dfb      	adds	r3, r7, #7
 8022982:	781b      	ldrb	r3, [r3, #0]
 8022984:	429a      	cmp	r2, r3
 8022986:	d100      	bne.n	802298a <UART_WaitOnFlagUntilTimeout+0x182>
 8022988:	e747      	b.n	802281a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802298a:	2300      	movs	r3, #0
}
 802298c:	0018      	movs	r0, r3
 802298e:	46bd      	mov	sp, r7
 8022990:	b014      	add	sp, #80	; 0x50
 8022992:	bd80      	pop	{r7, pc}
 8022994:	fffffe5f 	.word	0xfffffe5f

08022998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022998:	b580      	push	{r7, lr}
 802299a:	b08e      	sub	sp, #56	; 0x38
 802299c:	af00      	add	r7, sp, #0
 802299e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80229a0:	f3ef 8310 	mrs	r3, PRIMASK
 80229a4:	617b      	str	r3, [r7, #20]
  return(result);
 80229a6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80229a8:	637b      	str	r3, [r7, #52]	; 0x34
 80229aa:	2301      	movs	r3, #1
 80229ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80229ae:	69bb      	ldr	r3, [r7, #24]
 80229b0:	f383 8810 	msr	PRIMASK, r3
}
 80229b4:	46c0      	nop			; (mov r8, r8)
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	681a      	ldr	r2, [r3, #0]
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	681b      	ldr	r3, [r3, #0]
 80229c0:	4926      	ldr	r1, [pc, #152]	; (8022a5c <UART_EndRxTransfer+0xc4>)
 80229c2:	400a      	ands	r2, r1
 80229c4:	601a      	str	r2, [r3, #0]
 80229c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80229c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80229ca:	69fb      	ldr	r3, [r7, #28]
 80229cc:	f383 8810 	msr	PRIMASK, r3
}
 80229d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80229d2:	f3ef 8310 	mrs	r3, PRIMASK
 80229d6:	623b      	str	r3, [r7, #32]
  return(result);
 80229d8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80229da:	633b      	str	r3, [r7, #48]	; 0x30
 80229dc:	2301      	movs	r3, #1
 80229de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80229e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229e2:	f383 8810 	msr	PRIMASK, r3
}
 80229e6:	46c0      	nop			; (mov r8, r8)
 80229e8:	687b      	ldr	r3, [r7, #4]
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	689a      	ldr	r2, [r3, #8]
 80229ee:	687b      	ldr	r3, [r7, #4]
 80229f0:	681b      	ldr	r3, [r3, #0]
 80229f2:	491b      	ldr	r1, [pc, #108]	; (8022a60 <UART_EndRxTransfer+0xc8>)
 80229f4:	400a      	ands	r2, r1
 80229f6:	609a      	str	r2, [r3, #8]
 80229f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80229fa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80229fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229fe:	f383 8810 	msr	PRIMASK, r3
}
 8022a02:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8022a08:	2b01      	cmp	r3, #1
 8022a0a:	d118      	bne.n	8022a3e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8022a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8022a12:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8022a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022a16:	2301      	movs	r3, #1
 8022a18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022a1a:	68fb      	ldr	r3, [r7, #12]
 8022a1c:	f383 8810 	msr	PRIMASK, r3
}
 8022a20:	46c0      	nop			; (mov r8, r8)
 8022a22:	687b      	ldr	r3, [r7, #4]
 8022a24:	681b      	ldr	r3, [r3, #0]
 8022a26:	681a      	ldr	r2, [r3, #0]
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	681b      	ldr	r3, [r3, #0]
 8022a2c:	2110      	movs	r1, #16
 8022a2e:	438a      	bics	r2, r1
 8022a30:	601a      	str	r2, [r3, #0]
 8022a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022a36:	693b      	ldr	r3, [r7, #16]
 8022a38:	f383 8810 	msr	PRIMASK, r3
}
 8022a3c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8022a3e:	687b      	ldr	r3, [r7, #4]
 8022a40:	228c      	movs	r2, #140	; 0x8c
 8022a42:	2120      	movs	r1, #32
 8022a44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8022a46:	687b      	ldr	r3, [r7, #4]
 8022a48:	2200      	movs	r2, #0
 8022a4a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8022a4c:	687b      	ldr	r3, [r7, #4]
 8022a4e:	2200      	movs	r2, #0
 8022a50:	675a      	str	r2, [r3, #116]	; 0x74
}
 8022a52:	46c0      	nop			; (mov r8, r8)
 8022a54:	46bd      	mov	sp, r7
 8022a56:	b00e      	add	sp, #56	; 0x38
 8022a58:	bd80      	pop	{r7, pc}
 8022a5a:	46c0      	nop			; (mov r8, r8)
 8022a5c:	fffffedf 	.word	0xfffffedf
 8022a60:	effffffe 	.word	0xeffffffe

08022a64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8022a64:	b580      	push	{r7, lr}
 8022a66:	b084      	sub	sp, #16
 8022a68:	af00      	add	r7, sp, #0
 8022a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022a70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8022a72:	68fb      	ldr	r3, [r7, #12]
 8022a74:	225e      	movs	r2, #94	; 0x5e
 8022a76:	2100      	movs	r1, #0
 8022a78:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8022a7a:	68fb      	ldr	r3, [r7, #12]
 8022a7c:	2256      	movs	r2, #86	; 0x56
 8022a7e:	2100      	movs	r1, #0
 8022a80:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8022a82:	68fb      	ldr	r3, [r7, #12]
 8022a84:	0018      	movs	r0, r3
 8022a86:	f7ff fae5 	bl	8022054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022a8a:	46c0      	nop			; (mov r8, r8)
 8022a8c:	46bd      	mov	sp, r7
 8022a8e:	b004      	add	sp, #16
 8022a90:	bd80      	pop	{r7, pc}

08022a92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8022a92:	b580      	push	{r7, lr}
 8022a94:	b086      	sub	sp, #24
 8022a96:	af00      	add	r7, sp, #0
 8022a98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8022a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8022a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8022aa0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8022aa2:	617b      	str	r3, [r7, #20]
 8022aa4:	2301      	movs	r3, #1
 8022aa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022aa8:	68fb      	ldr	r3, [r7, #12]
 8022aaa:	f383 8810 	msr	PRIMASK, r3
}
 8022aae:	46c0      	nop			; (mov r8, r8)
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	681b      	ldr	r3, [r3, #0]
 8022ab4:	681a      	ldr	r2, [r3, #0]
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	681b      	ldr	r3, [r3, #0]
 8022aba:	2140      	movs	r1, #64	; 0x40
 8022abc:	438a      	bics	r2, r1
 8022abe:	601a      	str	r2, [r3, #0]
 8022ac0:	697b      	ldr	r3, [r7, #20]
 8022ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8022ac4:	693b      	ldr	r3, [r7, #16]
 8022ac6:	f383 8810 	msr	PRIMASK, r3
}
 8022aca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	2288      	movs	r2, #136	; 0x88
 8022ad0:	2120      	movs	r1, #32
 8022ad2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	2200      	movs	r2, #0
 8022ad8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8022ada:	687b      	ldr	r3, [r7, #4]
 8022adc:	0018      	movs	r0, r3
 8022ade:	f7ff fab1 	bl	8022044 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8022ae2:	46c0      	nop			; (mov r8, r8)
 8022ae4:	46bd      	mov	sp, r7
 8022ae6:	b006      	add	sp, #24
 8022ae8:	bd80      	pop	{r7, pc}

08022aea <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8022aea:	b580      	push	{r7, lr}
 8022aec:	b082      	sub	sp, #8
 8022aee:	af00      	add	r7, sp, #0
 8022af0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8022af2:	46c0      	nop			; (mov r8, r8)
 8022af4:	46bd      	mov	sp, r7
 8022af6:	b002      	add	sp, #8
 8022af8:	bd80      	pop	{r7, pc}

08022afa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8022afa:	b580      	push	{r7, lr}
 8022afc:	b082      	sub	sp, #8
 8022afe:	af00      	add	r7, sp, #0
 8022b00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8022b02:	46c0      	nop			; (mov r8, r8)
 8022b04:	46bd      	mov	sp, r7
 8022b06:	b002      	add	sp, #8
 8022b08:	bd80      	pop	{r7, pc}

08022b0a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8022b0a:	b580      	push	{r7, lr}
 8022b0c:	b082      	sub	sp, #8
 8022b0e:	af00      	add	r7, sp, #0
 8022b10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8022b12:	46c0      	nop			; (mov r8, r8)
 8022b14:	46bd      	mov	sp, r7
 8022b16:	b002      	add	sp, #8
 8022b18:	bd80      	pop	{r7, pc}
	...

08022b1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8022b1c:	b580      	push	{r7, lr}
 8022b1e:	b084      	sub	sp, #16
 8022b20:	af00      	add	r7, sp, #0
 8022b22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022b24:	687b      	ldr	r3, [r7, #4]
 8022b26:	2284      	movs	r2, #132	; 0x84
 8022b28:	5c9b      	ldrb	r3, [r3, r2]
 8022b2a:	2b01      	cmp	r3, #1
 8022b2c:	d101      	bne.n	8022b32 <HAL_UARTEx_DisableFifoMode+0x16>
 8022b2e:	2302      	movs	r3, #2
 8022b30:	e027      	b.n	8022b82 <HAL_UARTEx_DisableFifoMode+0x66>
 8022b32:	687b      	ldr	r3, [r7, #4]
 8022b34:	2284      	movs	r2, #132	; 0x84
 8022b36:	2101      	movs	r1, #1
 8022b38:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	2288      	movs	r2, #136	; 0x88
 8022b3e:	2124      	movs	r1, #36	; 0x24
 8022b40:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022b42:	687b      	ldr	r3, [r7, #4]
 8022b44:	681b      	ldr	r3, [r3, #0]
 8022b46:	681b      	ldr	r3, [r3, #0]
 8022b48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	681a      	ldr	r2, [r3, #0]
 8022b50:	687b      	ldr	r3, [r7, #4]
 8022b52:	681b      	ldr	r3, [r3, #0]
 8022b54:	2101      	movs	r1, #1
 8022b56:	438a      	bics	r2, r1
 8022b58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8022b5a:	68fb      	ldr	r3, [r7, #12]
 8022b5c:	4a0b      	ldr	r2, [pc, #44]	; (8022b8c <HAL_UARTEx_DisableFifoMode+0x70>)
 8022b5e:	4013      	ands	r3, r2
 8022b60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	2200      	movs	r2, #0
 8022b66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	681b      	ldr	r3, [r3, #0]
 8022b6c:	68fa      	ldr	r2, [r7, #12]
 8022b6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	2288      	movs	r2, #136	; 0x88
 8022b74:	2120      	movs	r1, #32
 8022b76:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022b78:	687b      	ldr	r3, [r7, #4]
 8022b7a:	2284      	movs	r2, #132	; 0x84
 8022b7c:	2100      	movs	r1, #0
 8022b7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8022b80:	2300      	movs	r3, #0
}
 8022b82:	0018      	movs	r0, r3
 8022b84:	46bd      	mov	sp, r7
 8022b86:	b004      	add	sp, #16
 8022b88:	bd80      	pop	{r7, pc}
 8022b8a:	46c0      	nop			; (mov r8, r8)
 8022b8c:	dfffffff 	.word	0xdfffffff

08022b90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022b90:	b580      	push	{r7, lr}
 8022b92:	b084      	sub	sp, #16
 8022b94:	af00      	add	r7, sp, #0
 8022b96:	6078      	str	r0, [r7, #4]
 8022b98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022b9a:	687b      	ldr	r3, [r7, #4]
 8022b9c:	2284      	movs	r2, #132	; 0x84
 8022b9e:	5c9b      	ldrb	r3, [r3, r2]
 8022ba0:	2b01      	cmp	r3, #1
 8022ba2:	d101      	bne.n	8022ba8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8022ba4:	2302      	movs	r3, #2
 8022ba6:	e02e      	b.n	8022c06 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	2284      	movs	r2, #132	; 0x84
 8022bac:	2101      	movs	r1, #1
 8022bae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	2288      	movs	r2, #136	; 0x88
 8022bb4:	2124      	movs	r1, #36	; 0x24
 8022bb6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	681b      	ldr	r3, [r3, #0]
 8022bbc:	681b      	ldr	r3, [r3, #0]
 8022bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022bc0:	687b      	ldr	r3, [r7, #4]
 8022bc2:	681b      	ldr	r3, [r3, #0]
 8022bc4:	681a      	ldr	r2, [r3, #0]
 8022bc6:	687b      	ldr	r3, [r7, #4]
 8022bc8:	681b      	ldr	r3, [r3, #0]
 8022bca:	2101      	movs	r1, #1
 8022bcc:	438a      	bics	r2, r1
 8022bce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	681b      	ldr	r3, [r3, #0]
 8022bd4:	689b      	ldr	r3, [r3, #8]
 8022bd6:	00db      	lsls	r3, r3, #3
 8022bd8:	08d9      	lsrs	r1, r3, #3
 8022bda:	687b      	ldr	r3, [r7, #4]
 8022bdc:	681b      	ldr	r3, [r3, #0]
 8022bde:	683a      	ldr	r2, [r7, #0]
 8022be0:	430a      	orrs	r2, r1
 8022be2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022be4:	687b      	ldr	r3, [r7, #4]
 8022be6:	0018      	movs	r0, r3
 8022be8:	f000 f854 	bl	8022c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022bec:	687b      	ldr	r3, [r7, #4]
 8022bee:	681b      	ldr	r3, [r3, #0]
 8022bf0:	68fa      	ldr	r2, [r7, #12]
 8022bf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022bf4:	687b      	ldr	r3, [r7, #4]
 8022bf6:	2288      	movs	r2, #136	; 0x88
 8022bf8:	2120      	movs	r1, #32
 8022bfa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	2284      	movs	r2, #132	; 0x84
 8022c00:	2100      	movs	r1, #0
 8022c02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8022c04:	2300      	movs	r3, #0
}
 8022c06:	0018      	movs	r0, r3
 8022c08:	46bd      	mov	sp, r7
 8022c0a:	b004      	add	sp, #16
 8022c0c:	bd80      	pop	{r7, pc}
	...

08022c10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022c10:	b580      	push	{r7, lr}
 8022c12:	b084      	sub	sp, #16
 8022c14:	af00      	add	r7, sp, #0
 8022c16:	6078      	str	r0, [r7, #4]
 8022c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	2284      	movs	r2, #132	; 0x84
 8022c1e:	5c9b      	ldrb	r3, [r3, r2]
 8022c20:	2b01      	cmp	r3, #1
 8022c22:	d101      	bne.n	8022c28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8022c24:	2302      	movs	r3, #2
 8022c26:	e02f      	b.n	8022c88 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	2284      	movs	r2, #132	; 0x84
 8022c2c:	2101      	movs	r1, #1
 8022c2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	2288      	movs	r2, #136	; 0x88
 8022c34:	2124      	movs	r1, #36	; 0x24
 8022c36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	681b      	ldr	r3, [r3, #0]
 8022c3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022c40:	687b      	ldr	r3, [r7, #4]
 8022c42:	681b      	ldr	r3, [r3, #0]
 8022c44:	681a      	ldr	r2, [r3, #0]
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	2101      	movs	r1, #1
 8022c4c:	438a      	bics	r2, r1
 8022c4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	681b      	ldr	r3, [r3, #0]
 8022c54:	689b      	ldr	r3, [r3, #8]
 8022c56:	4a0e      	ldr	r2, [pc, #56]	; (8022c90 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8022c58:	4013      	ands	r3, r2
 8022c5a:	0019      	movs	r1, r3
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	683a      	ldr	r2, [r7, #0]
 8022c62:	430a      	orrs	r2, r1
 8022c64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022c66:	687b      	ldr	r3, [r7, #4]
 8022c68:	0018      	movs	r0, r3
 8022c6a:	f000 f813 	bl	8022c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022c6e:	687b      	ldr	r3, [r7, #4]
 8022c70:	681b      	ldr	r3, [r3, #0]
 8022c72:	68fa      	ldr	r2, [r7, #12]
 8022c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022c76:	687b      	ldr	r3, [r7, #4]
 8022c78:	2288      	movs	r2, #136	; 0x88
 8022c7a:	2120      	movs	r1, #32
 8022c7c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	2284      	movs	r2, #132	; 0x84
 8022c82:	2100      	movs	r1, #0
 8022c84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8022c86:	2300      	movs	r3, #0
}
 8022c88:	0018      	movs	r0, r3
 8022c8a:	46bd      	mov	sp, r7
 8022c8c:	b004      	add	sp, #16
 8022c8e:	bd80      	pop	{r7, pc}
 8022c90:	f1ffffff 	.word	0xf1ffffff

08022c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8022c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022c96:	b085      	sub	sp, #20
 8022c98:	af00      	add	r7, sp, #0
 8022c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8022c9c:	687b      	ldr	r3, [r7, #4]
 8022c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8022ca0:	2b00      	cmp	r3, #0
 8022ca2:	d108      	bne.n	8022cb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	226a      	movs	r2, #106	; 0x6a
 8022ca8:	2101      	movs	r1, #1
 8022caa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8022cac:	687b      	ldr	r3, [r7, #4]
 8022cae:	2268      	movs	r2, #104	; 0x68
 8022cb0:	2101      	movs	r1, #1
 8022cb2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8022cb4:	e043      	b.n	8022d3e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8022cb6:	260f      	movs	r6, #15
 8022cb8:	19bb      	adds	r3, r7, r6
 8022cba:	2208      	movs	r2, #8
 8022cbc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8022cbe:	200e      	movs	r0, #14
 8022cc0:	183b      	adds	r3, r7, r0
 8022cc2:	2208      	movs	r2, #8
 8022cc4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8022cc6:	687b      	ldr	r3, [r7, #4]
 8022cc8:	681b      	ldr	r3, [r3, #0]
 8022cca:	689b      	ldr	r3, [r3, #8]
 8022ccc:	0e5b      	lsrs	r3, r3, #25
 8022cce:	b2da      	uxtb	r2, r3
 8022cd0:	240d      	movs	r4, #13
 8022cd2:	193b      	adds	r3, r7, r4
 8022cd4:	2107      	movs	r1, #7
 8022cd6:	400a      	ands	r2, r1
 8022cd8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	681b      	ldr	r3, [r3, #0]
 8022cde:	689b      	ldr	r3, [r3, #8]
 8022ce0:	0f5b      	lsrs	r3, r3, #29
 8022ce2:	b2da      	uxtb	r2, r3
 8022ce4:	250c      	movs	r5, #12
 8022ce6:	197b      	adds	r3, r7, r5
 8022ce8:	2107      	movs	r1, #7
 8022cea:	400a      	ands	r2, r1
 8022cec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8022cee:	183b      	adds	r3, r7, r0
 8022cf0:	781b      	ldrb	r3, [r3, #0]
 8022cf2:	197a      	adds	r2, r7, r5
 8022cf4:	7812      	ldrb	r2, [r2, #0]
 8022cf6:	4914      	ldr	r1, [pc, #80]	; (8022d48 <UARTEx_SetNbDataToProcess+0xb4>)
 8022cf8:	5c8a      	ldrb	r2, [r1, r2]
 8022cfa:	435a      	muls	r2, r3
 8022cfc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8022cfe:	197b      	adds	r3, r7, r5
 8022d00:	781b      	ldrb	r3, [r3, #0]
 8022d02:	4a12      	ldr	r2, [pc, #72]	; (8022d4c <UARTEx_SetNbDataToProcess+0xb8>)
 8022d04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8022d06:	0019      	movs	r1, r3
 8022d08:	f7fd fa88 	bl	802021c <__divsi3>
 8022d0c:	0003      	movs	r3, r0
 8022d0e:	b299      	uxth	r1, r3
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	226a      	movs	r2, #106	; 0x6a
 8022d14:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022d16:	19bb      	adds	r3, r7, r6
 8022d18:	781b      	ldrb	r3, [r3, #0]
 8022d1a:	193a      	adds	r2, r7, r4
 8022d1c:	7812      	ldrb	r2, [r2, #0]
 8022d1e:	490a      	ldr	r1, [pc, #40]	; (8022d48 <UARTEx_SetNbDataToProcess+0xb4>)
 8022d20:	5c8a      	ldrb	r2, [r1, r2]
 8022d22:	435a      	muls	r2, r3
 8022d24:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8022d26:	193b      	adds	r3, r7, r4
 8022d28:	781b      	ldrb	r3, [r3, #0]
 8022d2a:	4a08      	ldr	r2, [pc, #32]	; (8022d4c <UARTEx_SetNbDataToProcess+0xb8>)
 8022d2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8022d2e:	0019      	movs	r1, r3
 8022d30:	f7fd fa74 	bl	802021c <__divsi3>
 8022d34:	0003      	movs	r3, r0
 8022d36:	b299      	uxth	r1, r3
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	2268      	movs	r2, #104	; 0x68
 8022d3c:	5299      	strh	r1, [r3, r2]
}
 8022d3e:	46c0      	nop			; (mov r8, r8)
 8022d40:	46bd      	mov	sp, r7
 8022d42:	b005      	add	sp, #20
 8022d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d46:	46c0      	nop			; (mov r8, r8)
 8022d48:	08022ec0 	.word	0x08022ec0
 8022d4c:	08022ec8 	.word	0x08022ec8

08022d50 <__libc_init_array>:
 8022d50:	b570      	push	{r4, r5, r6, lr}
 8022d52:	2600      	movs	r6, #0
 8022d54:	4d0c      	ldr	r5, [pc, #48]	; (8022d88 <__libc_init_array+0x38>)
 8022d56:	4c0d      	ldr	r4, [pc, #52]	; (8022d8c <__libc_init_array+0x3c>)
 8022d58:	1b64      	subs	r4, r4, r5
 8022d5a:	10a4      	asrs	r4, r4, #2
 8022d5c:	42a6      	cmp	r6, r4
 8022d5e:	d109      	bne.n	8022d74 <__libc_init_array+0x24>
 8022d60:	2600      	movs	r6, #0
 8022d62:	f000 f821 	bl	8022da8 <_init>
 8022d66:	4d0a      	ldr	r5, [pc, #40]	; (8022d90 <__libc_init_array+0x40>)
 8022d68:	4c0a      	ldr	r4, [pc, #40]	; (8022d94 <__libc_init_array+0x44>)
 8022d6a:	1b64      	subs	r4, r4, r5
 8022d6c:	10a4      	asrs	r4, r4, #2
 8022d6e:	42a6      	cmp	r6, r4
 8022d70:	d105      	bne.n	8022d7e <__libc_init_array+0x2e>
 8022d72:	bd70      	pop	{r4, r5, r6, pc}
 8022d74:	00b3      	lsls	r3, r6, #2
 8022d76:	58eb      	ldr	r3, [r5, r3]
 8022d78:	4798      	blx	r3
 8022d7a:	3601      	adds	r6, #1
 8022d7c:	e7ee      	b.n	8022d5c <__libc_init_array+0xc>
 8022d7e:	00b3      	lsls	r3, r6, #2
 8022d80:	58eb      	ldr	r3, [r5, r3]
 8022d82:	4798      	blx	r3
 8022d84:	3601      	adds	r6, #1
 8022d86:	e7f2      	b.n	8022d6e <__libc_init_array+0x1e>
 8022d88:	08022ed8 	.word	0x08022ed8
 8022d8c:	08022ed8 	.word	0x08022ed8
 8022d90:	08022ed8 	.word	0x08022ed8
 8022d94:	08022edc 	.word	0x08022edc

08022d98 <memset>:
 8022d98:	0003      	movs	r3, r0
 8022d9a:	1882      	adds	r2, r0, r2
 8022d9c:	4293      	cmp	r3, r2
 8022d9e:	d100      	bne.n	8022da2 <memset+0xa>
 8022da0:	4770      	bx	lr
 8022da2:	7019      	strb	r1, [r3, #0]
 8022da4:	3301      	adds	r3, #1
 8022da6:	e7f9      	b.n	8022d9c <memset+0x4>

08022da8 <_init>:
 8022da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022daa:	46c0      	nop			; (mov r8, r8)
 8022dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022dae:	bc08      	pop	{r3}
 8022db0:	469e      	mov	lr, r3
 8022db2:	4770      	bx	lr

08022db4 <_fini>:
 8022db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022db6:	46c0      	nop			; (mov r8, r8)
 8022db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022dba:	bc08      	pop	{r3}
 8022dbc:	469e      	mov	lr, r3
 8022dbe:	4770      	bx	lr

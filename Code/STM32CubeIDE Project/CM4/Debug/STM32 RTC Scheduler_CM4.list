
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a64  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d24  08005d24  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d2c  08005d2c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d30  08005d30  00015d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000074  08005da8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08005da8  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dfb  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031b7  00000000  00000000  00035e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00039050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003a450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e751  00000000  00000000  0003b708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014edc  00000000  00000000  00059e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b894d  00000000  00000000  0006ed35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00127682  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055e8  00000000  00000000  001276d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b8c 	.word	0x08005b8c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08005b8c 	.word	0x08005b8c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f001 f804 	bl	800154c <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000188 	.word	0x20000188

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 fffa 	bl	8001568 <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f001 f8ab 	bl	80016fc <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80005b6:	1cfa      	adds	r2, r7, #3
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f976 	bl	80008b0 <getNextAlarm>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d024      	beq.n	8000614 <calendar_start+0x64>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005ca:	7ab8      	ldrb	r0, [r7, #10]
 80005cc:	7af9      	ldrb	r1, [r7, #11]
 80005ce:	7b3a      	ldrb	r2, [r7, #12]
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	f001 f927 	bl	8001824 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 80005d6:	78fb      	ldrb	r3, [r7, #3]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d017      	beq.n	800060c <calendar_start+0x5c>
			if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4910      	ldr	r1, [pc, #64]	; (8000620 <calendar_start+0x70>)
 80005e0:	4613      	mov	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	440b      	add	r3, r1
 80005ea:	3308      	adds	r3, #8
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d009      	beq.n	8000606 <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].start_callback)();
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	490a      	ldr	r1, [pc, #40]	; (8000620 <calendar_start+0x70>)
 80005f6:	4613      	mov	r3, r2
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	4413      	add	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	440b      	add	r3, r1
 8000600:	3308      	adds	r3, #8
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <calendar_start+0x74>)
 800060a:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <calendar_start+0x78>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 8000612:	e001      	b.n	8000618 <calendar_start+0x68>
		diableAlarm_A();
 8000614:	f001 f9a2 	bl	800195c <diableAlarm_A>
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000090 	.word	0x20000090
 8000624:	20000004 	.word	0x20000004
 8000628:	20000184 	.word	0x20000184

0800062c <calendar_handleAlarm>:


/*
 *
 */
void calendar_handleAlarm(void) {
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b08c      	sub	sp, #48	; 0x30
 8000630:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 8000632:	4b6b      	ldr	r3, [pc, #428]	; (80007e0 <calendar_handleAlarm+0x1b4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	f000 80cd 	beq.w	80007d8 <calendar_handleAlarm+0x1ac>
		// send message for debugging
		char messageBody[UART_MESSAGE_BODY_SIZE] = "\nALARM EVENT!\n\n\0";
 800063e:	4b69      	ldr	r3, [pc, #420]	; (80007e4 <calendar_handleAlarm+0x1b8>)
 8000640:	1d3c      	adds	r4, r7, #4
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	682b      	ldr	r3, [r5, #0]
 800064a:	7023      	strb	r3, [r4, #0]
 800064c:	f107 0315 	add.w	r3, r7, #21
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	f8c3 2007 	str.w	r2, [r3, #7]
		uartBasic_TX_Poll("\0\0\0\0", messageBody);
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	4619      	mov	r1, r3
 800065e:	4862      	ldr	r0, [pc, #392]	; (80007e8 <calendar_handleAlarm+0x1bc>)
 8000660:	f001 fab0 	bl	8001bc4 <uartBasic_TX_Poll>

		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 8000664:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000668:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800066c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f91d 	bl	80008b0 <getNextAlarm>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	f000 808c 	beq.w	8000796 <calendar_handleAlarm+0x16a>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 800067e:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8000682:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000686:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800068a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800068e:	f001 f8c9 	bl	8001824 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 8000692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000696:	2b00      	cmp	r3, #0
 8000698:	d01d      	beq.n	80006d6 <calendar_handleAlarm+0xaa>
 800069a:	4b54      	ldr	r3, [pc, #336]	; (80007ec <calendar_handleAlarm+0x1c0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006a2:	d118      	bne.n	80006d6 <calendar_handleAlarm+0xaa>

				// call start event callback
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80006a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006a6:	4952      	ldr	r1, [pc, #328]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 80006a8:	4613      	mov	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	440b      	add	r3, r1
 80006b2:	3308      	adds	r3, #8
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d009      	beq.n	80006ce <calendar_handleAlarm+0xa2>
					(*_calendarEvents[currentEventIdx].start_callback)();
 80006ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006bc:	494c      	ldr	r1, [pc, #304]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	440b      	add	r3, r1
 80006c8:	3308      	adds	r3, #8
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	4a46      	ldr	r2, [pc, #280]	; (80007ec <calendar_handleAlarm+0x1c0>)
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	e07d      	b.n	80007d2 <calendar_handleAlarm+0x1a6>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 80006d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d034      	beq.n	8000748 <calendar_handleAlarm+0x11c>
 80006de:	4b43      	ldr	r3, [pc, #268]	; (80007ec <calendar_handleAlarm+0x1c0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006e6:	d02f      	beq.n	8000748 <calendar_handleAlarm+0x11c>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 80006e8:	4b40      	ldr	r3, [pc, #256]	; (80007ec <calendar_handleAlarm+0x1c0>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4940      	ldr	r1, [pc, #256]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3314      	adds	r3, #20
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00a      	beq.n	8000716 <calendar_handleAlarm+0xea>
					(*_calendarEvents[_currentEvent].end_callback)();
 8000700:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <calendar_handleAlarm+0x1c0>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	493a      	ldr	r1, [pc, #232]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	440b      	add	r3, r1
 8000710:	3314      	adds	r3, #20
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 8000716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000718:	4935      	ldr	r1, [pc, #212]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 800071a:	4613      	mov	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4413      	add	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	440b      	add	r3, r1
 8000724:	3308      	adds	r3, #8
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d009      	beq.n	8000740 <calendar_handleAlarm+0x114>
					(*_calendarEvents[currentEventIdx].start_callback)();
 800072c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800072e:	4930      	ldr	r1, [pc, #192]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	440b      	add	r3, r1
 800073a:	3308      	adds	r3, #8
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <calendar_handleAlarm+0x1c0>)
 8000744:	6013      	str	r3, [r2, #0]
 8000746:	e044      	b.n	80007d2 <calendar_handleAlarm+0x1a6>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 8000748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800074c:	f083 0301 	eor.w	r3, r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d03d      	beq.n	80007d2 <calendar_handleAlarm+0x1a6>
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <calendar_handleAlarm+0x1c0>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800075e:	d038      	beq.n	80007d2 <calendar_handleAlarm+0x1a6>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <calendar_handleAlarm+0x1c0>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4922      	ldr	r1, [pc, #136]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 8000766:	4613      	mov	r3, r2
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	4413      	add	r3, r2
 800076c:	00db      	lsls	r3, r3, #3
 800076e:	440b      	add	r3, r1
 8000770:	3314      	adds	r3, #20
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00a      	beq.n	800078e <calendar_handleAlarm+0x162>
					(*_calendarEvents[_currentEvent].end_callback)();
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <calendar_handleAlarm+0x1c0>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	491c      	ldr	r1, [pc, #112]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 800077e:	4613      	mov	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4413      	add	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	440b      	add	r3, r1
 8000788:	3314      	adds	r3, #20
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <calendar_handleAlarm+0x1c0>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	e01d      	b.n	80007d2 <calendar_handleAlarm+0x1a6>

		}

		// if there is no alarm to set, disable the alarm and exit any events
		else {
			diableAlarm_A();
 8000796:	f001 f8e1 	bl	800195c <diableAlarm_A>

			if (CURRENTLY_IN_EVENT) {
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <calendar_handleAlarm+0x1c0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007a2:	d016      	beq.n	80007d2 <calendar_handleAlarm+0x1a6>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <calendar_handleAlarm+0x1c0>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4911      	ldr	r1, [pc, #68]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 80007aa:	4613      	mov	r3, r2
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	440b      	add	r3, r1
 80007b4:	3314      	adds	r3, #20
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d00a      	beq.n	80007d2 <calendar_handleAlarm+0x1a6>
					(*_calendarEvents[_currentEvent].end_callback)();
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <calendar_handleAlarm+0x1c0>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	490b      	ldr	r1, [pc, #44]	; (80007f0 <calendar_handleAlarm+0x1c4>)
 80007c2:	4613      	mov	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	440b      	add	r3, r1
 80007cc:	3314      	adds	r3, #20
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 80007d2:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <calendar_handleAlarm+0x1b4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
	}

	else {

	}
}
 80007d8:	bf00      	nop
 80007da:	3730      	adds	r7, #48	; 0x30
 80007dc:	46bd      	mov	sp, r7
 80007de:	bdb0      	pop	{r4, r5, r7, pc}
 80007e0:	20000184 	.word	0x20000184
 80007e4:	08005bac 	.word	0x08005bac
 80007e8:	08005ba4 	.word	0x08005ba4
 80007ec:	20000004 	.word	0x20000004
 80007f0:	20000090 	.word	0x20000090

080007f4 <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <calendar_AlarmA_ISR+0x14>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000184 	.word	0x20000184

0800080c <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b087      	sub	sp, #28
 8000810:	af00      	add	r7, sp, #0
 8000812:	f107 0408 	add.w	r4, r7, #8
 8000816:	e884 0003 	stmia.w	r4, {r0, r1}
 800081a:	4639      	mov	r1, r7
 800081c:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000828:	f000 f80e 	bl	8000848 <dateTimeToSeconds>
 800082c:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 800082e:	463b      	mov	r3, r7
 8000830:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000834:	f000 f808 	bl	8000848 <dateTimeToSeconds>
 8000838:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	1ad3      	subs	r3, r2, r3
}
 8000840:	4618      	mov	r0, r3
 8000842:	371c      	adds	r7, #28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd90      	pop	{r4, r7, pc}

08000848 <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	463b      	mov	r3, r7
 8000850:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 8000854:	797b      	ldrb	r3, [r7, #5]
 8000856:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 8000858:	793b      	ldrb	r3, [r7, #4]
 800085a:	461a      	mov	r2, r3
 800085c:	4613      	mov	r3, r2
 800085e:	011b      	lsls	r3, r3, #4
 8000860:	1a9b      	subs	r3, r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 8000866:	78fb      	ldrb	r3, [r7, #3]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800086e:	fb01 f303 	mul.w	r3, r1, r3
 8000872:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 8000874:	78bb      	ldrb	r3, [r7, #2]
 8000876:	3b01      	subs	r3, #1
 8000878:	490a      	ldr	r1, [pc, #40]	; (80008a4 <dateTimeToSeconds+0x5c>)
 800087a:	fb01 f303 	mul.w	r3, r1, r3
 800087e:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8000880:	787b      	ldrb	r3, [r7, #1]
 8000882:	3b01      	subs	r3, #1
 8000884:	4908      	ldr	r1, [pc, #32]	; (80008a8 <dateTimeToSeconds+0x60>)
 8000886:	fb01 f303 	mul.w	r3, r1, r3
 800088a:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 800088c:	783b      	ldrb	r3, [r7, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <dateTimeToSeconds+0x64>)
 8000892:	fb01 f303 	mul.w	r3, r1, r3
 8000896:	4413      	add	r3, r2
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	00015180 	.word	0x00015180
 80008a8:	00278d00 	.word	0x00278d00
 80008ac:	01da9c00 	.word	0x01da9c00

080008b0 <getNextAlarm>:


/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent) {
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b08d      	sub	sp, #52	; 0x34
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
	int currentIdx = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
	bool nextAlarmFound = false;
 80008c4:	2300      	movs	r3, #0
 80008c6:	77fb      	strb	r3, [r7, #31]
	DateTime now = {0};
 80008c8:	f107 0318 	add.w	r3, r7, #24
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	1cdc      	adds	r4, r3, #3
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	1c9a      	adds	r2, r3, #2
 80008e8:	f107 0318 	add.w	r3, r7, #24
 80008ec:	1c59      	adds	r1, r3, #1
 80008ee:	f107 0018 	add.w	r0, r7, #24
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	3305      	adds	r3, #5
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	3304      	adds	r3, #4
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	4623      	mov	r3, r4
 8000904:	f000 fefa 	bl	80016fc <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
	currentIdx = eventIdx - 1;
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	3b01      	subs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
	nextAlarmFound = false;
 8000912:	2300      	movs	r3, #0
 8000914:	77fb      	strb	r3, [r7, #31]
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000916:	e0bc      	b.n	8000a92 <getNextAlarm+0x1e2>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 8000918:	4973      	ldr	r1, [pc, #460]	; (8000ae8 <getNextAlarm+0x238>)
 800091a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	440b      	add	r3, r1
 8000926:	cb0c      	ldmia	r3, {r2, r3}
 8000928:	f107 0118 	add.w	r1, r7, #24
 800092c:	c903      	ldmia	r1, {r0, r1}
 800092e:	f7ff ff6d 	bl	800080c <compareDateTime>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	da43      	bge.n	80009c0 <getNextAlarm+0x110>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 8000938:	496b      	ldr	r1, [pc, #428]	; (8000ae8 <getNextAlarm+0x238>)
 800093a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	440b      	add	r3, r1
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 800094a:	4967      	ldr	r1, [pc, #412]	; (8000ae8 <getNextAlarm+0x238>)
 800094c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800094e:	4613      	mov	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	4413      	add	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	440b      	add	r3, r1
 8000958:	3301      	adds	r3, #1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 800095e:	4962      	ldr	r1, [pc, #392]	; (8000ae8 <getNextAlarm+0x238>)
 8000960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	440b      	add	r3, r1
 800096c:	3302      	adds	r3, #2
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 8000972:	495d      	ldr	r1, [pc, #372]	; (8000ae8 <getNextAlarm+0x238>)
 8000974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000976:	4613      	mov	r3, r2
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	4413      	add	r3, r2
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	440b      	add	r3, r1
 8000980:	3303      	adds	r3, #3
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 8000986:	4958      	ldr	r1, [pc, #352]	; (8000ae8 <getNextAlarm+0x238>)
 8000988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	3304      	adds	r3, #4
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 800099a:	4953      	ldr	r1, [pc, #332]	; (8000ae8 <getNextAlarm+0x238>)
 800099c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	440b      	add	r3, r1
 80009a8:	3305      	adds	r3, #5
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 80009ae:	2301      	movs	r3, #1
 80009b0:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx - 1;
 80009b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b4:	3b01      	subs	r3, #1
 80009b6:	623b      	str	r3, [r7, #32]
			*inEvent = false;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e068      	b.n	8000a92 <getNextAlarm+0x1e2>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 80009c0:	4949      	ldr	r1, [pc, #292]	; (8000ae8 <getNextAlarm+0x238>)
 80009c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	440b      	add	r3, r1
 80009ce:	cb0c      	ldmia	r3, {r2, r3}
 80009d0:	f107 0118 	add.w	r1, r7, #24
 80009d4:	c903      	ldmia	r1, {r0, r1}
 80009d6:	f7ff ff19 	bl	800080c <compareDateTime>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db55      	blt.n	8000a8c <getNextAlarm+0x1dc>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 80009e0:	4941      	ldr	r1, [pc, #260]	; (8000ae8 <getNextAlarm+0x238>)
 80009e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	440b      	add	r3, r1
 80009ee:	3308      	adds	r3, #8
 80009f0:	3304      	adds	r3, #4
 80009f2:	cb0c      	ldmia	r3, {r2, r3}
 80009f4:	f107 0118 	add.w	r1, r7, #24
 80009f8:	c903      	ldmia	r1, {r0, r1}
 80009fa:	f7ff ff07 	bl	800080c <compareDateTime>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	da43      	bge.n	8000a8c <getNextAlarm+0x1dc>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 8000a04:	4938      	ldr	r1, [pc, #224]	; (8000ae8 <getNextAlarm+0x238>)
 8000a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a08:	4613      	mov	r3, r2
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4413      	add	r3, r2
 8000a0e:	00db      	lsls	r3, r3, #3
 8000a10:	440b      	add	r3, r1
 8000a12:	330c      	adds	r3, #12
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 8000a18:	4933      	ldr	r1, [pc, #204]	; (8000ae8 <getNextAlarm+0x238>)
 8000a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	440b      	add	r3, r1
 8000a26:	330d      	adds	r3, #13
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 8000a2c:	492e      	ldr	r1, [pc, #184]	; (8000ae8 <getNextAlarm+0x238>)
 8000a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a30:	4613      	mov	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4413      	add	r3, r2
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	440b      	add	r3, r1
 8000a3a:	330e      	adds	r3, #14
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 8000a40:	4929      	ldr	r1, [pc, #164]	; (8000ae8 <getNextAlarm+0x238>)
 8000a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	330f      	adds	r3, #15
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 8000a54:	4924      	ldr	r1, [pc, #144]	; (8000ae8 <getNextAlarm+0x238>)
 8000a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3310      	adds	r3, #16
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 8000a68:	491f      	ldr	r1, [pc, #124]	; (8000ae8 <getNextAlarm+0x238>)
 8000a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	440b      	add	r3, r1
 8000a76:	3311      	adds	r3, #17
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx;
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	623b      	str	r3, [r7, #32]
			*inEvent = true;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
 8000a8a:	e002      	b.n	8000a92 <getNextAlarm+0x1e2>
		}

		// traverse to next event
		else {
			eventIdx++;
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8e:	3301      	adds	r3, #1
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <getNextAlarm+0x23c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	da06      	bge.n	8000aaa <getNextAlarm+0x1fa>
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
 8000a9e:	f083 0301 	eor.w	r3, r3, #1
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	f47f af37 	bne.w	8000918 <getNextAlarm+0x68>
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000aaa:	7ffb      	ldrb	r3, [r7, #31]
 8000aac:	f083 0301 	eor.w	r3, r3, #1
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <getNextAlarm+0x216>
		dateTime = NULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ac0:	601a      	str	r2, [r3, #0]
		return false;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e00b      	b.n	8000ade <getNextAlarm+0x22e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	f107 0310 	add.w	r3, r7, #16
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	6010      	str	r0, [r2, #0]
 8000ad2:	889b      	ldrh	r3, [r3, #4]
 8000ad4:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = currentIdx;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	6a3a      	ldr	r2, [r7, #32]
 8000ada:	601a      	str	r2, [r3, #0]
		return true;
 8000adc:	2301      	movs	r3, #1
	}
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	372c      	adds	r7, #44	; 0x2c
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000090 	.word	0x20000090
 8000aec:	20000180 	.word	0x20000180

08000af0 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	221c      	movs	r2, #28
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 fba0 	bl	8005254 <memcpy>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	221c      	movs	r2, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	68b8      	ldr	r0, [r7, #8]
 8000b3c:	f004 fb8a 	bl	8005254 <memcpy>
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <com_session_init>:

/*
 *
 */
bool com_session_init(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (com_transport_init(huart))
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f959 	bl	8000e08 <com_transport_init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d007      	beq.n	8000b6c <com_session_init+0x24>
	{
		_sessionOpen = false;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <com_session_init+0x30>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <com_session_init+0x34>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	701a      	strb	r2, [r3, #0]
		return true;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <com_session_init+0x26>
	}

	else
	{
		return false;
 8000b6c:	2300      	movs	r3, #0
	}
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000018c 	.word	0x2000018c
 8000b7c:	2000018d 	.word	0x2000018d

08000b80 <start_session>:

/*
 *
 */
SESSION_STATUS start_session(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	SESSION_STATUS handshakeStatus;

	if (_sessionInit)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <start_session+0x48>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d016      	beq.n	8000bbc <start_session+0x3c>
	{
		if (!_sessionOpen)
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <start_session+0x4c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	f083 0301 	eor.w	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00d      	beq.n	8000bb8 <start_session+0x38>
		{
			handshakeStatus = handshake(SESSION_START_TIMEOUT_MS);
 8000b9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba0:	f000 f848 	bl	8000c34 <handshake>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <start_session+0x34>
				_sessionOpen = true;
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <start_session+0x4c>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	e002      	b.n	8000bbe <start_session+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e000      	b.n	8000bbe <start_session+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000bbc:	2303      	movs	r3, #3
	}
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000018d 	.word	0x2000018d
 8000bcc:	2000018c 	.word	0x2000018c

08000bd0 <tell>:

/*
 *
 */
SESSION_STATUS tell(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6039      	str	r1, [r7, #0]
	TRANSPORT_STATUS transportStatus;

	if (_sessionInit)
 8000bda:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <tell+0x5c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d01f      	beq.n	8000c22 <tell+0x52>
	{
		if (_sessionOpen)
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <tell+0x60>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d019      	beq.n	8000c1e <tell+0x4e>
		{
			// enqueue message
			if (queue_tx(header, body) != TRANSPORT_OKAY)
 8000bea:	6839      	ldr	r1, [r7, #0]
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f000 f929 	bl	8000e44 <queue_tx>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <tell+0x2c>
			{
				return SESSION_BUSY;
 8000bf8:	2305      	movs	r3, #5
 8000bfa:	e013      	b.n	8000c24 <tell+0x54>
			}

			// send message
			transportStatus = tx(TX_TIMEOUT_MS);
 8000bfc:	20fa      	movs	r0, #250	; 0xfa
 8000bfe:	f000 f97b 	bl	8000ef8 <tx>
 8000c02:	4603      	mov	r3, r0
 8000c04:	73fb      	strb	r3, [r7, #15]

			if (transportStatus == TRANSPORT_OKAY)
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <tell+0x40>
			{
				return SESSION_OKAY;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	e009      	b.n	8000c24 <tell+0x54>
			}
			else if (transportStatus == TRANSPORT_TIMEOUT)
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d101      	bne.n	8000c1a <tell+0x4a>
			{
				return SESSION_TIMEOUT;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e004      	b.n	8000c24 <tell+0x54>
			}
			else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
			{
				return SESSION_ERROR;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e002      	b.n	8000c24 <tell+0x54>
			}
		}

		else
		{
			return SESSION_NO_HANDSHAKE;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	e000      	b.n	8000c24 <tell+0x54>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000c22:	2303      	movs	r3, #3
	}
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000018d 	.word	0x2000018d
 8000c30:	2000018c 	.word	0x2000018c

08000c34 <handshake>:

/*
 *
 */
SESSION_STATUS handshake(unsigned int timeout_ms)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool error = false;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	bool success = false;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	TRANSPORT_STATUS transportStatus;
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]

	while (!success && !error)
 8000c66:	e0a2      	b.n	8000dae <handshake+0x17a>
	{
		// state 0:  receive message
		if (state == 0)
 8000c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d106      	bne.n	8000c7c <handshake+0x48>
		{
			transportStatus = rx(timeout_ms); // handshake timeout until start of handshake
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f97c 	bl	8000f6c <rx>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c7a:	e063      	b.n	8000d44 <handshake+0x110>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 8000c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d10b      	bne.n	8000c9a <handshake+0x66>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8000c82:	f107 0208 	add.w	r2, r7, #8
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f8ff 	bl	8000e90 <dequeue_rx>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c98:	e054      	b.n	8000d44 <handshake+0x110>
		}
		// state 2: check if sync
		else if (state == 2)
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d10d      	bne.n	8000cbc <handshake+0x88>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_MESSAGE_HEADER_SIZE))
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	4955      	ldr	r1, [pc, #340]	; (8000dfc <handshake+0x1c8>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fb1d 	bl	80052e8 <strncmp>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d047      	beq.n	8000d44 <handshake+0x110>
			{
				error = true;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000cba:	e043      	b.n	8000d44 <handshake+0x110>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d110      	bne.n	8000ce4 <handshake+0xb0>
		{
			memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	221c      	movs	r2, #28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 fad0 	bl	8005270 <memset>
			transportStatus = queue_tx(HANDSHAKE_HEADER_ACKN, messageBody);
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	484a      	ldr	r0, [pc, #296]	; (8000e00 <handshake+0x1cc>)
 8000cd8:	f000 f8b4 	bl	8000e44 <queue_tx>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000ce2:	e02f      	b.n	8000d44 <handshake+0x110>
		}
		// state 4: send ack
		else if (state == 4)
 8000ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d106      	bne.n	8000cf8 <handshake+0xc4>
		{
			transportStatus = tx(TX_TIMEOUT_MS);
 8000cea:	20fa      	movs	r0, #250	; 0xfa
 8000cec:	f000 f904 	bl	8000ef8 <tx>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000cf6:	e025      	b.n	8000d44 <handshake+0x110>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8000cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cfa:	2b05      	cmp	r3, #5
 8000cfc:	d106      	bne.n	8000d0c <handshake+0xd8>
		{
			transportStatus = rx(RX_TIMEOUT_MS);
 8000cfe:	20fa      	movs	r0, #250	; 0xfa
 8000d00:	f000 f934 	bl	8000f6c <rx>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000d0a:	e01b      	b.n	8000d44 <handshake+0x110>
		}
		// state 6: dequeue message
		else if (state == 6)
 8000d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d10b      	bne.n	8000d2a <handshake+0xf6>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8000d12:	f107 0208 	add.w	r2, r7, #8
 8000d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 f8b7 	bl	8000e90 <dequeue_rx>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000d28:	e00c      	b.n	8000d44 <handshake+0x110>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_MESSAGE_HEADER_SIZE))
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	2204      	movs	r2, #4
 8000d30:	4934      	ldr	r1, [pc, #208]	; (8000e04 <handshake+0x1d0>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f004 fad8 	bl	80052e8 <strncmp>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <handshake+0x110>
			{
				error = true;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8000d44:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d12d      	bne.n	8000da8 <handshake+0x174>
		{
			if (state == 0)
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d102      	bne.n	8000d58 <handshake+0x124>
				state = 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d56:	e02a      	b.n	8000dae <handshake+0x17a>
			else if (state == 1)
 8000d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d102      	bne.n	8000d64 <handshake+0x130>
				state = 2;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d62:	e024      	b.n	8000dae <handshake+0x17a>
			else if (state == 2)
 8000d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d102      	bne.n	8000d70 <handshake+0x13c>
				state = 3;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d6e:	e01e      	b.n	8000dae <handshake+0x17a>
			else if (state == 3)
 8000d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d102      	bne.n	8000d7c <handshake+0x148>
				state = 4;
 8000d76:	2304      	movs	r3, #4
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d7a:	e018      	b.n	8000dae <handshake+0x17a>
			else if (state == 4)
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d102      	bne.n	8000d88 <handshake+0x154>
				state = 5;
 8000d82:	2305      	movs	r3, #5
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d86:	e012      	b.n	8000dae <handshake+0x17a>
			else if (state == 5)
 8000d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d102      	bne.n	8000d94 <handshake+0x160>
				state = 6;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d92:	e00c      	b.n	8000dae <handshake+0x17a>
			else if (state == 6)
 8000d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d102      	bne.n	8000da0 <handshake+0x16c>
				state = 7;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9e:	e006      	b.n	8000dae <handshake+0x17a>
			else // if (state == 7)
				success = true;
 8000da0:	2301      	movs	r3, #1
 8000da2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000da6:	e002      	b.n	8000dae <handshake+0x17a>
		}
		else
		{
			error = true;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (!success && !error)
 8000dae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000db2:	f083 0301 	eor.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d007      	beq.n	8000dcc <handshake+0x198>
 8000dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dc0:	f083 0301 	eor.w	r3, r3, #1
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f47f af4e 	bne.w	8000c68 <handshake+0x34>
		}
	}


	// report status of handshake
	if (success && !error)
 8000dcc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d008      	beq.n	8000de6 <handshake+0x1b2>
 8000dd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000dd8:	f083 0301 	eor.w	r3, r3, #1
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <handshake+0x1b2>
	{
		return SESSION_OKAY;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e006      	b.n	8000df4 <handshake+0x1c0>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 8000de6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d101      	bne.n	8000df2 <handshake+0x1be>
		{
			return SESSION_TIMEOUT;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <handshake+0x1c0>
		}
		else
		{
			return SESSION_ERROR;
 8000df2:	2302      	movs	r3, #2
		}
	}
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3730      	adds	r7, #48	; 0x30
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	08005bc8 	.word	0x08005bc8
 8000e00:	08005bd0 	.word	0x08005bd0
 8000e04:	08005bd8 	.word	0x08005bd8

08000e08 <com_transport_init>:

/*
 *
 */
bool com_transport_init(UART_HandleTypeDef* huart)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	// If the programmer didn't pass in a null pointer
	if (huart != NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00a      	beq.n	8000e2c <com_transport_init+0x24>
	{
		_uartHandle = huart;
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <com_transport_init+0x30>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6013      	str	r3, [r2, #0]
		_txBuffer_full = false;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <com_transport_init+0x34>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
		_rxBuffer_full = false;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <com_transport_init+0x38>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
		return true;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <com_transport_init+0x26>
	}

	else
	{
		return false;
 8000e2c:	2300      	movs	r3, #0
	}
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000190 	.word	0x20000190
 8000e3c:	200001d4 	.word	0x200001d4
 8000e40:	200001d5 	.word	0x200001d5

08000e44 <queue_tx>:

/*
 *
 */
TRANSPORT_STATUS queue_tx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	if (IS_LAYER_INIT)
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <queue_tx+0x40>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d010      	beq.n	8000e78 <queue_tx+0x34>
	{
		if (_txBuffer_full)
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <queue_tx+0x44>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <queue_tx+0x20>
		{
			return TRANSPORT_TX_FULL;
 8000e60:	2304      	movs	r3, #4
 8000e62:	e00a      	b.n	8000e7a <queue_tx+0x36>
		}

		else
		{
			// Compose header and body into one message
			composeMessage(header, body, _txBuffer);
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <queue_tx+0x48>)
 8000e66:	6839      	ldr	r1, [r7, #0]
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fe41 	bl	8000af0 <composeMessage>
			_txBuffer_full = true;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <queue_tx+0x44>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e000      	b.n	8000e7a <queue_tx+0x36>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000e78:	2308      	movs	r3, #8
	}
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000190 	.word	0x20000190
 8000e88:	200001d4 	.word	0x200001d4
 8000e8c:	20000194 	.word	0x20000194

08000e90 <dequeue_rx>:

/*
 *
 */
TRANSPORT_STATUS dequeue_rx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000e90:	b5b0      	push	{r4, r5, r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	if (IS_LAYER_INIT)
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <dequeue_rx+0x5c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d01f      	beq.n	8000ee2 <dequeue_rx+0x52>
	{
		if (!_rxBuffer_full)
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <dequeue_rx+0x60>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f083 0301 	eor.w	r3, r3, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <dequeue_rx+0x26>
		{
			return TRANSPORT_RX_EMPTY;
 8000eb2:	2306      	movs	r3, #6
 8000eb4:	e016      	b.n	8000ee4 <dequeue_rx+0x54>
		}

		else
		{
			// retrieve message from buffer
			memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <dequeue_rx+0x64>)
 8000eb8:	f107 0408 	add.w	r4, r7, #8
 8000ebc:	461d      	mov	r5, r3
 8000ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ec6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			_rxBuffer_full = false;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <dequeue_rx+0x60>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]

			// decompose header and body from message
			decomposeMessage(header, body, message);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fe1f 	bl	8000b1c <decomposeMessage>

			return TRANSPORT_OKAY;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <dequeue_rx+0x54>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000ee2:	2308      	movs	r3, #8
	}
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3728      	adds	r7, #40	; 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bdb0      	pop	{r4, r5, r7, pc}
 8000eec:	20000190 	.word	0x20000190
 8000ef0:	200001d5 	.word	0x200001d5
 8000ef4:	200001b4 	.word	0x200001b4

08000ef8 <tx>:

/*
 *
 */
TRANSPORT_STATUS tx(uint32_t timeout_ms)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8000f00:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <tx+0x68>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d026      	beq.n	8000f56 <tx+0x5e>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <tx+0x6c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f083 0301 	eor.w	r3, r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <tx+0x24>
		{
			return TRANSPORT_TX_EMPTY;
 8000f18:	2305      	movs	r3, #5
 8000f1a:	e01d      	b.n	8000f58 <tx+0x60>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8000f1c:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <tx+0x68>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	4910      	ldr	r1, [pc, #64]	; (8000f68 <tx+0x70>)
 8000f26:	f003 faf5 	bl	8004514 <HAL_UART_Transmit>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <tx+0x40>
		{
			return TRANSPORT_ERROR;
 8000f34:	2302      	movs	r3, #2
 8000f36:	e00f      	b.n	8000f58 <tx+0x60>
		}
		else if (hal_status == HAL_TIMEOUT)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d101      	bne.n	8000f42 <tx+0x4a>
		{
			return TRANSPORT_TIMEOUT;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00a      	b.n	8000f58 <tx+0x60>
		}
		else if (hal_status == HAL_BUSY)
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d101      	bne.n	8000f4c <tx+0x54>
		{
			return TRANSPORT_BUSY;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e005      	b.n	8000f58 <tx+0x60>
		}
		else
		{
			_txBuffer_full = false;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <tx+0x6c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <tx+0x60>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000f56:	2308      	movs	r3, #8
	}
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000190 	.word	0x20000190
 8000f64:	200001d4 	.word	0x200001d4
 8000f68:	20000194 	.word	0x20000194

08000f6c <rx>:

/*
 *
 */
TRANSPORT_STATUS rx(uint32_t timeout_ms)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <rx+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <rx+0x58>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <rx+0x68>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <rx+0x1e>
		{
			return TRANSPORT_RX_FULL;
 8000f86:	2307      	movs	r3, #7
 8000f88:	e01d      	b.n	8000fc6 <rx+0x5a>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <rx+0x64>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2220      	movs	r2, #32
 8000f92:	4911      	ldr	r1, [pc, #68]	; (8000fd8 <rx+0x6c>)
 8000f94:	f003 fb44 	bl	8004620 <HAL_UART_Receive>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <rx+0x3a>
		{
			return TRANSPORT_ERROR;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e00f      	b.n	8000fc6 <rx+0x5a>
		}
		else if (hal_status == HAL_TIMEOUT)
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d101      	bne.n	8000fb0 <rx+0x44>
		{
			return TRANSPORT_TIMEOUT;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e00a      	b.n	8000fc6 <rx+0x5a>
		}
		else if (hal_status == HAL_BUSY)
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d101      	bne.n	8000fba <rx+0x4e>
		{
			return TRANSPORT_BUSY;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e005      	b.n	8000fc6 <rx+0x5a>
		}
		else
		{
			_rxBuffer_full = true;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <rx+0x68>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e000      	b.n	8000fc6 <rx+0x5a>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000fc4:	2308      	movs	r3, #8
	}
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000190 	.word	0x20000190
 8000fd4:	200001d5 	.word	0x200001d5
 8000fd8:	200001b4 	.word	0x200001b4

08000fdc <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001000:	68fb      	ldr	r3, [r7, #12]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8001014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4013      	ands	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	d101      	bne.n	8001028 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800103c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	43db      	mvns	r3, r3
 8001046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800104a:	4013      	ands	r3, r2
 800104c:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b088      	sub	sp, #32
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff ffd2 	bl	800100c <LL_AHB2_GRP1_IsEnabledClock>
 8001068:	4603      	mov	r3, r0
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <activate_led+0x60>)
 800106c:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <activate_led+0x60>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d102      	bne.n	800107c <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	2002      	movs	r0, #2
 8001078:	f7ff ffb0 	bl	8000fdc <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	2301      	movs	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4619      	mov	r1, r3
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <activate_led+0x64>)
 80010a0:	f000 ff7a 	bl	8001f98 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <activate_led+0x64>)
 80010ac:	f001 f9a2 	bl	80023f4 <HAL_GPIO_WritePin>
}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001d8 	.word	0x200001d8
 80010bc:	48000400 	.word	0x48000400

080010c0 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	2200      	movs	r2, #0
 80010ce:	4619      	mov	r1, r3
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <deactivate_led+0x38>)
 80010d2:	f001 f98f 	bl	80023f4 <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <deactivate_led+0x38>)
 80010dc:	f001 f8bc 	bl	8002258 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <deactivate_led+0x3c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80010e8:	2002      	movs	r0, #2
 80010ea:	f7ff ffa3 	bl	8001034 <LL_AHB2_GRP1_DisableClock>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	48000400 	.word	0x48000400
 80010fc:	200001d8 	.word	0x200001d8

08001100 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001110:	f023 0218 	bic.w	r2, r3, #24
 8001114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4313      	orrs	r3, r2
 800111c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <LL_AHB2_GRP1_EnableClock>:
{
 800112a:	b480      	push	{r7}
 800112c:	b085      	sub	sp, #20
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4313      	orrs	r3, r2
 8001140:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4013      	ands	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8001162:	f7ff fb47 	bl	80007f4 <calendar_AlarmA_ISR>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b091      	sub	sp, #68	; 0x44
 8001174:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f000 fd8d 	bl	8001c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117a:	f000 f883 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117e:	f000 f9d3 	bl	8001528 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001182:	f000 f97b 	bl	800147c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001186:	f000 f8db 	bl	8001340 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800118a:	2001      	movs	r0, #1
 800118c:	f001 f972 	bl	8002474 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  com_session_init(&huart2);
 8001190:	4838      	ldr	r0, [pc, #224]	; (8001274 <main+0x104>)
 8001192:	f7ff fcd9 	bl	8000b48 <com_session_init>

  // initialize calendar
  calendar_init(&hrtc);
 8001196:	4838      	ldr	r0, [pc, #224]	; (8001278 <main+0x108>)
 8001198:	f7ff f9ca 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011ae:	f7ff f9cf 	bl	8000550 <calendar_setDateTime>

  // start calendar
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	202a      	movs	r0, #42	; 0x2a
 80011b8:	f000 feb9 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80011bc:	202a      	movs	r0, #42	; 0x2a
 80011be:	f000 fed0 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  calendar_start();
 80011c2:	f7ff f9f5 	bl	80005b0 <calendar_start>

  // begin listening for messages from desktop
  if (start_session() != SESSION_OKAY)
 80011c6:	f7ff fcdb 	bl	8000b80 <start_session>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <main+0x6a>
  {
	  activate_led(RED_LED);
 80011d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011d4:	f7ff ff40 	bl	8001058 <activate_led>
 80011d8:	e003      	b.n	80011e2 <main+0x72>
  }
  else
  {
	  activate_led(GREEN_LED);
 80011da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011de:	f7ff ff3b 	bl	8001058 <activate_led>
  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 80011e2:	f7ff fa23 	bl	800062c <calendar_handleAlarm>

	  // try connection if not present
	  if (start_session() != SESSION_OKAY)
 80011e6:	f7ff fccb 	bl	8000b80 <start_session>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <main+0x8a>
	  {
		  activate_led(RED_LED);
 80011f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011f4:	f7ff ff30 	bl	8001058 <activate_led>
 80011f8:	e007      	b.n	800120a <main+0x9a>
	  }
	  else
	  {
		  deactivate_led(RED_LED);
 80011fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011fe:	f7ff ff5f 	bl	80010c0 <deactivate_led>
		  activate_led(GREEN_LED);
 8001202:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001206:	f7ff ff27 	bl	8001058 <activate_led>

	  // if message present, handle message


	  // report date/time over uart
	  calendar_getDateTime(&now);
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9b4 	bl	800057c <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8001214:	463b      	mov	r3, r7
 8001216:	221c      	movs	r2, #28
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f004 f828 	bl	8005270 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8001220:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001224:	461e      	mov	r6, r3
 8001226:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800122a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800122e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001232:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8001236:	4604      	mov	r4, r0
 8001238:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800123c:	4605      	mov	r5, r0
 800123e:	4638      	mov	r0, r7
 8001240:	9504      	str	r5, [sp, #16]
 8001242:	9403      	str	r4, [sp, #12]
 8001244:	9102      	str	r1, [sp, #8]
 8001246:	9201      	str	r2, [sp, #4]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	4633      	mov	r3, r6
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <main+0x10c>)
 800124e:	211c      	movs	r1, #28
 8001250:	f004 f816 	bl	8005280 <sniprintf>
	  snprintf(messageHeader, UART_MESSAGE_HEADER_SIZE, "ECHO");
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <main+0x110>)
 800125a:	2104      	movs	r1, #4
 800125c:	4618      	mov	r0, r3
 800125e:	f004 f80f 	bl	8005280 <sniprintf>
	  tell(messageHeader, messageBody);
 8001262:	463a      	mov	r2, r7
 8001264:	f107 031c 	add.w	r3, r7, #28
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fcb0 	bl	8000bd0 <tell>
	  calendar_handleAlarm();
 8001270:	e7b7      	b.n	80011e2 <main+0x72>
 8001272:	bf00      	nop
 8001274:	20000214 	.word	0x20000214
 8001278:	200001dc 	.word	0x200001dc
 800127c:	08005be0 	.word	0x08005be0
 8001280:	08005c04 	.word	0x08005c04

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b09a      	sub	sp, #104	; 0x68
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2248      	movs	r2, #72	; 0x48
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f003 ffec 	bl	8005270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012aa:	f001 f8bb 	bl	8002424 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff ff26 	bl	8001100 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b4:	4b21      	ldr	r3, [pc, #132]	; (800133c <SystemClock_Config+0xb8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <SystemClock_Config+0xb8>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <SystemClock_Config+0xb8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80012d0:	232c      	movs	r3, #44	; 0x2c
 80012d2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012d4:	2381      	movs	r3, #129	; 0x81
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012d8:	2301      	movs	r3, #1
 80012da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012dc:	2300      	movs	r3, #0
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 fb7f 	bl	80029f8 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001300:	f000 f91f 	bl	8001542 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001304:	236f      	movs	r3, #111	; 0x6f
 8001306:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f001 fee9 	bl	80030fc <HAL_RCC_ClockConfig>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001330:	f000 f907 	bl	8001542 <Error_Handler>
  }
}
 8001334:	bf00      	nop
 8001336:	3768      	adds	r7, #104	; 0x68
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	58000400 	.word	0x58000400

08001340 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b092      	sub	sp, #72	; 0x48
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001346:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001356:	2300      	movs	r3, #0
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	222c      	movs	r2, #44	; 0x2c
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f003 ff85 	bl	8005270 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001366:	4b43      	ldr	r3, [pc, #268]	; (8001474 <MX_RTC_Init+0x134>)
 8001368:	4a43      	ldr	r2, [pc, #268]	; (8001478 <MX_RTC_Init+0x138>)
 800136a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800136c:	4b41      	ldr	r3, [pc, #260]	; (8001474 <MX_RTC_Init+0x134>)
 800136e:	2200      	movs	r2, #0
 8001370:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001372:	4b40      	ldr	r3, [pc, #256]	; (8001474 <MX_RTC_Init+0x134>)
 8001374:	227f      	movs	r2, #127	; 0x7f
 8001376:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <MX_RTC_Init+0x134>)
 800137a:	22ff      	movs	r2, #255	; 0xff
 800137c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800137e:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <MX_RTC_Init+0x134>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001384:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <MX_RTC_Init+0x134>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_RTC_Init+0x134>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MX_RTC_Init+0x134>)
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_RTC_Init+0x134>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <MX_RTC_Init+0x134>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013a4:	4833      	ldr	r0, [pc, #204]	; (8001474 <MX_RTC_Init+0x134>)
 80013a6:	f002 fb83 	bl	8003ab0 <HAL_RTC_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80013b0:	f000 f8c7 	bl	8001542 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	4827      	ldr	r0, [pc, #156]	; (8001474 <MX_RTC_Init+0x134>)
 80013d8:	f002 fbec 	bl	8003bb4 <HAL_RTC_SetTime>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80013e2:	f000 f8ae 	bl	8001542 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013e6:	2301      	movs	r3, #1
 80013e8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001402:	2201      	movs	r2, #1
 8001404:	4619      	mov	r1, r3
 8001406:	481b      	ldr	r0, [pc, #108]	; (8001474 <MX_RTC_Init+0x134>)
 8001408:	f002 fcd2 	bl	8003db0 <HAL_RTC_SetDate>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001412:	f000 f896 	bl	8001542 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001416:	2300      	movs	r3, #0
 8001418:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800141a:	2300      	movs	r3, #0
 800141c:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800141e:	2300      	movs	r3, #0
 8001420:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	4809      	ldr	r0, [pc, #36]	; (8001474 <MX_RTC_Init+0x134>)
 800144e:	f002 fd83 	bl	8003f58 <HAL_RTC_SetAlarm_IT>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001458:	f000 f873 	bl	8001542 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2100      	movs	r1, #0
 8001460:	202a      	movs	r0, #42	; 0x2a
 8001462:	f000 fd64 	bl	8001f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001466:	202a      	movs	r0, #42	; 0x2a
 8001468:	f000 fd7b 	bl	8001f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	3748      	adds	r7, #72	; 0x48
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200001dc 	.word	0x200001dc
 8001478:	40002800 	.word	0x40002800

0800147c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <MX_USART2_UART_Init+0xa8>)
 8001484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 8001488:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800148c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 8001496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800149a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 800149c:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 800149e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80014a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014bc:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014c4:	2230      	movs	r2, #48	; 0x30
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d8:	4811      	ldr	r0, [pc, #68]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014da:	f002 ffcb 	bl	8004474 <HAL_UART_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80014e4:	f000 f82d 	bl	8001542 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014ec:	f003 fdbf 	bl	800506e <HAL_UARTEx_SetTxFifoThreshold>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80014f6:	f000 f824 	bl	8001542 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 80014fe:	f003 fdf4 	bl	80050ea <HAL_UARTEx_SetRxFifoThreshold>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001508:	f000 f81b 	bl	8001542 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_USART2_UART_Init+0xa4>)
 800150e:	f003 fd76 	bl	8004ffe <HAL_UARTEx_DisableFifoMode>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8001518:	f000 f813 	bl	8001542 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000214 	.word	0x20000214
 8001524:	40004400 	.word	0x40004400

08001528 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fdfc 	bl	800112a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2004      	movs	r0, #4
 8001534:	f7ff fdf9 	bl	800112a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	2002      	movs	r0, #2
 800153a:	f7ff fdf6 	bl	800112a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}

08001542 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001546:	b672      	cpsid	i
}
 8001548:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800154a:	e7fe      	b.n	800154a <Error_Handler+0x8>

0800154c <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001554:	4a03      	ldr	r2, [pc, #12]	; (8001564 <rtcAlarmControl_init+0x18>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	200002a8 	.word	0x200002a8

08001568 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001568:	b590      	push	{r4, r7, lr}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4604      	mov	r4, r0
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4623      	mov	r3, r4
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	4603      	mov	r3, r0
 800157c:	71bb      	strb	r3, [r7, #6]
 800157e:	460b      	mov	r3, r1
 8001580:	717b      	strb	r3, [r7, #5]
 8001582:	4613      	mov	r3, r2
 8001584:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	4a5a      	ldr	r2, [pc, #360]	; (80016f4 <setDateTime+0x18c>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	b2db      	uxtb	r3, r3
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	b258      	sxtb	r0, r3
 8001596:	79fa      	ldrb	r2, [r7, #7]
 8001598:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <setDateTime+0x18c>)
 800159a:	fba3 1302 	umull	r1, r3, r3, r2
 800159e:	08d9      	lsrs	r1, r3, #3
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4303      	orrs	r3, r0
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 80015b6:	79bb      	ldrb	r3, [r7, #6]
 80015b8:	4a4e      	ldr	r2, [pc, #312]	; (80016f4 <setDateTime+0x18c>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	08db      	lsrs	r3, r3, #3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	b258      	sxtb	r0, r3
 80015c6:	79ba      	ldrb	r2, [r7, #6]
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <setDateTime+0x18c>)
 80015ca:	fba3 1302 	umull	r1, r3, r3, r2
 80015ce:	08d9      	lsrs	r1, r3, #3
 80015d0:	460b      	mov	r3, r1
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	b25b      	sxtb	r3, r3
 80015de:	4303      	orrs	r3, r0
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 80015e6:	797b      	ldrb	r3, [r7, #5]
 80015e8:	4a42      	ldr	r2, [pc, #264]	; (80016f4 <setDateTime+0x18c>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	08db      	lsrs	r3, r3, #3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	b258      	sxtb	r0, r3
 80015f6:	797a      	ldrb	r2, [r7, #5]
 80015f8:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <setDateTime+0x18c>)
 80015fa:	fba3 1302 	umull	r1, r3, r3, r2
 80015fe:	08d9      	lsrs	r1, r3, #3
 8001600:	460b      	mov	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4303      	orrs	r3, r0
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 800161a:	793b      	ldrb	r3, [r7, #4]
 800161c:	4a35      	ldr	r2, [pc, #212]	; (80016f4 <setDateTime+0x18c>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	08db      	lsrs	r3, r3, #3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	b258      	sxtb	r0, r3
 800162a:	793a      	ldrb	r2, [r7, #4]
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <setDateTime+0x18c>)
 800162e:	fba3 1302 	umull	r1, r3, r3, r2
 8001632:	08d9      	lsrs	r1, r3, #3
 8001634:	460b      	mov	r3, r1
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	b2db      	uxtb	r3, r3
 8001640:	b25b      	sxtb	r3, r3
 8001642:	4303      	orrs	r3, r0
 8001644:	b25b      	sxtb	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 800164a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800164e:	4a29      	ldr	r2, [pc, #164]	; (80016f4 <setDateTime+0x18c>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	b2db      	uxtb	r3, r3
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	b258      	sxtb	r0, r3
 800165c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <setDateTime+0x18c>)
 8001662:	fba3 1302 	umull	r1, r3, r3, r2
 8001666:	08d9      	lsrs	r1, r3, #3
 8001668:	460b      	mov	r3, r1
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	b25b      	sxtb	r3, r3
 8001676:	4303      	orrs	r3, r0
 8001678:	b25b      	sxtb	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 800167e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <setDateTime+0x18c>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	b2db      	uxtb	r3, r3
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	b258      	sxtb	r0, r3
 8001690:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001694:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <setDateTime+0x18c>)
 8001696:	fba3 1302 	umull	r1, r3, r3, r2
 800169a:	08d9      	lsrs	r1, r3, #3
 800169c:	460b      	mov	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	4303      	orrs	r3, r0
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <setDateTime+0x190>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f107 011c 	add.w	r1, r7, #28
 80016ba:	2201      	movs	r2, #1
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fb77 	bl	8003db0 <HAL_RTC_SetDate>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80016cc:	e7fe      	b.n	80016cc <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <setDateTime+0x190>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f107 0108 	add.w	r1, r7, #8
 80016d6:	2201      	movs	r2, #1
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 fa6b 	bl	8003bb4 <HAL_RTC_SetTime>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80016e8:	e7fe      	b.n	80016e8 <setDateTime+0x180>
  }
}
 80016ea:	bf00      	nop
 80016ec:	3724      	adds	r7, #36	; 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd90      	pop	{r4, r7, pc}
 80016f2:	bf00      	nop
 80016f4:	cccccccd 	.word	0xcccccccd
 80016f8:	200002a8 	.word	0x200002a8

080016fc <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
 8001708:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 800171e:	4b40      	ldr	r3, [pc, #256]	; (8001820 <getDateTime+0x124>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f107 0114 	add.w	r1, r7, #20
 8001726:	2201      	movs	r2, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fadf 	bl	8003cec <HAL_RTC_GetTime>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001738:	e7fe      	b.n	8001738 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <getDateTime+0x124>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f107 0110 	add.w	r1, r7, #16
 8001742:	2201      	movs	r2, #1
 8001744:	4618      	mov	r0, r3
 8001746:	f002 fbb9 	bl	8003ebc <HAL_RTC_GetDate>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d002      	beq.n	8001756 <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001750:	b672      	cpsid	i
}
 8001752:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001754:	e7fe      	b.n	8001754 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 8001756:	7cfb      	ldrb	r3, [r7, #19]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	b2db      	uxtb	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	4413      	add	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	7cfb      	ldrb	r3, [r7, #19]
 8001768:	f003 030f 	and.w	r3, r3, #15
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b2da      	uxtb	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 8001776:	7c7b      	ldrb	r3, [r7, #17]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4413      	add	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	7c7b      	ldrb	r3, [r7, #17]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	b2db      	uxtb	r3, r3
 800178e:	4413      	add	r3, r2
 8001790:	b2da      	uxtb	r2, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 8001796:	7cbb      	ldrb	r3, [r7, #18]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	7cbb      	ldrb	r3, [r7, #18]
 80017a8:	f003 030f 	and.w	r3, r3, #15
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 80017b6:	7d3b      	ldrb	r3, [r7, #20]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	7d3b      	ldrb	r3, [r7, #20]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 80017d6:	7d7b      	ldrb	r3, [r7, #21]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	7d7b      	ldrb	r3, [r7, #21]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f4:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 80017f6:	7dbb      	ldrb	r3, [r7, #22]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	7dbb      	ldrb	r3, [r7, #22]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4413      	add	r3, r2
 8001810:	b2da      	uxtb	r2, r3
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002a8 	.word	0x200002a8

08001824 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b08f      	sub	sp, #60	; 0x3c
 8001828:	af00      	add	r7, sp, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4623      	mov	r3, r4
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	4603      	mov	r3, r0
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	460b      	mov	r3, r1
 800183c:	717b      	strb	r3, [r7, #5]
 800183e:	4613      	mov	r3, r2
 8001840:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	222c      	movs	r2, #44	; 0x2c
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f003 fd10 	bl	8005270 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4a40      	ldr	r2, [pc, #256]	; (8001954 <setAlarm_A+0x130>)
 8001854:	fba2 2303 	umull	r2, r3, r2, r3
 8001858:	08db      	lsrs	r3, r3, #3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	b258      	sxtb	r0, r3
 8001860:	79fa      	ldrb	r2, [r7, #7]
 8001862:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <setAlarm_A+0x130>)
 8001864:	fba3 1302 	umull	r1, r3, r3, r2
 8001868:	08d9      	lsrs	r1, r3, #3
 800186a:	460b      	mov	r3, r1
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	b25b      	sxtb	r3, r3
 8001878:	4303      	orrs	r3, r0
 800187a:	b25b      	sxtb	r3, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	4a33      	ldr	r2, [pc, #204]	; (8001954 <setAlarm_A+0x130>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	08db      	lsrs	r3, r3, #3
 800188c:	b2db      	uxtb	r3, r3
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	b258      	sxtb	r0, r3
 8001892:	79ba      	ldrb	r2, [r7, #6]
 8001894:	4b2f      	ldr	r3, [pc, #188]	; (8001954 <setAlarm_A+0x130>)
 8001896:	fba3 1302 	umull	r1, r3, r3, r2
 800189a:	08d9      	lsrs	r1, r3, #3
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	4303      	orrs	r3, r0
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 80018b2:	797b      	ldrb	r3, [r7, #5]
 80018b4:	4a27      	ldr	r2, [pc, #156]	; (8001954 <setAlarm_A+0x130>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	b258      	sxtb	r0, r3
 80018c2:	797a      	ldrb	r2, [r7, #5]
 80018c4:	4b23      	ldr	r3, [pc, #140]	; (8001954 <setAlarm_A+0x130>)
 80018c6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ca:	08d9      	lsrs	r1, r3, #3
 80018cc:	460b      	mov	r3, r1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	4303      	orrs	r3, r0
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 80018e2:	793b      	ldrb	r3, [r7, #4]
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <setAlarm_A+0x130>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	b258      	sxtb	r0, r3
 80018f2:	793a      	ldrb	r2, [r7, #4]
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <setAlarm_A+0x130>)
 80018f6:	fba3 1302 	umull	r1, r3, r3, r2
 80018fa:	08d9      	lsrs	r1, r3, #3
 80018fc:	460b      	mov	r3, r1
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	b25b      	sxtb	r3, r3
 800190a:	4303      	orrs	r3, r0
 800190c:	b25b      	sxtb	r3, r3
 800190e:	b2db      	uxtb	r3, r3
 8001910:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 800192a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800192e:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <setAlarm_A+0x134>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f107 010c 	add.w	r1, r7, #12
 8001938:	2201      	movs	r2, #1
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fb0c 	bl	8003f58 <HAL_RTC_SetAlarm_IT>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 8001946:	b672      	cpsid	i
}
 8001948:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 800194a:	e7fe      	b.n	800194a <setAlarm_A+0x126>
  }
}
 800194c:	bf00      	nop
 800194e:	373c      	adds	r7, #60	; 0x3c
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	cccccccd 	.word	0xcccccccd
 8001958:	200002a8 	.word	0x200002a8

0800195c <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <diableAlarm_A+0x24>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001968:	4618      	mov	r0, r3
 800196a:	f002 fc01 	bl	8004170 <HAL_RTC_DeactivateAlarm>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 8001978:	e7fe      	b.n	8001978 <diableAlarm_A+0x1c>
	}
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002a8 	.word	0x200002a8

08001984 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <LL_AHB2_GRP1_EnableClock>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c8:	68fb      	ldr	r3, [r7, #12]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019f8:	68fb      	ldr	r3, [r7, #12]
}
 80019fa:	bf00      	nop
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b090      	sub	sp, #64	; 0x40
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	2238      	movs	r2, #56	; 0x38
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fc25 	bl	8005270 <memset>
  if(hrtc->Instance==RTC)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_RTC_MspInit+0x54>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d115      	bne.n	8001a5c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a34:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3c:	f107 0308 	add.w	r3, r7, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 ff1b 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001a4c:	f7ff fd79 	bl	8001542 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a50:	f7ff ff98 	bl	8001984 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001a54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a58:	f7ff ffbc 	bl	80019d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3740      	adds	r7, #64	; 0x40
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40002800 	.word	0x40002800

08001a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b096      	sub	sp, #88	; 0x58
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2238      	movs	r2, #56	; 0x38
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fbf1 	bl	8005270 <memset>
  if(huart->Instance==USART2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_UART_MspInit+0x88>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d126      	bne.n	8001ae6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a9c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001aa0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fee8 	bl	800387c <HAL_RCCEx_PeriphCLKConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ab2:	f7ff fd46 	bl	8001542 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ab6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001aba:	f7ff ff8b 	bl	80019d4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff ff70 	bl	80019a4 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f000 fa59 	bl	8001f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3758      	adds	r7, #88	; 0x58
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40004400 	.word	0x40004400

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b3a:	f000 f905 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <RTC_Alarm_IRQHandler+0x10>)
 8001b4a:	f002 fb6d 	bl	8004228 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200001dc 	.word	0x200001dc

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f003 fb3a 	bl	8005200 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20008000 	.word	0x20008000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	200002ac 	.word	0x200002ac
 8001bc0:	200002f0 	.word	0x200002f0

08001bc4 <uartBasic_TX_Poll>:
/*
 * Start transmitting message over UART.
 */
bool uartBasic_TX_Poll(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <uartBasic_TX_Poll+0x44>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f083 0301 	eor.w	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00e      	beq.n	8001bfc <uartBasic_TX_Poll+0x38>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <uartBasic_TX_Poll+0x48>)
 8001be0:	6839      	ldr	r1, [r7, #0]
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe ff84 	bl	8000af0 <composeMessage>
		_txBuffer_full = true;
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <uartBasic_TX_Poll+0x44>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_Poll();
 8001bee:	f000 f80f 	bl	8001c10 <_txMessage_Poll>

		// clear buffer full
		_txBuffer_full = false;
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <uartBasic_TX_Poll+0x44>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]

		// report successfully queued
		return true;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <uartBasic_TX_Poll+0x3a>
	}

	else
	{
		// return full buffer
		return false;
 8001bfc:	2300      	movs	r3, #0
	}
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200002d8 	.word	0x200002d8
 8001c0c:	200002b8 	.word	0x200002b8

08001c10 <_txMessage_Poll>:

/*
 *
 */
void _txMessage_Poll(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <_txMessage_Poll+0x24>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	23fa      	movs	r3, #250	; 0xfa
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <_txMessage_Poll+0x28>)
 8001c1e:	f002 fc79 	bl	8004514 <HAL_UART_Transmit>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d102      	bne.n	8001c2e <_txMessage_Poll+0x1e>
		_txError = true;
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <_txMessage_Poll+0x2c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200002b4 	.word	0x200002b4
 8001c38:	200002b8 	.word	0x200002b8
 8001c3c:	200002b0 	.word	0x200002b0

08001c40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c40:	480d      	ldr	r0, [pc, #52]	; (8001c78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c44:	f7fe fc6e 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c4a:	490d      	ldr	r1, [pc, #52]	; (8001c80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c4c:	4a0d      	ldr	r2, [pc, #52]	; (8001c84 <LoopForever+0xe>)
  movs r3, #0
 8001c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c50:	e002      	b.n	8001c58 <LoopCopyDataInit>

08001c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c56:	3304      	adds	r3, #4

08001c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c5c:	d3f9      	bcc.n	8001c52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c60:	4c0a      	ldr	r4, [pc, #40]	; (8001c8c <LoopForever+0x16>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c64:	e001      	b.n	8001c6a <LoopFillZerobss>

08001c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c68:	3204      	adds	r2, #4

08001c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c6c:	d3fb      	bcc.n	8001c66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c6e:	f003 facd 	bl	800520c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c72:	f7ff fa7d 	bl	8001170 <main>

08001c76 <LoopForever>:

LoopForever:
    b LoopForever
 8001c76:	e7fe      	b.n	8001c76 <LoopForever>
  ldr   r0, =_estack
 8001c78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c84:	08005d34 	.word	0x08005d34
  ldr r2, =_sbss
 8001c88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c8c:	200002f0 	.word	0x200002f0

08001c90 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c90:	e7fe      	b.n	8001c90 <ADC_IRQHandler>
	...

08001c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9e:	2003      	movs	r0, #3
 8001ca0:	f000 f93a 	bl	8001f18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ca4:	f001 fc0c 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_Init+0x3c>)
 8001cac:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 f810 	bl	8001cd4 <HAL_InitTick>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	71fb      	strb	r3, [r7, #7]
 8001cbe:	e001      	b.n	8001cc4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cc0:	f7ff fea0 	bl	8001a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <HAL_InitTick+0x6c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d024      	beq.n	8001d32 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ce8:	f001 fbea 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8001cec:	4602      	mov	r2, r0
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_InitTick+0x6c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 f93c 	bl	8001f7e <HAL_SYSTICK_Config>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10f      	bne.n	8001d2c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b0f      	cmp	r3, #15
 8001d10:	d809      	bhi.n	8001d26 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d12:	2200      	movs	r2, #0
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d1a:	f000 f908 	bl	8001f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_InitTick+0x70>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	e007      	b.n	8001d36 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e004      	b.n	8001d36 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	73fb      	strb	r3, [r7, #15]
 8001d30:	e001      	b.n	8001d36 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	20000008 	.word	0x20000008

08001d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_IncTick+0x1c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_IncTick+0x20>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a03      	ldr	r2, [pc, #12]	; (8001d68 <HAL_IncTick+0x20>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	2000000c 	.word	0x2000000c
 8001d68:	200002dc 	.word	0x200002dc

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <HAL_GetTick+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	200002dc 	.word	0x200002dc

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	db0b      	blt.n	8001e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f003 021f 	and.w	r2, r3, #31
 8001dfc:	4906      	ldr	r1, [pc, #24]	; (8001e18 <__NVIC_EnableIRQ+0x34>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	2001      	movs	r0, #1
 8001e06:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100

08001e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db0a      	blt.n	8001e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	490c      	ldr	r1, [pc, #48]	; (8001e68 <__NVIC_SetPriority+0x4c>)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	0112      	lsls	r2, r2, #4
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e44:	e00a      	b.n	8001e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <__NVIC_SetPriority+0x50>)
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	3b04      	subs	r3, #4
 8001e54:	0112      	lsls	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f1c3 0307 	rsb	r3, r3, #7
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	3304      	adds	r3, #4
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d902      	bls.n	8001ea0 <NVIC_EncodePriority+0x30>
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	e000      	b.n	8001ea2 <NVIC_EncodePriority+0x32>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43da      	mvns	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	4313      	orrs	r3, r2
         );
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	; 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ee4:	d301      	bcc.n	8001eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e00f      	b.n	8001f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <SysTick_Config+0x40>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ef2:	210f      	movs	r1, #15
 8001ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef8:	f7ff ff90 	bl	8001e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SysTick_Config+0x40>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f02:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <SysTick_Config+0x40>)
 8001f04:	2207      	movs	r2, #7
 8001f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	e000e010 	.word	0xe000e010

08001f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff ff2d 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b086      	sub	sp, #24
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f3c:	f7ff ff44 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	6978      	ldr	r0, [r7, #20]
 8001f48:	f7ff ff92 	bl	8001e70 <NVIC_EncodePriority>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff61 	bl	8001e1c <__NVIC_SetPriority>
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff37 	bl	8001de4 <__NVIC_EnableIRQ>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffa4 	bl	8001ed4 <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa6:	e140      	b.n	800222a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8132 	beq.w	8002224 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d005      	beq.n	8001fd8 <HAL_GPIO_Init+0x40>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d130      	bne.n	800203a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800200e:	2201      	movs	r2, #1
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f003 0201 	and.w	r2, r3, #1
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b03      	cmp	r3, #3
 8002044:	d017      	beq.n	8002076 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d123      	bne.n	80020ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	6939      	ldr	r1, [r7, #16]
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0203 	and.w	r2, r3, #3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 808c 	beq.w	8002224 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <HAL_GPIO_Init+0x2b0>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	2207      	movs	r2, #7
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002136:	d00d      	beq.n	8002154 <HAL_GPIO_Init+0x1bc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a44      	ldr	r2, [pc, #272]	; (800224c <HAL_GPIO_Init+0x2b4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x1b8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a43      	ldr	r2, [pc, #268]	; (8002250 <HAL_GPIO_Init+0x2b8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_GPIO_Init+0x1b4>
 8002148:	2302      	movs	r3, #2
 800214a:	e004      	b.n	8002156 <HAL_GPIO_Init+0x1be>
 800214c:	2307      	movs	r3, #7
 800214e:	e002      	b.n	8002156 <HAL_GPIO_Init+0x1be>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <HAL_GPIO_Init+0x1be>
 8002154:	2300      	movs	r3, #0
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	4093      	lsls	r3, r2
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002166:	4938      	ldr	r1, [pc, #224]	; (8002248 <HAL_GPIO_Init+0x2b0>)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002174:	4b37      	ldr	r3, [pc, #220]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002198:	4a2e      	ldr	r2, [pc, #184]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 80021ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ce:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80021ee:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 80021f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_GPIO_Init+0x2bc>)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f47f aeb7 	bne.w	8001fa8 <HAL_GPIO_Init+0x10>
  }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000
 800224c:	48000400 	.word	0x48000400
 8002250:	48000800 	.word	0x48000800
 8002254:	58000800 	.word	0x58000800

08002258 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002266:	e0af      	b.n	80023c8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002268:	2201      	movs	r2, #1
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80a2 	beq.w	80023c2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800227e:	4a59      	ldr	r2, [pc, #356]	; (80023e4 <HAL_GPIO_DeInit+0x18c>)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	089b      	lsrs	r3, r3, #2
 8002284:	3302      	adds	r3, #2
 8002286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	2207      	movs	r2, #7
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022a6:	d00d      	beq.n	80022c4 <HAL_GPIO_DeInit+0x6c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a4f      	ldr	r2, [pc, #316]	; (80023e8 <HAL_GPIO_DeInit+0x190>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d007      	beq.n	80022c0 <HAL_GPIO_DeInit+0x68>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a4e      	ldr	r2, [pc, #312]	; (80023ec <HAL_GPIO_DeInit+0x194>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_GPIO_DeInit+0x64>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e004      	b.n	80022c6 <HAL_GPIO_DeInit+0x6e>
 80022bc:	2307      	movs	r3, #7
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_DeInit+0x6e>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_GPIO_DeInit+0x6e>
 80022c4:	2300      	movs	r3, #0
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	f002 0203 	and.w	r2, r2, #3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4093      	lsls	r3, r2
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d136      	bne.n	8002344 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_GPIO_DeInit+0x198>)
 80022d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	4943      	ldr	r1, [pc, #268]	; (80023f0 <HAL_GPIO_DeInit+0x198>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80022e8:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_GPIO_DeInit+0x198>)
 80022ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	493f      	ldr	r1, [pc, #252]	; (80023f0 <HAL_GPIO_DeInit+0x198>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_GPIO_DeInit+0x198>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	493b      	ldr	r1, [pc, #236]	; (80023f0 <HAL_GPIO_DeInit+0x198>)
 8002304:	4013      	ands	r3, r2
 8002306:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_GPIO_DeInit+0x198>)
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	4937      	ldr	r1, [pc, #220]	; (80023f0 <HAL_GPIO_DeInit+0x198>)
 8002312:	4013      	ands	r3, r2
 8002314:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0303 	and.w	r3, r3, #3
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	2207      	movs	r2, #7
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002326:	4a2f      	ldr	r2, [pc, #188]	; (80023e4 <HAL_GPIO_DeInit+0x18c>)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	43da      	mvns	r2, r3
 8002336:	482b      	ldr	r0, [pc, #172]	; (80023e4 <HAL_GPIO_DeInit+0x18c>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	400a      	ands	r2, r1
 800233e:	3302      	adds	r3, #2
 8002340:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2103      	movs	r1, #3
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	08d2      	lsrs	r2, r2, #3
 8002378:	4019      	ands	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2103      	movs	r1, #3
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	2101      	movs	r1, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2103      	movs	r1, #3
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	401a      	ands	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60da      	str	r2, [r3, #12]
    }

    position++;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f47f af49 	bne.w	8002268 <HAL_GPIO_DeInit+0x10>
  }
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40010000 	.word	0x40010000
 80023e8:	48000400 	.word	0x48000400
 80023ec:	48000800 	.word	0x48000800
 80023f0:	58000800 	.word	0x58000800

080023f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
 8002400:	4613      	mov	r3, r2
 8002402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002404:	787b      	ldrb	r3, [r7, #1]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800240a:	887a      	ldrh	r2, [r7, #2]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002410:	e002      	b.n	8002418 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
	...

08002424 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <HAL_PWR_EnableBkUpAccess+0x18>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_PWR_EnableBkUpAccess+0x18>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr
 800243c:	58000400 	.word	0x58000400

08002440 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <LL_PWR_EnableBootC2+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <LL_PWR_EnableBootC2+0x18>)
 800244a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244e:	60d3      	str	r3, [r2, #12]
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	58000400 	.word	0x58000400

0800245c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_PWREx_GetVoltageRange+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	58000400 	.word	0x58000400

08002474 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 800247c:	f7ff ffe0 	bl	8002440 <LL_PWR_EnableBootC2>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002498:	d101      	bne.n	800249e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	58000400 	.word	0x58000400

080024ac <LL_RCC_HSE_EnableTcxo>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80024b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024be:	6013      	str	r3, [r2, #0]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <LL_RCC_HSE_DisableTcxo>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024f6:	d101      	bne.n	80024fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <LL_RCC_HSE_Enable>:
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <LL_RCC_HSE_Disable>:
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <LL_RCC_HSE_IsReady>:
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002550:	d101      	bne.n	8002556 <LL_RCC_HSE_IsReady+0x18>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <LL_RCC_HSE_IsReady+0x1a>
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <LL_RCC_HSI_Enable>:
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800256e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002572:	6013      	str	r3, [r2, #0]
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <LL_RCC_HSI_Disable>:
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800258a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800258e:	6013      	str	r3, [r2, #0]
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <LL_RCC_HSI_IsReady>:
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025aa:	d101      	bne.n	80025b0 <LL_RCC_HSI_IsReady+0x18>
 80025ac:	2301      	movs	r3, #1
 80025ae:	e000      	b.n	80025b2 <LL_RCC_HSI_IsReady+0x1a>
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_HSI_SetCalibTrimming>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80025c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <LL_RCC_LSE_IsReady>:
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80025e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d101      	bne.n	80025fa <LL_RCC_LSE_IsReady+0x18>
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <LL_RCC_LSE_IsReady+0x1a>
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <LL_RCC_LSI_Enable>:
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002610:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <LL_RCC_LSI_Disable>:
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002634:	f023 0301 	bic.w	r3, r3, #1
 8002638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <LL_RCC_LSI_IsReady>:
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b02      	cmp	r3, #2
 8002656:	d101      	bne.n	800265c <LL_RCC_LSI_IsReady+0x18>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <LL_RCC_LSI_IsReady+0x1a>
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <LL_RCC_MSI_Enable>:
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6013      	str	r3, [r2, #0]
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <LL_RCC_MSI_Disable>:
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6013      	str	r3, [r2, #0]
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <LL_RCC_MSI_IsReady>:
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80026a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d101      	bne.n	80026b4 <LL_RCC_MSI_IsReady+0x16>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_RCC_MSI_IsReady+0x18>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80026c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d101      	bne.n	80026d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr

080026de <LL_RCC_MSI_GetRange>:
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002700:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <LL_RCC_MSI_SetCalibTrimming>:
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <LL_RCC_SetSysClkSource>:
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <LL_RCC_GetSysClkSource>:
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 030c 	and.w	r3, r3, #12
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <LL_RCC_SetAHBPrescaler>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4313      	orrs	r3, r2
 800278a:	608b      	str	r3, [r1, #8]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr

080027c0 <LL_RCC_SetAHB3Prescaler>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027d0:	f023 020f 	bic.w	r2, r3, #15
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <LL_RCC_SetAPB1Prescaler>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4313      	orrs	r3, r2
 8002806:	608b      	str	r3, [r1, #8]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <LL_RCC_SetAPB2Prescaler>:
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800281a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4313      	orrs	r3, r2
 800282c:	608b      	str	r3, [r1, #8]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <LL_RCC_GetAHBPrescaler>:
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <LL_RCC_GetAHB3Prescaler>:
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <LL_RCC_GetAPB1Prescaler>:
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <LL_RCC_GetAPB2Prescaler>:
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028de:	d101      	bne.n	80028e4 <LL_RCC_PLL_IsReady+0x18>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <LL_RCC_PLL_IsReady+0x1a>
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0303 	and.w	r3, r3, #3
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295a:	d101      	bne.n	8002960 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr

0800296a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002972:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800297e:	d101      	bne.n	8002984 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr

0800298e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002996:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a2:	d101      	bne.n	80029a8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029c4:	d101      	bne.n	80029ca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029e6:	d101      	bne.n	80029ec <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e36f      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0a:	f7ff fea6 	bl	800275a <LL_RCC_GetSysClkSource>
 8002a0e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a10:	f7ff ff8f 	bl	8002932 <LL_RCC_PLL_GetMainSource>
 8002a14:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80c4 	beq.w	8002bac <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x3e>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d176      	bne.n	8002b1e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d173      	bne.n	8002b1e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e353      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_OscConfig+0x68>
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5e:	e006      	b.n	8002a6e <HAL_RCC_OscConfig+0x76>
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a68:	091b      	lsrs	r3, r3, #4
 8002a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d222      	bcs.n	8002ab8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fd5a 	bl	8003530 <RCC_SetFlashLatencyFromMSIRange>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e331      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	6013      	str	r3, [r2, #0]
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fe2b 	bl	800270c <LL_RCC_MSI_SetCalibTrimming>
 8002ab6:	e021      	b.n	8002afc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac2:	f043 0308 	orr.w	r3, r3, #8
 8002ac6:	6013      	str	r3, [r2, #0]
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fe12 	bl	800270c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fd1f 	bl	8003530 <RCC_SetFlashLatencyFromMSIRange>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e2f6      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002afc:	f000 fce0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4aa7      	ldr	r2, [pc, #668]	; (8002da0 <HAL_RCC_OscConfig+0x3a8>)
 8002b04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002b06:	4ba7      	ldr	r3, [pc, #668]	; (8002da4 <HAL_RCC_OscConfig+0x3ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff f8e2 	bl	8001cd4 <HAL_InitTick>
 8002b10:	4603      	mov	r3, r0
 8002b12:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d047      	beq.n	8002baa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	e2e5      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d02c      	beq.n	8002b80 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b26:	f7ff fd9e 	bl	8002666 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b2a:	f7ff f91f 	bl	8001d6c <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b32:	f7ff f91b 	bl	8001d6c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e2d2      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b44:	f7ff fdab 	bl	800269e <LL_RCC_MSI_IsReady>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f1      	beq.n	8002b32 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fdc7 	bl	800270c <LL_RCC_MSI_SetCalibTrimming>
 8002b7e:	e015      	b.n	8002bac <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b80:	f7ff fd7f 	bl	8002682 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b84:	f7ff f8f2 	bl	8001d6c <HAL_GetTick>
 8002b88:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b8c:	f7ff f8ee 	bl	8001d6c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e2a5      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b9e:	f7ff fd7e 	bl	800269e <LL_RCC_MSI_IsReady>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f1      	bne.n	8002b8c <HAL_RCC_OscConfig+0x194>
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002baa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d058      	beq.n	8002c6a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d005      	beq.n	8002bca <HAL_RCC_OscConfig+0x1d2>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	d108      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d105      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d14b      	bne.n	8002c6a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e289      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_OscConfig+0x204>
 8002bf6:	f7ff fc86 	bl	8002506 <LL_RCC_HSE_Enable>
 8002bfa:	e00d      	b.n	8002c18 <HAL_RCC_OscConfig+0x220>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002c04:	d104      	bne.n	8002c10 <HAL_RCC_OscConfig+0x218>
 8002c06:	f7ff fc51 	bl	80024ac <LL_RCC_HSE_EnableTcxo>
 8002c0a:	f7ff fc7c 	bl	8002506 <LL_RCC_HSE_Enable>
 8002c0e:	e003      	b.n	8002c18 <HAL_RCC_OscConfig+0x220>
 8002c10:	f7ff fc87 	bl	8002522 <LL_RCC_HSE_Disable>
 8002c14:	f7ff fc58 	bl	80024c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff f8a4 	bl	8001d6c <HAL_GetTick>
 8002c24:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff f8a0 	bl	8001d6c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e257      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c3a:	f7ff fc80 	bl	800253e <LL_RCC_HSE_IsReady>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f1      	beq.n	8002c28 <HAL_RCC_OscConfig+0x230>
 8002c44:	e011      	b.n	8002c6a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7ff f891 	bl	8001d6c <HAL_GetTick>
 8002c4a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4e:	f7ff f88d 	bl	8001d6c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b64      	cmp	r3, #100	; 0x64
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e244      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c60:	f7ff fc6d 	bl	800253e <LL_RCC_HSE_IsReady>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f1      	bne.n	8002c4e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d046      	beq.n	8002d04 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_OscConfig+0x290>
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d10e      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e22a      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fc8e 	bl	80025ba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c9e:	e031      	b.n	8002d04 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d019      	beq.n	8002cdc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	f7ff fc5a 	bl	8002560 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7ff f85e 	bl	8001d6c <HAL_GetTick>
 8002cb0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb4:	f7ff f85a 	bl	8001d6c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e211      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cc6:	f7ff fc67 	bl	8002598 <LL_RCC_HSI_IsReady>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f1      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fc70 	bl	80025ba <LL_RCC_HSI_SetCalibTrimming>
 8002cda:	e013      	b.n	8002d04 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cdc:	f7ff fc4e 	bl	800257c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7ff f844 	bl	8001d6c <HAL_GetTick>
 8002ce4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7ff f840 	bl	8001d6c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1f7      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002cfa:	f7ff fc4d 	bl	8002598 <LL_RCC_HSI_IsReady>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f1      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06e      	beq.n	8002dee <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d056      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d20:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d031      	beq.n	8002d94 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e1d0      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d013      	beq.n	8002d7a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d52:	f7ff fc67 	bl	8002624 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d56:	f7ff f809 	bl	8001d6c <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7ff f805 	bl	8001d6c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b11      	cmp	r3, #17
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e1bc      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002d70:	f7ff fc68 	bl	8002644 <LL_RCC_LSI_IsReady>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f1      	bne.n	8002d5e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	f023 0210 	bic.w	r2, r3, #16
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d94:	f7ff fc36 	bl	8002604 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d98:	f7fe ffe8 	bl	8001d6c <HAL_GetTick>
 8002d9c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002d9e:	e00c      	b.n	8002dba <HAL_RCC_OscConfig+0x3c2>
 8002da0:	20000000 	.word	0x20000000
 8002da4:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fe ffe0 	bl	8001d6c <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b11      	cmp	r3, #17
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e197      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002dba:	f7ff fc43 	bl	8002644 <LL_RCC_LSI_IsReady>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0f1      	beq.n	8002da8 <HAL_RCC_OscConfig+0x3b0>
 8002dc4:	e013      	b.n	8002dee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dc6:	f7ff fc2d 	bl	8002624 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dca:	f7fe ffcf 	bl	8001d6c <HAL_GetTick>
 8002dce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7fe ffcb 	bl	8001d6c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b11      	cmp	r3, #17
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e182      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002de4:	f7ff fc2e 	bl	8002644 <LL_RCC_LSI_IsReady>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f1      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 80d8 	beq.w	8002fac <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002dfc:	f7ff fb44 	bl	8002488 <LL_PWR_IsEnabledBkUpAccess>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d113      	bne.n	8002e2e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e06:	f7ff fb0d 	bl	8002424 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0a:	f7fe ffaf 	bl	8001d6c <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e12:	f7fe ffab 	bl	8001d6c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e162      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e24:	f7ff fb30 	bl	8002488 <LL_PWR_IsEnabledBkUpAccess>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f1      	beq.n	8002e12 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d07b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b85      	cmp	r3, #133	; 0x85
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b05      	cmp	r3, #5
 8002e44:	d109      	bne.n	8002e5a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e52:	f043 0304 	orr.w	r3, r3, #4
 8002e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe ff87 	bl	8001d6c <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7fe ff79 	bl	8001d6c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e12e      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e8c:	f7ff fba9 	bl	80025e2 <LL_RCC_LSE_IsReady>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ef      	beq.n	8002e76 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b81      	cmp	r3, #129	; 0x81
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b85      	cmp	r3, #133	; 0x85
 8002ea4:	d121      	bne.n	8002eea <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe ff61 	bl	8001d6c <HAL_GetTick>
 8002eaa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe ff53 	bl	8001d6c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e108      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ec      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ee8:	e060      	b.n	8002fac <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe ff3f 	bl	8001d6c <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe ff31 	bl	8001d6c <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0e6      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ec      	bne.n	8002f06 <HAL_RCC_OscConfig+0x50e>
 8002f2c:	e03e      	b.n	8002fac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe ff1d 	bl	8001d6c <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe ff0f 	bl	8001d6c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0c4      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ec      	bne.n	8002f4a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fe fefc 	bl	8001d6c <HAL_GetTick>
 8002f74:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f82:	f023 0301 	bic.w	r3, r3, #1
 8002f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe feee 	bl	8001d6c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0a3      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002fa2:	f7ff fb1e 	bl	80025e2 <LL_RCC_LSE_IsReady>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1ef      	bne.n	8002f8c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8099 	beq.w	80030e8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2b0c      	cmp	r3, #12
 8002fba:	d06c      	beq.n	8003096 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d14b      	bne.n	800305c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc4:	f7ff fc74 	bl	80028b0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fed0 	bl	8001d6c <HAL_GetTick>
 8002fcc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fecc 	bl	8001d6c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b0a      	cmp	r3, #10
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e083      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fe2:	f7ff fc73 	bl	80028cc <LL_RCC_PLL_IsReady>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f1      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <HAL_RCC_OscConfig+0x6fc>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ffe:	4311      	orrs	r1, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003004:	0212      	lsls	r2, r2, #8
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800300c:	4311      	orrs	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003018:	430a      	orrs	r2, r1
 800301a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800301e:	4313      	orrs	r3, r2
 8003020:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003022:	f7ff fc37 	bl	8002894 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe fe99 	bl	8001d6c <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe fe95 	bl	8001d6c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b0a      	cmp	r3, #10
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e04c      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003050:	f7ff fc3c 	bl	80028cc <LL_RCC_PLL_IsReady>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f1      	beq.n	800303e <HAL_RCC_OscConfig+0x646>
 800305a:	e045      	b.n	80030e8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305c:	f7ff fc28 	bl	80028b0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fe84 	bl	8001d6c <HAL_GetTick>
 8003064:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fe80 	bl	8001d6c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b0a      	cmp	r3, #10
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e037      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800307a:	f7ff fc27 	bl	80028cc <LL_RCC_PLL_IsReady>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f1      	bne.n	8003068 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800308e:	4b1a      	ldr	r3, [pc, #104]	; (80030f8 <HAL_RCC_OscConfig+0x700>)
 8003090:	4013      	ands	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
 8003094:	e028      	b.n	80030e8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e023      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d115      	bne.n	80030e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d10e      	bne.n	80030e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	11c1808c 	.word	0x11c1808c
 80030f8:	eefefffc 	.word	0xeefefffc

080030fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e12c      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b98      	ldr	r3, [pc, #608]	; (8003374 <HAL_RCC_ClockConfig+0x278>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d91b      	bls.n	8003156 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b95      	ldr	r3, [pc, #596]	; (8003374 <HAL_RCC_ClockConfig+0x278>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 0207 	bic.w	r2, r3, #7
 8003126:	4993      	ldr	r1, [pc, #588]	; (8003374 <HAL_RCC_ClockConfig+0x278>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312e:	f7fe fe1d 	bl	8001d6c <HAL_GetTick>
 8003132:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003134:	e008      	b.n	8003148 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003136:	f7fe fe19 	bl	8001d6c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e110      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003148:	4b8a      	ldr	r3, [pc, #552]	; (8003374 <HAL_RCC_ClockConfig+0x278>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d1ef      	bne.n	8003136 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fb02 	bl	8002770 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800316c:	f7fe fdfe 	bl	8001d6c <HAL_GetTick>
 8003170:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003172:	e008      	b.n	8003186 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003174:	f7fe fdfa 	bl	8001d6c <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e0f1      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003186:	f7ff fbdf 	bl	8002948 <LL_RCC_IsActiveFlag_HPRE>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f1      	beq.n	8003174 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d016      	beq.n	80031ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff faf8 	bl	8002796 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031a6:	f7fe fde1 	bl	8001d6c <HAL_GetTick>
 80031aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031ae:	f7fe fddd 	bl	8001d6c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0d4      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80031c0:	f7ff fbd3 	bl	800296a <LL_RCC_IsActiveFlag_C2HPRE>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f1      	beq.n	80031ae <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff faf0 	bl	80027c0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fdc4 	bl	8001d6c <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031e8:	f7fe fdc0 	bl	8001d6c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0b7      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031fa:	f7ff fbc8 	bl	800298e <LL_RCC_IsActiveFlag_SHDHPRE>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f1      	beq.n	80031e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fae9 	bl	80027ec <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800321a:	f7fe fda7 	bl	8001d6c <HAL_GetTick>
 800321e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003222:	f7fe fda3 	bl	8001d6c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e09a      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003234:	f7ff fbbd 	bl	80029b2 <LL_RCC_IsActiveFlag_PPRE1>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f1      	beq.n	8003222 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d017      	beq.n	800327a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fade 	bl	8002812 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003256:	f7fe fd89 	bl	8001d6c <HAL_GetTick>
 800325a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800325e:	f7fe fd85 	bl	8001d6c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e07c      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003270:	f7ff fbb0 	bl	80029d4 <LL_RCC_IsActiveFlag_PPRE2>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f1      	beq.n	800325e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d043      	beq.n	800330e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d106      	bne.n	800329c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800328e:	f7ff f956 	bl	800253e <LL_RCC_HSE_IsReady>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11e      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e066      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d106      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80032a4:	f7ff fb12 	bl	80028cc <LL_RCC_PLL_IsReady>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d113      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e05b      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80032ba:	f7ff f9f0 	bl	800269e <LL_RCC_MSI_IsReady>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d108      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e050      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80032c8:	f7ff f966 	bl	8002598 <LL_RCC_HSI_IsReady>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e049      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fa2a 	bl	8002734 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e0:	f7fe fd44 	bl	8001d6c <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fe fd40 	bl	8001d6c <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e035      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	f7ff fa2c 	bl	800275a <LL_RCC_GetSysClkSource>
 8003302:	4602      	mov	r2, r0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	429a      	cmp	r2, r3
 800330c:	d1ec      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_ClockConfig+0x278>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d21b      	bcs.n	8003354 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_RCC_ClockConfig+0x278>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 0207 	bic.w	r2, r3, #7
 8003324:	4913      	ldr	r1, [pc, #76]	; (8003374 <HAL_RCC_ClockConfig+0x278>)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800332c:	f7fe fd1e 	bl	8001d6c <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	e008      	b.n	8003346 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003334:	f7fe fd1a 	bl	8001d6c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e011      	b.n	800336a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_RCC_ClockConfig+0x278>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d1ef      	bne.n	8003334 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003354:	f000 f8b4 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003358:	4603      	mov	r3, r0
 800335a:	4a07      	ldr	r2, [pc, #28]	; (8003378 <HAL_RCC_ClockConfig+0x27c>)
 800335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <HAL_RCC_ClockConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe fcb6 	bl	8001cd4 <HAL_InitTick>
 8003368:	4603      	mov	r3, r0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	58004000 	.word	0x58004000
 8003378:	20000000 	.word	0x20000000
 800337c:	20000008 	.word	0x20000008

08003380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b087      	sub	sp, #28
 8003384:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800338e:	f7ff f9e4 	bl	800275a <LL_RCC_GetSysClkSource>
 8003392:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003394:	f7ff facd 	bl	8002932 <LL_RCC_PLL_GetMainSource>
 8003398:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x2c>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d139      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d136      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80033ac:	f7ff f987 	bl	80026be <LL_RCC_MSI_IsEnabledRangeSelect>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d115      	bne.n	80033e2 <HAL_RCC_GetSysClockFreq+0x62>
 80033b6:	f7ff f982 	bl	80026be <LL_RCC_MSI_IsEnabledRangeSelect>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d106      	bne.n	80033ce <HAL_RCC_GetSysClockFreq+0x4e>
 80033c0:	f7ff f98d 	bl	80026de <LL_RCC_MSI_GetRange>
 80033c4:	4603      	mov	r3, r0
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 030f 	and.w	r3, r3, #15
 80033cc:	e005      	b.n	80033da <HAL_RCC_GetSysClockFreq+0x5a>
 80033ce:	f7ff f991 	bl	80026f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80033d2:	4603      	mov	r3, r0
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x134>)
 80033dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e0:	e014      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x8c>
 80033e2:	f7ff f96c 	bl	80026be <LL_RCC_MSI_IsEnabledRangeSelect>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d106      	bne.n	80033fa <HAL_RCC_GetSysClockFreq+0x7a>
 80033ec:	f7ff f977 	bl	80026de <LL_RCC_MSI_GetRange>
 80033f0:	4603      	mov	r3, r0
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	e005      	b.n	8003406 <HAL_RCC_GetSysClockFreq+0x86>
 80033fa:	f7ff f97b 	bl	80026f4 <LL_RCC_MSI_GetRangeAfterStandby>
 80033fe:	4603      	mov	r3, r0
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	4a2b      	ldr	r2, [pc, #172]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x134>)
 8003408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d115      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003418:	e012      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d102      	bne.n	8003426 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003420:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e00c      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d109      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800342c:	f7ff f85a 	bl	80024e4 <LL_RCC_HSE_IsEnabledDiv2>
 8003430:	4603      	mov	r3, r0
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e001      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800343c:	4b1f      	ldr	r3, [pc, #124]	; (80034bc <HAL_RCC_GetSysClockFreq+0x13c>)
 800343e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	f7ff f98b 	bl	800275a <LL_RCC_GetSysClkSource>
 8003444:	4603      	mov	r3, r0
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d12f      	bne.n	80034aa <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800344a:	f7ff fa72 	bl	8002932 <LL_RCC_PLL_GetMainSource>
 800344e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d003      	beq.n	800345e <HAL_RCC_GetSysClockFreq+0xde>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d003      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0xe4>
 800345c:	e00d      	b.n	800347a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800345e:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003460:	60fb      	str	r3, [r7, #12]
        break;
 8003462:	e00d      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003464:	f7ff f83e 	bl	80024e4 <LL_RCC_HSE_IsEnabledDiv2>
 8003468:	4603      	mov	r3, r0
 800346a:	2b01      	cmp	r3, #1
 800346c:	d102      	bne.n	8003474 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003470:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003472:	e005      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003476:	60fb      	str	r3, [r7, #12]
        break;
 8003478:	e002      	b.n	8003480 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	60fb      	str	r3, [r7, #12]
        break;
 800347e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003480:	f7ff fa35 	bl	80028ee <LL_RCC_PLL_GetN>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	fb03 f402 	mul.w	r4, r3, r2
 800348c:	f7ff fa46 	bl	800291c <LL_RCC_PLL_GetDivider>
 8003490:	4603      	mov	r3, r0
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	3301      	adds	r3, #1
 8003496:	fbb4 f4f3 	udiv	r4, r4, r3
 800349a:	f7ff fa34 	bl	8002906 <LL_RCC_PLL_GetR>
 800349e:	4603      	mov	r3, r0
 80034a0:	0f5b      	lsrs	r3, r3, #29
 80034a2:	3301      	adds	r3, #1
 80034a4:	fbb4 f3f3 	udiv	r3, r4, r3
 80034a8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80034aa:	697b      	ldr	r3, [r7, #20]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd90      	pop	{r4, r7, pc}
 80034b4:	08005c88 	.word	0x08005c88
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	01e84800 	.word	0x01e84800

080034c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b598      	push	{r3, r4, r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80034c4:	f7ff ff5c 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80034c8:	4604      	mov	r4, r0
 80034ca:	f7ff f9b5 	bl	8002838 <LL_RCC_GetAHBPrescaler>
 80034ce:	4603      	mov	r3, r0
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	4a03      	ldr	r2, [pc, #12]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd98      	pop	{r3, r4, r7, pc}
 80034e4:	08005c28 	.word	0x08005c28

080034e8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e8:	b598      	push	{r3, r4, r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80034ec:	f7ff ffe8 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034f0:	4604      	mov	r4, r0
 80034f2:	f7ff f9b9 	bl	8002868 <LL_RCC_GetAPB1Prescaler>
 80034f6:	4603      	mov	r3, r0
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	4a03      	ldr	r2, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003500:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd98      	pop	{r3, r4, r7, pc}
 8003508:	08005c68 	.word	0x08005c68

0800350c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800350c:	b598      	push	{r3, r4, r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003510:	f7ff ffd6 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003514:	4604      	mov	r4, r0
 8003516:	f7ff f9b2 	bl	800287e <LL_RCC_GetAPB2Prescaler>
 800351a:	4603      	mov	r3, r0
 800351c:	0adb      	lsrs	r3, r3, #11
 800351e:	4a03      	ldr	r2, [pc, #12]	; (800352c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003524:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd98      	pop	{r3, r4, r7, pc}
 800352c:	08005c68 	.word	0x08005c68

08003530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	4a10      	ldr	r2, [pc, #64]	; (8003584 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003548:	f7ff f981 	bl	800284e <LL_RCC_GetAHB3Prescaler>
 800354c:	4603      	mov	r3, r0
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003560:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4a09      	ldr	r2, [pc, #36]	; (800358c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0c9c      	lsrs	r4, r3, #18
 800356c:	f7fe ff76 	bl	800245c <HAL_PWREx_GetVoltageRange>
 8003570:	4603      	mov	r3, r0
 8003572:	4619      	mov	r1, r3
 8003574:	4620      	mov	r0, r4
 8003576:	f000 f80b 	bl	8003590 <RCC_SetFlashLatency>
 800357a:	4603      	mov	r3, r0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bd90      	pop	{r4, r7, pc}
 8003584:	08005c88 	.word	0x08005c88
 8003588:	08005c28 	.word	0x08005c28
 800358c:	431bde83 	.word	0x431bde83

08003590 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	; 0x38
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800359a:	4a3a      	ldr	r2, [pc, #232]	; (8003684 <RCC_SetFlashLatency+0xf4>)
 800359c:	f107 0320 	add.w	r3, r7, #32
 80035a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035a4:	6018      	str	r0, [r3, #0]
 80035a6:	3304      	adds	r3, #4
 80035a8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80035aa:	4a37      	ldr	r2, [pc, #220]	; (8003688 <RCC_SetFlashLatency+0xf8>)
 80035ac:	f107 0318 	add.w	r3, r7, #24
 80035b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035b4:	6018      	str	r0, [r3, #0]
 80035b6:	3304      	adds	r3, #4
 80035b8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80035ba:	4a34      	ldr	r2, [pc, #208]	; (800368c <RCC_SetFlashLatency+0xfc>)
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80035c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80035c6:	2300      	movs	r3, #0
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d0:	d11b      	bne.n	800360a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	633b      	str	r3, [r7, #48]	; 0x30
 80035d6:	e014      	b.n	8003602 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	3338      	adds	r3, #56	; 0x38
 80035de:	443b      	add	r3, r7
 80035e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d807      	bhi.n	80035fc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	3338      	adds	r3, #56	; 0x38
 80035f2:	443b      	add	r3, r7
 80035f4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035fa:	e021      	b.n	8003640 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	3301      	adds	r3, #1
 8003600:	633b      	str	r3, [r7, #48]	; 0x30
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	2b02      	cmp	r3, #2
 8003606:	d9e7      	bls.n	80035d8 <RCC_SetFlashLatency+0x48>
 8003608:	e01a      	b.n	8003640 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800360a:	2300      	movs	r3, #0
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360e:	e014      	b.n	800363a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	3338      	adds	r3, #56	; 0x38
 8003616:	443b      	add	r3, r7
 8003618:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800361c:	461a      	mov	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4293      	cmp	r3, r2
 8003622:	d807      	bhi.n	8003634 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3338      	adds	r3, #56	; 0x38
 800362a:	443b      	add	r3, r7
 800362c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003632:	e005      	b.n	8003640 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	3301      	adds	r3, #1
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	2b02      	cmp	r3, #2
 800363e:	d9e7      	bls.n	8003610 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <RCC_SetFlashLatency+0x100>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 0207 	bic.w	r2, r3, #7
 8003648:	4911      	ldr	r1, [pc, #68]	; (8003690 <RCC_SetFlashLatency+0x100>)
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003650:	f7fe fb8c 	bl	8001d6c <HAL_GetTick>
 8003654:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003656:	e008      	b.n	800366a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003658:	f7fe fb88 	bl	8001d6c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e007      	b.n	800367a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <RCC_SetFlashLatency+0x100>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003674:	429a      	cmp	r2, r3
 8003676:	d1ef      	bne.n	8003658 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3738      	adds	r7, #56	; 0x38
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	08005c0c 	.word	0x08005c0c
 8003688:	08005c14 	.word	0x08005c14
 800368c:	08005c1c 	.word	0x08005c1c
 8003690:	58004000 	.word	0x58004000

08003694 <LL_RCC_LSE_IsReady>:
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d101      	bne.n	80036ac <LL_RCC_LSE_IsReady+0x18>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <LL_RCC_LSE_IsReady+0x1a>
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <LL_RCC_SetUSARTClockSource>:
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80036be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	43db      	mvns	r3, r3
 80036cc:	401a      	ands	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036d6:	4313      	orrs	r3, r2
 80036d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <LL_RCC_SetI2SClockSource>:
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <LL_RCC_SetLPUARTClockSource>:
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr

0800373a <LL_RCC_SetI2CClockSource>:
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003746:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003752:	43db      	mvns	r3, r3
 8003754:	401a      	ands	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800375e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <LL_RCC_SetLPTIMClockSource>:
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800377a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0c1b      	lsrs	r3, r3, #16
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	43db      	mvns	r3, r3
 800378a:	401a      	ands	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr

080037a4 <LL_RCC_SetRNGClockSource>:
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bc80      	pop	{r7}
 80037cc:	4770      	bx	lr

080037ce <LL_RCC_SetADCClockSource>:
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <LL_RCC_SetRTCClockSource>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003808:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800380c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <LL_RCC_GetRTCClockSource>:
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	bc80      	pop	{r7}
 8003838:	4770      	bx	lr

0800383a <LL_RCC_ForceBackupDomainReset>:
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800383e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <LL_RCC_ReleaseBackupDomainReset>:
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003872:	bf00      	nop
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
	...

0800387c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003888:	2300      	movs	r3, #0
 800388a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800388c:	2300      	movs	r3, #0
 800388e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d058      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800389c:	f7fe fdc2 	bl	8002424 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a0:	f7fe fa64 	bl	8001d6c <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80038a6:	e009      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a8:	f7fe fa60 	bl	8001d6c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	74fb      	strb	r3, [r7, #19]
        break;
 80038ba:	e006      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80038bc:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c8:	d1ee      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80038ca:	7cfb      	ldrb	r3, [r7, #19]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d13c      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80038d0:	f7ff ffa7 	bl	8003822 <LL_RCC_GetRTCClockSource>
 80038d4:	4602      	mov	r2, r0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038da:	429a      	cmp	r2, r3
 80038dc:	d00f      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ec:	f7ff ffa5 	bl	800383a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f0:	f7ff ffb3 	bl	800385a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d014      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003908:	f7fe fa30 	bl	8001d6c <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800390e:	e00b      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003910:	f7fe fa2c 	bl	8001d6c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f241 3288 	movw	r2, #5000	; 0x1388
 800391e:	4293      	cmp	r3, r2
 8003920:	d902      	bls.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	74fb      	strb	r3, [r7, #19]
            break;
 8003926:	e004      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003928:	f7ff feb4 	bl	8003694 <LL_RCC_LSE_IsReady>
 800392c:	4603      	mov	r3, r0
 800392e:	2b01      	cmp	r3, #1
 8003930:	d1ee      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003932:	7cfb      	ldrb	r3, [r7, #19]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5b 	bl	80037f8 <LL_RCC_SetRTCClockSource>
 8003942:	e004      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003944:	7cfb      	ldrb	r3, [r7, #19]
 8003946:	74bb      	strb	r3, [r7, #18]
 8003948:	e001      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fea9 	bl	80036b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff fe9e 	bl	80036b6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d004      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fec0 	bl	8003710 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003998:	2b00      	cmp	r3, #0
 800399a:	d004      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff fee6 	bl	8003772 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d004      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fedb 	bl	8003772 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d004      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fed0 	bl	8003772 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fea9 	bl	800373a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fe9e 	bl	800373a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fe93 	bl	800373a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fe5e 	bl	80036e6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a32:	d107      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fea5 	bl	80037a4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d107      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fea3 	bl	80037ce <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003aa2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	58000400 	.word	0x58000400

08003ab0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d071      	beq.n	8003ba6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd ff9a 	bl	8001a10 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d051      	beq.n	8003b94 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003af0:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003af2:	22ca      	movs	r2, #202	; 0xca
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24
 8003af6:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003af8:	2253      	movs	r2, #83	; 0x53
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fbe3 	bl	80042c8 <RTC_EnterInitMode>
 8003b02:	4603      	mov	r3, r0
 8003b04:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d13f      	bne.n	8003b8c <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b12:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	4319      	orrs	r1, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	491f      	ldr	r1, [pc, #124]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	041b      	lsls	r3, r3, #16
 8003b40:	491b      	ldr	r1, [pc, #108]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003b46:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	430b      	orrs	r3, r1
 8003b58:	4915      	ldr	r1, [pc, #84]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fbe6 	bl	8004330 <RTC_ExitInitMode>
 8003b64:	4603      	mov	r3, r0
 8003b66:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10e      	bne.n	8003b8c <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a19      	ldr	r1, [r3, #32]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	4319      	orrs	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	490a      	ldr	r1, [pc, #40]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b8c:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_RTC_Init+0x100>)
 8003b8e:	22ff      	movs	r2, #255	; 0xff
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24
 8003b92:	e001      	b.n	8003b98 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40002800 	.word	0x40002800

08003bb4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_RTC_SetTime+0x1a>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e088      	b.n	8003ce0 <HAL_RTC_SetTime+0x12c>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bde:	4b42      	ldr	r3, [pc, #264]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003be0:	22ca      	movs	r2, #202	; 0xca
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24
 8003be4:	4b40      	ldr	r3, [pc, #256]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003be6:	2253      	movs	r2, #83	; 0x53
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fb6c 	bl	80042c8 <RTC_EnterInitMode>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003bf4:	7cfb      	ldrb	r3, [r7, #19]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d15e      	bne.n	8003cb8 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003bfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c06:	d057      	beq.n	8003cb8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d125      	bne.n	8003c5a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d102      	bne.n	8003c20 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fbc1 	bl	80043ac <RTC_ByteToBcd2>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	785b      	ldrb	r3, [r3, #1]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fbba 	bl	80043ac <RTC_ByteToBcd2>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c3c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	789b      	ldrb	r3, [r3, #2]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fbb2 	bl	80043ac <RTC_ByteToBcd2>
 8003c48:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c4a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	78db      	ldrb	r3, [r3, #3]
 8003c52:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e017      	b.n	8003c8a <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003c5a:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c78:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c7e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	78db      	ldrb	r3, [r3, #3]
 8003c84:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c96:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	68d9      	ldr	r1, [r3, #12]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	430b      	orrs	r3, r1
 8003cb2:	490d      	ldr	r1, [pc, #52]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 fb39 	bl	8004330 <RTC_ExitInitMode>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cc2:	4b09      	ldr	r3, [pc, #36]	; (8003ce8 <HAL_RTC_SetTime+0x134>)
 8003cc4:	22ff      	movs	r2, #255	; 0xff
 8003cc6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd90      	pop	{r4, r7, pc}
 8003ce8:	40002800 	.word	0x40002800

08003cec <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003cf8:	4b2c      	ldr	r3, [pc, #176]	; (8003dac <HAL_RTC_GetTime+0xc0>)
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003d00:	4b2a      	ldr	r3, [pc, #168]	; (8003dac <HAL_RTC_GetTime+0xc0>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0c:	d049      	beq.n	8003da2 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003d0e:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RTC_GetTime+0xc0>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <HAL_RTC_GetTime+0xc0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d22:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d26:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	0c1b      	lsrs	r3, r3, #16
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	0d9b      	lsrs	r3, r3, #22
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d11a      	bne.n	8003da2 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fb3a 	bl	80043ea <RTC_Bcd2ToByte>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fb31 	bl	80043ea <RTC_Bcd2ToByte>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	789b      	ldrb	r3, [r3, #2]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fb28 	bl	80043ea <RTC_Bcd2ToByte>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40002800 	.word	0x40002800

08003db0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d101      	bne.n	8003dca <HAL_RTC_SetDate+0x1a>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e071      	b.n	8003eae <HAL_RTC_SetDate+0xfe>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10e      	bne.n	8003dfe <HAL_RTC_SetDate+0x4e>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	f023 0310 	bic.w	r3, r3, #16
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	330a      	adds	r3, #10
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11c      	bne.n	8003e3e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	78db      	ldrb	r3, [r3, #3]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 facf 	bl	80043ac <RTC_ByteToBcd2>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	785b      	ldrb	r3, [r3, #1]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fac8 	bl	80043ac <RTC_ByteToBcd2>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e20:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	789b      	ldrb	r3, [r3, #2]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fac0 	bl	80043ac <RTC_ByteToBcd2>
 8003e2c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e2e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e00e      	b.n	8003e5c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	78db      	ldrb	r3, [r3, #3]
 8003e42:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	785b      	ldrb	r3, [r3, #1]
 8003e48:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e4a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e50:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <HAL_RTC_SetDate+0x108>)
 8003e5e:	22ca      	movs	r2, #202	; 0xca
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_RTC_SetDate+0x108>)
 8003e64:	2253      	movs	r2, #83	; 0x53
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fa2d 	bl	80042c8 <RTC_EnterInitMode>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003e78:	4a0f      	ldr	r2, [pc, #60]	; (8003eb8 <HAL_RTC_SetDate+0x108>)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e80:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e84:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fa52 	bl	8004330 <RTC_ExitInitMode>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <HAL_RTC_SetDate+0x108>)
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d103      	bne.n	8003ea4 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd90      	pop	{r4, r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40002800 	.word	0x40002800

08003ebc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003ec8:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_RTC_GetDate+0x98>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ed0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	0c1b      	lsrs	r3, r3, #16
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	0b5b      	lsrs	r3, r3, #13
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d11a      	bne.n	8003f4a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	78db      	ldrb	r3, [r3, #3]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fa66 	bl	80043ea <RTC_Bcd2ToByte>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fa5d 	bl	80043ea <RTC_Bcd2ToByte>
 8003f30:	4603      	mov	r3, r0
 8003f32:	461a      	mov	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	789b      	ldrb	r3, [r3, #2]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fa54 	bl	80043ea <RTC_Bcd2ToByte>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461a      	mov	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40002800 	.word	0x40002800

08003f58 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003f58:	b590      	push	{r4, r7, lr}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_RTC_SetAlarm_IT+0x1e>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e0f3      	b.n	800415e <HAL_RTC_SetAlarm_IT+0x206>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003f86:	4b78      	ldr	r3, [pc, #480]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d06a      	beq.n	800406e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d13a      	bne.n	8004014 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003f9e:	4b72      	ldr	r3, [pc, #456]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f9f5 	bl	80043ac <RTC_ByteToBcd2>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f9ee 	bl	80043ac <RTC_ByteToBcd2>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fd4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	789b      	ldrb	r3, [r3, #2]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f9e6 	bl	80043ac <RTC_ByteToBcd2>
 8003fe0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fe2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	78db      	ldrb	r3, [r3, #3]
 8003fea:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fec:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f9d8 	bl	80043ac <RTC_ByteToBcd2>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004000:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004008:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	e02c      	b.n	800406e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800401c:	d00d      	beq.n	800403a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004026:	d008      	beq.n	800403a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004028:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2200      	movs	r2, #0
 8004038:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004046:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800404c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	78db      	ldrb	r3, [r3, #3]
 8004052:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004054:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800405c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800405e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004064:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800406e:	4b3e      	ldr	r3, [pc, #248]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004070:	22ca      	movs	r2, #202	; 0xca
 8004072:	625a      	str	r2, [r3, #36]	; 0x24
 8004074:	4b3c      	ldr	r3, [pc, #240]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004076:	2253      	movs	r2, #83	; 0x53
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	d12c      	bne.n	80040de <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004084:	4b38      	ldr	r3, [pc, #224]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	4a37      	ldr	r2, [pc, #220]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 800408a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800408e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004092:	2201      	movs	r2, #1
 8004094:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409c:	d107      	bne.n	80040ae <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4930      	ldr	r1, [pc, #192]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	644b      	str	r3, [r1, #68]	; 0x44
 80040ac:	e006      	b.n	80040bc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80040ae:	4a2e      	ldr	r2, [pc, #184]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80040b4:	4a2c      	ldr	r2, [pc, #176]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80040bc:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	f043 0201 	orr.w	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	4a24      	ldr	r2, [pc, #144]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040d6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80040da:	6193      	str	r3, [r2, #24]
 80040dc:	e02b      	b.n	8004136 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80040de:	4b22      	ldr	r3, [pc, #136]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040e4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80040e8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80040ea:	4b1f      	ldr	r3, [pc, #124]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 80040ec:	2202      	movs	r2, #2
 80040ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d107      	bne.n	8004108 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	699a      	ldr	r2, [r3, #24]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	4919      	ldr	r1, [pc, #100]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004102:	4313      	orrs	r3, r2
 8004104:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004106:	e006      	b.n	8004116 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004108:	4a17      	ldr	r2, [pc, #92]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004116:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f043 0202 	orr.w	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800412a:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	4a0e      	ldr	r2, [pc, #56]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004130:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8004134:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004136:	4b0d      	ldr	r3, [pc, #52]	; (800416c <HAL_RTC_SetAlarm_IT+0x214>)
 8004138:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800413c:	4a0b      	ldr	r2, [pc, #44]	; (800416c <HAL_RTC_SetAlarm_IT+0x214>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <HAL_RTC_SetAlarm_IT+0x210>)
 8004148:	22ff      	movs	r2, #255	; 0xff
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	bd90      	pop	{r4, r7, pc}
 8004166:	bf00      	nop
 8004168:	40002800 	.word	0x40002800
 800416c:	58000800 	.word	0x58000800

08004170 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_RTC_DeactivateAlarm+0x18>
 8004184:	2302      	movs	r3, #2
 8004186:	e048      	b.n	800421a <HAL_RTC_DeactivateAlarm+0xaa>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004198:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 800419a:	22ca      	movs	r2, #202	; 0xca
 800419c:	625a      	str	r2, [r3, #36]	; 0x24
 800419e:	4b21      	ldr	r3, [pc, #132]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041a0:	2253      	movs	r2, #83	; 0x53
 80041a2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041aa:	d115      	bne.n	80041d8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041b6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80041b8:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041bc:	4a19      	ldr	r2, [pc, #100]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041c2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	f023 0201 	bic.w	r2, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041d0:	4b14      	ldr	r3, [pc, #80]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80041d6:	e014      	b.n	8004202 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	4a11      	ldr	r2, [pc, #68]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041de:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80041e2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80041e4:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e8:	4a0e      	ldr	r2, [pc, #56]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ee:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	f023 0202 	bic.w	r2, r3, #2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 80041fe:	2202      	movs	r2, #2
 8004200:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <HAL_RTC_DeactivateAlarm+0xb4>)
 8004204:	22ff      	movs	r2, #255	; 0xff
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	40002800 	.word	0x40002800

08004228 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004232:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004248:	2201      	movs	r2, #1
 800424a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7fc ff84 	bl	800115a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_RTC_AlarmIRQHandler+0x50>)
 800425e:	2202      	movs	r2, #2
 8004260:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f8dc 	bl	8004420 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004270:	bf00      	nop
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40002800 	.word	0x40002800

0800427c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <HAL_RTC_WaitForSynchro+0x48>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <HAL_RTC_WaitForSynchro+0x48>)
 800428a:	f023 0320 	bic.w	r3, r3, #32
 800428e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004290:	f7fd fd6c 	bl	8001d6c <HAL_GetTick>
 8004294:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004296:	e009      	b.n	80042ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004298:	f7fd fd68 	bl	8001d6c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042a6:	d901      	bls.n	80042ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e006      	b.n	80042ba <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RTC_WaitForSynchro+0x48>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ef      	beq.n	8004298 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40002800 	.word	0x40002800

080042c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <RTC_EnterInitMode+0x64>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d120      	bne.n	8004322 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <RTC_EnterInitMode+0x64>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4a11      	ldr	r2, [pc, #68]	; (800432c <RTC_EnterInitMode+0x64>)
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80042ec:	f7fd fd3e 	bl	8001d6c <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80042f2:	e00d      	b.n	8004310 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80042f4:	f7fd fd3a 	bl	8001d6c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004302:	d905      	bls.n	8004310 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2203      	movs	r2, #3
 800430c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <RTC_EnterInitMode+0x64>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <RTC_EnterInitMode+0x5a>
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d1e8      	bne.n	80042f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40002800 	.word	0x40002800

08004330 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800433c:	4b1a      	ldr	r3, [pc, #104]	; (80043a8 <RTC_ExitInitMode+0x78>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <RTC_ExitInitMode+0x78>)
 8004342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004346:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004348:	4b17      	ldr	r3, [pc, #92]	; (80043a8 <RTC_ExitInitMode+0x78>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10c      	bne.n	800436e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff91 	bl	800427c <HAL_RTC_WaitForSynchro>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01e      	beq.n	800439e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2203      	movs	r2, #3
 8004364:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	e017      	b.n	800439e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <RTC_ExitInitMode+0x78>)
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	4a0d      	ldr	r2, [pc, #52]	; (80043a8 <RTC_ExitInitMode+0x78>)
 8004374:	f023 0320 	bic.w	r3, r3, #32
 8004378:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ff7e 	bl	800427c <HAL_RTC_WaitForSynchro>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2203      	movs	r2, #3
 800438a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004392:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <RTC_ExitInitMode+0x78>)
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <RTC_ExitInitMode+0x78>)
 8004398:	f043 0320 	orr.w	r3, r3, #32
 800439c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40002800 	.word	0x40002800

080043ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80043be:	e005      	b.n	80043cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80043c6:	7afb      	ldrb	r3, [r7, #11]
 80043c8:	3b0a      	subs	r3, #10
 80043ca:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80043cc:	7afb      	ldrb	r3, [r7, #11]
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d8f6      	bhi.n	80043c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	7afb      	ldrb	r3, [r7, #11]
 80043dc:	4313      	orrs	r3, r2
 80043de:	b2db      	uxtb	r3, r3
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4603      	mov	r3, r0
 80043f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	091b      	lsrs	r3, r3, #4
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	b2db      	uxtb	r3, r3
 8004412:	4413      	add	r3, r2
 8004414:	b2db      	uxtb	r3, r3
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	bc80      	pop	{r7}
 8004430:	4770      	bx	lr

08004432 <LL_RCC_GetUSARTClockSource>:
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800443a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	401a      	ands	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	4313      	orrs	r3, r2
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <LL_RCC_GetLPUARTClockSource>:
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800445e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004462:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4013      	ands	r3, r2
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e042      	b.n	800450c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	2b00      	cmp	r3, #0
 800448e:	d106      	bne.n	800449e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7fd fae5 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2224      	movs	r2, #36	; 0x24
 80044a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f976 	bl	80047a8 <UART_SetConfig>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e022      	b.n	800450c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fbde 	bl	8004c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fc64 	bl	8004dd2 <UART_CheckIdleState>
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452a:	2b20      	cmp	r3, #32
 800452c:	d173      	bne.n	8004616 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_UART_Transmit+0x26>
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e06c      	b.n	8004618 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2221      	movs	r2, #33	; 0x21
 800454a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454e:	f7fd fc0d 	bl	8001d6c <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	88fa      	ldrh	r2, [r7, #6]
 8004558:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d108      	bne.n	8004580 <HAL_UART_Transmit+0x6c>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e003      	b.n	8004588 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004588:	e02c      	b.n	80045e4 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	2180      	movs	r1, #128	; 0x80
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fc6a 	bl	8004e6e <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e039      	b.n	8004618 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	3302      	adds	r3, #2
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e007      	b.n	80045d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045d8:	b29b      	uxth	r3, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1cc      	bne.n	800458a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2200      	movs	r2, #0
 80045f8:	2140      	movs	r1, #64	; 0x40
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fc37 	bl	8004e6e <UART_WaitOnFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e006      	b.n	8004618 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004636:	2b20      	cmp	r3, #32
 8004638:	f040 80b1 	bne.w	800479e <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_UART_Receive+0x28>
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0a9      	b.n	80047a0 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2222      	movs	r2, #34	; 0x22
 8004658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fd fb83 	bl	8001d6c <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004680:	d10e      	bne.n	80046a0 <HAL_UART_Receive+0x80>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_UART_Receive+0x76>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004694:	e02d      	b.n	80046f2 <HAL_UART_Receive+0xd2>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	22ff      	movs	r2, #255	; 0xff
 800469a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800469e:	e028      	b.n	80046f2 <HAL_UART_Receive+0xd2>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10d      	bne.n	80046c4 <HAL_UART_Receive+0xa4>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d104      	bne.n	80046ba <HAL_UART_Receive+0x9a>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	22ff      	movs	r2, #255	; 0xff
 80046b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046b8:	e01b      	b.n	80046f2 <HAL_UART_Receive+0xd2>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	227f      	movs	r2, #127	; 0x7f
 80046be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046c2:	e016      	b.n	80046f2 <HAL_UART_Receive+0xd2>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046cc:	d10d      	bne.n	80046ea <HAL_UART_Receive+0xca>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <HAL_UART_Receive+0xc0>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	227f      	movs	r2, #127	; 0x7f
 80046da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046de:	e008      	b.n	80046f2 <HAL_UART_Receive+0xd2>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	223f      	movs	r2, #63	; 0x3f
 80046e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046e8:	e003      	b.n	80046f2 <HAL_UART_Receive+0xd2>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80046f8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d108      	bne.n	8004716 <HAL_UART_Receive+0xf6>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	e003      	b.n	800471e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800471e:	e032      	b.n	8004786 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	2200      	movs	r2, #0
 8004728:	2120      	movs	r1, #32
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fb9f 	bl	8004e6e <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e032      	b.n	80047a0 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10c      	bne.n	800475a <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	b29a      	uxth	r2, r3
 8004748:	8a7b      	ldrh	r3, [r7, #18]
 800474a:	4013      	ands	r3, r2
 800474c:	b29a      	uxth	r2, r3
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	3302      	adds	r3, #2
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e00c      	b.n	8004774 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	b2da      	uxtb	r2, r3
 8004762:	8a7b      	ldrh	r3, [r7, #18]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	4013      	ands	r3, r2
 8004768:	b2da      	uxtb	r2, r3
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3301      	adds	r3, #1
 8004772:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1c6      	bne.n	8004720 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800479e:	2302      	movs	r3, #2
  }
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b08c      	sub	sp, #48	; 0x30
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b94      	ldr	r3, [pc, #592]	; (8004a28 <UART_SetConfig+0x280>)
 80047d8:	4013      	ands	r3, r2
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a89      	ldr	r2, [pc, #548]	; (8004a2c <UART_SetConfig+0x284>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004810:	4313      	orrs	r3, r2
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800481e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004828:	430b      	orrs	r3, r1
 800482a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	f023 010f 	bic.w	r1, r3, #15
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a7a      	ldr	r2, [pc, #488]	; (8004a30 <UART_SetConfig+0x288>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d127      	bne.n	800489c <UART_SetConfig+0xf4>
 800484c:	2003      	movs	r0, #3
 800484e:	f7ff fdf0 	bl	8004432 <LL_RCC_GetUSARTClockSource>
 8004852:	4603      	mov	r3, r0
 8004854:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004858:	2b03      	cmp	r3, #3
 800485a:	d81b      	bhi.n	8004894 <UART_SetConfig+0xec>
 800485c:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0xbc>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004875 	.word	0x08004875
 8004868:	08004885 	.word	0x08004885
 800486c:	0800487d 	.word	0x0800487d
 8004870:	0800488d 	.word	0x0800488d
 8004874:	2301      	movs	r3, #1
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e080      	b.n	800497e <UART_SetConfig+0x1d6>
 800487c:	2302      	movs	r3, #2
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004882:	e07c      	b.n	800497e <UART_SetConfig+0x1d6>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488a:	e078      	b.n	800497e <UART_SetConfig+0x1d6>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004892:	e074      	b.n	800497e <UART_SetConfig+0x1d6>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489a:	e070      	b.n	800497e <UART_SetConfig+0x1d6>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a64      	ldr	r2, [pc, #400]	; (8004a34 <UART_SetConfig+0x28c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d138      	bne.n	8004918 <UART_SetConfig+0x170>
 80048a6:	200c      	movs	r0, #12
 80048a8:	f7ff fdc3 	bl	8004432 <LL_RCC_GetUSARTClockSource>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d82c      	bhi.n	8004910 <UART_SetConfig+0x168>
 80048b6:	a201      	add	r2, pc, #4	; (adr r2, 80048bc <UART_SetConfig+0x114>)
 80048b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	08004911 	.word	0x08004911
 80048c4:	08004911 	.word	0x08004911
 80048c8:	08004911 	.word	0x08004911
 80048cc:	08004901 	.word	0x08004901
 80048d0:	08004911 	.word	0x08004911
 80048d4:	08004911 	.word	0x08004911
 80048d8:	08004911 	.word	0x08004911
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	08004911 	.word	0x08004911
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004909 	.word	0x08004909
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f6:	e042      	b.n	800497e <UART_SetConfig+0x1d6>
 80048f8:	2302      	movs	r3, #2
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fe:	e03e      	b.n	800497e <UART_SetConfig+0x1d6>
 8004900:	2304      	movs	r3, #4
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004906:	e03a      	b.n	800497e <UART_SetConfig+0x1d6>
 8004908:	2308      	movs	r3, #8
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490e:	e036      	b.n	800497e <UART_SetConfig+0x1d6>
 8004910:	2310      	movs	r3, #16
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004916:	e032      	b.n	800497e <UART_SetConfig+0x1d6>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a43      	ldr	r2, [pc, #268]	; (8004a2c <UART_SetConfig+0x284>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d12a      	bne.n	8004978 <UART_SetConfig+0x1d0>
 8004922:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004926:	f7ff fd96 	bl	8004456 <LL_RCC_GetLPUARTClockSource>
 800492a:	4603      	mov	r3, r0
 800492c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004930:	d01a      	beq.n	8004968 <UART_SetConfig+0x1c0>
 8004932:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004936:	d81b      	bhi.n	8004970 <UART_SetConfig+0x1c8>
 8004938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493c:	d00c      	beq.n	8004958 <UART_SetConfig+0x1b0>
 800493e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004942:	d815      	bhi.n	8004970 <UART_SetConfig+0x1c8>
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <UART_SetConfig+0x1a8>
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494c:	d008      	beq.n	8004960 <UART_SetConfig+0x1b8>
 800494e:	e00f      	b.n	8004970 <UART_SetConfig+0x1c8>
 8004950:	2300      	movs	r3, #0
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004956:	e012      	b.n	800497e <UART_SetConfig+0x1d6>
 8004958:	2302      	movs	r3, #2
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495e:	e00e      	b.n	800497e <UART_SetConfig+0x1d6>
 8004960:	2304      	movs	r3, #4
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004966:	e00a      	b.n	800497e <UART_SetConfig+0x1d6>
 8004968:	2308      	movs	r3, #8
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496e:	e006      	b.n	800497e <UART_SetConfig+0x1d6>
 8004970:	2310      	movs	r3, #16
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004976:	e002      	b.n	800497e <UART_SetConfig+0x1d6>
 8004978:	2310      	movs	r3, #16
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a2a      	ldr	r2, [pc, #168]	; (8004a2c <UART_SetConfig+0x284>)
 8004984:	4293      	cmp	r3, r2
 8004986:	f040 80a4 	bne.w	8004ad2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800498a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800498e:	2b08      	cmp	r3, #8
 8004990:	d823      	bhi.n	80049da <UART_SetConfig+0x232>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x1f0>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049db 	.word	0x080049db
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049db 	.word	0x080049db
 80049a8:	080049cb 	.word	0x080049cb
 80049ac:	080049db 	.word	0x080049db
 80049b0:	080049db 	.word	0x080049db
 80049b4:	080049db 	.word	0x080049db
 80049b8:	080049d3 	.word	0x080049d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7fe fd94 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 80049c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049c2:	e010      	b.n	80049e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c4:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <UART_SetConfig+0x290>)
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049c8:	e00d      	b.n	80049e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ca:	f7fe fcd9 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 80049ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049d0:	e009      	b.n	80049e6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049d8:	e005      	b.n	80049e6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8137 	beq.w	8004c5c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	4a12      	ldr	r2, [pc, #72]	; (8004a3c <UART_SetConfig+0x294>)
 80049f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049f8:	461a      	mov	r2, r3
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d305      	bcc.n	8004a1e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d910      	bls.n	8004a40 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a24:	e11a      	b.n	8004c5c <UART_SetConfig+0x4b4>
 8004a26:	bf00      	nop
 8004a28:	cfff69f3 	.word	0xcfff69f3
 8004a2c:	40008000 	.word	0x40008000
 8004a30:	40013800 	.word	0x40013800
 8004a34:	40004400 	.word	0x40004400
 8004a38:	00f42400 	.word	0x00f42400
 8004a3c:	08005cc8 	.word	0x08005cc8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	2200      	movs	r2, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	60fa      	str	r2, [r7, #12]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	4a8e      	ldr	r2, [pc, #568]	; (8004c88 <UART_SetConfig+0x4e0>)
 8004a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2200      	movs	r2, #0
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a62:	f7fb fbdd 	bl	8000220 <__aeabi_uldivmod>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	020b      	lsls	r3, r1, #8
 8004a78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a7c:	0202      	lsls	r2, r0, #8
 8004a7e:	6979      	ldr	r1, [r7, #20]
 8004a80:	6849      	ldr	r1, [r1, #4]
 8004a82:	0849      	lsrs	r1, r1, #1
 8004a84:	2000      	movs	r0, #0
 8004a86:	460c      	mov	r4, r1
 8004a88:	4605      	mov	r5, r0
 8004a8a:	eb12 0804 	adds.w	r8, r2, r4
 8004a8e:	eb43 0905 	adc.w	r9, r3, r5
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	469a      	mov	sl, r3
 8004a9a:	4693      	mov	fp, r2
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	465b      	mov	r3, fp
 8004aa0:	4640      	mov	r0, r8
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	f7fb fbbc 	bl	8000220 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4613      	mov	r3, r2
 8004aae:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ab6:	d308      	bcc.n	8004aca <UART_SetConfig+0x322>
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abe:	d204      	bcs.n	8004aca <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	60da      	str	r2, [r3, #12]
 8004ac8:	e0c8      	b.n	8004c5c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ad0:	e0c4      	b.n	8004c5c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ada:	d167      	bne.n	8004bac <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004adc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d828      	bhi.n	8004b36 <UART_SetConfig+0x38e>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <UART_SetConfig+0x344>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b11 	.word	0x08004b11
 8004af0:	08004b19 	.word	0x08004b19
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	08004b37 	.word	0x08004b37
 8004afc:	08004b27 	.word	0x08004b27
 8004b00:	08004b37 	.word	0x08004b37
 8004b04:	08004b37 	.word	0x08004b37
 8004b08:	08004b37 	.word	0x08004b37
 8004b0c:	08004b2f 	.word	0x08004b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b10:	f7fe fcea 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8004b14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b16:	e014      	b.n	8004b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b18:	f7fe fcf8 	bl	800350c <HAL_RCC_GetPCLK2Freq>
 8004b1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b1e:	e010      	b.n	8004b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b20:	4b5a      	ldr	r3, [pc, #360]	; (8004c8c <UART_SetConfig+0x4e4>)
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b24:	e00d      	b.n	8004b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b26:	f7fe fc2b 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8004b2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b2c:	e009      	b.n	8004b42 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b34:	e005      	b.n	8004b42 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8089 	beq.w	8004c5c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	4a4e      	ldr	r2, [pc, #312]	; (8004c88 <UART_SetConfig+0x4e0>)
 8004b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b54:	461a      	mov	r2, r3
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b5c:	005a      	lsls	r2, r3, #1
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	441a      	add	r2, r3
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	2b0f      	cmp	r3, #15
 8004b74:	d916      	bls.n	8004ba4 <UART_SetConfig+0x3fc>
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7c:	d212      	bcs.n	8004ba4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f023 030f 	bic.w	r3, r3, #15
 8004b86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	8bfb      	ldrh	r3, [r7, #30]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	8bfa      	ldrh	r2, [r7, #30]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e05b      	b.n	8004c5c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004baa:	e057      	b.n	8004c5c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d828      	bhi.n	8004c06 <UART_SetConfig+0x45e>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x414>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	08004c07 	.word	0x08004c07
 8004bcc:	08004bf7 	.word	0x08004bf7
 8004bd0:	08004c07 	.word	0x08004c07
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c07 	.word	0x08004c07
 8004bdc:	08004bff 	.word	0x08004bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7fe fc82 	bl	80034e8 <HAL_RCC_GetPCLK1Freq>
 8004be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004be6:	e014      	b.n	8004c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fe fc90 	bl	800350c <HAL_RCC_GetPCLK2Freq>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bee:	e010      	b.n	8004c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf0:	4b26      	ldr	r3, [pc, #152]	; (8004c8c <UART_SetConfig+0x4e4>)
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bf4:	e00d      	b.n	8004c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf6:	f7fe fbc3 	bl	8003380 <HAL_RCC_GetSysClockFreq>
 8004bfa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bfc:	e009      	b.n	8004c12 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c04:	e005      	b.n	8004c12 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c10:	bf00      	nop
    }

    if (pclk != 0U)
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d021      	beq.n	8004c5c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	4a1a      	ldr	r2, [pc, #104]	; (8004c88 <UART_SetConfig+0x4e0>)
 8004c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c22:	461a      	mov	r2, r3
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	085b      	lsrs	r3, r3, #1
 8004c30:	441a      	add	r2, r3
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d909      	bls.n	8004c56 <UART_SetConfig+0x4ae>
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c48:	d205      	bcs.n	8004c56 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	e002      	b.n	8004c5c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3730      	adds	r7, #48	; 0x30
 8004c80:	46bd      	mov	sp, r7
 8004c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c86:	bf00      	nop
 8004c88:	08005cc8 	.word	0x08005cc8
 8004c8c:	00f42400 	.word	0x00f42400

08004c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d8e:	d10a      	bne.n	8004da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bc80      	pop	{r7}
 8004dd0:	4770      	bx	lr

08004dd2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af02      	add	r7, sp, #8
 8004dd8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de2:	f7fc ffc3 	bl	8001d6c <HAL_GetTick>
 8004de6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	d10e      	bne.n	8004e14 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f832 	bl	8004e6e <UART_WaitOnFlagUntilTimeout>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e028      	b.n	8004e66 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d10e      	bne.n	8004e40 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f81c 	bl	8004e6e <UART_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e012      	b.n	8004e66 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b09c      	sub	sp, #112	; 0x70
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	603b      	str	r3, [r7, #0]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e7e:	e0a9      	b.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e86:	f000 80a5 	beq.w	8004fd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fc ff6f 	bl	8001d6c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d140      	bne.n	8004f22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eb4:	667b      	str	r3, [r7, #100]	; 0x64
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ec4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e6      	bne.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3308      	adds	r3, #8
 8004ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ef2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ef4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e069      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d051      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3e:	d149      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f52:	e853 3f00 	ldrex	r3, [r3]
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	461a      	mov	r2, r3
 8004f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f70:	e841 2300 	strex	r3, r2, [r1]
 8004f74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e6      	bne.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3308      	adds	r3, #8
 8004f9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f9c:	623a      	str	r2, [r7, #32]
 8004f9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	69f9      	ldr	r1, [r7, #28]
 8004fa2:	6a3a      	ldr	r2, [r7, #32]
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e010      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f43f af46 	beq.w	8004e80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3770      	adds	r7, #112	; 0x70
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_UARTEx_DisableFifoMode+0x16>
 8005010:	2302      	movs	r3, #2
 8005012:	e027      	b.n	8005064 <HAL_UARTEx_DisableFifoMode+0x66>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	; 0x24
 8005020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0201 	bic.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005042:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr

0800506e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005082:	2302      	movs	r3, #2
 8005084:	e02d      	b.n	80050e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2224      	movs	r2, #36	; 0x24
 8005092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f850 	bl	8005168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050fe:	2302      	movs	r3, #2
 8005100:	e02d      	b.n	800515e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2224      	movs	r2, #36	; 0x24
 800510e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f812 	bl	8005168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005174:	2b00      	cmp	r3, #0
 8005176:	d108      	bne.n	800518a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005188:	e031      	b.n	80051ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800518a:	2308      	movs	r3, #8
 800518c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800518e:	2308      	movs	r3, #8
 8005190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	0e5b      	lsrs	r3, r3, #25
 800519a:	b2db      	uxtb	r3, r3
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	0f5b      	lsrs	r3, r3, #29
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	7b3a      	ldrb	r2, [r7, #12]
 80051b6:	4910      	ldr	r1, [pc, #64]	; (80051f8 <UARTEx_SetNbDataToProcess+0x90>)
 80051b8:	5c8a      	ldrb	r2, [r1, r2]
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051be:	7b3a      	ldrb	r2, [r7, #12]
 80051c0:	490e      	ldr	r1, [pc, #56]	; (80051fc <UARTEx_SetNbDataToProcess+0x94>)
 80051c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
 80051d2:	7b7a      	ldrb	r2, [r7, #13]
 80051d4:	4908      	ldr	r1, [pc, #32]	; (80051f8 <UARTEx_SetNbDataToProcess+0x90>)
 80051d6:	5c8a      	ldrb	r2, [r1, r2]
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051dc:	7b7a      	ldrb	r2, [r7, #13]
 80051de:	4907      	ldr	r1, [pc, #28]	; (80051fc <UARTEx_SetNbDataToProcess+0x94>)
 80051e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr
 80051f8:	08005ce0 	.word	0x08005ce0
 80051fc:	08005ce8 	.word	0x08005ce8

08005200 <__errno>:
 8005200:	4b01      	ldr	r3, [pc, #4]	; (8005208 <__errno+0x8>)
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000010 	.word	0x20000010

0800520c <__libc_init_array>:
 800520c:	b570      	push	{r4, r5, r6, lr}
 800520e:	4d0d      	ldr	r5, [pc, #52]	; (8005244 <__libc_init_array+0x38>)
 8005210:	4c0d      	ldr	r4, [pc, #52]	; (8005248 <__libc_init_array+0x3c>)
 8005212:	1b64      	subs	r4, r4, r5
 8005214:	10a4      	asrs	r4, r4, #2
 8005216:	2600      	movs	r6, #0
 8005218:	42a6      	cmp	r6, r4
 800521a:	d109      	bne.n	8005230 <__libc_init_array+0x24>
 800521c:	4d0b      	ldr	r5, [pc, #44]	; (800524c <__libc_init_array+0x40>)
 800521e:	4c0c      	ldr	r4, [pc, #48]	; (8005250 <__libc_init_array+0x44>)
 8005220:	f000 fcb4 	bl	8005b8c <_init>
 8005224:	1b64      	subs	r4, r4, r5
 8005226:	10a4      	asrs	r4, r4, #2
 8005228:	2600      	movs	r6, #0
 800522a:	42a6      	cmp	r6, r4
 800522c:	d105      	bne.n	800523a <__libc_init_array+0x2e>
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	f855 3b04 	ldr.w	r3, [r5], #4
 8005234:	4798      	blx	r3
 8005236:	3601      	adds	r6, #1
 8005238:	e7ee      	b.n	8005218 <__libc_init_array+0xc>
 800523a:	f855 3b04 	ldr.w	r3, [r5], #4
 800523e:	4798      	blx	r3
 8005240:	3601      	adds	r6, #1
 8005242:	e7f2      	b.n	800522a <__libc_init_array+0x1e>
 8005244:	08005d2c 	.word	0x08005d2c
 8005248:	08005d2c 	.word	0x08005d2c
 800524c:	08005d2c 	.word	0x08005d2c
 8005250:	08005d30 	.word	0x08005d30

08005254 <memcpy>:
 8005254:	440a      	add	r2, r1
 8005256:	4291      	cmp	r1, r2
 8005258:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800525c:	d100      	bne.n	8005260 <memcpy+0xc>
 800525e:	4770      	bx	lr
 8005260:	b510      	push	{r4, lr}
 8005262:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005266:	f803 4f01 	strb.w	r4, [r3, #1]!
 800526a:	4291      	cmp	r1, r2
 800526c:	d1f9      	bne.n	8005262 <memcpy+0xe>
 800526e:	bd10      	pop	{r4, pc}

08005270 <memset>:
 8005270:	4402      	add	r2, r0
 8005272:	4603      	mov	r3, r0
 8005274:	4293      	cmp	r3, r2
 8005276:	d100      	bne.n	800527a <memset+0xa>
 8005278:	4770      	bx	lr
 800527a:	f803 1b01 	strb.w	r1, [r3], #1
 800527e:	e7f9      	b.n	8005274 <memset+0x4>

08005280 <sniprintf>:
 8005280:	b40c      	push	{r2, r3}
 8005282:	b530      	push	{r4, r5, lr}
 8005284:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <sniprintf+0x64>)
 8005286:	1e0c      	subs	r4, r1, #0
 8005288:	681d      	ldr	r5, [r3, #0]
 800528a:	b09d      	sub	sp, #116	; 0x74
 800528c:	da08      	bge.n	80052a0 <sniprintf+0x20>
 800528e:	238b      	movs	r3, #139	; 0x8b
 8005290:	602b      	str	r3, [r5, #0]
 8005292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005296:	b01d      	add	sp, #116	; 0x74
 8005298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800529c:	b002      	add	sp, #8
 800529e:	4770      	bx	lr
 80052a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80052a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052a8:	bf14      	ite	ne
 80052aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80052ae:	4623      	moveq	r3, r4
 80052b0:	9304      	str	r3, [sp, #16]
 80052b2:	9307      	str	r3, [sp, #28]
 80052b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052b8:	9002      	str	r0, [sp, #8]
 80052ba:	9006      	str	r0, [sp, #24]
 80052bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052c2:	ab21      	add	r3, sp, #132	; 0x84
 80052c4:	a902      	add	r1, sp, #8
 80052c6:	4628      	mov	r0, r5
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	f000 f87d 	bl	80053c8 <_svfiprintf_r>
 80052ce:	1c43      	adds	r3, r0, #1
 80052d0:	bfbc      	itt	lt
 80052d2:	238b      	movlt	r3, #139	; 0x8b
 80052d4:	602b      	strlt	r3, [r5, #0]
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d0dd      	beq.n	8005296 <sniprintf+0x16>
 80052da:	9b02      	ldr	r3, [sp, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	e7d9      	b.n	8005296 <sniprintf+0x16>
 80052e2:	bf00      	nop
 80052e4:	20000010 	.word	0x20000010

080052e8 <strncmp>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	4603      	mov	r3, r0
 80052ec:	b172      	cbz	r2, 800530c <strncmp+0x24>
 80052ee:	3901      	subs	r1, #1
 80052f0:	1884      	adds	r4, r0, r2
 80052f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80052f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80052fa:	4290      	cmp	r0, r2
 80052fc:	d101      	bne.n	8005302 <strncmp+0x1a>
 80052fe:	42a3      	cmp	r3, r4
 8005300:	d101      	bne.n	8005306 <strncmp+0x1e>
 8005302:	1a80      	subs	r0, r0, r2
 8005304:	bd10      	pop	{r4, pc}
 8005306:	2800      	cmp	r0, #0
 8005308:	d1f3      	bne.n	80052f2 <strncmp+0xa>
 800530a:	e7fa      	b.n	8005302 <strncmp+0x1a>
 800530c:	4610      	mov	r0, r2
 800530e:	e7f9      	b.n	8005304 <strncmp+0x1c>

08005310 <__ssputs_r>:
 8005310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005314:	688e      	ldr	r6, [r1, #8]
 8005316:	429e      	cmp	r6, r3
 8005318:	4682      	mov	sl, r0
 800531a:	460c      	mov	r4, r1
 800531c:	4690      	mov	r8, r2
 800531e:	461f      	mov	r7, r3
 8005320:	d838      	bhi.n	8005394 <__ssputs_r+0x84>
 8005322:	898a      	ldrh	r2, [r1, #12]
 8005324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005328:	d032      	beq.n	8005390 <__ssputs_r+0x80>
 800532a:	6825      	ldr	r5, [r4, #0]
 800532c:	6909      	ldr	r1, [r1, #16]
 800532e:	eba5 0901 	sub.w	r9, r5, r1
 8005332:	6965      	ldr	r5, [r4, #20]
 8005334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800533c:	3301      	adds	r3, #1
 800533e:	444b      	add	r3, r9
 8005340:	106d      	asrs	r5, r5, #1
 8005342:	429d      	cmp	r5, r3
 8005344:	bf38      	it	cc
 8005346:	461d      	movcc	r5, r3
 8005348:	0553      	lsls	r3, r2, #21
 800534a:	d531      	bpl.n	80053b0 <__ssputs_r+0xa0>
 800534c:	4629      	mov	r1, r5
 800534e:	f000 fb53 	bl	80059f8 <_malloc_r>
 8005352:	4606      	mov	r6, r0
 8005354:	b950      	cbnz	r0, 800536c <__ssputs_r+0x5c>
 8005356:	230c      	movs	r3, #12
 8005358:	f8ca 3000 	str.w	r3, [sl]
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536c:	6921      	ldr	r1, [r4, #16]
 800536e:	464a      	mov	r2, r9
 8005370:	f7ff ff70 	bl	8005254 <memcpy>
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800537a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	6126      	str	r6, [r4, #16]
 8005382:	6165      	str	r5, [r4, #20]
 8005384:	444e      	add	r6, r9
 8005386:	eba5 0509 	sub.w	r5, r5, r9
 800538a:	6026      	str	r6, [r4, #0]
 800538c:	60a5      	str	r5, [r4, #8]
 800538e:	463e      	mov	r6, r7
 8005390:	42be      	cmp	r6, r7
 8005392:	d900      	bls.n	8005396 <__ssputs_r+0x86>
 8005394:	463e      	mov	r6, r7
 8005396:	6820      	ldr	r0, [r4, #0]
 8005398:	4632      	mov	r2, r6
 800539a:	4641      	mov	r1, r8
 800539c:	f000 faa8 	bl	80058f0 <memmove>
 80053a0:	68a3      	ldr	r3, [r4, #8]
 80053a2:	1b9b      	subs	r3, r3, r6
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	4433      	add	r3, r6
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	2000      	movs	r0, #0
 80053ae:	e7db      	b.n	8005368 <__ssputs_r+0x58>
 80053b0:	462a      	mov	r2, r5
 80053b2:	f000 fb95 	bl	8005ae0 <_realloc_r>
 80053b6:	4606      	mov	r6, r0
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d1e1      	bne.n	8005380 <__ssputs_r+0x70>
 80053bc:	6921      	ldr	r1, [r4, #16]
 80053be:	4650      	mov	r0, sl
 80053c0:	f000 fab0 	bl	8005924 <_free_r>
 80053c4:	e7c7      	b.n	8005356 <__ssputs_r+0x46>
	...

080053c8 <_svfiprintf_r>:
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	4698      	mov	r8, r3
 80053ce:	898b      	ldrh	r3, [r1, #12]
 80053d0:	061b      	lsls	r3, r3, #24
 80053d2:	b09d      	sub	sp, #116	; 0x74
 80053d4:	4607      	mov	r7, r0
 80053d6:	460d      	mov	r5, r1
 80053d8:	4614      	mov	r4, r2
 80053da:	d50e      	bpl.n	80053fa <_svfiprintf_r+0x32>
 80053dc:	690b      	ldr	r3, [r1, #16]
 80053de:	b963      	cbnz	r3, 80053fa <_svfiprintf_r+0x32>
 80053e0:	2140      	movs	r1, #64	; 0x40
 80053e2:	f000 fb09 	bl	80059f8 <_malloc_r>
 80053e6:	6028      	str	r0, [r5, #0]
 80053e8:	6128      	str	r0, [r5, #16]
 80053ea:	b920      	cbnz	r0, 80053f6 <_svfiprintf_r+0x2e>
 80053ec:	230c      	movs	r3, #12
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053f4:	e0d1      	b.n	800559a <_svfiprintf_r+0x1d2>
 80053f6:	2340      	movs	r3, #64	; 0x40
 80053f8:	616b      	str	r3, [r5, #20]
 80053fa:	2300      	movs	r3, #0
 80053fc:	9309      	str	r3, [sp, #36]	; 0x24
 80053fe:	2320      	movs	r3, #32
 8005400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005404:	f8cd 800c 	str.w	r8, [sp, #12]
 8005408:	2330      	movs	r3, #48	; 0x30
 800540a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055b4 <_svfiprintf_r+0x1ec>
 800540e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005412:	f04f 0901 	mov.w	r9, #1
 8005416:	4623      	mov	r3, r4
 8005418:	469a      	mov	sl, r3
 800541a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800541e:	b10a      	cbz	r2, 8005424 <_svfiprintf_r+0x5c>
 8005420:	2a25      	cmp	r2, #37	; 0x25
 8005422:	d1f9      	bne.n	8005418 <_svfiprintf_r+0x50>
 8005424:	ebba 0b04 	subs.w	fp, sl, r4
 8005428:	d00b      	beq.n	8005442 <_svfiprintf_r+0x7a>
 800542a:	465b      	mov	r3, fp
 800542c:	4622      	mov	r2, r4
 800542e:	4629      	mov	r1, r5
 8005430:	4638      	mov	r0, r7
 8005432:	f7ff ff6d 	bl	8005310 <__ssputs_r>
 8005436:	3001      	adds	r0, #1
 8005438:	f000 80aa 	beq.w	8005590 <_svfiprintf_r+0x1c8>
 800543c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800543e:	445a      	add	r2, fp
 8005440:	9209      	str	r2, [sp, #36]	; 0x24
 8005442:	f89a 3000 	ldrb.w	r3, [sl]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80a2 	beq.w	8005590 <_svfiprintf_r+0x1c8>
 800544c:	2300      	movs	r3, #0
 800544e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005456:	f10a 0a01 	add.w	sl, sl, #1
 800545a:	9304      	str	r3, [sp, #16]
 800545c:	9307      	str	r3, [sp, #28]
 800545e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005462:	931a      	str	r3, [sp, #104]	; 0x68
 8005464:	4654      	mov	r4, sl
 8005466:	2205      	movs	r2, #5
 8005468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800546c:	4851      	ldr	r0, [pc, #324]	; (80055b4 <_svfiprintf_r+0x1ec>)
 800546e:	f7fa fe87 	bl	8000180 <memchr>
 8005472:	9a04      	ldr	r2, [sp, #16]
 8005474:	b9d8      	cbnz	r0, 80054ae <_svfiprintf_r+0xe6>
 8005476:	06d0      	lsls	r0, r2, #27
 8005478:	bf44      	itt	mi
 800547a:	2320      	movmi	r3, #32
 800547c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005480:	0711      	lsls	r1, r2, #28
 8005482:	bf44      	itt	mi
 8005484:	232b      	movmi	r3, #43	; 0x2b
 8005486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800548a:	f89a 3000 	ldrb.w	r3, [sl]
 800548e:	2b2a      	cmp	r3, #42	; 0x2a
 8005490:	d015      	beq.n	80054be <_svfiprintf_r+0xf6>
 8005492:	9a07      	ldr	r2, [sp, #28]
 8005494:	4654      	mov	r4, sl
 8005496:	2000      	movs	r0, #0
 8005498:	f04f 0c0a 	mov.w	ip, #10
 800549c:	4621      	mov	r1, r4
 800549e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054a2:	3b30      	subs	r3, #48	; 0x30
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d94e      	bls.n	8005546 <_svfiprintf_r+0x17e>
 80054a8:	b1b0      	cbz	r0, 80054d8 <_svfiprintf_r+0x110>
 80054aa:	9207      	str	r2, [sp, #28]
 80054ac:	e014      	b.n	80054d8 <_svfiprintf_r+0x110>
 80054ae:	eba0 0308 	sub.w	r3, r0, r8
 80054b2:	fa09 f303 	lsl.w	r3, r9, r3
 80054b6:	4313      	orrs	r3, r2
 80054b8:	9304      	str	r3, [sp, #16]
 80054ba:	46a2      	mov	sl, r4
 80054bc:	e7d2      	b.n	8005464 <_svfiprintf_r+0x9c>
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	1d19      	adds	r1, r3, #4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	9103      	str	r1, [sp, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bfbb      	ittet	lt
 80054ca:	425b      	neglt	r3, r3
 80054cc:	f042 0202 	orrlt.w	r2, r2, #2
 80054d0:	9307      	strge	r3, [sp, #28]
 80054d2:	9307      	strlt	r3, [sp, #28]
 80054d4:	bfb8      	it	lt
 80054d6:	9204      	strlt	r2, [sp, #16]
 80054d8:	7823      	ldrb	r3, [r4, #0]
 80054da:	2b2e      	cmp	r3, #46	; 0x2e
 80054dc:	d10c      	bne.n	80054f8 <_svfiprintf_r+0x130>
 80054de:	7863      	ldrb	r3, [r4, #1]
 80054e0:	2b2a      	cmp	r3, #42	; 0x2a
 80054e2:	d135      	bne.n	8005550 <_svfiprintf_r+0x188>
 80054e4:	9b03      	ldr	r3, [sp, #12]
 80054e6:	1d1a      	adds	r2, r3, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	9203      	str	r2, [sp, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	bfb8      	it	lt
 80054f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054f4:	3402      	adds	r4, #2
 80054f6:	9305      	str	r3, [sp, #20]
 80054f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80055b8 <_svfiprintf_r+0x1f0>
 80054fc:	7821      	ldrb	r1, [r4, #0]
 80054fe:	2203      	movs	r2, #3
 8005500:	4650      	mov	r0, sl
 8005502:	f7fa fe3d 	bl	8000180 <memchr>
 8005506:	b140      	cbz	r0, 800551a <_svfiprintf_r+0x152>
 8005508:	2340      	movs	r3, #64	; 0x40
 800550a:	eba0 000a 	sub.w	r0, r0, sl
 800550e:	fa03 f000 	lsl.w	r0, r3, r0
 8005512:	9b04      	ldr	r3, [sp, #16]
 8005514:	4303      	orrs	r3, r0
 8005516:	3401      	adds	r4, #1
 8005518:	9304      	str	r3, [sp, #16]
 800551a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551e:	4827      	ldr	r0, [pc, #156]	; (80055bc <_svfiprintf_r+0x1f4>)
 8005520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005524:	2206      	movs	r2, #6
 8005526:	f7fa fe2b 	bl	8000180 <memchr>
 800552a:	2800      	cmp	r0, #0
 800552c:	d038      	beq.n	80055a0 <_svfiprintf_r+0x1d8>
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <_svfiprintf_r+0x1f8>)
 8005530:	bb1b      	cbnz	r3, 800557a <_svfiprintf_r+0x1b2>
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	3307      	adds	r3, #7
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	3308      	adds	r3, #8
 800553c:	9303      	str	r3, [sp, #12]
 800553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005540:	4433      	add	r3, r6
 8005542:	9309      	str	r3, [sp, #36]	; 0x24
 8005544:	e767      	b.n	8005416 <_svfiprintf_r+0x4e>
 8005546:	fb0c 3202 	mla	r2, ip, r2, r3
 800554a:	460c      	mov	r4, r1
 800554c:	2001      	movs	r0, #1
 800554e:	e7a5      	b.n	800549c <_svfiprintf_r+0xd4>
 8005550:	2300      	movs	r3, #0
 8005552:	3401      	adds	r4, #1
 8005554:	9305      	str	r3, [sp, #20]
 8005556:	4619      	mov	r1, r3
 8005558:	f04f 0c0a 	mov.w	ip, #10
 800555c:	4620      	mov	r0, r4
 800555e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005562:	3a30      	subs	r2, #48	; 0x30
 8005564:	2a09      	cmp	r2, #9
 8005566:	d903      	bls.n	8005570 <_svfiprintf_r+0x1a8>
 8005568:	2b00      	cmp	r3, #0
 800556a:	d0c5      	beq.n	80054f8 <_svfiprintf_r+0x130>
 800556c:	9105      	str	r1, [sp, #20]
 800556e:	e7c3      	b.n	80054f8 <_svfiprintf_r+0x130>
 8005570:	fb0c 2101 	mla	r1, ip, r1, r2
 8005574:	4604      	mov	r4, r0
 8005576:	2301      	movs	r3, #1
 8005578:	e7f0      	b.n	800555c <_svfiprintf_r+0x194>
 800557a:	ab03      	add	r3, sp, #12
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	462a      	mov	r2, r5
 8005580:	4b10      	ldr	r3, [pc, #64]	; (80055c4 <_svfiprintf_r+0x1fc>)
 8005582:	a904      	add	r1, sp, #16
 8005584:	4638      	mov	r0, r7
 8005586:	f3af 8000 	nop.w
 800558a:	1c42      	adds	r2, r0, #1
 800558c:	4606      	mov	r6, r0
 800558e:	d1d6      	bne.n	800553e <_svfiprintf_r+0x176>
 8005590:	89ab      	ldrh	r3, [r5, #12]
 8005592:	065b      	lsls	r3, r3, #25
 8005594:	f53f af2c 	bmi.w	80053f0 <_svfiprintf_r+0x28>
 8005598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800559a:	b01d      	add	sp, #116	; 0x74
 800559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a0:	ab03      	add	r3, sp, #12
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	462a      	mov	r2, r5
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <_svfiprintf_r+0x1fc>)
 80055a8:	a904      	add	r1, sp, #16
 80055aa:	4638      	mov	r0, r7
 80055ac:	f000 f87a 	bl	80056a4 <_printf_i>
 80055b0:	e7eb      	b.n	800558a <_svfiprintf_r+0x1c2>
 80055b2:	bf00      	nop
 80055b4:	08005cf0 	.word	0x08005cf0
 80055b8:	08005cf6 	.word	0x08005cf6
 80055bc:	08005cfa 	.word	0x08005cfa
 80055c0:	00000000 	.word	0x00000000
 80055c4:	08005311 	.word	0x08005311

080055c8 <_printf_common>:
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	4616      	mov	r6, r2
 80055ce:	4699      	mov	r9, r3
 80055d0:	688a      	ldr	r2, [r1, #8]
 80055d2:	690b      	ldr	r3, [r1, #16]
 80055d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d8:	4293      	cmp	r3, r2
 80055da:	bfb8      	it	lt
 80055dc:	4613      	movlt	r3, r2
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e4:	4607      	mov	r7, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	b10a      	cbz	r2, 80055ee <_printf_common+0x26>
 80055ea:	3301      	adds	r3, #1
 80055ec:	6033      	str	r3, [r6, #0]
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	0699      	lsls	r1, r3, #26
 80055f2:	bf42      	ittt	mi
 80055f4:	6833      	ldrmi	r3, [r6, #0]
 80055f6:	3302      	addmi	r3, #2
 80055f8:	6033      	strmi	r3, [r6, #0]
 80055fa:	6825      	ldr	r5, [r4, #0]
 80055fc:	f015 0506 	ands.w	r5, r5, #6
 8005600:	d106      	bne.n	8005610 <_printf_common+0x48>
 8005602:	f104 0a19 	add.w	sl, r4, #25
 8005606:	68e3      	ldr	r3, [r4, #12]
 8005608:	6832      	ldr	r2, [r6, #0]
 800560a:	1a9b      	subs	r3, r3, r2
 800560c:	42ab      	cmp	r3, r5
 800560e:	dc26      	bgt.n	800565e <_printf_common+0x96>
 8005610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005614:	1e13      	subs	r3, r2, #0
 8005616:	6822      	ldr	r2, [r4, #0]
 8005618:	bf18      	it	ne
 800561a:	2301      	movne	r3, #1
 800561c:	0692      	lsls	r2, r2, #26
 800561e:	d42b      	bmi.n	8005678 <_printf_common+0xb0>
 8005620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005624:	4649      	mov	r1, r9
 8005626:	4638      	mov	r0, r7
 8005628:	47c0      	blx	r8
 800562a:	3001      	adds	r0, #1
 800562c:	d01e      	beq.n	800566c <_printf_common+0xa4>
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	68e5      	ldr	r5, [r4, #12]
 8005632:	6832      	ldr	r2, [r6, #0]
 8005634:	f003 0306 	and.w	r3, r3, #6
 8005638:	2b04      	cmp	r3, #4
 800563a:	bf08      	it	eq
 800563c:	1aad      	subeq	r5, r5, r2
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	6922      	ldr	r2, [r4, #16]
 8005642:	bf0c      	ite	eq
 8005644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005648:	2500      	movne	r5, #0
 800564a:	4293      	cmp	r3, r2
 800564c:	bfc4      	itt	gt
 800564e:	1a9b      	subgt	r3, r3, r2
 8005650:	18ed      	addgt	r5, r5, r3
 8005652:	2600      	movs	r6, #0
 8005654:	341a      	adds	r4, #26
 8005656:	42b5      	cmp	r5, r6
 8005658:	d11a      	bne.n	8005690 <_printf_common+0xc8>
 800565a:	2000      	movs	r0, #0
 800565c:	e008      	b.n	8005670 <_printf_common+0xa8>
 800565e:	2301      	movs	r3, #1
 8005660:	4652      	mov	r2, sl
 8005662:	4649      	mov	r1, r9
 8005664:	4638      	mov	r0, r7
 8005666:	47c0      	blx	r8
 8005668:	3001      	adds	r0, #1
 800566a:	d103      	bne.n	8005674 <_printf_common+0xac>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005674:	3501      	adds	r5, #1
 8005676:	e7c6      	b.n	8005606 <_printf_common+0x3e>
 8005678:	18e1      	adds	r1, r4, r3
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	2030      	movs	r0, #48	; 0x30
 800567e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005682:	4422      	add	r2, r4
 8005684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800568c:	3302      	adds	r3, #2
 800568e:	e7c7      	b.n	8005620 <_printf_common+0x58>
 8005690:	2301      	movs	r3, #1
 8005692:	4622      	mov	r2, r4
 8005694:	4649      	mov	r1, r9
 8005696:	4638      	mov	r0, r7
 8005698:	47c0      	blx	r8
 800569a:	3001      	adds	r0, #1
 800569c:	d0e6      	beq.n	800566c <_printf_common+0xa4>
 800569e:	3601      	adds	r6, #1
 80056a0:	e7d9      	b.n	8005656 <_printf_common+0x8e>
	...

080056a4 <_printf_i>:
 80056a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	7e0f      	ldrb	r7, [r1, #24]
 80056aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056ac:	2f78      	cmp	r7, #120	; 0x78
 80056ae:	4691      	mov	r9, r2
 80056b0:	4680      	mov	r8, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	469a      	mov	sl, r3
 80056b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056ba:	d807      	bhi.n	80056cc <_printf_i+0x28>
 80056bc:	2f62      	cmp	r7, #98	; 0x62
 80056be:	d80a      	bhi.n	80056d6 <_printf_i+0x32>
 80056c0:	2f00      	cmp	r7, #0
 80056c2:	f000 80d8 	beq.w	8005876 <_printf_i+0x1d2>
 80056c6:	2f58      	cmp	r7, #88	; 0x58
 80056c8:	f000 80a3 	beq.w	8005812 <_printf_i+0x16e>
 80056cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d4:	e03a      	b.n	800574c <_printf_i+0xa8>
 80056d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056da:	2b15      	cmp	r3, #21
 80056dc:	d8f6      	bhi.n	80056cc <_printf_i+0x28>
 80056de:	a101      	add	r1, pc, #4	; (adr r1, 80056e4 <_printf_i+0x40>)
 80056e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e4:	0800573d 	.word	0x0800573d
 80056e8:	08005751 	.word	0x08005751
 80056ec:	080056cd 	.word	0x080056cd
 80056f0:	080056cd 	.word	0x080056cd
 80056f4:	080056cd 	.word	0x080056cd
 80056f8:	080056cd 	.word	0x080056cd
 80056fc:	08005751 	.word	0x08005751
 8005700:	080056cd 	.word	0x080056cd
 8005704:	080056cd 	.word	0x080056cd
 8005708:	080056cd 	.word	0x080056cd
 800570c:	080056cd 	.word	0x080056cd
 8005710:	0800585d 	.word	0x0800585d
 8005714:	08005781 	.word	0x08005781
 8005718:	0800583f 	.word	0x0800583f
 800571c:	080056cd 	.word	0x080056cd
 8005720:	080056cd 	.word	0x080056cd
 8005724:	0800587f 	.word	0x0800587f
 8005728:	080056cd 	.word	0x080056cd
 800572c:	08005781 	.word	0x08005781
 8005730:	080056cd 	.word	0x080056cd
 8005734:	080056cd 	.word	0x080056cd
 8005738:	08005847 	.word	0x08005847
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	602a      	str	r2, [r5, #0]
 8005744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800574c:	2301      	movs	r3, #1
 800574e:	e0a3      	b.n	8005898 <_printf_i+0x1f4>
 8005750:	6820      	ldr	r0, [r4, #0]
 8005752:	6829      	ldr	r1, [r5, #0]
 8005754:	0606      	lsls	r6, r0, #24
 8005756:	f101 0304 	add.w	r3, r1, #4
 800575a:	d50a      	bpl.n	8005772 <_printf_i+0xce>
 800575c:	680e      	ldr	r6, [r1, #0]
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	2e00      	cmp	r6, #0
 8005762:	da03      	bge.n	800576c <_printf_i+0xc8>
 8005764:	232d      	movs	r3, #45	; 0x2d
 8005766:	4276      	negs	r6, r6
 8005768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800576c:	485e      	ldr	r0, [pc, #376]	; (80058e8 <_printf_i+0x244>)
 800576e:	230a      	movs	r3, #10
 8005770:	e019      	b.n	80057a6 <_printf_i+0x102>
 8005772:	680e      	ldr	r6, [r1, #0]
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	f010 0f40 	tst.w	r0, #64	; 0x40
 800577a:	bf18      	it	ne
 800577c:	b236      	sxthne	r6, r6
 800577e:	e7ef      	b.n	8005760 <_printf_i+0xbc>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	6820      	ldr	r0, [r4, #0]
 8005784:	1d19      	adds	r1, r3, #4
 8005786:	6029      	str	r1, [r5, #0]
 8005788:	0601      	lsls	r1, r0, #24
 800578a:	d501      	bpl.n	8005790 <_printf_i+0xec>
 800578c:	681e      	ldr	r6, [r3, #0]
 800578e:	e002      	b.n	8005796 <_printf_i+0xf2>
 8005790:	0646      	lsls	r6, r0, #25
 8005792:	d5fb      	bpl.n	800578c <_printf_i+0xe8>
 8005794:	881e      	ldrh	r6, [r3, #0]
 8005796:	4854      	ldr	r0, [pc, #336]	; (80058e8 <_printf_i+0x244>)
 8005798:	2f6f      	cmp	r7, #111	; 0x6f
 800579a:	bf0c      	ite	eq
 800579c:	2308      	moveq	r3, #8
 800579e:	230a      	movne	r3, #10
 80057a0:	2100      	movs	r1, #0
 80057a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a6:	6865      	ldr	r5, [r4, #4]
 80057a8:	60a5      	str	r5, [r4, #8]
 80057aa:	2d00      	cmp	r5, #0
 80057ac:	bfa2      	ittt	ge
 80057ae:	6821      	ldrge	r1, [r4, #0]
 80057b0:	f021 0104 	bicge.w	r1, r1, #4
 80057b4:	6021      	strge	r1, [r4, #0]
 80057b6:	b90e      	cbnz	r6, 80057bc <_printf_i+0x118>
 80057b8:	2d00      	cmp	r5, #0
 80057ba:	d04d      	beq.n	8005858 <_printf_i+0x1b4>
 80057bc:	4615      	mov	r5, r2
 80057be:	fbb6 f1f3 	udiv	r1, r6, r3
 80057c2:	fb03 6711 	mls	r7, r3, r1, r6
 80057c6:	5dc7      	ldrb	r7, [r0, r7]
 80057c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057cc:	4637      	mov	r7, r6
 80057ce:	42bb      	cmp	r3, r7
 80057d0:	460e      	mov	r6, r1
 80057d2:	d9f4      	bls.n	80057be <_printf_i+0x11a>
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d10b      	bne.n	80057f0 <_printf_i+0x14c>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	07de      	lsls	r6, r3, #31
 80057dc:	d508      	bpl.n	80057f0 <_printf_i+0x14c>
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	6861      	ldr	r1, [r4, #4]
 80057e2:	4299      	cmp	r1, r3
 80057e4:	bfde      	ittt	le
 80057e6:	2330      	movle	r3, #48	; 0x30
 80057e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057ec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057f0:	1b52      	subs	r2, r2, r5
 80057f2:	6122      	str	r2, [r4, #16]
 80057f4:	f8cd a000 	str.w	sl, [sp]
 80057f8:	464b      	mov	r3, r9
 80057fa:	aa03      	add	r2, sp, #12
 80057fc:	4621      	mov	r1, r4
 80057fe:	4640      	mov	r0, r8
 8005800:	f7ff fee2 	bl	80055c8 <_printf_common>
 8005804:	3001      	adds	r0, #1
 8005806:	d14c      	bne.n	80058a2 <_printf_i+0x1fe>
 8005808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800580c:	b004      	add	sp, #16
 800580e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005812:	4835      	ldr	r0, [pc, #212]	; (80058e8 <_printf_i+0x244>)
 8005814:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005818:	6829      	ldr	r1, [r5, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005820:	6029      	str	r1, [r5, #0]
 8005822:	061d      	lsls	r5, r3, #24
 8005824:	d514      	bpl.n	8005850 <_printf_i+0x1ac>
 8005826:	07df      	lsls	r7, r3, #31
 8005828:	bf44      	itt	mi
 800582a:	f043 0320 	orrmi.w	r3, r3, #32
 800582e:	6023      	strmi	r3, [r4, #0]
 8005830:	b91e      	cbnz	r6, 800583a <_printf_i+0x196>
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	f023 0320 	bic.w	r3, r3, #32
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	2310      	movs	r3, #16
 800583c:	e7b0      	b.n	80057a0 <_printf_i+0xfc>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	f043 0320 	orr.w	r3, r3, #32
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	2378      	movs	r3, #120	; 0x78
 8005848:	4828      	ldr	r0, [pc, #160]	; (80058ec <_printf_i+0x248>)
 800584a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800584e:	e7e3      	b.n	8005818 <_printf_i+0x174>
 8005850:	0659      	lsls	r1, r3, #25
 8005852:	bf48      	it	mi
 8005854:	b2b6      	uxthmi	r6, r6
 8005856:	e7e6      	b.n	8005826 <_printf_i+0x182>
 8005858:	4615      	mov	r5, r2
 800585a:	e7bb      	b.n	80057d4 <_printf_i+0x130>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	6826      	ldr	r6, [r4, #0]
 8005860:	6961      	ldr	r1, [r4, #20]
 8005862:	1d18      	adds	r0, r3, #4
 8005864:	6028      	str	r0, [r5, #0]
 8005866:	0635      	lsls	r5, r6, #24
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	d501      	bpl.n	8005870 <_printf_i+0x1cc>
 800586c:	6019      	str	r1, [r3, #0]
 800586e:	e002      	b.n	8005876 <_printf_i+0x1d2>
 8005870:	0670      	lsls	r0, r6, #25
 8005872:	d5fb      	bpl.n	800586c <_printf_i+0x1c8>
 8005874:	8019      	strh	r1, [r3, #0]
 8005876:	2300      	movs	r3, #0
 8005878:	6123      	str	r3, [r4, #16]
 800587a:	4615      	mov	r5, r2
 800587c:	e7ba      	b.n	80057f4 <_printf_i+0x150>
 800587e:	682b      	ldr	r3, [r5, #0]
 8005880:	1d1a      	adds	r2, r3, #4
 8005882:	602a      	str	r2, [r5, #0]
 8005884:	681d      	ldr	r5, [r3, #0]
 8005886:	6862      	ldr	r2, [r4, #4]
 8005888:	2100      	movs	r1, #0
 800588a:	4628      	mov	r0, r5
 800588c:	f7fa fc78 	bl	8000180 <memchr>
 8005890:	b108      	cbz	r0, 8005896 <_printf_i+0x1f2>
 8005892:	1b40      	subs	r0, r0, r5
 8005894:	6060      	str	r0, [r4, #4]
 8005896:	6863      	ldr	r3, [r4, #4]
 8005898:	6123      	str	r3, [r4, #16]
 800589a:	2300      	movs	r3, #0
 800589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a0:	e7a8      	b.n	80057f4 <_printf_i+0x150>
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	462a      	mov	r2, r5
 80058a6:	4649      	mov	r1, r9
 80058a8:	4640      	mov	r0, r8
 80058aa:	47d0      	blx	sl
 80058ac:	3001      	adds	r0, #1
 80058ae:	d0ab      	beq.n	8005808 <_printf_i+0x164>
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	079b      	lsls	r3, r3, #30
 80058b4:	d413      	bmi.n	80058de <_printf_i+0x23a>
 80058b6:	68e0      	ldr	r0, [r4, #12]
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	4298      	cmp	r0, r3
 80058bc:	bfb8      	it	lt
 80058be:	4618      	movlt	r0, r3
 80058c0:	e7a4      	b.n	800580c <_printf_i+0x168>
 80058c2:	2301      	movs	r3, #1
 80058c4:	4632      	mov	r2, r6
 80058c6:	4649      	mov	r1, r9
 80058c8:	4640      	mov	r0, r8
 80058ca:	47d0      	blx	sl
 80058cc:	3001      	adds	r0, #1
 80058ce:	d09b      	beq.n	8005808 <_printf_i+0x164>
 80058d0:	3501      	adds	r5, #1
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	9903      	ldr	r1, [sp, #12]
 80058d6:	1a5b      	subs	r3, r3, r1
 80058d8:	42ab      	cmp	r3, r5
 80058da:	dcf2      	bgt.n	80058c2 <_printf_i+0x21e>
 80058dc:	e7eb      	b.n	80058b6 <_printf_i+0x212>
 80058de:	2500      	movs	r5, #0
 80058e0:	f104 0619 	add.w	r6, r4, #25
 80058e4:	e7f5      	b.n	80058d2 <_printf_i+0x22e>
 80058e6:	bf00      	nop
 80058e8:	08005d01 	.word	0x08005d01
 80058ec:	08005d12 	.word	0x08005d12

080058f0 <memmove>:
 80058f0:	4288      	cmp	r0, r1
 80058f2:	b510      	push	{r4, lr}
 80058f4:	eb01 0402 	add.w	r4, r1, r2
 80058f8:	d902      	bls.n	8005900 <memmove+0x10>
 80058fa:	4284      	cmp	r4, r0
 80058fc:	4623      	mov	r3, r4
 80058fe:	d807      	bhi.n	8005910 <memmove+0x20>
 8005900:	1e43      	subs	r3, r0, #1
 8005902:	42a1      	cmp	r1, r4
 8005904:	d008      	beq.n	8005918 <memmove+0x28>
 8005906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800590a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800590e:	e7f8      	b.n	8005902 <memmove+0x12>
 8005910:	4402      	add	r2, r0
 8005912:	4601      	mov	r1, r0
 8005914:	428a      	cmp	r2, r1
 8005916:	d100      	bne.n	800591a <memmove+0x2a>
 8005918:	bd10      	pop	{r4, pc}
 800591a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800591e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005922:	e7f7      	b.n	8005914 <memmove+0x24>

08005924 <_free_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	4605      	mov	r5, r0
 8005928:	2900      	cmp	r1, #0
 800592a:	d041      	beq.n	80059b0 <_free_r+0x8c>
 800592c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005930:	1f0c      	subs	r4, r1, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	bfb8      	it	lt
 8005936:	18e4      	addlt	r4, r4, r3
 8005938:	f000 f912 	bl	8005b60 <__malloc_lock>
 800593c:	4a1d      	ldr	r2, [pc, #116]	; (80059b4 <_free_r+0x90>)
 800593e:	6813      	ldr	r3, [r2, #0]
 8005940:	b933      	cbnz	r3, 8005950 <_free_r+0x2c>
 8005942:	6063      	str	r3, [r4, #4]
 8005944:	6014      	str	r4, [r2, #0]
 8005946:	4628      	mov	r0, r5
 8005948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800594c:	f000 b90e 	b.w	8005b6c <__malloc_unlock>
 8005950:	42a3      	cmp	r3, r4
 8005952:	d908      	bls.n	8005966 <_free_r+0x42>
 8005954:	6820      	ldr	r0, [r4, #0]
 8005956:	1821      	adds	r1, r4, r0
 8005958:	428b      	cmp	r3, r1
 800595a:	bf01      	itttt	eq
 800595c:	6819      	ldreq	r1, [r3, #0]
 800595e:	685b      	ldreq	r3, [r3, #4]
 8005960:	1809      	addeq	r1, r1, r0
 8005962:	6021      	streq	r1, [r4, #0]
 8005964:	e7ed      	b.n	8005942 <_free_r+0x1e>
 8005966:	461a      	mov	r2, r3
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b10b      	cbz	r3, 8005970 <_free_r+0x4c>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d9fa      	bls.n	8005966 <_free_r+0x42>
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	1850      	adds	r0, r2, r1
 8005974:	42a0      	cmp	r0, r4
 8005976:	d10b      	bne.n	8005990 <_free_r+0x6c>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	4401      	add	r1, r0
 800597c:	1850      	adds	r0, r2, r1
 800597e:	4283      	cmp	r3, r0
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	d1e0      	bne.n	8005946 <_free_r+0x22>
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	6053      	str	r3, [r2, #4]
 800598a:	4401      	add	r1, r0
 800598c:	6011      	str	r1, [r2, #0]
 800598e:	e7da      	b.n	8005946 <_free_r+0x22>
 8005990:	d902      	bls.n	8005998 <_free_r+0x74>
 8005992:	230c      	movs	r3, #12
 8005994:	602b      	str	r3, [r5, #0]
 8005996:	e7d6      	b.n	8005946 <_free_r+0x22>
 8005998:	6820      	ldr	r0, [r4, #0]
 800599a:	1821      	adds	r1, r4, r0
 800599c:	428b      	cmp	r3, r1
 800599e:	bf04      	itt	eq
 80059a0:	6819      	ldreq	r1, [r3, #0]
 80059a2:	685b      	ldreq	r3, [r3, #4]
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	bf04      	itt	eq
 80059a8:	1809      	addeq	r1, r1, r0
 80059aa:	6021      	streq	r1, [r4, #0]
 80059ac:	6054      	str	r4, [r2, #4]
 80059ae:	e7ca      	b.n	8005946 <_free_r+0x22>
 80059b0:	bd38      	pop	{r3, r4, r5, pc}
 80059b2:	bf00      	nop
 80059b4:	200002e0 	.word	0x200002e0

080059b8 <sbrk_aligned>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	4e0e      	ldr	r6, [pc, #56]	; (80059f4 <sbrk_aligned+0x3c>)
 80059bc:	460c      	mov	r4, r1
 80059be:	6831      	ldr	r1, [r6, #0]
 80059c0:	4605      	mov	r5, r0
 80059c2:	b911      	cbnz	r1, 80059ca <sbrk_aligned+0x12>
 80059c4:	f000 f8bc 	bl	8005b40 <_sbrk_r>
 80059c8:	6030      	str	r0, [r6, #0]
 80059ca:	4621      	mov	r1, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 f8b7 	bl	8005b40 <_sbrk_r>
 80059d2:	1c43      	adds	r3, r0, #1
 80059d4:	d00a      	beq.n	80059ec <sbrk_aligned+0x34>
 80059d6:	1cc4      	adds	r4, r0, #3
 80059d8:	f024 0403 	bic.w	r4, r4, #3
 80059dc:	42a0      	cmp	r0, r4
 80059de:	d007      	beq.n	80059f0 <sbrk_aligned+0x38>
 80059e0:	1a21      	subs	r1, r4, r0
 80059e2:	4628      	mov	r0, r5
 80059e4:	f000 f8ac 	bl	8005b40 <_sbrk_r>
 80059e8:	3001      	adds	r0, #1
 80059ea:	d101      	bne.n	80059f0 <sbrk_aligned+0x38>
 80059ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059f0:	4620      	mov	r0, r4
 80059f2:	bd70      	pop	{r4, r5, r6, pc}
 80059f4:	200002e4 	.word	0x200002e4

080059f8 <_malloc_r>:
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	1ccd      	adds	r5, r1, #3
 80059fe:	f025 0503 	bic.w	r5, r5, #3
 8005a02:	3508      	adds	r5, #8
 8005a04:	2d0c      	cmp	r5, #12
 8005a06:	bf38      	it	cc
 8005a08:	250c      	movcc	r5, #12
 8005a0a:	2d00      	cmp	r5, #0
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	db01      	blt.n	8005a14 <_malloc_r+0x1c>
 8005a10:	42a9      	cmp	r1, r5
 8005a12:	d905      	bls.n	8005a20 <_malloc_r+0x28>
 8005a14:	230c      	movs	r3, #12
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	2600      	movs	r6, #0
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a20:	4e2e      	ldr	r6, [pc, #184]	; (8005adc <_malloc_r+0xe4>)
 8005a22:	f000 f89d 	bl	8005b60 <__malloc_lock>
 8005a26:	6833      	ldr	r3, [r6, #0]
 8005a28:	461c      	mov	r4, r3
 8005a2a:	bb34      	cbnz	r4, 8005a7a <_malloc_r+0x82>
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	4638      	mov	r0, r7
 8005a30:	f7ff ffc2 	bl	80059b8 <sbrk_aligned>
 8005a34:	1c43      	adds	r3, r0, #1
 8005a36:	4604      	mov	r4, r0
 8005a38:	d14d      	bne.n	8005ad6 <_malloc_r+0xde>
 8005a3a:	6834      	ldr	r4, [r6, #0]
 8005a3c:	4626      	mov	r6, r4
 8005a3e:	2e00      	cmp	r6, #0
 8005a40:	d140      	bne.n	8005ac4 <_malloc_r+0xcc>
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	4631      	mov	r1, r6
 8005a46:	4638      	mov	r0, r7
 8005a48:	eb04 0803 	add.w	r8, r4, r3
 8005a4c:	f000 f878 	bl	8005b40 <_sbrk_r>
 8005a50:	4580      	cmp	r8, r0
 8005a52:	d13a      	bne.n	8005aca <_malloc_r+0xd2>
 8005a54:	6821      	ldr	r1, [r4, #0]
 8005a56:	3503      	adds	r5, #3
 8005a58:	1a6d      	subs	r5, r5, r1
 8005a5a:	f025 0503 	bic.w	r5, r5, #3
 8005a5e:	3508      	adds	r5, #8
 8005a60:	2d0c      	cmp	r5, #12
 8005a62:	bf38      	it	cc
 8005a64:	250c      	movcc	r5, #12
 8005a66:	4629      	mov	r1, r5
 8005a68:	4638      	mov	r0, r7
 8005a6a:	f7ff ffa5 	bl	80059b8 <sbrk_aligned>
 8005a6e:	3001      	adds	r0, #1
 8005a70:	d02b      	beq.n	8005aca <_malloc_r+0xd2>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	442b      	add	r3, r5
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	e00e      	b.n	8005a98 <_malloc_r+0xa0>
 8005a7a:	6822      	ldr	r2, [r4, #0]
 8005a7c:	1b52      	subs	r2, r2, r5
 8005a7e:	d41e      	bmi.n	8005abe <_malloc_r+0xc6>
 8005a80:	2a0b      	cmp	r2, #11
 8005a82:	d916      	bls.n	8005ab2 <_malloc_r+0xba>
 8005a84:	1961      	adds	r1, r4, r5
 8005a86:	42a3      	cmp	r3, r4
 8005a88:	6025      	str	r5, [r4, #0]
 8005a8a:	bf18      	it	ne
 8005a8c:	6059      	strne	r1, [r3, #4]
 8005a8e:	6863      	ldr	r3, [r4, #4]
 8005a90:	bf08      	it	eq
 8005a92:	6031      	streq	r1, [r6, #0]
 8005a94:	5162      	str	r2, [r4, r5]
 8005a96:	604b      	str	r3, [r1, #4]
 8005a98:	4638      	mov	r0, r7
 8005a9a:	f104 060b 	add.w	r6, r4, #11
 8005a9e:	f000 f865 	bl	8005b6c <__malloc_unlock>
 8005aa2:	f026 0607 	bic.w	r6, r6, #7
 8005aa6:	1d23      	adds	r3, r4, #4
 8005aa8:	1af2      	subs	r2, r6, r3
 8005aaa:	d0b6      	beq.n	8005a1a <_malloc_r+0x22>
 8005aac:	1b9b      	subs	r3, r3, r6
 8005aae:	50a3      	str	r3, [r4, r2]
 8005ab0:	e7b3      	b.n	8005a1a <_malloc_r+0x22>
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	42a3      	cmp	r3, r4
 8005ab6:	bf0c      	ite	eq
 8005ab8:	6032      	streq	r2, [r6, #0]
 8005aba:	605a      	strne	r2, [r3, #4]
 8005abc:	e7ec      	b.n	8005a98 <_malloc_r+0xa0>
 8005abe:	4623      	mov	r3, r4
 8005ac0:	6864      	ldr	r4, [r4, #4]
 8005ac2:	e7b2      	b.n	8005a2a <_malloc_r+0x32>
 8005ac4:	4634      	mov	r4, r6
 8005ac6:	6876      	ldr	r6, [r6, #4]
 8005ac8:	e7b9      	b.n	8005a3e <_malloc_r+0x46>
 8005aca:	230c      	movs	r3, #12
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	4638      	mov	r0, r7
 8005ad0:	f000 f84c 	bl	8005b6c <__malloc_unlock>
 8005ad4:	e7a1      	b.n	8005a1a <_malloc_r+0x22>
 8005ad6:	6025      	str	r5, [r4, #0]
 8005ad8:	e7de      	b.n	8005a98 <_malloc_r+0xa0>
 8005ada:	bf00      	nop
 8005adc:	200002e0 	.word	0x200002e0

08005ae0 <_realloc_r>:
 8005ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	4614      	mov	r4, r2
 8005ae8:	460e      	mov	r6, r1
 8005aea:	b921      	cbnz	r1, 8005af6 <_realloc_r+0x16>
 8005aec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af0:	4611      	mov	r1, r2
 8005af2:	f7ff bf81 	b.w	80059f8 <_malloc_r>
 8005af6:	b92a      	cbnz	r2, 8005b04 <_realloc_r+0x24>
 8005af8:	f7ff ff14 	bl	8005924 <_free_r>
 8005afc:	4625      	mov	r5, r4
 8005afe:	4628      	mov	r0, r5
 8005b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b04:	f000 f838 	bl	8005b78 <_malloc_usable_size_r>
 8005b08:	4284      	cmp	r4, r0
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	d802      	bhi.n	8005b14 <_realloc_r+0x34>
 8005b0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b12:	d812      	bhi.n	8005b3a <_realloc_r+0x5a>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4640      	mov	r0, r8
 8005b18:	f7ff ff6e 	bl	80059f8 <_malloc_r>
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d0ed      	beq.n	8005afe <_realloc_r+0x1e>
 8005b22:	42bc      	cmp	r4, r7
 8005b24:	4622      	mov	r2, r4
 8005b26:	4631      	mov	r1, r6
 8005b28:	bf28      	it	cs
 8005b2a:	463a      	movcs	r2, r7
 8005b2c:	f7ff fb92 	bl	8005254 <memcpy>
 8005b30:	4631      	mov	r1, r6
 8005b32:	4640      	mov	r0, r8
 8005b34:	f7ff fef6 	bl	8005924 <_free_r>
 8005b38:	e7e1      	b.n	8005afe <_realloc_r+0x1e>
 8005b3a:	4635      	mov	r5, r6
 8005b3c:	e7df      	b.n	8005afe <_realloc_r+0x1e>
	...

08005b40 <_sbrk_r>:
 8005b40:	b538      	push	{r3, r4, r5, lr}
 8005b42:	4d06      	ldr	r5, [pc, #24]	; (8005b5c <_sbrk_r+0x1c>)
 8005b44:	2300      	movs	r3, #0
 8005b46:	4604      	mov	r4, r0
 8005b48:	4608      	mov	r0, r1
 8005b4a:	602b      	str	r3, [r5, #0]
 8005b4c:	f7fc f804 	bl	8001b58 <_sbrk>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d102      	bne.n	8005b5a <_sbrk_r+0x1a>
 8005b54:	682b      	ldr	r3, [r5, #0]
 8005b56:	b103      	cbz	r3, 8005b5a <_sbrk_r+0x1a>
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	bd38      	pop	{r3, r4, r5, pc}
 8005b5c:	200002e8 	.word	0x200002e8

08005b60 <__malloc_lock>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__malloc_lock+0x8>)
 8005b62:	f000 b811 	b.w	8005b88 <__retarget_lock_acquire_recursive>
 8005b66:	bf00      	nop
 8005b68:	200002ec 	.word	0x200002ec

08005b6c <__malloc_unlock>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__malloc_unlock+0x8>)
 8005b6e:	f000 b80c 	b.w	8005b8a <__retarget_lock_release_recursive>
 8005b72:	bf00      	nop
 8005b74:	200002ec 	.word	0x200002ec

08005b78 <_malloc_usable_size_r>:
 8005b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7c:	1f18      	subs	r0, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfbc      	itt	lt
 8005b82:	580b      	ldrlt	r3, [r1, r0]
 8005b84:	18c0      	addlt	r0, r0, r3
 8005b86:	4770      	bx	lr

08005b88 <__retarget_lock_acquire_recursive>:
 8005b88:	4770      	bx	lr

08005b8a <__retarget_lock_release_recursive>:
 8005b8a:	4770      	bx	lr

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr

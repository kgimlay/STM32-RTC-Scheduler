
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b94  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e44  08006e44  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e44  08006e44  00016e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e48  08006e48  00016e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000070  08006ebc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08006ebc  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f46  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e41  00000000  00000000  00034fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00037e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001de47  00000000  00000000  0003a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e3c  00000000  00000000  000582b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8812  00000000  00000000  0006c0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124905  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005558  00000000  00000000  00124958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006cbc 	.word	0x08006cbc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006cbc 	.word	0x08006cbc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fd18 	bl	8000f74 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000184 	.word	0x20000184

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 fd0e 	bl	8000f90 <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f000 fdbf 	bl	8001124 <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_setEvents>:


/*
 *
 */
void calendar_setEvents(CalendarEvent events[MAX_NUM_EVENTS]) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	memcpy(_calendarEvents, events, sizeof(CalendarEvent)*MAX_NUM_EVENTS);
 80005b8:	22f0      	movs	r2, #240	; 0xf0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <calendar_setEvents+0x1c>)
 80005be:	f005 fef5 	bl	80063ac <memcpy>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000008c 	.word	0x2000008c

080005d0 <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	// reset current event index
	_currentEventIdx = 0;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <calendar_start+0x24>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]

	// set alarm for start of first event in list
	setAlarm_A(_calendarEvents[0].start_day, _calendarEvents[0].start_hour, _calendarEvents[0].start_minute, _calendarEvents[0].start_second);
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <calendar_start+0x28>)
 80005dc:	7898      	ldrb	r0, [r3, #2]
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <calendar_start+0x28>)
 80005e0:	78d9      	ldrb	r1, [r3, #3]
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <calendar_start+0x28>)
 80005e4:	791a      	ldrb	r2, [r3, #4]
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <calendar_start+0x28>)
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	f000 fe3d 	bl	8001268 <setAlarm_A>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000017c 	.word	0x2000017c
 80005f8:	2000008c 	.word	0x2000008c

080005fc <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af02      	add	r7, sp, #8
	DateTime now;

	// get the current time
	getDateTime(&now.year, &now.month, &now.day, &now.month, &now.minute, &now.second);
 8000602:	463b      	mov	r3, r7
 8000604:	1c5c      	adds	r4, r3, #1
 8000606:	463b      	mov	r3, r7
 8000608:	1c9a      	adds	r2, r3, #2
 800060a:	463b      	mov	r3, r7
 800060c:	1c59      	adds	r1, r3, #1
 800060e:	4638      	mov	r0, r7
 8000610:	463b      	mov	r3, r7
 8000612:	3305      	adds	r3, #5
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	463b      	mov	r3, r7
 8000618:	3304      	adds	r3, #4
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	4623      	mov	r3, r4
 800061e:	f000 fd81 	bl	8001124 <getDateTime>

	// if not in event, event started
	if (!_inEvent) {
 8000622:	4b37      	ldr	r3, [pc, #220]	; (8000700 <calendar_AlarmA_ISR+0x104>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f083 0301 	eor.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d02e      	beq.n	8000690 <calendar_AlarmA_ISR+0x94>
		_inEvent = true;
 8000632:	4b33      	ldr	r3, [pc, #204]	; (8000700 <calendar_AlarmA_ISR+0x104>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]

		// set alarm for end of event
		setAlarm_A(_calendarEvents[_currentEventIdx].end_day, _calendarEvents[_currentEventIdx].end_hour, _calendarEvents[_currentEventIdx].end_minute, _calendarEvents[_currentEventIdx].end_second);
 8000638:	4b32      	ldr	r3, [pc, #200]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4932      	ldr	r1, [pc, #200]	; (8000708 <calendar_AlarmA_ISR+0x10c>)
 800063e:	4613      	mov	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4413      	add	r3, r2
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	440b      	add	r3, r1
 8000648:	330e      	adds	r3, #14
 800064a:	7818      	ldrb	r0, [r3, #0]
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	492d      	ldr	r1, [pc, #180]	; (8000708 <calendar_AlarmA_ISR+0x10c>)
 8000652:	4613      	mov	r3, r2
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	440b      	add	r3, r1
 800065c:	330f      	adds	r3, #15
 800065e:	7819      	ldrb	r1, [r3, #0]
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4c28      	ldr	r4, [pc, #160]	; (8000708 <calendar_AlarmA_ISR+0x10c>)
 8000666:	4613      	mov	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	4413      	add	r3, r2
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	4423      	add	r3, r4
 8000670:	3310      	adds	r3, #16
 8000672:	781c      	ldrb	r4, [r3, #0]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4d23      	ldr	r5, [pc, #140]	; (8000708 <calendar_AlarmA_ISR+0x10c>)
 800067a:	4613      	mov	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	442b      	add	r3, r5
 8000684:	3311      	adds	r3, #17
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4622      	mov	r2, r4
 800068a:	f000 fded 	bl	8001268 <setAlarm_A>
		_currentEventIdx++;

		// set alarm for start of next event
		setAlarm_A(_calendarEvents[_currentEventIdx].start_day, _calendarEvents[_currentEventIdx].start_hour, _calendarEvents[_currentEventIdx].start_minute, _calendarEvents[_currentEventIdx].start_second);
	}
}
 800068e:	e032      	b.n	80006f6 <calendar_AlarmA_ISR+0xfa>
		_inEvent = false;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <calendar_AlarmA_ISR+0x104>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
		_currentEventIdx++;
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	3301      	adds	r3, #1
 800069c:	4a19      	ldr	r2, [pc, #100]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 800069e:	6013      	str	r3, [r2, #0]
		setAlarm_A(_calendarEvents[_currentEventIdx].start_day, _calendarEvents[_currentEventIdx].start_hour, _calendarEvents[_currentEventIdx].start_minute, _calendarEvents[_currentEventIdx].start_second);
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4918      	ldr	r1, [pc, #96]	; (8000708 <calendar_AlarmA_ISR+0x10c>)
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	440b      	add	r3, r1
 80006b0:	3302      	adds	r3, #2
 80006b2:	7818      	ldrb	r0, [r3, #0]
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4913      	ldr	r1, [pc, #76]	; (8000708 <calendar_AlarmA_ISR+0x10c>)
 80006ba:	4613      	mov	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	4413      	add	r3, r2
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	440b      	add	r3, r1
 80006c4:	3303      	adds	r3, #3
 80006c6:	7819      	ldrb	r1, [r3, #0]
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4c0e      	ldr	r4, [pc, #56]	; (8000708 <calendar_AlarmA_ISR+0x10c>)
 80006ce:	4613      	mov	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	00db      	lsls	r3, r3, #3
 80006d6:	4423      	add	r3, r4
 80006d8:	3304      	adds	r3, #4
 80006da:	781c      	ldrb	r4, [r3, #0]
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <calendar_AlarmA_ISR+0x108>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4d09      	ldr	r5, [pc, #36]	; (8000708 <calendar_AlarmA_ISR+0x10c>)
 80006e2:	4613      	mov	r3, r2
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	4413      	add	r3, r2
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	442b      	add	r3, r5
 80006ec:	3305      	adds	r3, #5
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	4622      	mov	r2, r4
 80006f2:	f000 fdb9 	bl	8001268 <setAlarm_A>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bdb0      	pop	{r4, r5, r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000180 	.word	0x20000180
 8000704:	2000017c 	.word	0x2000017c
 8000708:	2000008c 	.word	0x2000008c

0800070c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800071c:	f023 0218 	bic.w	r2, r3, #24
 8000720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4313      	orrs	r3, r2
 8000728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000736:	b480      	push	{r7}
 8000738:	b085      	sub	sp, #20
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800073e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4313      	orrs	r3, r2
 800074c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800074e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4013      	ands	r3, r2
 8000758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800075a:	68fb      	ldr	r3, [r7, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
	...

08000768 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_UART_ErrorCallback+0x28>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d006      	beq.n	8000788 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <HAL_UART_ErrorCallback+0x2c>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d101      	bne.n	8000788 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000784:	f000 ffcc 	bl	8001720 <uartBasic_Error_ISR>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40013800 	.word	0x40013800
 8000794:	40004400 	.word	0x40004400

08000798 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a06      	ldr	r2, [pc, #24]	; (80007c0 <HAL_UART_TxCpltCallback+0x28>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d006      	beq.n	80007b8 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <HAL_UART_TxCpltCallback+0x2c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d101      	bne.n	80007b8 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 80007b4:	f000 ffa8 	bl	8001708 <uartBasic_TX_Complete_ISR>
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40013800 	.word	0x40013800
 80007c4:	40004400 	.word	0x40004400

080007c8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_UART_RxCpltCallback+0x28>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d006      	beq.n	80007e8 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <HAL_UART_RxCpltCallback+0x2c>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d101      	bne.n	80007e8 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 80007e4:	f000 ff84 	bl	80016f0 <uartBasic_RX_Complete_ISR>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40013800 	.word	0x40013800
 80007f4:	40004400 	.word	0x40004400

080007f8 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80007f8:	b5b0      	push	{r4, r5, r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8000800:	f7ff fefc 	bl	80005fc <calendar_AlarmA_ISR>

	// send message for debugging
	char messageBody[UART_MESSAGE_BODY_SIZE] = "\n\nALARM EVENT!\n\n\0";
 8000804:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8000806:	f107 040c 	add.w	r4, r7, #12
 800080a:	461d      	mov	r5, r3
 800080c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	682b      	ldr	r3, [r5, #0]
 8000812:	8023      	strh	r3, [r4, #0]
 8000814:	f107 031e 	add.w	r3, r7, #30
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	811a      	strh	r2, [r3, #8]
	uartBasic_TX_IT("TIME", messageBody);
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <HAL_RTC_AlarmAEventCallback+0x40>)
 8000828:	f000 ff02 	bl	8001630 <uartBasic_TX_IT>
}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bdb0      	pop	{r4, r5, r7, pc}
 8000834:	08006cdc 	.word	0x08006cdc
 8000838:	08006cd4 	.word	0x08006cd4

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	b0d1      	sub	sp, #324	; 0x144
 8000840:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000842:	f000 fff7 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000846:	f000 fa39 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084a:	f000 fb81 	bl	8000f50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800084e:	f000 fb29 	bl	8000ea4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000852:	f000 fa91 	bl	8000d78 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000856:	2001      	movs	r0, #1
 8000858:	f001 fbb2 	bl	8001fc0 <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 800085c:	48ef      	ldr	r0, [pc, #956]	; (8000c1c <main+0x3e0>)
 800085e:	f000 fed9 	bl	8001614 <uartBasic_init>

  // initialize calendar
  calendar_init(&hrtc);
 8000862:	48ef      	ldr	r0, [pc, #956]	; (8000c20 <main+0x3e4>)
 8000864:	f7ff fe64 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8000868:	4aee      	ldr	r2, [pc, #952]	; (8000c24 <main+0x3e8>)
 800086a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800086e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000872:	6018      	str	r0, [r3, #0]
 8000874:	3304      	adds	r3, #4
 8000876:	8019      	strh	r1, [r3, #0]
		  .day = 8,
		  .hour = 2,
		  .minute = 30,
		  .second = 0
  };
  calendar_setDateTime(now);
 8000878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800087c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000880:	f7ff fe66 	bl	8000550 <calendar_setDateTime>

  // set some events
  CalendarEvent events[MAX_NUM_EVENTS] = {0};
 8000884:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800088c:	4618      	mov	r0, r3
 800088e:	23f0      	movs	r3, #240	; 0xf0
 8000890:	461a      	mov	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f005 fd98 	bl	80063c8 <memset>

  events[0].start_year = 23;
 8000898:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800089c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008a0:	2217      	movs	r2, #23
 80008a2:	701a      	strb	r2, [r3, #0]
  events[0].start_month = 7;
 80008a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80008a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008ac:	2207      	movs	r2, #7
 80008ae:	705a      	strb	r2, [r3, #1]
  events[0].start_day = 8;
 80008b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80008b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008b8:	2208      	movs	r2, #8
 80008ba:	709a      	strb	r2, [r3, #2]
  events[0].start_hour = 2;
 80008bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80008c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008c4:	2202      	movs	r2, #2
 80008c6:	70da      	strb	r2, [r3, #3]
  events[0].start_minute = 30;
 80008c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80008cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008d0:	221e      	movs	r2, #30
 80008d2:	711a      	strb	r2, [r3, #4]
  events[0].start_second = 10;
 80008d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80008d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008dc:	220a      	movs	r2, #10
 80008de:	715a      	strb	r2, [r3, #5]
  events[0].end_year = 23;
 80008e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80008e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008e8:	2217      	movs	r2, #23
 80008ea:	731a      	strb	r2, [r3, #12]
  events[0].end_month = 7;
 80008ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80008f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008f4:	2207      	movs	r2, #7
 80008f6:	735a      	strb	r2, [r3, #13]
  events[0].end_day = 8;
 80008f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80008fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000900:	2208      	movs	r2, #8
 8000902:	739a      	strb	r2, [r3, #14]
  events[0].end_hour = 2;
 8000904:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800090c:	2202      	movs	r2, #2
 800090e:	73da      	strb	r2, [r3, #15]
  events[0].end_minute = 30;
 8000910:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000918:	221e      	movs	r2, #30
 800091a:	741a      	strb	r2, [r3, #16]
  events[0].end_second = 20;
 800091c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000924:	2214      	movs	r2, #20
 8000926:	745a      	strb	r2, [r3, #17]

  events[1].start_year = 23;
 8000928:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800092c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000930:	2217      	movs	r2, #23
 8000932:	761a      	strb	r2, [r3, #24]
  events[1].start_month = 7;
 8000934:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800093c:	2207      	movs	r2, #7
 800093e:	765a      	strb	r2, [r3, #25]
  events[1].start_day = 8;
 8000940:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000948:	2208      	movs	r2, #8
 800094a:	769a      	strb	r2, [r3, #26]
  events[1].start_hour = 2;
 800094c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000954:	2202      	movs	r2, #2
 8000956:	76da      	strb	r2, [r3, #27]
  events[1].start_minute = 30;
 8000958:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800095c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000960:	221e      	movs	r2, #30
 8000962:	771a      	strb	r2, [r3, #28]
  events[1].start_second = 30;
 8000964:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800096c:	221e      	movs	r2, #30
 800096e:	775a      	strb	r2, [r3, #29]
  events[1].end_year = 23;
 8000970:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000978:	2217      	movs	r2, #23
 800097a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  events[1].end_month = 7;
 800097e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000986:	2207      	movs	r2, #7
 8000988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  events[1].end_day = 8;
 800098c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000994:	2208      	movs	r2, #8
 8000996:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  events[1].end_hour = 2;
 800099a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800099e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009a2:	2202      	movs	r2, #2
 80009a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  events[1].end_minute = 30;
 80009a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80009ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009b0:	221e      	movs	r2, #30
 80009b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  events[1].end_second = 40;
 80009b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80009ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009be:	2228      	movs	r2, #40	; 0x28
 80009c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  events[2].start_year = 23;
 80009c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80009c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009cc:	2217      	movs	r2, #23
 80009ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  events[2].start_month = 7;
 80009d2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80009d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009da:	2207      	movs	r2, #7
 80009dc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  events[2].start_day = 8;
 80009e0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80009e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009e8:	2208      	movs	r2, #8
 80009ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  events[2].start_hour = 2;
 80009ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80009f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80009f6:	2202      	movs	r2, #2
 80009f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  events[2].start_minute = 30;
 80009fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a04:	221e      	movs	r2, #30
 8000a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  events[2].start_second = 50;
 8000a0a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a12:	2232      	movs	r2, #50	; 0x32
 8000a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  events[2].end_year = 23;
 8000a18:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a20:	2217      	movs	r2, #23
 8000a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  events[2].end_month = 7;
 8000a26:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a2e:	2207      	movs	r2, #7
 8000a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  events[2].end_day = 8;
 8000a34:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a3c:	2208      	movs	r2, #8
 8000a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  events[2].end_hour = 2;
 8000a42:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  events[2].end_minute = 31;
 8000a50:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a58:	221f      	movs	r2, #31
 8000a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  events[2].end_second = 0;
 8000a5e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  events[3].start_year = 23;
 8000a6c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a74:	2217      	movs	r2, #23
 8000a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  events[3].start_month = 7;
 8000a7a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a82:	2207      	movs	r2, #7
 8000a84:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  events[3].start_day = 8;
 8000a88:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a90:	2208      	movs	r2, #8
 8000a92:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  events[3].start_hour = 2;
 8000a96:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  events[3].start_minute = 31;
 8000aa4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000aac:	221f      	movs	r2, #31
 8000aae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  events[3].start_second = 10;
 8000ab2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000aba:	220a      	movs	r2, #10
 8000abc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
  events[3].end_year = 23;
 8000ac0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ac8:	2217      	movs	r2, #23
 8000aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  events[3].end_month = 7;
 8000ace:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ad6:	2207      	movs	r2, #7
 8000ad8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  events[3].end_day = 8;
 8000adc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  events[3].end_hour = 2;
 8000aea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000af2:	2202      	movs	r2, #2
 8000af4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
  events[3].end_minute = 31;
 8000af8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000afc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b00:	221f      	movs	r2, #31
 8000b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  events[3].end_second = 20;
 8000b06:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b0e:	2214      	movs	r2, #20
 8000b10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  events[4].start_year = 23;
 8000b14:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b1c:	2217      	movs	r2, #23
 8000b1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  events[4].start_month = 7;
 8000b22:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  events[4].start_day = 8;
 8000b30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b38:	2208      	movs	r2, #8
 8000b3a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  events[4].start_hour = 2;
 8000b3e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b46:	2202      	movs	r2, #2
 8000b48:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  events[4].start_minute = 31;
 8000b4c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b54:	221f      	movs	r2, #31
 8000b56:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  events[4].start_second = 30;
 8000b5a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b62:	221e      	movs	r2, #30
 8000b64:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
  events[4].end_year = 23;
 8000b68:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b70:	2217      	movs	r2, #23
 8000b72:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  events[4].end_month = 7;
 8000b76:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b7e:	2207      	movs	r2, #7
 8000b80:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  events[4].end_day = 8;
 8000b84:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b8c:	2208      	movs	r2, #8
 8000b8e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  events[4].end_hour = 2;
 8000b92:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  events[4].end_minute = 31;
 8000ba0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ba8:	221f      	movs	r2, #31
 8000baa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  events[4].end_second = 40;
 8000bae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000bb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000bb6:	2228      	movs	r2, #40	; 0x28
 8000bb8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  calendar_setEvents(events);
 8000bbc:	f107 0320 	add.w	r3, r7, #32
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fcf5 	bl	80005b0 <calendar_setEvents>

  // start calendar
  calendar_start();
 8000bc6:	f7ff fd03 	bl	80005d0 <calendar_start>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 8000bca:	f000 fd53 	bl	8001674 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int timeSeconds = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  int timeMinutes = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  while (1)
  {
	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 8000be0:	463a      	mov	r2, r7
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fd57 	bl	800169c <uartBasic_get_RX>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	  // if message present, handle message
	  if (messageStatus == true) {
 8000bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d015      	beq.n	8000c28 <main+0x3ec>
		  // echo back to computer
		  uartBasic_TX_IT(messageHeader, messageBody);
 8000bfc:	463a      	mov	r2, r7
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fd13 	bl	8001630 <uartBasic_TX_IT>
		  messageCount++;
 8000c0a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000c0e:	3301      	adds	r3, #1
 8000c10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  uartBasic_RX_IT();
 8000c14:	f000 fd2e 	bl	8001674 <uartBasic_RX_IT>
 8000c18:	e006      	b.n	8000c28 <main+0x3ec>
 8000c1a:	bf00      	nop
 8000c1c:	200001c0 	.word	0x200001c0
 8000c20:	20000188 	.word	0x20000188
 8000c24:	08006d1c 	.word	0x08006d1c
	  }

	  calendar_getDateTime(&now);
 8000c28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fca5 	bl	800057c <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000c32:	463b      	mov	r3, r7
 8000c34:	221c      	movs	r2, #28
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 fbc5 	bl	80063c8 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 8000c3e:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8000c42:	461e      	mov	r6, r3
 8000c44:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8000c48:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 8000c4c:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
 8000c50:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
 8000c54:	4604      	mov	r4, r0
 8000c56:	f897 0115 	ldrb.w	r0, [r7, #277]	; 0x115
 8000c5a:	4605      	mov	r5, r0
 8000c5c:	4638      	mov	r0, r7
 8000c5e:	9504      	str	r5, [sp, #16]
 8000c60:	9403      	str	r4, [sp, #12]
 8000c62:	9102      	str	r1, [sp, #8]
 8000c64:	9201      	str	r2, [sp, #4]
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	4633      	mov	r3, r6
 8000c6a:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <main+0x474>)
 8000c6c:	211c      	movs	r1, #28
 8000c6e:	f005 fbb3 	bl	80063d8 <sniprintf>
	  uartBasic_TX_IT("TIME", messageBody);
 8000c72:	463b      	mov	r3, r7
 8000c74:	4619      	mov	r1, r3
 8000c76:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <main+0x478>)
 8000c78:	f000 fcda 	bl	8001630 <uartBasic_TX_IT>
	  timeSeconds++;
 8000c7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000c80:	3301      	adds	r3, #1
 8000c82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  timeMinutes++;
 8000c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	  long int i = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  while (i < 65535*2)
 8000c96:	e004      	b.n	8000ca2 <main+0x466>
		  i++;
 8000c98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  while (i < 65535*2)
 8000ca2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <main+0x47c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	ddf5      	ble.n	8000c98 <main+0x45c>
  {
 8000cac:	e798      	b.n	8000be0 <main+0x3a4>
 8000cae:	bf00      	nop
 8000cb0:	08006cf8 	.word	0x08006cf8
 8000cb4:	08006cd4 	.word	0x08006cd4
 8000cb8:	0001fffd 	.word	0x0001fffd

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b09a      	sub	sp, #104	; 0x68
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	2248      	movs	r2, #72	; 0x48
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f005 fb7c 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ce2:	f001 f945 	bl	8001f70 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fd10 	bl	800070c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <SystemClock_Config+0xb8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <SystemClock_Config+0xb8>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <SystemClock_Config+0xb8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000d08:	232c      	movs	r3, #44	; 0x2c
 8000d0a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d0c:	2381      	movs	r3, #129	; 0x81
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d20:	2301      	movs	r3, #1
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fc09 	bl	8002544 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d38:	f000 f917 	bl	8000f6a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8000d3c:	236f      	movs	r3, #111	; 0x6f
 8000d3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 ff73 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d68:	f000 f8ff 	bl	8000f6a <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3768      	adds	r7, #104	; 0x68
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	58000400 	.word	0x58000400

08000d78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b092      	sub	sp, #72	; 0x48
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	222c      	movs	r2, #44	; 0x2c
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 fb15 	bl	80063c8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d9e:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <MX_RTC_Init+0x124>)
 8000da0:	4a3f      	ldr	r2, [pc, #252]	; (8000ea0 <MX_RTC_Init+0x128>)
 8000da2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000da4:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <MX_RTC_Init+0x124>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000daa:	4b3c      	ldr	r3, [pc, #240]	; (8000e9c <MX_RTC_Init+0x124>)
 8000dac:	227f      	movs	r2, #127	; 0x7f
 8000dae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000db0:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <MX_RTC_Init+0x124>)
 8000db2:	22ff      	movs	r2, #255	; 0xff
 8000db4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000db6:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <MX_RTC_Init+0x124>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <MX_RTC_Init+0x124>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dc2:	4b36      	ldr	r3, [pc, #216]	; (8000e9c <MX_RTC_Init+0x124>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <MX_RTC_Init+0x124>)
 8000dca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000dd0:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <MX_RTC_Init+0x124>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000dd6:	4b31      	ldr	r3, [pc, #196]	; (8000e9c <MX_RTC_Init+0x124>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ddc:	482f      	ldr	r0, [pc, #188]	; (8000e9c <MX_RTC_Init+0x124>)
 8000dde:	f002 fc0d 	bl	80035fc <HAL_RTC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000de8:	f000 f8bf 	bl	8000f6a <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e02:	2300      	movs	r3, #0
 8000e04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4823      	ldr	r0, [pc, #140]	; (8000e9c <MX_RTC_Init+0x124>)
 8000e10:	f002 fc76 	bl	8003700 <HAL_RTC_SetTime>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000e1a:	f000 f8a6 	bl	8000f6a <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4817      	ldr	r0, [pc, #92]	; (8000e9c <MX_RTC_Init+0x124>)
 8000e40:	f002 fd5c 	bl	80038fc <HAL_RTC_SetDate>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000e4a:	f000 f88e 	bl	8000f6a <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2201      	movs	r2, #1
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_RTC_Init+0x124>)
 8000e86:	f002 fe0d 	bl	8003aa4 <HAL_RTC_SetAlarm_IT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000e90:	f000 f86b 	bl	8000f6a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3748      	adds	r7, #72	; 0x48
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000188 	.word	0x20000188
 8000ea0:	40002800 	.word	0x40002800

08000ea4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000eaa:	4a28      	ldr	r2, [pc, #160]	; (8000f4c <MX_USART2_UART_Init+0xa8>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000eb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8000ec4:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000ec6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000ece:	220c      	movs	r2, #12
 8000ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000eec:	2230      	movs	r2, #48	; 0x30
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f00:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000f02:	f003 f801 	bl	8003f08 <HAL_UART_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000f0c:	f000 f82d 	bl	8000f6a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f10:	2100      	movs	r1, #0
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000f14:	f005 f957 	bl	80061c6 <HAL_UARTEx_SetTxFifoThreshold>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000f1e:	f000 f824 	bl	8000f6a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4808      	ldr	r0, [pc, #32]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000f26:	f005 f98c 	bl	8006242 <HAL_UARTEx_SetRxFifoThreshold>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000f30:	f000 f81b 	bl	8000f6a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <MX_USART2_UART_Init+0xa4>)
 8000f36:	f005 f90e 	bl	8006156 <HAL_UARTEx_DisableFifoMode>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 8000f40:	f000 f813 	bl	8000f6a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200001c0 	.word	0x200001c0
 8000f4c:	40004400 	.word	0x40004400

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fbee 	bl	8000736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	2004      	movs	r0, #4
 8000f5c:	f7ff fbeb 	bl	8000736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	2002      	movs	r0, #2
 8000f62:	f7ff fbe8 	bl	8000736 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6e:	b672      	cpsid	i
}
 8000f70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <Error_Handler+0x8>

08000f74 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8000f7c:	4a03      	ldr	r2, [pc, #12]	; (8000f8c <rtcAlarmControl_init+0x18>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	20000254 	.word	0x20000254

08000f90 <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4604      	mov	r4, r0
 8000f98:	4608      	mov	r0, r1
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4623      	mov	r3, r4
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71bb      	strb	r3, [r7, #6]
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	717b      	strb	r3, [r7, #5]
 8000faa:	4613      	mov	r3, r2
 8000fac:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	4a5a      	ldr	r2, [pc, #360]	; (800111c <setDateTime+0x18c>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	08db      	lsrs	r3, r3, #3
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	b258      	sxtb	r0, r3
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	4b56      	ldr	r3, [pc, #344]	; (800111c <setDateTime+0x18c>)
 8000fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fc6:	08d9      	lsrs	r1, r3, #3
 8000fc8:	460b      	mov	r3, r1
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	4303      	orrs	r3, r0
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 8000fde:	79bb      	ldrb	r3, [r7, #6]
 8000fe0:	4a4e      	ldr	r2, [pc, #312]	; (800111c <setDateTime+0x18c>)
 8000fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe6:	08db      	lsrs	r3, r3, #3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	b258      	sxtb	r0, r3
 8000fee:	79ba      	ldrb	r2, [r7, #6]
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <setDateTime+0x18c>)
 8000ff2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ff6:	08d9      	lsrs	r1, r3, #3
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	b25b      	sxtb	r3, r3
 8001006:	4303      	orrs	r3, r0
 8001008:	b25b      	sxtb	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	4a42      	ldr	r2, [pc, #264]	; (800111c <setDateTime+0x18c>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	08db      	lsrs	r3, r3, #3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	b258      	sxtb	r0, r3
 800101e:	797a      	ldrb	r2, [r7, #5]
 8001020:	4b3e      	ldr	r3, [pc, #248]	; (800111c <setDateTime+0x18c>)
 8001022:	fba3 1302 	umull	r1, r3, r3, r2
 8001026:	08d9      	lsrs	r1, r3, #3
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4303      	orrs	r3, r0
 8001038:	b25b      	sxtb	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 8001042:	793b      	ldrb	r3, [r7, #4]
 8001044:	4a35      	ldr	r2, [pc, #212]	; (800111c <setDateTime+0x18c>)
 8001046:	fba2 2303 	umull	r2, r3, r2, r3
 800104a:	08db      	lsrs	r3, r3, #3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	b258      	sxtb	r0, r3
 8001052:	793a      	ldrb	r2, [r7, #4]
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <setDateTime+0x18c>)
 8001056:	fba3 1302 	umull	r1, r3, r3, r2
 800105a:	08d9      	lsrs	r1, r3, #3
 800105c:	460b      	mov	r3, r1
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	b25b      	sxtb	r3, r3
 800106a:	4303      	orrs	r3, r0
 800106c:	b25b      	sxtb	r3, r3
 800106e:	b2db      	uxtb	r3, r3
 8001070:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 8001072:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001076:	4a29      	ldr	r2, [pc, #164]	; (800111c <setDateTime+0x18c>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	08db      	lsrs	r3, r3, #3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	b258      	sxtb	r0, r3
 8001084:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <setDateTime+0x18c>)
 800108a:	fba3 1302 	umull	r1, r3, r3, r2
 800108e:	08d9      	lsrs	r1, r3, #3
 8001090:	460b      	mov	r3, r1
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	4303      	orrs	r3, r0
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 80010a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <setDateTime+0x18c>)
 80010ac:	fba2 2303 	umull	r2, r3, r2, r3
 80010b0:	08db      	lsrs	r3, r3, #3
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	b258      	sxtb	r0, r3
 80010b8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <setDateTime+0x18c>)
 80010be:	fba3 1302 	umull	r1, r3, r3, r2
 80010c2:	08d9      	lsrs	r1, r3, #3
 80010c4:	460b      	mov	r3, r1
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	4303      	orrs	r3, r0
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <setDateTime+0x190>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f107 011c 	add.w	r1, r7, #28
 80010e2:	2201      	movs	r2, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 fc09 	bl	80038fc <HAL_RTC_SetDate>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80010f4:	e7fe      	b.n	80010f4 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <setDateTime+0x190>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f107 0108 	add.w	r1, r7, #8
 80010fe:	2201      	movs	r2, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fafd 	bl	8003700 <HAL_RTC_SetTime>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001110:	e7fe      	b.n	8001110 <setDateTime+0x180>
  }
}
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}
 800111a:	bf00      	nop
 800111c:	cccccccd 	.word	0xcccccccd
 8001120:	20000254 	.word	0x20000254

08001124 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001146:	4b47      	ldr	r3, [pc, #284]	; (8001264 <getDateTime+0x140>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f107 0114 	add.w	r1, r7, #20
 800114e:	2201      	movs	r2, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fb71 	bl	8003838 <HAL_RTC_GetTime>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 800115c:	b672      	cpsid	i
}
 800115e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001160:	e7fe      	b.n	8001160 <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001162:	4b40      	ldr	r3, [pc, #256]	; (8001264 <getDateTime+0x140>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f107 0110 	add.w	r1, r7, #16
 800116a:	2201      	movs	r2, #1
 800116c:	4618      	mov	r0, r3
 800116e:	f002 fc4b 	bl	8003a08 <HAL_RTC_GetDate>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 800117c:	e7fe      	b.n	800117c <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0b11110000) >> 4) * 10 + (date.Year & 0b00001111);
 800117e:	7cfb      	ldrb	r3, [r7, #19]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	b2db      	uxtb	r3, r3
 8001184:	461a      	mov	r2, r3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4413      	add	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	7cfb      	ldrb	r3, [r7, #19]
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4413      	add	r3, r2
 8001198:	b2da      	uxtb	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0b00010000) >> 4) * 10 + (date.Month & 0b00001111);
 800119e:	7c7b      	ldrb	r3, [r7, #17]
 80011a0:	111b      	asrs	r3, r3, #4
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	7c7b      	ldrb	r3, [r7, #17]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0b00110000) >> 4) * 10 + (date.Date & 0b00001111);
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	111b      	asrs	r3, r3, #4
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	7cbb      	ldrb	r3, [r7, #18]
 80011dc:	f003 030f 	and.w	r3, r3, #15
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0b00110000) >> 4) * 10 + (time.Hours & 0b00001111);
 80011ea:	7d3b      	ldrb	r3, [r7, #20]
 80011ec:	111b      	asrs	r3, r3, #4
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	461a      	mov	r2, r3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	7d3b      	ldrb	r3, [r7, #20]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	b2da      	uxtb	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0b01110000) >> 4) * 10 + (time.Minutes & 0b00001111);
 8001210:	7d7b      	ldrb	r3, [r7, #21]
 8001212:	111b      	asrs	r3, r3, #4
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7d7b      	ldrb	r3, [r7, #21]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4413      	add	r3, r2
 8001230:	b2da      	uxtb	r2, r3
 8001232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001234:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0b01110000) >> 4) * 10 + (time.Seconds & 0b00001111);
 8001236:	7dbb      	ldrb	r3, [r7, #22]
 8001238:	111b      	asrs	r3, r3, #4
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	b2db      	uxtb	r3, r3
 8001242:	461a      	mov	r2, r3
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	7dbb      	ldrb	r3, [r7, #22]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b2da      	uxtb	r2, r3
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125a:	701a      	strb	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000254 	.word	0x20000254

08001268 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b08f      	sub	sp, #60	; 0x3c
 800126c:	af00      	add	r7, sp, #0
 800126e:	4604      	mov	r4, r0
 8001270:	4608      	mov	r0, r1
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	4603      	mov	r3, r0
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	460b      	mov	r3, r1
 8001280:	717b      	strb	r3, [r7, #5]
 8001282:	4613      	mov	r3, r2
 8001284:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	222c      	movs	r2, #44	; 0x2c
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f005 f89a 	bl	80063c8 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4a40      	ldr	r2, [pc, #256]	; (8001398 <setAlarm_A+0x130>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	08db      	lsrs	r3, r3, #3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	b258      	sxtb	r0, r3
 80012a4:	79fa      	ldrb	r2, [r7, #7]
 80012a6:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <setAlarm_A+0x130>)
 80012a8:	fba3 1302 	umull	r1, r3, r3, r2
 80012ac:	08d9      	lsrs	r1, r3, #3
 80012ae:	460b      	mov	r3, r1
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4303      	orrs	r3, r0
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	4a33      	ldr	r2, [pc, #204]	; (8001398 <setAlarm_A+0x130>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	08db      	lsrs	r3, r3, #3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	011b      	lsls	r3, r3, #4
 80012d4:	b258      	sxtb	r0, r3
 80012d6:	79ba      	ldrb	r2, [r7, #6]
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <setAlarm_A+0x130>)
 80012da:	fba3 1302 	umull	r1, r3, r3, r2
 80012de:	08d9      	lsrs	r1, r3, #3
 80012e0:	460b      	mov	r3, r1
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	4303      	orrs	r3, r0
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	4a27      	ldr	r2, [pc, #156]	; (8001398 <setAlarm_A+0x130>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	08db      	lsrs	r3, r3, #3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	b258      	sxtb	r0, r3
 8001306:	797a      	ldrb	r2, [r7, #5]
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <setAlarm_A+0x130>)
 800130a:	fba3 1302 	umull	r1, r3, r3, r2
 800130e:	08d9      	lsrs	r1, r3, #3
 8001310:	460b      	mov	r3, r1
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	440b      	add	r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	b25b      	sxtb	r3, r3
 800131e:	4303      	orrs	r3, r0
 8001320:	b25b      	sxtb	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8001326:	793b      	ldrb	r3, [r7, #4]
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <setAlarm_A+0x130>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	b258      	sxtb	r0, r3
 8001336:	793a      	ldrb	r2, [r7, #4]
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <setAlarm_A+0x130>)
 800133a:	fba3 1302 	umull	r1, r3, r3, r2
 800133e:	08d9      	lsrs	r1, r3, #3
 8001340:	460b      	mov	r3, r1
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	b25b      	sxtb	r3, r3
 800134e:	4303      	orrs	r3, r0
 8001350:	b25b      	sxtb	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <setAlarm_A+0x134>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	2201      	movs	r2, #1
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fb90 	bl	8003aa4 <HAL_RTC_SetAlarm_IT>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d002      	beq.n	8001390 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 800138a:	b672      	cpsid	i
}
 800138c:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 800138e:	e7fe      	b.n	800138e <setAlarm_A+0x126>
  }
}
 8001390:	bf00      	nop
 8001392:	373c      	adds	r7, #60	; 0x3c
 8001394:	46bd      	mov	sp, r7
 8001396:	bd90      	pop	{r4, r7, pc}
 8001398:	cccccccd 	.word	0xcccccccd
 800139c:	20000254 	.word	0x20000254

080013a0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <LL_AHB2_GRP1_EnableClock>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e4:	68fb      	ldr	r3, [r7, #12]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001414:	68fb      	ldr	r3, [r7, #12]
}
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b090      	sub	sp, #64	; 0x40
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	2238      	movs	r2, #56	; 0x38
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f004 ffc3 	bl	80063c8 <memset>
  if(hrtc->Instance==RTC)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_RTC_MspInit+0x64>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d11d      	bne.n	8001488 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800144c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001450:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4618      	mov	r0, r3
 800145e:	f001 ffb3 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001468:	f7ff fd7f 	bl	8000f6a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800146c:	f7ff ff98 	bl	80013a0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001470:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001474:	f7ff ffbc 	bl	80013f0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	2100      	movs	r1, #0
 800147c:	202a      	movs	r0, #42	; 0x2a
 800147e:	f000 fb26 	bl	8001ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001482:	202a      	movs	r0, #42	; 0x2a
 8001484:	f000 fb3d 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001488:	bf00      	nop
 800148a:	3740      	adds	r7, #64	; 0x40
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40002800 	.word	0x40002800

08001494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b096      	sub	sp, #88	; 0x58
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2238      	movs	r2, #56	; 0x38
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f004 ff87 	bl	80063c8 <memset>
  if(huart->Instance==USART2)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a1b      	ldr	r2, [pc, #108]	; (800152c <HAL_UART_MspInit+0x98>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d12e      	bne.n	8001522 <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014c8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80014cc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 ff78 	bl	80033c8 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014de:	f7ff fd44 	bl	8000f6a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014e6:	f7ff ff83 	bl	80013f0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff ff68 	bl	80013c0 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80014f0:	230c      	movs	r3, #12
 80014f2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001500:	2307      	movs	r3, #7
 8001502:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150e:	f000 fbcf 	bl	8001cb0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	2025      	movs	r0, #37	; 0x25
 8001518:	f000 fad9 	bl	8001ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800151c:	2025      	movs	r0, #37	; 0x25
 800151e:	f000 faf0 	bl	8001b02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001522:	bf00      	nop
 8001524:	3758      	adds	r7, #88	; 0x58
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40004400 	.word	0x40004400

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001576:	f000 f9b7 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <USART2_IRQHandler+0x10>)
 8001586:	f002 fdef 	bl	8004168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001c0 	.word	0x200001c0

08001594 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <RTC_Alarm_IRQHandler+0x10>)
 800159a:	f002 fb8f 	bl	8003cbc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000188 	.word	0x20000188

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f004 febe 	bl	8006358 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20008000 	.word	0x20008000
 8001608:	00000400 	.word	0x00000400
 800160c:	20000258 	.word	0x20000258
 8001610:	200002c0 	.word	0x200002c0

08001614 <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 800161c:	4a03      	ldr	r2, [pc, #12]	; (800162c <uartBasic_init+0x18>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000260 	.word	0x20000260

08001630 <uartBasic_TX_IT>:
/*
 *
 */
bool uartBasic_TX_IT(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <uartBasic_TX_IT+0x3c>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f083 0301 	eor.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <uartBasic_TX_IT+0x32>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <uartBasic_TX_IT+0x40>)
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f89a 	bl	8001788 <composeMessage>
		_txBuffer_full = true;
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <uartBasic_TX_IT+0x3c>)
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_IT();
 800165a:	f000 f865 	bl	8001728 <_txMessage_IT>

		// report successfully queued
		return true;
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <uartBasic_TX_IT+0x34>
	}

	else
	{
		// return full buffer
		return false;
 8001662:	2300      	movs	r3, #0
	}
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200002a4 	.word	0x200002a4
 8001670:	20000264 	.word	0x20000264

08001674 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <uartBasic_RX_IT+0x24>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f083 0301 	eor.w	r3, r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 8001688:	f000 f866 	bl	8001758 <_rxMessage_IT>

		// return success
		return true;
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 8001690:	2300      	movs	r3, #0
	}
}
 8001692:	4618      	mov	r0, r3
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200002a5 	.word	0x200002a5

0800169c <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <uartBasic_get_RX+0x4c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d015      	beq.n	80016dc <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <uartBasic_get_RX+0x50>)
 80016b2:	f107 0408 	add.w	r4, r7, #8
 80016b6:	461d      	mov	r5, r3
 80016b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <uartBasic_get_RX+0x4c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	461a      	mov	r2, r3
 80016d0:	6839      	ldr	r1, [r7, #0]
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f86e 	bl	80017b4 <decomposeMessage>

		// report successfully dequeued
		return true;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 80016dc:	2300      	movs	r3, #0
	}
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3728      	adds	r7, #40	; 0x28
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bdb0      	pop	{r4, r5, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200002a5 	.word	0x200002a5
 80016ec:	20000284 	.word	0x20000284

080016f0 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <uartBasic_RX_Complete_ISR+0x14>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200002a5 	.word	0x200002a5

08001708 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <uartBasic_TX_Complete_ISR+0x14>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200002a4 	.word	0x200002a4

08001720 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 8001724:	e7fe      	b.n	8001724 <uartBasic_Error_ISR+0x4>
	...

08001728 <_txMessage_IT>:

/*
 *
 */
void _txMessage_IT(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit_IT(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <_txMessage_IT+0x24>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2220      	movs	r2, #32
 8001732:	4907      	ldr	r1, [pc, #28]	; (8001750 <_txMessage_IT+0x28>)
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fc37 	bl	8003fa8 <HAL_UART_Transmit_IT>
 800173a:	4603      	mov	r3, r0
 800173c:	2b01      	cmp	r3, #1
 800173e:	d102      	bne.n	8001746 <_txMessage_IT+0x1e>
		_txError = true;
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <_txMessage_IT+0x2c>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000260 	.word	0x20000260
 8001750:	20000264 	.word	0x20000264
 8001754:	2000025c 	.word	0x2000025c

08001758 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <_rxMessage_IT+0x24>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2220      	movs	r2, #32
 8001762:	4907      	ldr	r1, [pc, #28]	; (8001780 <_rxMessage_IT+0x28>)
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fcb3 	bl	80040d0 <HAL_UART_Receive_IT>
 800176a:	4603      	mov	r3, r0
 800176c:	2b01      	cmp	r3, #1
 800176e:	d102      	bne.n	8001776 <_rxMessage_IT+0x1e>
		_rxError = true;
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <_rxMessage_IT+0x2c>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000260 	.word	0x20000260
 8001780:	20000284 	.word	0x20000284
 8001784:	2000025d 	.word	0x2000025d

08001788 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	221c      	movs	r2, #28
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 fe00 	bl	80063ac <memcpy>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	221c      	movs	r2, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	68b8      	ldr	r0, [r7, #8]
 80017d4:	f004 fdea 	bl	80063ac <memcpy>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017e4:	f7fe fe9e 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <LoopForever+0x6>)
  ldr r1, =_edata
 80017ea:	490d      	ldr	r1, [pc, #52]	; (8001820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <LoopForever+0xe>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001800:	4c0a      	ldr	r4, [pc, #40]	; (800182c <LoopForever+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800180e:	f004 fda9 	bl	8006364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001812:	f7ff f813 	bl	800083c <main>

08001816 <LoopForever>:

LoopForever:
    b LoopForever
 8001816:	e7fe      	b.n	8001816 <LoopForever>
  ldr   r0, =_estack
 8001818:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001824:	08006e4c 	.word	0x08006e4c
  ldr r2, =_sbss
 8001828:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800182c:	200002bc 	.word	0x200002bc

08001830 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183e:	2003      	movs	r0, #3
 8001840:	f000 f93a 	bl	8001ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001844:	f001 fbe2 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8001848:	4603      	mov	r3, r0
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_Init+0x3c>)
 800184c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f810 	bl	8001874 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001860:	f7ff fdde 	bl	8001420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	79fb      	ldrb	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_InitTick+0x6c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d024      	beq.n	80018d2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001888:	f001 fbc0 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800188c:	4602      	mov	r2, r0
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_InitTick+0x6c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4619      	mov	r1, r3
 8001894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001898:	fbb3 f3f1 	udiv	r3, r3, r1
 800189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f93c 	bl	8001b1e <HAL_SYSTICK_Config>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10f      	bne.n	80018cc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	d809      	bhi.n	80018c6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b2:	2200      	movs	r2, #0
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018ba:	f000 f908 	bl	8001ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_InitTick+0x70>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e004      	b.n	80018d6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e001      	b.n	80018d6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000008 	.word	0x20000008
 8001908:	200002a8 	.word	0x200002a8

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	200002a8 	.word	0x200002a8

08001920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800193c:	4013      	ands	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001948:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001952:	4a04      	ldr	r2, [pc, #16]	; (8001964 <__NVIC_SetPriorityGrouping+0x44>)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	60d3      	str	r3, [r2, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <__NVIC_GetPriorityGrouping+0x18>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	f003 0307 	and.w	r3, r3, #7
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db0b      	blt.n	80019ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	4906      	ldr	r1, [pc, #24]	; (80019b8 <__NVIC_EnableIRQ+0x34>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	2001      	movs	r0, #1
 80019a6:	fa00 f202 	lsl.w	r2, r0, r2
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a84:	d301      	bcc.n	8001a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00f      	b.n	8001aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <SysTick_Config+0x40>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a92:	210f      	movs	r1, #15
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a98:	f7ff ff90 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <SysTick_Config+0x40>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <SysTick_Config+0x40>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	e000e010 	.word	0xe000e010

08001ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ff2d 	bl	8001920 <__NVIC_SetPriorityGrouping>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
 8001ada:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff44 	bl	8001968 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff92 	bl	8001a10 <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff61 	bl	80019bc <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff37 	bl	8001984 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa4 	bl	8001a74 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e04f      	b.n	8001be8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d008      	beq.n	8001b66 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2204      	movs	r2, #4
 8001b58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e040      	b.n	8001be8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 020e 	bic.w	r2, r2, #14
 8001b74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f003 021c 	and.w	r2, r3, #28
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bb2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00c      	beq.n	8001bd6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bd4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d005      	beq.n	8001c16 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e047      	b.n	8001ca6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 020e 	bic.w	r2, r2, #14
 8001c24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0201 	bic.w	r2, r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f003 021c 	and.w	r2, r3, #28
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c62:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00c      	beq.n	8001c86 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c84:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	4798      	blx	r3
    }
  }
  return status;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	e140      	b.n	8001f42 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8132 	beq.w	8001f3c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d005      	beq.n	8001cf0 <HAL_GPIO_Init+0x40>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d130      	bne.n	8001d52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d26:	2201      	movs	r2, #1
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	f003 0201 	and.w	r2, r3, #1
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d017      	beq.n	8001d8e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d123      	bne.n	8001de2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	6939      	ldr	r1, [r7, #16]
 8001dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0203 	and.w	r2, r3, #3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 808c 	beq.w	8001f3c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e24:	4a4e      	ldr	r2, [pc, #312]	; (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e4e:	d00d      	beq.n	8001e6c <HAL_GPIO_Init+0x1bc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a44      	ldr	r2, [pc, #272]	; (8001f64 <HAL_GPIO_Init+0x2b4>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d007      	beq.n	8001e68 <HAL_GPIO_Init+0x1b8>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a43      	ldr	r2, [pc, #268]	; (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d101      	bne.n	8001e64 <HAL_GPIO_Init+0x1b4>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e004      	b.n	8001e6e <HAL_GPIO_Init+0x1be>
 8001e64:	2307      	movs	r3, #7
 8001e66:	e002      	b.n	8001e6e <HAL_GPIO_Init+0x1be>
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <HAL_GPIO_Init+0x1be>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	f002 0203 	and.w	r2, r2, #3
 8001e74:	0092      	lsls	r2, r2, #2
 8001e76:	4093      	lsls	r3, r2
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e7e:	4938      	ldr	r1, [pc, #224]	; (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e8c:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eb0:	4a2e      	ldr	r2, [pc, #184]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eda:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001ee0:	4b22      	ldr	r3, [pc, #136]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001f06:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f14:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f aeb7 	bne.w	8001cc0 <HAL_GPIO_Init+0x10>
  }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	48000400 	.word	0x48000400
 8001f68:	48000800 	.word	0x48000800
 8001f6c:	58000800 	.word	0x58000800

08001f70 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	58000400 	.word	0x58000400

08001f8c <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001f90:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <LL_PWR_EnableBootC2+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <LL_PWR_EnableBootC2+0x18>)
 8001f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9a:	60d3      	str	r3, [r2, #12]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	58000400 	.word	0x58000400

08001fa8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_PWREx_GetVoltageRange+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	58000400 	.word	0x58000400

08001fc0 <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8001fc8:	f7ff ffe0 	bl	8001f8c <LL_PWR_EnableBootC2>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe4:	d101      	bne.n	8001fea <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	58000400 	.word	0x58000400

08001ff8 <LL_RCC_HSE_EnableTcxo>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <LL_RCC_HSE_DisableTcxo>:
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002022:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002042:	d101      	bne.n	8002048 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <LL_RCC_HSE_Enable>:
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <LL_RCC_HSE_Disable>:
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <LL_RCC_HSE_IsReady>:
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800209c:	d101      	bne.n	80020a2 <LL_RCC_HSE_IsReady+0x18>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_RCC_HSE_IsReady+0x1a>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <LL_RCC_HSI_Enable>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <LL_RCC_HSI_Disable>:
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <LL_RCC_HSI_IsReady>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80020e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f6:	d101      	bne.n	80020fc <LL_RCC_HSI_IsReady+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_RCC_HSI_IsReady+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	061b      	lsls	r3, r3, #24
 800211c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <LL_RCC_LSE_IsReady>:
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d101      	bne.n	8002146 <LL_RCC_LSE_IsReady+0x18>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <LL_RCC_LSE_IsReady+0x1a>
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <LL_RCC_LSI_Enable>:
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <LL_RCC_LSI_Disable>:
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <LL_RCC_LSI_IsReady>:
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d101      	bne.n	80021a8 <LL_RCC_LSI_IsReady+0x18>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <LL_RCC_LSI_IsReady+0x1a>
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <LL_RCC_MSI_Enable>:
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6013      	str	r3, [r2, #0]
}
 80021c6:	bf00      	nop
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <LL_RCC_MSI_Disable>:
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80021d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6013      	str	r3, [r2, #0]
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <LL_RCC_MSI_IsReady>:
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d101      	bne.n	8002200 <LL_RCC_MSI_IsReady+0x16>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <LL_RCC_MSI_IsReady+0x18>
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b08      	cmp	r3, #8
 800221a:	d101      	bne.n	8002220 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <LL_RCC_MSI_GetRange>:
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002248:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <LL_RCC_SetSysClkSource>:
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <LL_RCC_GetSysClkSource>:
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <LL_RCC_SetAHBPrescaler>:
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80022ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <LL_RCC_SetAHB3Prescaler>:
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002318:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800231c:	f023 020f 	bic.w	r2, r3, #15
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <LL_RCC_SetAPB1Prescaler>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800234a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr

0800235e <LL_RCC_SetAPB2Prescaler>:
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4313      	orrs	r3, r2
 8002378:	608b      	str	r3, [r1, #8]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <LL_RCC_GetAHBPrescaler>:
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr

0800239a <LL_RCC_GetAHB3Prescaler>:
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800239e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <LL_RCC_GetAPB1Prescaler>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_GetAPB2Prescaler>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800240a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800242a:	d101      	bne.n	8002430 <LL_RCC_PLL_IsReady+0x18>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <LL_RCC_PLL_IsReady+0x1a>
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr

0800243a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr

08002452 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002476:	4618      	mov	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0303 	and.w	r3, r3, #3
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a6:	d101      	bne.n	80024ac <LL_RCC_IsActiveFlag_HPRE+0x18>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ca:	d101      	bne.n	80024d0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ee:	d101      	bne.n	80024f4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002510:	d101      	bne.n	8002516 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800252e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002532:	d101      	bne.n	8002538 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
	...

08002544 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e36f      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	f7ff fea6 	bl	80022a6 <LL_RCC_GetSysClkSource>
 800255a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255c:	f7ff ff8f 	bl	800247e <LL_RCC_PLL_GetMainSource>
 8002560:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80c4 	beq.w	80026f8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <HAL_RCC_OscConfig+0x3e>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d176      	bne.n	800266a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d173      	bne.n	800266a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e353      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_OscConfig+0x68>
 80025a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025aa:	e006      	b.n	80025ba <HAL_RCC_OscConfig+0x76>
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d222      	bcs.n	8002604 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fd5a 	bl	800307c <RCC_SetFlashLatencyFromMSIRange>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e331      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025dc:	f043 0308 	orr.w	r3, r3, #8
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fe2b 	bl	8002258 <LL_RCC_MSI_SetCalibTrimming>
 8002602:	e021      	b.n	8002648 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fe12 	bl	8002258 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fd1f 	bl	800307c <RCC_SetFlashLatencyFromMSIRange>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e2f6      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002648:	f000 fce0 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800264c:	4603      	mov	r3, r0
 800264e:	4aa7      	ldr	r2, [pc, #668]	; (80028ec <HAL_RCC_OscConfig+0x3a8>)
 8002650:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002652:	4ba7      	ldr	r3, [pc, #668]	; (80028f0 <HAL_RCC_OscConfig+0x3ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f90c 	bl	8001874 <HAL_InitTick>
 800265c:	4603      	mov	r3, r0
 800265e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d047      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002666:	7cfb      	ldrb	r3, [r7, #19]
 8002668:	e2e5      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02c      	beq.n	80026cc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002672:	f7ff fd9e 	bl	80021b2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002676:	f7ff f949 	bl	800190c <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800267e:	f7ff f945 	bl	800190c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e2d2      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002690:	f7ff fdab 	bl	80021ea <LL_RCC_MSI_IsReady>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d0f1      	beq.n	800267e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800269a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a4:	f043 0308 	orr.w	r3, r3, #8
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fdc7 	bl	8002258 <LL_RCC_MSI_SetCalibTrimming>
 80026ca:	e015      	b.n	80026f8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026cc:	f7ff fd7f 	bl	80021ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026d0:	f7ff f91c 	bl	800190c <HAL_GetTick>
 80026d4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026d8:	f7ff f918 	bl	800190c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e2a5      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80026ea:	f7ff fd7e 	bl	80021ea <LL_RCC_MSI_IsReady>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f1      	bne.n	80026d8 <HAL_RCC_OscConfig+0x194>
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80026f6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d058      	beq.n	80027b6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b08      	cmp	r3, #8
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x1d2>
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b0c      	cmp	r3, #12
 800270e:	d108      	bne.n	8002722 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b03      	cmp	r3, #3
 8002714:	d105      	bne.n	8002722 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d14b      	bne.n	80027b6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e289      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d102      	bne.n	8002748 <HAL_RCC_OscConfig+0x204>
 8002742:	f7ff fc86 	bl	8002052 <LL_RCC_HSE_Enable>
 8002746:	e00d      	b.n	8002764 <HAL_RCC_OscConfig+0x220>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002750:	d104      	bne.n	800275c <HAL_RCC_OscConfig+0x218>
 8002752:	f7ff fc51 	bl	8001ff8 <LL_RCC_HSE_EnableTcxo>
 8002756:	f7ff fc7c 	bl	8002052 <LL_RCC_HSE_Enable>
 800275a:	e003      	b.n	8002764 <HAL_RCC_OscConfig+0x220>
 800275c:	f7ff fc87 	bl	800206e <LL_RCC_HSE_Disable>
 8002760:	f7ff fc58 	bl	8002014 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d012      	beq.n	8002792 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f8ce 	bl	800190c <HAL_GetTick>
 8002770:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f8ca 	bl	800190c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e257      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002786:	f7ff fc80 	bl	800208a <LL_RCC_HSE_IsReady>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f1      	beq.n	8002774 <HAL_RCC_OscConfig+0x230>
 8002790:	e011      	b.n	80027b6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7ff f8bb 	bl	800190c <HAL_GetTick>
 8002796:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279a:	f7ff f8b7 	bl	800190c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b64      	cmp	r3, #100	; 0x64
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e244      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80027ac:	f7ff fc6d 	bl	800208a <LL_RCC_HSE_IsReady>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f1      	bne.n	800279a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d046      	beq.n	8002850 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_OscConfig+0x290>
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d10e      	bne.n	80027ec <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d10b      	bne.n	80027ec <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e22a      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fc8e 	bl	8002106 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027ea:	e031      	b.n	8002850 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	f7ff fc5a 	bl	80020ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff f888 	bl	800190c <HAL_GetTick>
 80027fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff f884 	bl	800190c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e211      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002812:	f7ff fc67 	bl	80020e4 <LL_RCC_HSI_IsReady>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f1      	beq.n	8002800 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fc70 	bl	8002106 <LL_RCC_HSI_SetCalibTrimming>
 8002826:	e013      	b.n	8002850 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002828:	f7ff fc4e 	bl	80020c8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7ff f86e 	bl	800190c <HAL_GetTick>
 8002830:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002834:	f7ff f86a 	bl	800190c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e1f7      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002846:	f7ff fc4d 	bl	80020e4 <LL_RCC_HSI_IsReady>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f1      	bne.n	8002834 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d06e      	beq.n	800293a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d056      	beq.n	8002912 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	429a      	cmp	r2, r3
 800287a:	d031      	beq.n	80028e0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800288c:	2b00      	cmp	r3, #0
 800288e:	d101      	bne.n	8002894 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e1d0      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d013      	beq.n	80028c6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800289e:	f7ff fc67 	bl	8002170 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a2:	f7ff f833 	bl	800190c <HAL_GetTick>
 80028a6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028aa:	f7ff f82f 	bl	800190c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b11      	cmp	r3, #17
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1bc      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80028bc:	f7ff fc68 	bl	8002190 <LL_RCC_LSI_IsReady>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f1      	bne.n	80028aa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	f023 0210 	bic.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e0:	f7ff fc36 	bl	8002150 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e4:	f7ff f812 	bl	800190c <HAL_GetTick>
 80028e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80028ea:	e00c      	b.n	8002906 <HAL_RCC_OscConfig+0x3c2>
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f4:	f7ff f80a 	bl	800190c <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b11      	cmp	r3, #17
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e197      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002906:	f7ff fc43 	bl	8002190 <LL_RCC_LSI_IsReady>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f1      	beq.n	80028f4 <HAL_RCC_OscConfig+0x3b0>
 8002910:	e013      	b.n	800293a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002912:	f7ff fc2d 	bl	8002170 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002916:	f7fe fff9 	bl	800190c <HAL_GetTick>
 800291a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291e:	f7fe fff5 	bl	800190c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b11      	cmp	r3, #17
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e182      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002930:	f7ff fc2e 	bl	8002190 <LL_RCC_LSI_IsReady>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f1      	bne.n	800291e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80d8 	beq.w	8002af8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002948:	f7ff fb44 	bl	8001fd4 <LL_PWR_IsEnabledBkUpAccess>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d113      	bne.n	800297a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002952:	f7ff fb0d 	bl	8001f70 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7fe ffd9 	bl	800190c <HAL_GetTick>
 800295a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295e:	f7fe ffd5 	bl	800190c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e162      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002970:	f7ff fb30 	bl	8001fd4 <LL_PWR_IsEnabledBkUpAccess>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f1      	beq.n	800295e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d07b      	beq.n	8002a7a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b85      	cmp	r3, #133	; 0x85
 8002988:	d003      	beq.n	8002992 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7fe ffb1 	bl	800190c <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe ffa3 	bl	800190c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e12e      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80029d8:	f7ff fba9 	bl	800212e <LL_RCC_LSE_IsReady>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b81      	cmp	r3, #129	; 0x81
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	2b85      	cmp	r3, #133	; 0x85
 80029f0:	d121      	bne.n	8002a36 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f2:	f7fe ff8b 	bl	800190c <HAL_GetTick>
 80029f6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a0e:	f7fe ff7d 	bl	800190c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e108      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0ec      	beq.n	8002a0e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002a34:	e060      	b.n	8002af8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a36:	f7fe ff69 	bl	800190c <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe ff5b 	bl	800190c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0e6      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ec      	bne.n	8002a52 <HAL_RCC_OscConfig+0x50e>
 8002a78:	e03e      	b.n	8002af8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe ff47 	bl	800190c <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe ff39 	bl	800190c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e0c4      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1ec      	bne.n	8002a96 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe ff26 	bl	800190c <HAL_GetTick>
 8002ac0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe ff18 	bl	800190c <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e0a3      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002aee:	f7ff fb1e 	bl	800212e <LL_RCC_LSE_IsReady>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ef      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8099 	beq.w	8002c34 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	d06c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d14b      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b10:	f7ff fc74 	bl	80023fc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe fefa 	bl	800190c <HAL_GetTick>
 8002b18:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fef6 	bl	800190c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b0a      	cmp	r3, #10
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e083      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002b2e:	f7ff fc73 	bl	8002418 <LL_RCC_PLL_IsReady>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f1      	bne.n	8002b1c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x6fc>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b4a:	4311      	orrs	r1, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b50:	0212      	lsls	r2, r2, #8
 8002b52:	4311      	orrs	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b58:	4311      	orrs	r1, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002b64:	430a      	orrs	r2, r1
 8002b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6e:	f7ff fc37 	bl	80023e0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b80:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7fe fec3 	bl	800190c <HAL_GetTick>
 8002b86:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe febf 	bl	800190c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b0a      	cmp	r3, #10
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e04c      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002b9c:	f7ff fc3c 	bl	8002418 <LL_RCC_PLL_IsReady>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f1      	beq.n	8002b8a <HAL_RCC_OscConfig+0x646>
 8002ba6:	e045      	b.n	8002c34 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	f7ff fc28 	bl	80023fc <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7fe feae 	bl	800190c <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7fe feaa 	bl	800190c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b0a      	cmp	r3, #10
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e037      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bc6:	f7ff fc27 	bl	8002418 <LL_RCC_PLL_IsReady>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f1      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <HAL_RCC_OscConfig+0x700>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
 8002be0:	e028      	b.n	8002c34 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e023      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d115      	bne.n	8002c30 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d10e      	bne.n	8002c30 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	11c1808c 	.word	0x11c1808c
 8002c44:	eefefffc 	.word	0xeefefffc

08002c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e12c      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b98      	ldr	r3, [pc, #608]	; (8002ec0 <HAL_RCC_ClockConfig+0x278>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d91b      	bls.n	8002ca2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b95      	ldr	r3, [pc, #596]	; (8002ec0 <HAL_RCC_ClockConfig+0x278>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4993      	ldr	r1, [pc, #588]	; (8002ec0 <HAL_RCC_ClockConfig+0x278>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c7a:	f7fe fe47 	bl	800190c <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c82:	f7fe fe43 	bl	800190c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e110      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c94:	4b8a      	ldr	r3, [pc, #552]	; (8002ec0 <HAL_RCC_ClockConfig+0x278>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d1ef      	bne.n	8002c82 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d016      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fb02 	bl	80022bc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fe28 	bl	800190c <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cc0:	f7fe fe24 	bl	800190c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0f1      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002cd2:	f7ff fbdf 	bl	8002494 <LL_RCC_IsActiveFlag_HPRE>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f1      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d016      	beq.n	8002d16 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff faf8 	bl	80022e2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fe0b 	bl	800190c <HAL_GetTick>
 8002cf6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002cfa:	f7fe fe07 	bl	800190c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e0d4      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002d0c:	f7ff fbd3 	bl	80024b6 <LL_RCC_IsActiveFlag_C2HPRE>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f1      	beq.n	8002cfa <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff faf0 	bl	800230c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fdee 	bl	800190c <HAL_GetTick>
 8002d30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d34:	f7fe fdea 	bl	800190c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0b7      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002d46:	f7ff fbc8 	bl	80024da <LL_RCC_IsActiveFlag_SHDHPRE>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f1      	beq.n	8002d34 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d016      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fae9 	bl	8002338 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d66:	f7fe fdd1 	bl	800190c <HAL_GetTick>
 8002d6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d6e:	f7fe fdcd 	bl	800190c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e09a      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002d80:	f7ff fbbd 	bl	80024fe <LL_RCC_IsActiveFlag_PPRE1>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f1      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d017      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fade 	bl	800235e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002da2:	f7fe fdb3 	bl	800190c <HAL_GetTick>
 8002da6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002daa:	f7fe fdaf 	bl	800190c <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e07c      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002dbc:	f7ff fbb0 	bl	8002520 <LL_RCC_IsActiveFlag_PPRE2>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f1      	beq.n	8002daa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d043      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002dda:	f7ff f956 	bl	800208a <LL_RCC_HSE_IsReady>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11e      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e066      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002df0:	f7ff fb12 	bl	8002418 <LL_RCC_PLL_IsReady>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d113      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e05b      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002e06:	f7ff f9f0 	bl	80021ea <LL_RCC_MSI_IsReady>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d108      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e050      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002e14:	f7ff f966 	bl	80020e4 <LL_RCC_HSI_IsReady>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e049      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fa2a 	bl	8002280 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e2c:	f7fe fd6e 	bl	800190c <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e34:	f7fe fd6a 	bl	800190c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e035      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	f7ff fa2c 	bl	80022a6 <LL_RCC_GetSysClkSource>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d1ec      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e5a:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_RCC_ClockConfig+0x278>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d21b      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_RCC_ClockConfig+0x278>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f023 0207 	bic.w	r2, r3, #7
 8002e70:	4913      	ldr	r1, [pc, #76]	; (8002ec0 <HAL_RCC_ClockConfig+0x278>)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fd48 	bl	800190c <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e80:	f7fe fd44 	bl	800190c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e011      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b0b      	ldr	r3, [pc, #44]	; (8002ec0 <HAL_RCC_ClockConfig+0x278>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d1ef      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ea0:	f000 f8b4 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <HAL_RCC_ClockConfig+0x27c>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <HAL_RCC_ClockConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fce0 	bl	8001874 <HAL_InitTick>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	58004000 	.word	0x58004000
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	20000004 	.word	0x20000004

08002ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eda:	f7ff f9e4 	bl	80022a6 <LL_RCC_GetSysClkSource>
 8002ede:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee0:	f7ff facd 	bl	800247e <LL_RCC_PLL_GetMainSource>
 8002ee4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x2c>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d139      	bne.n	8002f66 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d136      	bne.n	8002f66 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ef8:	f7ff f987 	bl	800220a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d115      	bne.n	8002f2e <HAL_RCC_GetSysClockFreq+0x62>
 8002f02:	f7ff f982 	bl	800220a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_GetSysClockFreq+0x4e>
 8002f0c:	f7ff f98d 	bl	800222a <LL_RCC_MSI_GetRange>
 8002f10:	4603      	mov	r3, r0
 8002f12:	0a1b      	lsrs	r3, r3, #8
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	e005      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x5a>
 8002f1a:	f7ff f991 	bl	8002240 <LL_RCC_MSI_GetRangeAfterStandby>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	4a36      	ldr	r2, [pc, #216]	; (8003000 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x8c>
 8002f2e:	f7ff f96c 	bl	800220a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x7a>
 8002f38:	f7ff f977 	bl	800222a <LL_RCC_MSI_GetRange>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	e005      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x86>
 8002f46:	f7ff f97b 	bl	8002240 <LL_RCC_MSI_GetRangeAfterStandby>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <HAL_RCC_GetSysClockFreq+0x134>)
 8002f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f58:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d115      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f64:	e012      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d102      	bne.n	8002f72 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e00c      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d109      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002f78:	f7ff f85a 	bl	8002030 <LL_RCC_HSE_IsEnabledDiv2>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002f82:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCC_GetSysClockFreq+0x138>)
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e001      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002f88:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f8a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	f7ff f98b 	bl	80022a6 <LL_RCC_GetSysClkSource>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b0c      	cmp	r3, #12
 8002f94:	d12f      	bne.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002f96:	f7ff fa72 	bl	800247e <LL_RCC_PLL_GetMainSource>
 8002f9a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0xde>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d003      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xe4>
 8002fa8:	e00d      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fac:	60fb      	str	r3, [r7, #12]
        break;
 8002fae:	e00d      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002fb0:	f7ff f83e 	bl	8002030 <LL_RCC_HSE_IsEnabledDiv2>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fbc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002fbe:	e005      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fc2:	60fb      	str	r3, [r7, #12]
        break;
 8002fc4:	e002      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	60fb      	str	r3, [r7, #12]
        break;
 8002fca:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002fcc:	f7ff fa35 	bl	800243a <LL_RCC_PLL_GetN>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	fb03 f402 	mul.w	r4, r3, r2
 8002fd8:	f7ff fa46 	bl	8002468 <LL_RCC_PLL_GetDivider>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	fbb4 f4f3 	udiv	r4, r4, r3
 8002fe6:	f7ff fa34 	bl	8002452 <LL_RCC_PLL_GetR>
 8002fea:	4603      	mov	r3, r0
 8002fec:	0f5b      	lsrs	r3, r3, #29
 8002fee:	3301      	adds	r3, #1
 8002ff0:	fbb4 f3f3 	udiv	r3, r4, r3
 8002ff4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002ff6:	697b      	ldr	r3, [r7, #20]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	08006da0 	.word	0x08006da0
 8003004:	00f42400 	.word	0x00f42400
 8003008:	01e84800 	.word	0x01e84800

0800300c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b598      	push	{r3, r4, r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003010:	f7ff ff5c 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8003014:	4604      	mov	r4, r0
 8003016:	f7ff f9b5 	bl	8002384 <LL_RCC_GetAHBPrescaler>
 800301a:	4603      	mov	r3, r0
 800301c:	091b      	lsrs	r3, r3, #4
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	4a03      	ldr	r2, [pc, #12]	; (8003030 <HAL_RCC_GetHCLKFreq+0x24>)
 8003024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003028:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd98      	pop	{r3, r4, r7, pc}
 8003030:	08006d40 	.word	0x08006d40

08003034 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003034:	b598      	push	{r3, r4, r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003038:	f7ff ffe8 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800303c:	4604      	mov	r4, r0
 800303e:	f7ff f9b9 	bl	80023b4 <LL_RCC_GetAPB1Prescaler>
 8003042:	4603      	mov	r3, r0
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	4a03      	ldr	r2, [pc, #12]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd98      	pop	{r3, r4, r7, pc}
 8003054:	08006d80 	.word	0x08006d80

08003058 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003058:	b598      	push	{r3, r4, r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800305c:	f7ff ffd6 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003060:	4604      	mov	r4, r0
 8003062:	f7ff f9b2 	bl	80023ca <LL_RCC_GetAPB2Prescaler>
 8003066:	4603      	mov	r3, r0
 8003068:	0adb      	lsrs	r3, r3, #11
 800306a:	4a03      	ldr	r2, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x20>)
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd98      	pop	{r3, r4, r7, pc}
 8003078:	08006d80 	.word	0x08006d80

0800307c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003094:	f7ff f981 	bl	800239a <LL_RCC_GetAHB3Prescaler>
 8003098:	4603      	mov	r3, r0
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	4a0c      	ldr	r2, [pc, #48]	; (80030d4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80030a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0c9c      	lsrs	r4, r3, #18
 80030b8:	f7fe ff76 	bl	8001fa8 <HAL_PWREx_GetVoltageRange>
 80030bc:	4603      	mov	r3, r0
 80030be:	4619      	mov	r1, r3
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 f80b 	bl	80030dc <RCC_SetFlashLatency>
 80030c6:	4603      	mov	r3, r0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}
 80030d0:	08006da0 	.word	0x08006da0
 80030d4:	08006d40 	.word	0x08006d40
 80030d8:	431bde83 	.word	0x431bde83

080030dc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08e      	sub	sp, #56	; 0x38
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80030e6:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <RCC_SetFlashLatency+0xf4>)
 80030e8:	f107 0320 	add.w	r3, r7, #32
 80030ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030f0:	6018      	str	r0, [r3, #0]
 80030f2:	3304      	adds	r3, #4
 80030f4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80030f6:	4a37      	ldr	r2, [pc, #220]	; (80031d4 <RCC_SetFlashLatency+0xf8>)
 80030f8:	f107 0318 	add.w	r3, r7, #24
 80030fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003100:	6018      	str	r0, [r3, #0]
 8003102:	3304      	adds	r3, #4
 8003104:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003106:	4a34      	ldr	r2, [pc, #208]	; (80031d8 <RCC_SetFlashLatency+0xfc>)
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	ca07      	ldmia	r2, {r0, r1, r2}
 800310e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003112:	2300      	movs	r3, #0
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311c:	d11b      	bne.n	8003156 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800311e:	2300      	movs	r3, #0
 8003120:	633b      	str	r3, [r7, #48]	; 0x30
 8003122:	e014      	b.n	800314e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	3338      	adds	r3, #56	; 0x38
 800312a:	443b      	add	r3, r7
 800312c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003130:	461a      	mov	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4293      	cmp	r3, r2
 8003136:	d807      	bhi.n	8003148 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	3338      	adds	r3, #56	; 0x38
 800313e:	443b      	add	r3, r7
 8003140:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003144:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003146:	e021      	b.n	800318c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	3301      	adds	r3, #1
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	2b02      	cmp	r3, #2
 8003152:	d9e7      	bls.n	8003124 <RCC_SetFlashLatency+0x48>
 8003154:	e01a      	b.n	800318c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003156:	2300      	movs	r3, #0
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315a:	e014      	b.n	8003186 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	3338      	adds	r3, #56	; 0x38
 8003162:	443b      	add	r3, r7
 8003164:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4293      	cmp	r3, r2
 800316e:	d807      	bhi.n	8003180 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	3338      	adds	r3, #56	; 0x38
 8003176:	443b      	add	r3, r7
 8003178:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800317e:	e005      	b.n	800318c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	3301      	adds	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	2b02      	cmp	r3, #2
 800318a:	d9e7      	bls.n	800315c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <RCC_SetFlashLatency+0x100>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 0207 	bic.w	r2, r3, #7
 8003194:	4911      	ldr	r1, [pc, #68]	; (80031dc <RCC_SetFlashLatency+0x100>)
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800319c:	f7fe fbb6 	bl	800190c <HAL_GetTick>
 80031a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031a2:	e008      	b.n	80031b6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031a4:	f7fe fbb2 	bl	800190c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e007      	b.n	80031c6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80031b6:	4b09      	ldr	r3, [pc, #36]	; (80031dc <RCC_SetFlashLatency+0x100>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1ef      	bne.n	80031a4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3738      	adds	r7, #56	; 0x38
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	08006d24 	.word	0x08006d24
 80031d4:	08006d2c 	.word	0x08006d2c
 80031d8:	08006d34 	.word	0x08006d34
 80031dc:	58004000 	.word	0x58004000

080031e0 <LL_RCC_LSE_IsReady>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d101      	bne.n	80031f8 <LL_RCC_LSE_IsReady+0x18>
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <LL_RCC_LSE_IsReady+0x1a>
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr

08003202 <LL_RCC_SetUSARTClockSource>:
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	43db      	mvns	r3, r3
 8003218:	401a      	ands	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003222:	4313      	orrs	r3, r2
 8003224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr

08003232 <LL_RCC_SetI2SClockSource>:
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800323a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003252:	bf00      	nop
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	bc80      	pop	{r7}
 800325a:	4770      	bx	lr

0800325c <LL_RCC_SetLPUARTClockSource>:
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <LL_RCC_SetI2CClockSource>:
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800328e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003292:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800329e:	43db      	mvns	r3, r3
 80032a0:	401a      	ands	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80032aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr

080032be <LL_RCC_SetLPTIMClockSource>:
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	43db      	mvns	r3, r3
 80032d6:	401a      	ands	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <LL_RCC_SetRNGClockSource>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <LL_RCC_SetADCClockSource>:
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800332e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr

08003344 <LL_RCC_SetRTCClockSource>:
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr

0800336e <LL_RCC_GetRTCClockSource>:
{
 800336e:	b480      	push	{r7}
 8003370:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <LL_RCC_ForceBackupDomainReset>:
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80033d4:	2300      	movs	r3, #0
 80033d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80033d8:	2300      	movs	r3, #0
 80033da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d058      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80033e8:	f7fe fdc2 	bl	8001f70 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ec:	f7fe fa8e 	bl	800190c <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80033f2:	e009      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7fe fa8a 	bl	800190c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d902      	bls.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	74fb      	strb	r3, [r7, #19]
        break;
 8003406:	e006      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003408:	4b7b      	ldr	r3, [pc, #492]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003414:	d1ee      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d13c      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800341c:	f7ff ffa7 	bl	800336e <LL_RCC_GetRTCClockSource>
 8003420:	4602      	mov	r2, r0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	429a      	cmp	r2, r3
 8003428:	d00f      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003436:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003438:	f7ff ffa5 	bl	8003386 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800343c:	f7ff ffb3 	bl	80033a6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d014      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fa5a 	bl	800190c <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800345a:	e00b      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fe fa56 	bl	800190c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d902      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	74fb      	strb	r3, [r7, #19]
            break;
 8003472:	e004      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003474:	f7ff feb4 	bl	80031e0 <LL_RCC_LSE_IsReady>
 8003478:	4603      	mov	r3, r0
 800347a:	2b01      	cmp	r3, #1
 800347c:	d1ee      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800347e:	7cfb      	ldrb	r3, [r7, #19]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff ff5b 	bl	8003344 <LL_RCC_SetRTCClockSource>
 800348e:	e004      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003490:	7cfb      	ldrb	r3, [r7, #19]
 8003492:	74bb      	strb	r3, [r7, #18]
 8003494:	e001      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fea9 	bl	8003202 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d004      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fe9e 	bl	8003202 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fec0 	bl	800325c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d004      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff fee6 	bl	80032be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fedb 	bl	80032be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fed0 	bl	80032be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fea9 	bl	8003286 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fe9e 	bl	8003286 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fe93 	bl	8003286 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	d011      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fe5e 	bl	8003232 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357e:	d107      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800358e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fea5 	bl	80032f0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d011      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fea3 	bl	800331a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035dc:	d107      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80035de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80035ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	58000400 	.word	0x58000400

080035fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d071      	beq.n	80036f2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd ff02 	bl	800142c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <HAL_RTC_Init+0x100>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0310 	and.w	r3, r3, #16
 8003638:	2b10      	cmp	r3, #16
 800363a:	d051      	beq.n	80036e0 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800363c:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <HAL_RTC_Init+0x100>)
 800363e:	22ca      	movs	r2, #202	; 0xca
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <HAL_RTC_Init+0x100>)
 8003644:	2253      	movs	r2, #83	; 0x53
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fb87 	bl	8003d5c <RTC_EnterInitMode>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d13f      	bne.n	80036d8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003658:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_RTC_Init+0x100>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4a27      	ldr	r2, [pc, #156]	; (80036fc <HAL_RTC_Init+0x100>)
 800365e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003666:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003668:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_RTC_Init+0x100>)
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	4319      	orrs	r1, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	430b      	orrs	r3, r1
 800367c:	491f      	ldr	r1, [pc, #124]	; (80036fc <HAL_RTC_Init+0x100>)
 800367e:	4313      	orrs	r3, r2
 8003680:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	041b      	lsls	r3, r3, #16
 800368c:	491b      	ldr	r1, [pc, #108]	; (80036fc <HAL_RTC_Init+0x100>)
 800368e:	4313      	orrs	r3, r2
 8003690:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <HAL_RTC_Init+0x100>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	430b      	orrs	r3, r1
 80036a4:	4915      	ldr	r1, [pc, #84]	; (80036fc <HAL_RTC_Init+0x100>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fb8a 	bl	8003dc4 <RTC_ExitInitMode>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10e      	bne.n	80036d8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <HAL_RTC_Init+0x100>)
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a19      	ldr	r1, [r3, #32]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	4319      	orrs	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	490a      	ldr	r1, [pc, #40]	; (80036fc <HAL_RTC_Init+0x100>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <HAL_RTC_Init+0x100>)
 80036da:	22ff      	movs	r2, #255	; 0xff
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24
 80036de:	e001      	b.n	80036e4 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40002800 	.word	0x40002800

08003700 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003700:	b590      	push	{r4, r7, lr}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_RTC_SetTime+0x1a>
 8003716:	2302      	movs	r3, #2
 8003718:	e088      	b.n	800382c <HAL_RTC_SetTime+0x12c>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800372a:	4b42      	ldr	r3, [pc, #264]	; (8003834 <HAL_RTC_SetTime+0x134>)
 800372c:	22ca      	movs	r2, #202	; 0xca
 800372e:	625a      	str	r2, [r3, #36]	; 0x24
 8003730:	4b40      	ldr	r3, [pc, #256]	; (8003834 <HAL_RTC_SetTime+0x134>)
 8003732:	2253      	movs	r2, #83	; 0x53
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fb10 	bl	8003d5c <RTC_EnterInitMode>
 800373c:	4603      	mov	r3, r0
 800373e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d15e      	bne.n	8003804 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003746:	4b3b      	ldr	r3, [pc, #236]	; (8003834 <HAL_RTC_SetTime+0x134>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d057      	beq.n	8003804 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d125      	bne.n	80037a6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800375a:	4b36      	ldr	r3, [pc, #216]	; (8003834 <HAL_RTC_SetTime+0x134>)
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2200      	movs	r2, #0
 800376a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fb65 	bl	8003e40 <RTC_ByteToBcd2>
 8003776:	4603      	mov	r3, r0
 8003778:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fb5e 	bl	8003e40 <RTC_ByteToBcd2>
 8003784:	4603      	mov	r3, r0
 8003786:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003788:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	789b      	ldrb	r3, [r3, #2]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fb56 	bl	8003e40 <RTC_ByteToBcd2>
 8003794:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003796:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	78db      	ldrb	r3, [r3, #3]
 800379e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e017      	b.n	80037d6 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80037a6:	4b23      	ldr	r3, [pc, #140]	; (8003834 <HAL_RTC_SetTime+0x134>)
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2200      	movs	r2, #0
 80037b6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	785b      	ldrb	r3, [r3, #1]
 80037c2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037c4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037ca:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	78db      	ldrb	r3, [r3, #3]
 80037d0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80037d6:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_RTC_SetTime+0x134>)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037e2:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80037e4:	4b13      	ldr	r3, [pc, #76]	; (8003834 <HAL_RTC_SetTime+0x134>)
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	4a12      	ldr	r2, [pc, #72]	; (8003834 <HAL_RTC_SetTime+0x134>)
 80037ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ee:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80037f0:	4b10      	ldr	r3, [pc, #64]	; (8003834 <HAL_RTC_SetTime+0x134>)
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	68d9      	ldr	r1, [r3, #12]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	490d      	ldr	r1, [pc, #52]	; (8003834 <HAL_RTC_SetTime+0x134>)
 8003800:	4313      	orrs	r3, r2
 8003802:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fadd 	bl	8003dc4 <RTC_ExitInitMode>
 800380a:	4603      	mov	r3, r0
 800380c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_RTC_SetTime+0x134>)
 8003810:	22ff      	movs	r2, #255	; 0xff
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003814:	7cfb      	ldrb	r3, [r7, #19]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800382a:	7cfb      	ldrb	r3, [r7, #19]
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	40002800 	.word	0x40002800

08003838 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003844:	4b2c      	ldr	r3, [pc, #176]	; (80038f8 <HAL_RTC_GetTime+0xc0>)
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RTC_GetTime+0xc0>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003858:	d049      	beq.n	80038ee <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800385a:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RTC_GetTime+0xc0>)
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RTC_GetTime+0xc0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800386e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003872:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	0c1b      	lsrs	r3, r3, #16
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387e:	b2da      	uxtb	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	b2db      	uxtb	r3, r3
 800388a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800388e:	b2da      	uxtb	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	0d9b      	lsrs	r3, r3, #22
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11a      	bne.n	80038ee <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f000 fade 	bl	8003e7e <RTC_Bcd2ToByte>
 80038c2:	4603      	mov	r3, r0
 80038c4:	461a      	mov	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fad5 	bl	8003e7e <RTC_Bcd2ToByte>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	789b      	ldrb	r3, [r3, #2]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 facc 	bl	8003e7e <RTC_Bcd2ToByte>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40002800 	.word	0x40002800

080038fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_RTC_SetDate+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e071      	b.n	80039fa <HAL_RTC_SetDate+0xfe>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10e      	bne.n	800394a <HAL_RTC_SetDate+0x4e>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	f023 0310 	bic.w	r3, r3, #16
 8003940:	b2db      	uxtb	r3, r3
 8003942:	330a      	adds	r3, #10
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11c      	bne.n	800398a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	78db      	ldrb	r3, [r3, #3]
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fa73 	bl	8003e40 <RTC_ByteToBcd2>
 800395a:	4603      	mov	r3, r0
 800395c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	785b      	ldrb	r3, [r3, #1]
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fa6c 	bl	8003e40 <RTC_ByteToBcd2>
 8003968:	4603      	mov	r3, r0
 800396a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800396c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fa64 	bl	8003e40 <RTC_ByteToBcd2>
 8003978:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800397a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	e00e      	b.n	80039a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	78db      	ldrb	r3, [r3, #3]
 800398e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003996:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800399c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <HAL_RTC_SetDate+0x108>)
 80039aa:	22ca      	movs	r2, #202	; 0xca
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
 80039ae:	4b15      	ldr	r3, [pc, #84]	; (8003a04 <HAL_RTC_SetDate+0x108>)
 80039b0:	2253      	movs	r2, #83	; 0x53
 80039b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f9d1 	bl	8003d5c <RTC_EnterInitMode>
 80039ba:	4603      	mov	r3, r0
 80039bc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80039c4:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_RTC_SetDate+0x108>)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f9f6 	bl	8003dc4 <RTC_ExitInitMode>
 80039d8:	4603      	mov	r3, r0
 80039da:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039dc:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <HAL_RTC_SetDate+0x108>)
 80039de:	22ff      	movs	r2, #255	; 0xff
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80039f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40002800 	.word	0x40002800

08003a08 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003a14:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <HAL_RTC_GetDate+0x98>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a20:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 031f 	and.w	r3, r3, #31
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	0b5b      	lsrs	r3, r3, #13
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d11a      	bne.n	8003a96 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	78db      	ldrb	r3, [r3, #3]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fa0a 	bl	8003e7e <RTC_Bcd2ToByte>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fa01 	bl	8003e7e <RTC_Bcd2ToByte>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	789b      	ldrb	r3, [r3, #2]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f9f8 	bl	8003e7e <RTC_Bcd2ToByte>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40002800 	.word	0x40002800

08003aa4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_RTC_SetAlarm_IT+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0f3      	b.n	8003caa <HAL_RTC_SetAlarm_IT+0x206>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2202      	movs	r2, #2
 8003ace:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003ad2:	4b78      	ldr	r3, [pc, #480]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae2:	d06a      	beq.n	8003bba <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d13a      	bne.n	8003b60 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003aea:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2200      	movs	r2, #0
 8003afa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f999 	bl	8003e40 <RTC_ByteToBcd2>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f992 	bl	8003e40 <RTC_ByteToBcd2>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b20:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	789b      	ldrb	r3, [r3, #2]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f98a 	bl	8003e40 <RTC_ByteToBcd2>
 8003b2c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b2e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	78db      	ldrb	r3, [r3, #3]
 8003b36:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b38:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f97c 	bl	8003e40 <RTC_ByteToBcd2>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b4c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b54:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e02c      	b.n	8003bba <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003b68:	d00d      	beq.n	8003b86 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b72:	d008      	beq.n	8003b86 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003b74:	4b4f      	ldr	r3, [pc, #316]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d102      	bne.n	8003b86 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b92:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b98:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	78db      	ldrb	r3, [r3, #3]
 8003b9e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ba0:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ba8:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003baa:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003bb0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bba:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bbc:	22ca      	movs	r2, #202	; 0xca
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24
 8003bc0:	4b3c      	ldr	r3, [pc, #240]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bc2:	2253      	movs	r2, #83	; 0x53
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bce:	d12c      	bne.n	8003c2a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003bd0:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	4a37      	ldr	r2, [pc, #220]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bda:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be8:	d107      	bne.n	8003bfa <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4930      	ldr	r1, [pc, #192]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	644b      	str	r3, [r1, #68]	; 0x44
 8003bf8:	e006      	b.n	8003c08 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003bfa:	4a2e      	ldr	r2, [pc, #184]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003c00:	4a2c      	ldr	r2, [pc, #176]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003c08:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c22:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003c26:	6193      	str	r3, [r2, #24]
 8003c28:	e02b      	b.n	8003c82 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003c2a:	4b22      	ldr	r3, [pc, #136]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c30:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003c34:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003c36:	4b1f      	ldr	r3, [pc, #124]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c38:	2202      	movs	r2, #2
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c42:	d107      	bne.n	8003c54 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	4919      	ldr	r1, [pc, #100]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c52:	e006      	b.n	8003c62 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003c54:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003c5a:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003c62:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f043 0202 	orr.w	r2, r3, #2
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c7c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003c80:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <HAL_RTC_SetAlarm_IT+0x214>)
 8003c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c88:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_RTC_SetAlarm_IT+0x214>)
 8003c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c92:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <HAL_RTC_SetAlarm_IT+0x210>)
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd90      	pop	{r4, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40002800 	.word	0x40002800
 8003cb8:	58000800 	.word	0x58000800

08003cbc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003cc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fc fd89 	bl	80007f8 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_RTC_AlarmIRQHandler+0x50>)
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8dc 	bl	8003eb4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40002800 	.word	0x40002800

08003d10 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_RTC_WaitForSynchro+0x48>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_RTC_WaitForSynchro+0x48>)
 8003d1e:	f023 0320 	bic.w	r3, r3, #32
 8003d22:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003d24:	f7fd fdf2 	bl	800190c <HAL_GetTick>
 8003d28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003d2a:	e009      	b.n	8003d40 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d2c:	f7fd fdee 	bl	800190c <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3a:	d901      	bls.n	8003d40 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e006      	b.n	8003d4e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RTC_WaitForSynchro+0x48>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ef      	beq.n	8003d2c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40002800 	.word	0x40002800

08003d5c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003d68:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <RTC_EnterInitMode+0x64>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d120      	bne.n	8003db6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <RTC_EnterInitMode+0x64>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <RTC_EnterInitMode+0x64>)
 8003d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003d80:	f7fd fdc4 	bl	800190c <HAL_GetTick>
 8003d84:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d86:	e00d      	b.n	8003da4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d88:	f7fd fdc0 	bl	800190c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d96:	d905      	bls.n	8003da4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003da4:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <RTC_EnterInitMode+0x64>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <RTC_EnterInitMode+0x5a>
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d1e8      	bne.n	8003d88 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40002800 	.word	0x40002800

08003dc4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <RTC_ExitInitMode+0x78>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	; (8003e3c <RTC_ExitInitMode+0x78>)
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003ddc:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <RTC_ExitInitMode+0x78>)
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0320 	and.w	r3, r3, #32
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10c      	bne.n	8003e02 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff91 	bl	8003d10 <HAL_RTC_WaitForSynchro>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01e      	beq.n	8003e32 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2203      	movs	r2, #3
 8003df8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	e017      	b.n	8003e32 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <RTC_ExitInitMode+0x78>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <RTC_ExitInitMode+0x78>)
 8003e08:	f023 0320 	bic.w	r3, r3, #32
 8003e0c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff7e 	bl	8003d10 <HAL_RTC_WaitForSynchro>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <RTC_ExitInitMode+0x78>)
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	4a04      	ldr	r2, [pc, #16]	; (8003e3c <RTC_ExitInitMode+0x78>)
 8003e2c:	f043 0320 	orr.w	r3, r3, #32
 8003e30:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40002800 	.word	0x40002800

08003e40 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003e52:	e005      	b.n	8003e60 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3301      	adds	r3, #1
 8003e58:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
 8003e5c:	3b0a      	subs	r3, #10
 8003e5e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	2b09      	cmp	r3, #9
 8003e64:	d8f6      	bhi.n	8003e54 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	7afb      	ldrb	r3, [r7, #11]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	b2db      	uxtb	r3, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	4413      	add	r3, r2
 8003ea8:	b2db      	uxtb	r3, r3
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <LL_RCC_GetUSARTClockSource>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ed2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	401a      	ands	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	041b      	lsls	r3, r3, #16
 8003ede:	4313      	orrs	r3, r2
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <LL_RCC_GetLPUARTClockSource>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4013      	ands	r3, r2
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr

08003f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e042      	b.n	8003fa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f7fd fab1 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2224      	movs	r2, #36	; 0x24
 8003f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fc3c 	bl	80047c8 <UART_SetConfig>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e022      	b.n	8003fa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fea4 	bl	8004cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 ff2a 	bl	8004df2 <UART_CheckIdleState>
 8003f9e:	4603      	mov	r3, r0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b091      	sub	sp, #68	; 0x44
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d178      	bne.n	80040b2 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_UART_Transmit_IT+0x24>
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e071      	b.n	80040b4 <HAL_UART_Transmit_IT+0x10c>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	88fa      	ldrh	r2, [r7, #6]
 8003fda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	88fa      	ldrh	r2, [r7, #6]
 8003fe2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2221      	movs	r2, #33	; 0x21
 8003ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004004:	d12a      	bne.n	800405c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	d107      	bne.n	8004020 <HAL_UART_Transmit_IT+0x78>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d103      	bne.n	8004020 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4a29      	ldr	r2, [pc, #164]	; (80040c0 <HAL_UART_Transmit_IT+0x118>)
 800401c:	679a      	str	r2, [r3, #120]	; 0x78
 800401e:	e002      	b.n	8004026 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a28      	ldr	r2, [pc, #160]	; (80040c4 <HAL_UART_Transmit_IT+0x11c>)
 8004024:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3308      	adds	r3, #8
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3308      	adds	r3, #8
 8004044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004046:	637a      	str	r2, [r7, #52]	; 0x34
 8004048:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800404c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <HAL_UART_Transmit_IT+0x7e>
 800405a:	e028      	b.n	80040ae <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004064:	d107      	bne.n	8004076 <HAL_UART_Transmit_IT+0xce>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <HAL_UART_Transmit_IT+0x120>)
 8004072:	679a      	str	r2, [r3, #120]	; 0x78
 8004074:	e002      	b.n	800407c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_UART_Transmit_IT+0x124>)
 800407a:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	613b      	str	r3, [r7, #16]
   return(result);
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004090:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	623b      	str	r3, [r7, #32]
 800409c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	69f9      	ldr	r1, [r7, #28]
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e6      	bne.n	800407c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3744      	adds	r7, #68	; 0x44
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	080055ab 	.word	0x080055ab
 80040c4:	080054cd 	.word	0x080054cd
 80040c8:	0800540d 	.word	0x0800540d
 80040cc:	08005357 	.word	0x08005357

080040d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d137      	bne.n	8004158 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_UART_Receive_IT+0x24>
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e030      	b.n	800415a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_UART_Receive_IT+0x94>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d01f      	beq.n	8004148 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d018      	beq.n	8004148 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	613b      	str	r3, [r7, #16]
   return(result);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	623b      	str	r3, [r7, #32]
 8004136:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	69f9      	ldr	r1, [r7, #28]
 800413a:	6a3a      	ldr	r2, [r7, #32]
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	61bb      	str	r3, [r7, #24]
   return(result);
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e6      	bne.n	8004116 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	461a      	mov	r2, r3
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 ff66 	bl	8005020 <UART_Start_Receive_IT>
 8004154:	4603      	mov	r3, r0
 8004156:	e000      	b.n	800415a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3728      	adds	r7, #40	; 0x28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40008000 	.word	0x40008000

08004168 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b0ba      	sub	sp, #232	; 0xe8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800418e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004192:	f640 030f 	movw	r3, #2063	; 0x80f
 8004196:	4013      	ands	r3, r2
 8004198:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800419c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d11b      	bne.n	80041dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d015      	beq.n	80041dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d009      	beq.n	80041dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 82e3 	beq.w	8004798 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
      }
      return;
 80041da:	e2dd      	b.n	8004798 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8123 	beq.w	800442c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041ea:	4b8d      	ldr	r3, [pc, #564]	; (8004420 <HAL_UART_IRQHandler+0x2b8>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80041f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041f6:	4b8b      	ldr	r3, [pc, #556]	; (8004424 <HAL_UART_IRQHandler+0x2bc>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8116 	beq.w	800442c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d011      	beq.n	8004230 <HAL_UART_IRQHandler+0xc8>
 800420c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2201      	movs	r2, #1
 800421e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d011      	beq.n	8004260 <HAL_UART_IRQHandler+0xf8>
 800423c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2202      	movs	r2, #2
 800424e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	f043 0204 	orr.w	r2, r3, #4
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d011      	beq.n	8004290 <HAL_UART_IRQHandler+0x128>
 800426c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2204      	movs	r2, #4
 800427e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	f043 0202 	orr.w	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d017      	beq.n	80042cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80042a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042ac:	4b5c      	ldr	r3, [pc, #368]	; (8004420 <HAL_UART_IRQHandler+0x2b8>)
 80042ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2208      	movs	r2, #8
 80042ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c2:	f043 0208 	orr.w	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <HAL_UART_IRQHandler+0x196>
 80042d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f043 0220 	orr.w	r2, r3, #32
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8249 	beq.w	800479c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b00      	cmp	r3, #0
 8004314:	d013      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d005      	beq.n	8004362 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800435a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d054      	beq.n	800440c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 ff7c 	bl	8005260 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d146      	bne.n	8004404 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800438c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1d9      	bne.n	8004376 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d017      	beq.n	80043fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_UART_IRQHandler+0x2c0>)
 80043d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043dc:	4618      	mov	r0, r3
 80043de:	f7fd fc08 	bl	8001bf2 <HAL_DMA_Abort_IT>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d019      	beq.n	800441c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80043f6:	4610      	mov	r0, r2
 80043f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fa:	e00f      	b.n	800441c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc f9b3 	bl	8000768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004402:	e00b      	b.n	800441c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7fc f9af 	bl	8000768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440a:	e007      	b.n	800441c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7fc f9ab 	bl	8000768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800441a:	e1bf      	b.n	800479c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	bf00      	nop
    return;
 800441e:	e1bd      	b.n	800479c <HAL_UART_IRQHandler+0x634>
 8004420:	10000001 	.word	0x10000001
 8004424:	04000120 	.word	0x04000120
 8004428:	0800532b 	.word	0x0800532b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004430:	2b01      	cmp	r3, #1
 8004432:	f040 8153 	bne.w	80046dc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 814c 	beq.w	80046dc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8145 	beq.w	80046dc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2210      	movs	r2, #16
 8004458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004464:	2b40      	cmp	r3, #64	; 0x40
 8004466:	f040 80bb 	bne.w	80045e0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004478:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 818f 	beq.w	80047a0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800448c:	429a      	cmp	r2, r3
 800448e:	f080 8187 	bcs.w	80047a0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004498:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0320 	and.w	r3, r3, #32
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 8087 	bne.w	80045be <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044bc:	e853 3f00 	ldrex	r3, [r3]
 80044c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1da      	bne.n	80044b0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3308      	adds	r3, #8
 8004500:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800450a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3308      	adds	r3, #8
 800451a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800451e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004522:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004526:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800452a:	e841 2300 	strex	r3, r2, [r1]
 800452e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e1      	bne.n	80044fa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004540:	e853 3f00 	ldrex	r3, [r3]
 8004544:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3308      	adds	r3, #8
 8004556:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800455a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800455c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004560:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e3      	bne.n	8004536 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458c:	f023 0310 	bic.w	r3, r3, #16
 8004590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800459e:	65bb      	str	r3, [r7, #88]	; 0x58
 80045a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e4      	bne.n	800457c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fd fabc 	bl	8001b36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8e9 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045de:	e0df      	b.n	80047a0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80d1 	beq.w	80047a4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80cc 	beq.w	80047a4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800462e:	647b      	str	r3, [r7, #68]	; 0x44
 8004630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e4      	bne.n	800460c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3308      	adds	r3, #8
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	623b      	str	r3, [r7, #32]
   return(result);
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800466a:	633a      	str	r2, [r7, #48]	; 0x30
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e1      	bne.n	8004642 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	617b      	str	r3, [r7, #20]
   return(result);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e4      	bne.n	8004692 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f86b 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046da:	e063      	b.n	80047a4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00e      	beq.n	8004706 <HAL_UART_IRQHandler+0x59e>
 80046e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f001 fd0e 	bl	8006120 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004704:	e051      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d014      	beq.n	800473c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b00      	cmp	r3, #0
 800471c:	d105      	bne.n	800472a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800471e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800472e:	2b00      	cmp	r3, #0
 8004730:	d03a      	beq.n	80047a8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	4798      	blx	r3
    }
    return;
 800473a:	e035      	b.n	80047a8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <HAL_UART_IRQHandler+0x5f4>
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 ff9c 	bl	8005692 <UART_EndTransmit_IT>
    return;
 800475a:	e026      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800475c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_UART_IRQHandler+0x614>
 8004768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800476c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f001 fce5 	bl	8006144 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800477a:	e016      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800477c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d010      	beq.n	80047aa <HAL_UART_IRQHandler+0x642>
 8004788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478c:	2b00      	cmp	r3, #0
 800478e:	da0c      	bge.n	80047aa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f001 fcce 	bl	8006132 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004796:	e008      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
      return;
 8004798:	bf00      	nop
 800479a:	e006      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
    return;
 800479c:	bf00      	nop
 800479e:	e004      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
      return;
 80047a0:	bf00      	nop
 80047a2:	e002      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
      return;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <HAL_UART_IRQHandler+0x642>
    return;
 80047a8:	bf00      	nop
  }
}
 80047aa:	37e8      	adds	r7, #232	; 0xe8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
	...

080047c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047cc:	b08c      	sub	sp, #48	; 0x30
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b94      	ldr	r3, [pc, #592]	; (8004a48 <UART_SetConfig+0x280>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004800:	430b      	orrs	r3, r1
 8004802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a89      	ldr	r2, [pc, #548]	; (8004a4c <UART_SetConfig+0x284>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004830:	4313      	orrs	r3, r2
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800483e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004848:	430b      	orrs	r3, r1
 800484a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	f023 010f 	bic.w	r1, r3, #15
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7a      	ldr	r2, [pc, #488]	; (8004a50 <UART_SetConfig+0x288>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d127      	bne.n	80048bc <UART_SetConfig+0xf4>
 800486c:	2003      	movs	r0, #3
 800486e:	f7ff fb2a 	bl	8003ec6 <LL_RCC_GetUSARTClockSource>
 8004872:	4603      	mov	r3, r0
 8004874:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004878:	2b03      	cmp	r3, #3
 800487a:	d81b      	bhi.n	80048b4 <UART_SetConfig+0xec>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0xbc>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004895 	.word	0x08004895
 8004888:	080048a5 	.word	0x080048a5
 800488c:	0800489d 	.word	0x0800489d
 8004890:	080048ad 	.word	0x080048ad
 8004894:	2301      	movs	r3, #1
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489a:	e080      	b.n	800499e <UART_SetConfig+0x1d6>
 800489c:	2302      	movs	r3, #2
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a2:	e07c      	b.n	800499e <UART_SetConfig+0x1d6>
 80048a4:	2304      	movs	r3, #4
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048aa:	e078      	b.n	800499e <UART_SetConfig+0x1d6>
 80048ac:	2308      	movs	r3, #8
 80048ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b2:	e074      	b.n	800499e <UART_SetConfig+0x1d6>
 80048b4:	2310      	movs	r3, #16
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ba:	e070      	b.n	800499e <UART_SetConfig+0x1d6>
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a64      	ldr	r2, [pc, #400]	; (8004a54 <UART_SetConfig+0x28c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d138      	bne.n	8004938 <UART_SetConfig+0x170>
 80048c6:	200c      	movs	r0, #12
 80048c8:	f7ff fafd 	bl	8003ec6 <LL_RCC_GetUSARTClockSource>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d82c      	bhi.n	8004930 <UART_SetConfig+0x168>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x114>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004911 	.word	0x08004911
 80048e0:	08004931 	.word	0x08004931
 80048e4:	08004931 	.word	0x08004931
 80048e8:	08004931 	.word	0x08004931
 80048ec:	08004921 	.word	0x08004921
 80048f0:	08004931 	.word	0x08004931
 80048f4:	08004931 	.word	0x08004931
 80048f8:	08004931 	.word	0x08004931
 80048fc:	08004919 	.word	0x08004919
 8004900:	08004931 	.word	0x08004931
 8004904:	08004931 	.word	0x08004931
 8004908:	08004931 	.word	0x08004931
 800490c:	08004929 	.word	0x08004929
 8004910:	2300      	movs	r3, #0
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004916:	e042      	b.n	800499e <UART_SetConfig+0x1d6>
 8004918:	2302      	movs	r3, #2
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491e:	e03e      	b.n	800499e <UART_SetConfig+0x1d6>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004926:	e03a      	b.n	800499e <UART_SetConfig+0x1d6>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492e:	e036      	b.n	800499e <UART_SetConfig+0x1d6>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e032      	b.n	800499e <UART_SetConfig+0x1d6>
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a43      	ldr	r2, [pc, #268]	; (8004a4c <UART_SetConfig+0x284>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d12a      	bne.n	8004998 <UART_SetConfig+0x1d0>
 8004942:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004946:	f7ff fad0 	bl	8003eea <LL_RCC_GetLPUARTClockSource>
 800494a:	4603      	mov	r3, r0
 800494c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004950:	d01a      	beq.n	8004988 <UART_SetConfig+0x1c0>
 8004952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004956:	d81b      	bhi.n	8004990 <UART_SetConfig+0x1c8>
 8004958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800495c:	d00c      	beq.n	8004978 <UART_SetConfig+0x1b0>
 800495e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004962:	d815      	bhi.n	8004990 <UART_SetConfig+0x1c8>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <UART_SetConfig+0x1a8>
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496c:	d008      	beq.n	8004980 <UART_SetConfig+0x1b8>
 800496e:	e00f      	b.n	8004990 <UART_SetConfig+0x1c8>
 8004970:	2300      	movs	r3, #0
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004976:	e012      	b.n	800499e <UART_SetConfig+0x1d6>
 8004978:	2302      	movs	r3, #2
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497e:	e00e      	b.n	800499e <UART_SetConfig+0x1d6>
 8004980:	2304      	movs	r3, #4
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004986:	e00a      	b.n	800499e <UART_SetConfig+0x1d6>
 8004988:	2308      	movs	r3, #8
 800498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498e:	e006      	b.n	800499e <UART_SetConfig+0x1d6>
 8004990:	2310      	movs	r3, #16
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004996:	e002      	b.n	800499e <UART_SetConfig+0x1d6>
 8004998:	2310      	movs	r3, #16
 800499a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a2a      	ldr	r2, [pc, #168]	; (8004a4c <UART_SetConfig+0x284>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	f040 80a4 	bne.w	8004af2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d823      	bhi.n	80049fa <UART_SetConfig+0x232>
 80049b2:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x1f0>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049fb 	.word	0x080049fb
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	080049fb 	.word	0x080049fb
 80049c8:	080049eb 	.word	0x080049eb
 80049cc:	080049fb 	.word	0x080049fb
 80049d0:	080049fb 	.word	0x080049fb
 80049d4:	080049fb 	.word	0x080049fb
 80049d8:	080049f3 	.word	0x080049f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049dc:	f7fe fb2a 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049e2:	e010      	b.n	8004a06 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e4:	4b1c      	ldr	r3, [pc, #112]	; (8004a58 <UART_SetConfig+0x290>)
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049e8:	e00d      	b.n	8004a06 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ea:	f7fe fa6f 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 80049ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049f0:	e009      	b.n	8004a06 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049f8:	e005      	b.n	8004a06 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8137 	beq.w	8004c7c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <UART_SetConfig+0x294>)
 8004a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d305      	bcc.n	8004a3e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d910      	bls.n	8004a60 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a44:	e11a      	b.n	8004c7c <UART_SetConfig+0x4b4>
 8004a46:	bf00      	nop
 8004a48:	cfff69f3 	.word	0xcfff69f3
 8004a4c:	40008000 	.word	0x40008000
 8004a50:	40013800 	.word	0x40013800
 8004a54:	40004400 	.word	0x40004400
 8004a58:	00f42400 	.word	0x00f42400
 8004a5c:	08006de0 	.word	0x08006de0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	2200      	movs	r2, #0
 8004a64:	60bb      	str	r3, [r7, #8]
 8004a66:	60fa      	str	r2, [r7, #12]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	4a8e      	ldr	r2, [pc, #568]	; (8004ca8 <UART_SetConfig+0x4e0>)
 8004a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2200      	movs	r2, #0
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a82:	f7fb fbcd 	bl	8000220 <__aeabi_uldivmod>
 8004a86:	4602      	mov	r2, r0
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	f04f 0300 	mov.w	r3, #0
 8004a96:	020b      	lsls	r3, r1, #8
 8004a98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a9c:	0202      	lsls	r2, r0, #8
 8004a9e:	6979      	ldr	r1, [r7, #20]
 8004aa0:	6849      	ldr	r1, [r1, #4]
 8004aa2:	0849      	lsrs	r1, r1, #1
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	eb12 0804 	adds.w	r8, r2, r4
 8004aae:	eb43 0905 	adc.w	r9, r3, r5
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	469a      	mov	sl, r3
 8004aba:	4693      	mov	fp, r2
 8004abc:	4652      	mov	r2, sl
 8004abe:	465b      	mov	r3, fp
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	f7fb fbac 	bl	8000220 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4613      	mov	r3, r2
 8004ace:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad6:	d308      	bcc.n	8004aea <UART_SetConfig+0x322>
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ade:	d204      	bcs.n	8004aea <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	60da      	str	r2, [r3, #12]
 8004ae8:	e0c8      	b.n	8004c7c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004af0:	e0c4      	b.n	8004c7c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afa:	d167      	bne.n	8004bcc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004afc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d828      	bhi.n	8004b56 <UART_SetConfig+0x38e>
 8004b04:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x344>)
 8004b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0a:	bf00      	nop
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b39 	.word	0x08004b39
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b57 	.word	0x08004b57
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b57 	.word	0x08004b57
 8004b24:	08004b57 	.word	0x08004b57
 8004b28:	08004b57 	.word	0x08004b57
 8004b2c:	08004b4f 	.word	0x08004b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b30:	f7fe fa80 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8004b34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b36:	e014      	b.n	8004b62 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b38:	f7fe fa8e 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 8004b3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b3e:	e010      	b.n	8004b62 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b40:	4b5a      	ldr	r3, [pc, #360]	; (8004cac <UART_SetConfig+0x4e4>)
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b44:	e00d      	b.n	8004b62 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b46:	f7fe f9c1 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8004b4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b4c:	e009      	b.n	8004b62 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b54:	e005      	b.n	8004b62 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8089 	beq.w	8004c7c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <UART_SetConfig+0x4e0>)
 8004b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b7c:	005a      	lsls	r2, r3, #1
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	085b      	lsrs	r3, r3, #1
 8004b84:	441a      	add	r2, r3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	d916      	bls.n	8004bc4 <UART_SetConfig+0x3fc>
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9c:	d212      	bcs.n	8004bc4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f023 030f 	bic.w	r3, r3, #15
 8004ba6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	085b      	lsrs	r3, r3, #1
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	8bfb      	ldrh	r3, [r7, #30]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	8bfa      	ldrh	r2, [r7, #30]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	e05b      	b.n	8004c7c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bca:	e057      	b.n	8004c7c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d828      	bhi.n	8004c26 <UART_SetConfig+0x45e>
 8004bd4:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0x414>)
 8004bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bda:	bf00      	nop
 8004bdc:	08004c01 	.word	0x08004c01
 8004be0:	08004c09 	.word	0x08004c09
 8004be4:	08004c11 	.word	0x08004c11
 8004be8:	08004c27 	.word	0x08004c27
 8004bec:	08004c17 	.word	0x08004c17
 8004bf0:	08004c27 	.word	0x08004c27
 8004bf4:	08004c27 	.word	0x08004c27
 8004bf8:	08004c27 	.word	0x08004c27
 8004bfc:	08004c1f 	.word	0x08004c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c00:	f7fe fa18 	bl	8003034 <HAL_RCC_GetPCLK1Freq>
 8004c04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c06:	e014      	b.n	8004c32 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c08:	f7fe fa26 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c0e:	e010      	b.n	8004c32 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c10:	4b26      	ldr	r3, [pc, #152]	; (8004cac <UART_SetConfig+0x4e4>)
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c14:	e00d      	b.n	8004c32 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c16:	f7fe f959 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8004c1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c1c:	e009      	b.n	8004c32 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c24:	e005      	b.n	8004c32 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c30:	bf00      	nop
    }

    if (pclk != 0U)
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d021      	beq.n	8004c7c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <UART_SetConfig+0x4e0>)
 8004c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	441a      	add	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	d909      	bls.n	8004c76 <UART_SetConfig+0x4ae>
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c68:	d205      	bcs.n	8004c76 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60da      	str	r2, [r3, #12]
 8004c74:	e002      	b.n	8004c7c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c98:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3730      	adds	r7, #48	; 0x30
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca6:	bf00      	nop
 8004ca8:	08006de0 	.word	0x08006de0
 8004cac:	00f42400 	.word	0x00f42400

08004cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00a      	beq.n	8004d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	f003 0320 	and.w	r3, r3, #32
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dae:	d10a      	bne.n	8004dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	605a      	str	r2, [r3, #4]
  }
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af02      	add	r7, sp, #8
 8004df8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e02:	f7fc fd83 	bl	800190c <HAL_GetTick>
 8004e06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d10e      	bne.n	8004e34 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f832 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e028      	b.n	8004e86 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d10e      	bne.n	8004e60 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f81c 	bl	8004e8e <UART_WaitOnFlagUntilTimeout>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e012      	b.n	8004e86 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b09c      	sub	sp, #112	; 0x70
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	603b      	str	r3, [r7, #0]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e9e:	e0a9      	b.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea6:	f000 80a5 	beq.w	8004ff4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fc fd2f 	bl	800190c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d140      	bne.n	8004f42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ee0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ee4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	663b      	str	r3, [r7, #96]	; 0x60
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3308      	adds	r3, #8
 8004f10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f12:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e069      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d051      	beq.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5e:	d149      	bne.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
 8004f8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	613b      	str	r3, [r7, #16]
   return(result);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3308      	adds	r3, #8
 8004fba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fbc:	623a      	str	r2, [r7, #32]
 8004fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	69f9      	ldr	r1, [r7, #28]
 8004fc2:	6a3a      	ldr	r2, [r7, #32]
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e010      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	69da      	ldr	r2, [r3, #28]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	429a      	cmp	r2, r3
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	429a      	cmp	r2, r3
 8005010:	f43f af46 	beq.w	8004ea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3770      	adds	r7, #112	; 0x70
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005020:	b480      	push	{r7}
 8005022:	b0a3      	sub	sp, #140	; 0x8c
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	88fa      	ldrh	r2, [r7, #6]
 8005040:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d10e      	bne.n	8005072 <UART_Start_Receive_IT+0x52>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <UART_Start_Receive_IT+0x48>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005062:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005066:	e02d      	b.n	80050c4 <UART_Start_Receive_IT+0xa4>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	22ff      	movs	r2, #255	; 0xff
 800506c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005070:	e028      	b.n	80050c4 <UART_Start_Receive_IT+0xa4>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <UART_Start_Receive_IT+0x76>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <UART_Start_Receive_IT+0x6c>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800508a:	e01b      	b.n	80050c4 <UART_Start_Receive_IT+0xa4>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	227f      	movs	r2, #127	; 0x7f
 8005090:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005094:	e016      	b.n	80050c4 <UART_Start_Receive_IT+0xa4>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509e:	d10d      	bne.n	80050bc <UART_Start_Receive_IT+0x9c>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d104      	bne.n	80050b2 <UART_Start_Receive_IT+0x92>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	227f      	movs	r2, #127	; 0x7f
 80050ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050b0:	e008      	b.n	80050c4 <UART_Start_Receive_IT+0xa4>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	223f      	movs	r2, #63	; 0x3f
 80050b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80050ba:	e003      	b.n	80050c4 <UART_Start_Receive_IT+0xa4>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2222      	movs	r2, #34	; 0x22
 80050d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3308      	adds	r3, #8
 80050da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80050e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050e6:	f043 0301 	orr.w	r3, r3, #1
 80050ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3308      	adds	r3, #8
 80050f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80050f8:	673a      	str	r2, [r7, #112]	; 0x70
 80050fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80050fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005100:	e841 2300 	strex	r3, r2, [r1]
 8005104:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005106:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e3      	bne.n	80050d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005114:	d14f      	bne.n	80051b6 <UART_Start_Receive_IT+0x196>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800511c:	88fa      	ldrh	r2, [r7, #6]
 800511e:	429a      	cmp	r2, r3
 8005120:	d349      	bcc.n	80051b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512a:	d107      	bne.n	800513c <UART_Start_Receive_IT+0x11c>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4a46      	ldr	r2, [pc, #280]	; (8005250 <UART_Start_Receive_IT+0x230>)
 8005138:	675a      	str	r2, [r3, #116]	; 0x74
 800513a:	e002      	b.n	8005142 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4a45      	ldr	r2, [pc, #276]	; (8005254 <UART_Start_Receive_IT+0x234>)
 8005140:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01a      	beq.n	8005180 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800516c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800516e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005172:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800517a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e4      	bne.n	800514a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3308      	adds	r3, #8
 8005186:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005196:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80051a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80051a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a8:	e841 2300 	strex	r3, r2, [r1]
 80051ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e5      	bne.n	8005180 <UART_Start_Receive_IT+0x160>
 80051b4:	e046      	b.n	8005244 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051be:	d107      	bne.n	80051d0 <UART_Start_Receive_IT+0x1b0>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d103      	bne.n	80051d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a23      	ldr	r2, [pc, #140]	; (8005258 <UART_Start_Receive_IT+0x238>)
 80051cc:	675a      	str	r2, [r3, #116]	; 0x74
 80051ce:	e002      	b.n	80051d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4a22      	ldr	r2, [pc, #136]	; (800525c <UART_Start_Receive_IT+0x23c>)
 80051d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d019      	beq.n	8005212 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80051f2:	677b      	str	r3, [r7, #116]	; 0x74
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fc:	637b      	str	r3, [r7, #52]	; 0x34
 80051fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_Start_Receive_IT+0x1be>
 8005210:	e018      	b.n	8005244 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	613b      	str	r3, [r7, #16]
   return(result);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f043 0320 	orr.w	r3, r3, #32
 8005226:	67bb      	str	r3, [r7, #120]	; 0x78
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	461a      	mov	r2, r3
 800522e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	69f9      	ldr	r1, [r7, #28]
 8005236:	6a3a      	ldr	r2, [r7, #32]
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	61bb      	str	r3, [r7, #24]
   return(result);
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e6      	bne.n	8005212 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	378c      	adds	r7, #140	; 0x8c
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	08005db9 	.word	0x08005db9
 8005254:	08005a59 	.word	0x08005a59
 8005258:	080058a1 	.word	0x080058a1
 800525c:	080056e9 	.word	0x080056e9

08005260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b095      	sub	sp, #84	; 0x54
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800527c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	643b      	str	r3, [r7, #64]	; 0x40
 8005288:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800528c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e6      	bne.n	8005268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3308      	adds	r3, #8
 80052a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052b0:	f023 0301 	bic.w	r3, r3, #1
 80052b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c6:	e841 2300 	strex	r3, r2, [r1]
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1e3      	bne.n	800529a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d118      	bne.n	800530c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f023 0310 	bic.w	r3, r3, #16
 80052ee:	647b      	str	r3, [r7, #68]	; 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	6979      	ldr	r1, [r7, #20]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	613b      	str	r3, [r7, #16]
   return(result);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e6      	bne.n	80052da <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005320:	bf00      	nop
 8005322:	3754      	adds	r7, #84	; 0x54
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7fb fa0d 	bl	8000768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534e:	bf00      	nop
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005356:	b480      	push	{r7}
 8005358:	b08f      	sub	sp, #60	; 0x3c
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	2b21      	cmp	r3, #33	; 0x21
 8005366:	d14c      	bne.n	8005402 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d132      	bne.n	80053da <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	61fb      	str	r3, [r7, #28]
   return(result);
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005394:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e6      	bne.n	8005374 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6979      	ldr	r1, [r7, #20]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	613b      	str	r3, [r7, #16]
   return(result);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e6      	bne.n	80053a6 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80053d8:	e013      	b.n	8005402 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	781a      	ldrb	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005402:	bf00      	nop
 8005404:	373c      	adds	r7, #60	; 0x3c
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800540c:	b480      	push	{r7}
 800540e:	b091      	sub	sp, #68	; 0x44
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541a:	2b21      	cmp	r3, #33	; 0x21
 800541c:	d151      	bne.n	80054c2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d132      	bne.n	8005490 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	623b      	str	r3, [r7, #32]
   return(result);
 8005438:	6a3b      	ldr	r3, [r7, #32]
 800543a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	633b      	str	r3, [r7, #48]	; 0x30
 800544a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	60fb      	str	r3, [r7, #12]
   return(result);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547a:	61fb      	str	r3, [r7, #28]
 800547c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	69b9      	ldr	r1, [r7, #24]
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	617b      	str	r3, [r7, #20]
   return(result);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e6      	bne.n	800545c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800548e:	e018      	b.n	80054c2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054aa:	1c9a      	adds	r2, r3, #2
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80054c2:	bf00      	nop
 80054c4:	3744      	adds	r7, #68	; 0x44
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b091      	sub	sp, #68	; 0x44
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	2b21      	cmp	r3, #33	; 0x21
 80054dc:	d160      	bne.n	80055a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80054e6:	e057      	b.n	8005598 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d133      	bne.n	800555c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3308      	adds	r3, #8
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	623b      	str	r3, [r7, #32]
   return(result);
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800550a:	63bb      	str	r3, [r7, #56]	; 0x38
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005514:	633a      	str	r2, [r7, #48]	; 0x30
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800551a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e5      	bne.n	80054f4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	60fb      	str	r3, [r7, #12]
   return(result);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	69b9      	ldr	r1, [r7, #24]
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	617b      	str	r3, [r7, #20]
   return(result);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e6      	bne.n	8005528 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800555a:	e021      	b.n	80055a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b00      	cmp	r3, #0
 8005568:	d013      	beq.n	8005592 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556e:	781a      	ldrb	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005592:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005594:	3b01      	subs	r3, #1
 8005596:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005598:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1a4      	bne.n	80054e8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800559e:	e7ff      	b.n	80055a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80055a0:	bf00      	nop
 80055a2:	3744      	adds	r7, #68	; 0x44
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr

080055aa <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b091      	sub	sp, #68	; 0x44
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b8:	2b21      	cmp	r3, #33	; 0x21
 80055ba:	d165      	bne.n	8005688 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80055c4:	e05c      	b.n	8005680 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d133      	bne.n	800563a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3308      	adds	r3, #8
 80055d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055e8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fa:	e841 2300 	strex	r3, r2, [r1]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1e5      	bne.n	80055d2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	e853 3f00 	ldrex	r3, [r3]
 8005612:	60bb      	str	r3, [r7, #8]
   return(result);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561a:	633b      	str	r3, [r7, #48]	; 0x30
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	461a      	mov	r2, r3
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6979      	ldr	r1, [r7, #20]
 800562a:	69ba      	ldr	r2, [r7, #24]
 800562c:	e841 2300 	strex	r3, r2, [r1]
 8005630:	613b      	str	r3, [r7, #16]
   return(result);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1e6      	bne.n	8005606 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005638:	e026      	b.n	8005688 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	2b00      	cmp	r3, #0
 8005646:	d018      	beq.n	800567a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800565c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	1c9a      	adds	r2, r3, #2
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800567a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800567c:	3b01      	subs	r3, #1
 800567e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005680:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005682:	2b00      	cmp	r3, #0
 8005684:	d19f      	bne.n	80055c6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005686:	e7ff      	b.n	8005688 <UART_TxISR_16BIT_FIFOEN+0xde>
 8005688:	bf00      	nop
 800568a:	3744      	adds	r7, #68	; 0x44
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b088      	sub	sp, #32
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6979      	ldr	r1, [r7, #20]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	613b      	str	r3, [r7, #16]
   return(result);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e6      	bne.n	800569a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fb f85c 	bl	8000798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056e0:	bf00      	nop
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b09c      	sub	sp, #112	; 0x70
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056f6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005700:	2b22      	cmp	r3, #34	; 0x22
 8005702:	f040 80be 	bne.w	8005882 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005710:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005714:	b2d9      	uxtb	r1, r3
 8005716:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800571a:	b2da      	uxtb	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	400a      	ands	r2, r1
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005736:	b29b      	uxth	r3, r3
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 80a1 	bne.w	8005892 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800575e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005760:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005764:	66bb      	str	r3, [r7, #104]	; 0x68
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800576e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005770:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005772:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005776:	e841 2300 	strex	r3, r2, [r1]
 800577a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800577c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1e6      	bne.n	8005750 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3308      	adds	r3, #8
 8005788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	f023 0301 	bic.w	r3, r3, #1
 8005798:	667b      	str	r3, [r7, #100]	; 0x64
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3308      	adds	r3, #8
 80057a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80057a2:	647a      	str	r2, [r7, #68]	; 0x44
 80057a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e5      	bne.n	8005782 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a33      	ldr	r2, [pc, #204]	; (800589c <UART_RxISR_8BIT+0x1b4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d01f      	beq.n	8005814 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d018      	beq.n	8005814 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	e853 3f00 	ldrex	r3, [r3]
 80057ee:	623b      	str	r3, [r7, #32]
   return(result);
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057f6:	663b      	str	r3, [r7, #96]	; 0x60
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	461a      	mov	r2, r3
 80057fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005800:	633b      	str	r3, [r7, #48]	; 0x30
 8005802:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005808:	e841 2300 	strex	r3, r2, [r1]
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1e6      	bne.n	80057e2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005818:	2b01      	cmp	r3, #1
 800581a:	d12e      	bne.n	800587a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0310 	bic.w	r3, r3, #16
 8005836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	69b9      	ldr	r1, [r7, #24]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	617b      	str	r3, [r7, #20]
   return(result);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e6      	bne.n	8005822 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	f003 0310 	and.w	r3, r3, #16
 800585e:	2b10      	cmp	r3, #16
 8005860:	d103      	bne.n	800586a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2210      	movs	r2, #16
 8005868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fe ff9c 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005878:	e00b      	b.n	8005892 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fa ffa4 	bl	80007c8 <HAL_UART_RxCpltCallback>
}
 8005880:	e007      	b.n	8005892 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699a      	ldr	r2, [r3, #24]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0208 	orr.w	r2, r2, #8
 8005890:	619a      	str	r2, [r3, #24]
}
 8005892:	bf00      	nop
 8005894:	3770      	adds	r7, #112	; 0x70
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40008000 	.word	0x40008000

080058a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b09c      	sub	sp, #112	; 0x70
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b8:	2b22      	cmp	r3, #34	; 0x22
 80058ba:	f040 80be 	bne.w	8005a3a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058cc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80058ce:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80058d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80058d6:	4013      	ands	r3, r2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	1c9a      	adds	r2, r3, #2
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 80a1 	bne.w	8005a4a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800591c:	667b      	str	r3, [r7, #100]	; 0x64
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	461a      	mov	r2, r3
 8005924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005926:	657b      	str	r3, [r7, #84]	; 0x54
 8005928:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800592c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800592e:	e841 2300 	strex	r3, r2, [r1]
 8005932:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1e6      	bne.n	8005908 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3308      	adds	r3, #8
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	663b      	str	r3, [r7, #96]	; 0x60
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3308      	adds	r3, #8
 8005958:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800595a:	643a      	str	r2, [r7, #64]	; 0x40
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e5      	bne.n	800593a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a33      	ldr	r2, [pc, #204]	; (8005a54 <UART_RxISR_16BIT+0x1b4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d01f      	beq.n	80059cc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d018      	beq.n	80059cc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	e853 3f00 	ldrex	r3, [r3]
 80059a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c0:	e841 2300 	strex	r3, r2, [r1]
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1e6      	bne.n	800599a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d12e      	bne.n	8005a32 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	f023 0310 	bic.w	r3, r3, #16
 80059ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6979      	ldr	r1, [r7, #20]
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	613b      	str	r3, [r7, #16]
   return(result);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e6      	bne.n	80059da <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	2b10      	cmp	r3, #16
 8005a18:	d103      	bne.n	8005a22 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2210      	movs	r2, #16
 8005a20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fe fec0 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a30:	e00b      	b.n	8005a4a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7fa fec8 	bl	80007c8 <HAL_UART_RxCpltCallback>
}
 8005a38:	e007      	b.n	8005a4a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f042 0208 	orr.w	r2, r2, #8
 8005a48:	619a      	str	r2, [r3, #24]
}
 8005a4a:	bf00      	nop
 8005a4c:	3770      	adds	r7, #112	; 0x70
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	40008000 	.word	0x40008000

08005a58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b0ac      	sub	sp, #176	; 0xb0
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a66:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8e:	2b22      	cmp	r3, #34	; 0x22
 8005a90:	f040 8182 	bne.w	8005d98 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a9a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a9e:	e125      	b.n	8005cec <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005aaa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005aae:	b2d9      	uxtb	r1, r3
 8005ab0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aba:	400a      	ands	r2, r1
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d053      	beq.n	8005b9a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d011      	beq.n	8005b22 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005afe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00b      	beq.n	8005b22 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b18:	f043 0201 	orr.w	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d011      	beq.n	8005b52 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b48:	f043 0204 	orr.w	r2, r3, #4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d011      	beq.n	8005b82 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00b      	beq.n	8005b82 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2204      	movs	r2, #4
 8005b70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b78:	f043 0202 	orr.w	r2, r3, #2
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d006      	beq.n	8005b9a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fa fdeb 	bl	8000768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f040 80a2 	bne.w	8005cec <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bb0:	e853 3f00 	ldrex	r3, [r3]
 8005bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bcc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005bd0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005bd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e4      	bne.n	8005ba8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c06:	66ba      	str	r2, [r7, #104]	; 0x68
 8005c08:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005c0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c0e:	e841 2300 	strex	r3, r2, [r1]
 8005c12:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1e1      	bne.n	8005bde <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a5f      	ldr	r2, [pc, #380]	; (8005db0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d021      	beq.n	8005c7c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01a      	beq.n	8005c7c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c68:	657b      	str	r3, [r7, #84]	; 0x54
 8005c6a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e4      	bne.n	8005c46 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d130      	bne.n	8005ce6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9a:	f023 0310 	bic.w	r3, r3, #16
 8005c9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
 8005cae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e4      	bne.n	8005c8a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f003 0310 	and.w	r3, r3, #16
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d103      	bne.n	8005cd6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2210      	movs	r2, #16
 8005cd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fe fd66 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
 8005ce4:	e002      	b.n	8005cec <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fa fd6e 	bl	80007c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005cec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d006      	beq.n	8005d02 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f47f aecf 	bne.w	8005aa0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d0c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d049      	beq.n	8005da8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d1a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d242      	bcs.n	8005da8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3308      	adds	r3, #8
 8005d42:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e3      	bne.n	8005d22 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005d5e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f043 0320 	orr.w	r3, r3, #32
 8005d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d86:	6979      	ldr	r1, [r7, #20]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	e841 2300 	strex	r3, r2, [r1]
 8005d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1e4      	bne.n	8005d60 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d96:	e007      	b.n	8005da8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0208 	orr.w	r2, r2, #8
 8005da6:	619a      	str	r2, [r3, #24]
}
 8005da8:	bf00      	nop
 8005daa:	37b0      	adds	r7, #176	; 0xb0
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40008000 	.word	0x40008000
 8005db4:	080056e9 	.word	0x080056e9

08005db8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b0ae      	sub	sp, #184	; 0xb8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005dc6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dee:	2b22      	cmp	r3, #34	; 0x22
 8005df0:	f040 8186 	bne.w	8006100 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dfa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dfe:	e129      	b.n	8006054 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e12:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005e16:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	1c9a      	adds	r2, r3, #2
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d053      	beq.n	8005efe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d011      	beq.n	8005e86 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2201      	movs	r2, #1
 8005e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7c:	f043 0201 	orr.w	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d011      	beq.n	8005eb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00b      	beq.n	8005eb6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eac:	f043 0204 	orr.w	r2, r3, #4
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d011      	beq.n	8005ee6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005ec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00b      	beq.n	8005ee6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2204      	movs	r2, #4
 8005ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005edc:	f043 0202 	orr.w	r2, r3, #2
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d006      	beq.n	8005efe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7fa fc39 	bl	8000768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f040 80a4 	bne.w	8006054 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f32:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e2      	bne.n	8005f0c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f50:	e853 3f00 	ldrex	r3, [r3]
 8005f54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f5c:	f023 0301 	bic.w	r3, r3, #1
 8005f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005f6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e1      	bne.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a5f      	ldr	r2, [pc, #380]	; (8006118 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d021      	beq.n	8005fe4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d01a      	beq.n	8005fe4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005fd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fd2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e4      	bne.n	8005fae <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d130      	bne.n	800604e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006002:	f023 0310 	bic.w	r3, r3, #16
 8006006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006014:	647b      	str	r3, [r7, #68]	; 0x44
 8006016:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800601a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e4      	bne.n	8005ff2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b10      	cmp	r3, #16
 8006034:	d103      	bne.n	800603e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2210      	movs	r2, #16
 800603c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fe fbb2 	bl	80047b0 <HAL_UARTEx_RxEventCallback>
 800604c:	e002      	b.n	8006054 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7fa fbba 	bl	80007c8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006054:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006058:	2b00      	cmp	r3, #0
 800605a:	d006      	beq.n	800606a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800605c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006060:	f003 0320 	and.w	r3, r3, #32
 8006064:	2b00      	cmp	r3, #0
 8006066:	f47f aecb 	bne.w	8005e00 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006070:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006074:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006078:	2b00      	cmp	r3, #0
 800607a:	d049      	beq.n	8006110 <UART_RxISR_16BIT_FIFOEN+0x358>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006082:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006086:	429a      	cmp	r2, r3
 8006088:	d242      	bcs.n	8006110 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3308      	adds	r3, #8
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	623b      	str	r3, [r7, #32]
   return(result);
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3308      	adds	r3, #8
 80060aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80060ae:	633a      	str	r2, [r7, #48]	; 0x30
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1e3      	bne.n	800608a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80060c6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f043 0320 	orr.w	r3, r3, #32
 80060dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ea:	61fb      	str	r3, [r7, #28]
 80060ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	69b9      	ldr	r1, [r7, #24]
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	617b      	str	r3, [r7, #20]
   return(result);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e4      	bne.n	80060c8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060fe:	e007      	b.n	8006110 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0208 	orr.w	r2, r2, #8
 800610e:	619a      	str	r2, [r3, #24]
}
 8006110:	bf00      	nop
 8006112:	37b8      	adds	r7, #184	; 0xb8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40008000 	.word	0x40008000
 800611c:	080058a1 	.word	0x080058a1

08006120 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	4770      	bx	lr

08006132 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006156:	b480      	push	{r7}
 8006158:	b085      	sub	sp, #20
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006164:	2b01      	cmp	r3, #1
 8006166:	d101      	bne.n	800616c <HAL_UARTEx_DisableFifoMode+0x16>
 8006168:	2302      	movs	r3, #2
 800616a:	e027      	b.n	80061bc <HAL_UARTEx_DisableFifoMode+0x66>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2224      	movs	r2, #36	; 0x24
 8006178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0201 	bic.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800619a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061da:	2302      	movs	r3, #2
 80061dc:	e02d      	b.n	800623a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2224      	movs	r2, #36	; 0x24
 80061ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f850 	bl	80062c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006256:	2302      	movs	r3, #2
 8006258:	e02d      	b.n	80062b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2224      	movs	r2, #36	; 0x24
 8006266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0201 	bic.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f812 	bl	80062c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d108      	bne.n	80062e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062e0:	e031      	b.n	8006346 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062e2:	2308      	movs	r3, #8
 80062e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062e6:	2308      	movs	r3, #8
 80062e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	0e5b      	lsrs	r3, r3, #25
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	0f5b      	lsrs	r3, r3, #29
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	7b3a      	ldrb	r2, [r7, #12]
 800630e:	4910      	ldr	r1, [pc, #64]	; (8006350 <UARTEx_SetNbDataToProcess+0x90>)
 8006310:	5c8a      	ldrb	r2, [r1, r2]
 8006312:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006316:	7b3a      	ldrb	r2, [r7, #12]
 8006318:	490e      	ldr	r1, [pc, #56]	; (8006354 <UARTEx_SetNbDataToProcess+0x94>)
 800631a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800631c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006320:	b29a      	uxth	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	7b7a      	ldrb	r2, [r7, #13]
 800632c:	4908      	ldr	r1, [pc, #32]	; (8006350 <UARTEx_SetNbDataToProcess+0x90>)
 800632e:	5c8a      	ldrb	r2, [r1, r2]
 8006330:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006334:	7b7a      	ldrb	r2, [r7, #13]
 8006336:	4907      	ldr	r1, [pc, #28]	; (8006354 <UARTEx_SetNbDataToProcess+0x94>)
 8006338:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800633a:	fb93 f3f2 	sdiv	r3, r3, r2
 800633e:	b29a      	uxth	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006346:	bf00      	nop
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr
 8006350:	08006df8 	.word	0x08006df8
 8006354:	08006e00 	.word	0x08006e00

08006358 <__errno>:
 8006358:	4b01      	ldr	r3, [pc, #4]	; (8006360 <__errno+0x8>)
 800635a:	6818      	ldr	r0, [r3, #0]
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	2000000c 	.word	0x2000000c

08006364 <__libc_init_array>:
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	4d0d      	ldr	r5, [pc, #52]	; (800639c <__libc_init_array+0x38>)
 8006368:	4c0d      	ldr	r4, [pc, #52]	; (80063a0 <__libc_init_array+0x3c>)
 800636a:	1b64      	subs	r4, r4, r5
 800636c:	10a4      	asrs	r4, r4, #2
 800636e:	2600      	movs	r6, #0
 8006370:	42a6      	cmp	r6, r4
 8006372:	d109      	bne.n	8006388 <__libc_init_array+0x24>
 8006374:	4d0b      	ldr	r5, [pc, #44]	; (80063a4 <__libc_init_array+0x40>)
 8006376:	4c0c      	ldr	r4, [pc, #48]	; (80063a8 <__libc_init_array+0x44>)
 8006378:	f000 fca0 	bl	8006cbc <_init>
 800637c:	1b64      	subs	r4, r4, r5
 800637e:	10a4      	asrs	r4, r4, #2
 8006380:	2600      	movs	r6, #0
 8006382:	42a6      	cmp	r6, r4
 8006384:	d105      	bne.n	8006392 <__libc_init_array+0x2e>
 8006386:	bd70      	pop	{r4, r5, r6, pc}
 8006388:	f855 3b04 	ldr.w	r3, [r5], #4
 800638c:	4798      	blx	r3
 800638e:	3601      	adds	r6, #1
 8006390:	e7ee      	b.n	8006370 <__libc_init_array+0xc>
 8006392:	f855 3b04 	ldr.w	r3, [r5], #4
 8006396:	4798      	blx	r3
 8006398:	3601      	adds	r6, #1
 800639a:	e7f2      	b.n	8006382 <__libc_init_array+0x1e>
 800639c:	08006e44 	.word	0x08006e44
 80063a0:	08006e44 	.word	0x08006e44
 80063a4:	08006e44 	.word	0x08006e44
 80063a8:	08006e48 	.word	0x08006e48

080063ac <memcpy>:
 80063ac:	440a      	add	r2, r1
 80063ae:	4291      	cmp	r1, r2
 80063b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063b4:	d100      	bne.n	80063b8 <memcpy+0xc>
 80063b6:	4770      	bx	lr
 80063b8:	b510      	push	{r4, lr}
 80063ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c2:	4291      	cmp	r1, r2
 80063c4:	d1f9      	bne.n	80063ba <memcpy+0xe>
 80063c6:	bd10      	pop	{r4, pc}

080063c8 <memset>:
 80063c8:	4402      	add	r2, r0
 80063ca:	4603      	mov	r3, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <sniprintf>:
 80063d8:	b40c      	push	{r2, r3}
 80063da:	b530      	push	{r4, r5, lr}
 80063dc:	4b17      	ldr	r3, [pc, #92]	; (800643c <sniprintf+0x64>)
 80063de:	1e0c      	subs	r4, r1, #0
 80063e0:	681d      	ldr	r5, [r3, #0]
 80063e2:	b09d      	sub	sp, #116	; 0x74
 80063e4:	da08      	bge.n	80063f8 <sniprintf+0x20>
 80063e6:	238b      	movs	r3, #139	; 0x8b
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ee:	b01d      	add	sp, #116	; 0x74
 80063f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063f4:	b002      	add	sp, #8
 80063f6:	4770      	bx	lr
 80063f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80063fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006400:	bf14      	ite	ne
 8006402:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006406:	4623      	moveq	r3, r4
 8006408:	9304      	str	r3, [sp, #16]
 800640a:	9307      	str	r3, [sp, #28]
 800640c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006410:	9002      	str	r0, [sp, #8]
 8006412:	9006      	str	r0, [sp, #24]
 8006414:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006418:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800641a:	ab21      	add	r3, sp, #132	; 0x84
 800641c:	a902      	add	r1, sp, #8
 800641e:	4628      	mov	r0, r5
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	f000 f869 	bl	80064f8 <_svfiprintf_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	bfbc      	itt	lt
 800642a:	238b      	movlt	r3, #139	; 0x8b
 800642c:	602b      	strlt	r3, [r5, #0]
 800642e:	2c00      	cmp	r4, #0
 8006430:	d0dd      	beq.n	80063ee <sniprintf+0x16>
 8006432:	9b02      	ldr	r3, [sp, #8]
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	e7d9      	b.n	80063ee <sniprintf+0x16>
 800643a:	bf00      	nop
 800643c:	2000000c 	.word	0x2000000c

08006440 <__ssputs_r>:
 8006440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006444:	688e      	ldr	r6, [r1, #8]
 8006446:	429e      	cmp	r6, r3
 8006448:	4682      	mov	sl, r0
 800644a:	460c      	mov	r4, r1
 800644c:	4690      	mov	r8, r2
 800644e:	461f      	mov	r7, r3
 8006450:	d838      	bhi.n	80064c4 <__ssputs_r+0x84>
 8006452:	898a      	ldrh	r2, [r1, #12]
 8006454:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006458:	d032      	beq.n	80064c0 <__ssputs_r+0x80>
 800645a:	6825      	ldr	r5, [r4, #0]
 800645c:	6909      	ldr	r1, [r1, #16]
 800645e:	eba5 0901 	sub.w	r9, r5, r1
 8006462:	6965      	ldr	r5, [r4, #20]
 8006464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006468:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800646c:	3301      	adds	r3, #1
 800646e:	444b      	add	r3, r9
 8006470:	106d      	asrs	r5, r5, #1
 8006472:	429d      	cmp	r5, r3
 8006474:	bf38      	it	cc
 8006476:	461d      	movcc	r5, r3
 8006478:	0553      	lsls	r3, r2, #21
 800647a:	d531      	bpl.n	80064e0 <__ssputs_r+0xa0>
 800647c:	4629      	mov	r1, r5
 800647e:	f000 fb53 	bl	8006b28 <_malloc_r>
 8006482:	4606      	mov	r6, r0
 8006484:	b950      	cbnz	r0, 800649c <__ssputs_r+0x5c>
 8006486:	230c      	movs	r3, #12
 8006488:	f8ca 3000 	str.w	r3, [sl]
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006492:	81a3      	strh	r3, [r4, #12]
 8006494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	6921      	ldr	r1, [r4, #16]
 800649e:	464a      	mov	r2, r9
 80064a0:	f7ff ff84 	bl	80063ac <memcpy>
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ae:	81a3      	strh	r3, [r4, #12]
 80064b0:	6126      	str	r6, [r4, #16]
 80064b2:	6165      	str	r5, [r4, #20]
 80064b4:	444e      	add	r6, r9
 80064b6:	eba5 0509 	sub.w	r5, r5, r9
 80064ba:	6026      	str	r6, [r4, #0]
 80064bc:	60a5      	str	r5, [r4, #8]
 80064be:	463e      	mov	r6, r7
 80064c0:	42be      	cmp	r6, r7
 80064c2:	d900      	bls.n	80064c6 <__ssputs_r+0x86>
 80064c4:	463e      	mov	r6, r7
 80064c6:	6820      	ldr	r0, [r4, #0]
 80064c8:	4632      	mov	r2, r6
 80064ca:	4641      	mov	r1, r8
 80064cc:	f000 faa8 	bl	8006a20 <memmove>
 80064d0:	68a3      	ldr	r3, [r4, #8]
 80064d2:	1b9b      	subs	r3, r3, r6
 80064d4:	60a3      	str	r3, [r4, #8]
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	4433      	add	r3, r6
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	2000      	movs	r0, #0
 80064de:	e7db      	b.n	8006498 <__ssputs_r+0x58>
 80064e0:	462a      	mov	r2, r5
 80064e2:	f000 fb95 	bl	8006c10 <_realloc_r>
 80064e6:	4606      	mov	r6, r0
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d1e1      	bne.n	80064b0 <__ssputs_r+0x70>
 80064ec:	6921      	ldr	r1, [r4, #16]
 80064ee:	4650      	mov	r0, sl
 80064f0:	f000 fab0 	bl	8006a54 <_free_r>
 80064f4:	e7c7      	b.n	8006486 <__ssputs_r+0x46>
	...

080064f8 <_svfiprintf_r>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	4698      	mov	r8, r3
 80064fe:	898b      	ldrh	r3, [r1, #12]
 8006500:	061b      	lsls	r3, r3, #24
 8006502:	b09d      	sub	sp, #116	; 0x74
 8006504:	4607      	mov	r7, r0
 8006506:	460d      	mov	r5, r1
 8006508:	4614      	mov	r4, r2
 800650a:	d50e      	bpl.n	800652a <_svfiprintf_r+0x32>
 800650c:	690b      	ldr	r3, [r1, #16]
 800650e:	b963      	cbnz	r3, 800652a <_svfiprintf_r+0x32>
 8006510:	2140      	movs	r1, #64	; 0x40
 8006512:	f000 fb09 	bl	8006b28 <_malloc_r>
 8006516:	6028      	str	r0, [r5, #0]
 8006518:	6128      	str	r0, [r5, #16]
 800651a:	b920      	cbnz	r0, 8006526 <_svfiprintf_r+0x2e>
 800651c:	230c      	movs	r3, #12
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006524:	e0d1      	b.n	80066ca <_svfiprintf_r+0x1d2>
 8006526:	2340      	movs	r3, #64	; 0x40
 8006528:	616b      	str	r3, [r5, #20]
 800652a:	2300      	movs	r3, #0
 800652c:	9309      	str	r3, [sp, #36]	; 0x24
 800652e:	2320      	movs	r3, #32
 8006530:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006534:	f8cd 800c 	str.w	r8, [sp, #12]
 8006538:	2330      	movs	r3, #48	; 0x30
 800653a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80066e4 <_svfiprintf_r+0x1ec>
 800653e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006542:	f04f 0901 	mov.w	r9, #1
 8006546:	4623      	mov	r3, r4
 8006548:	469a      	mov	sl, r3
 800654a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800654e:	b10a      	cbz	r2, 8006554 <_svfiprintf_r+0x5c>
 8006550:	2a25      	cmp	r2, #37	; 0x25
 8006552:	d1f9      	bne.n	8006548 <_svfiprintf_r+0x50>
 8006554:	ebba 0b04 	subs.w	fp, sl, r4
 8006558:	d00b      	beq.n	8006572 <_svfiprintf_r+0x7a>
 800655a:	465b      	mov	r3, fp
 800655c:	4622      	mov	r2, r4
 800655e:	4629      	mov	r1, r5
 8006560:	4638      	mov	r0, r7
 8006562:	f7ff ff6d 	bl	8006440 <__ssputs_r>
 8006566:	3001      	adds	r0, #1
 8006568:	f000 80aa 	beq.w	80066c0 <_svfiprintf_r+0x1c8>
 800656c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800656e:	445a      	add	r2, fp
 8006570:	9209      	str	r2, [sp, #36]	; 0x24
 8006572:	f89a 3000 	ldrb.w	r3, [sl]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 80a2 	beq.w	80066c0 <_svfiprintf_r+0x1c8>
 800657c:	2300      	movs	r3, #0
 800657e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006582:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006586:	f10a 0a01 	add.w	sl, sl, #1
 800658a:	9304      	str	r3, [sp, #16]
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006592:	931a      	str	r3, [sp, #104]	; 0x68
 8006594:	4654      	mov	r4, sl
 8006596:	2205      	movs	r2, #5
 8006598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659c:	4851      	ldr	r0, [pc, #324]	; (80066e4 <_svfiprintf_r+0x1ec>)
 800659e:	f7f9 fdef 	bl	8000180 <memchr>
 80065a2:	9a04      	ldr	r2, [sp, #16]
 80065a4:	b9d8      	cbnz	r0, 80065de <_svfiprintf_r+0xe6>
 80065a6:	06d0      	lsls	r0, r2, #27
 80065a8:	bf44      	itt	mi
 80065aa:	2320      	movmi	r3, #32
 80065ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065b0:	0711      	lsls	r1, r2, #28
 80065b2:	bf44      	itt	mi
 80065b4:	232b      	movmi	r3, #43	; 0x2b
 80065b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ba:	f89a 3000 	ldrb.w	r3, [sl]
 80065be:	2b2a      	cmp	r3, #42	; 0x2a
 80065c0:	d015      	beq.n	80065ee <_svfiprintf_r+0xf6>
 80065c2:	9a07      	ldr	r2, [sp, #28]
 80065c4:	4654      	mov	r4, sl
 80065c6:	2000      	movs	r0, #0
 80065c8:	f04f 0c0a 	mov.w	ip, #10
 80065cc:	4621      	mov	r1, r4
 80065ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065d2:	3b30      	subs	r3, #48	; 0x30
 80065d4:	2b09      	cmp	r3, #9
 80065d6:	d94e      	bls.n	8006676 <_svfiprintf_r+0x17e>
 80065d8:	b1b0      	cbz	r0, 8006608 <_svfiprintf_r+0x110>
 80065da:	9207      	str	r2, [sp, #28]
 80065dc:	e014      	b.n	8006608 <_svfiprintf_r+0x110>
 80065de:	eba0 0308 	sub.w	r3, r0, r8
 80065e2:	fa09 f303 	lsl.w	r3, r9, r3
 80065e6:	4313      	orrs	r3, r2
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	46a2      	mov	sl, r4
 80065ec:	e7d2      	b.n	8006594 <_svfiprintf_r+0x9c>
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	9103      	str	r1, [sp, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bfbb      	ittet	lt
 80065fa:	425b      	neglt	r3, r3
 80065fc:	f042 0202 	orrlt.w	r2, r2, #2
 8006600:	9307      	strge	r3, [sp, #28]
 8006602:	9307      	strlt	r3, [sp, #28]
 8006604:	bfb8      	it	lt
 8006606:	9204      	strlt	r2, [sp, #16]
 8006608:	7823      	ldrb	r3, [r4, #0]
 800660a:	2b2e      	cmp	r3, #46	; 0x2e
 800660c:	d10c      	bne.n	8006628 <_svfiprintf_r+0x130>
 800660e:	7863      	ldrb	r3, [r4, #1]
 8006610:	2b2a      	cmp	r3, #42	; 0x2a
 8006612:	d135      	bne.n	8006680 <_svfiprintf_r+0x188>
 8006614:	9b03      	ldr	r3, [sp, #12]
 8006616:	1d1a      	adds	r2, r3, #4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	9203      	str	r2, [sp, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	bfb8      	it	lt
 8006620:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006624:	3402      	adds	r4, #2
 8006626:	9305      	str	r3, [sp, #20]
 8006628:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80066e8 <_svfiprintf_r+0x1f0>
 800662c:	7821      	ldrb	r1, [r4, #0]
 800662e:	2203      	movs	r2, #3
 8006630:	4650      	mov	r0, sl
 8006632:	f7f9 fda5 	bl	8000180 <memchr>
 8006636:	b140      	cbz	r0, 800664a <_svfiprintf_r+0x152>
 8006638:	2340      	movs	r3, #64	; 0x40
 800663a:	eba0 000a 	sub.w	r0, r0, sl
 800663e:	fa03 f000 	lsl.w	r0, r3, r0
 8006642:	9b04      	ldr	r3, [sp, #16]
 8006644:	4303      	orrs	r3, r0
 8006646:	3401      	adds	r4, #1
 8006648:	9304      	str	r3, [sp, #16]
 800664a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800664e:	4827      	ldr	r0, [pc, #156]	; (80066ec <_svfiprintf_r+0x1f4>)
 8006650:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006654:	2206      	movs	r2, #6
 8006656:	f7f9 fd93 	bl	8000180 <memchr>
 800665a:	2800      	cmp	r0, #0
 800665c:	d038      	beq.n	80066d0 <_svfiprintf_r+0x1d8>
 800665e:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <_svfiprintf_r+0x1f8>)
 8006660:	bb1b      	cbnz	r3, 80066aa <_svfiprintf_r+0x1b2>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	3307      	adds	r3, #7
 8006666:	f023 0307 	bic.w	r3, r3, #7
 800666a:	3308      	adds	r3, #8
 800666c:	9303      	str	r3, [sp, #12]
 800666e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006670:	4433      	add	r3, r6
 8006672:	9309      	str	r3, [sp, #36]	; 0x24
 8006674:	e767      	b.n	8006546 <_svfiprintf_r+0x4e>
 8006676:	fb0c 3202 	mla	r2, ip, r2, r3
 800667a:	460c      	mov	r4, r1
 800667c:	2001      	movs	r0, #1
 800667e:	e7a5      	b.n	80065cc <_svfiprintf_r+0xd4>
 8006680:	2300      	movs	r3, #0
 8006682:	3401      	adds	r4, #1
 8006684:	9305      	str	r3, [sp, #20]
 8006686:	4619      	mov	r1, r3
 8006688:	f04f 0c0a 	mov.w	ip, #10
 800668c:	4620      	mov	r0, r4
 800668e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006692:	3a30      	subs	r2, #48	; 0x30
 8006694:	2a09      	cmp	r2, #9
 8006696:	d903      	bls.n	80066a0 <_svfiprintf_r+0x1a8>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0c5      	beq.n	8006628 <_svfiprintf_r+0x130>
 800669c:	9105      	str	r1, [sp, #20]
 800669e:	e7c3      	b.n	8006628 <_svfiprintf_r+0x130>
 80066a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80066a4:	4604      	mov	r4, r0
 80066a6:	2301      	movs	r3, #1
 80066a8:	e7f0      	b.n	800668c <_svfiprintf_r+0x194>
 80066aa:	ab03      	add	r3, sp, #12
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	462a      	mov	r2, r5
 80066b0:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <_svfiprintf_r+0x1fc>)
 80066b2:	a904      	add	r1, sp, #16
 80066b4:	4638      	mov	r0, r7
 80066b6:	f3af 8000 	nop.w
 80066ba:	1c42      	adds	r2, r0, #1
 80066bc:	4606      	mov	r6, r0
 80066be:	d1d6      	bne.n	800666e <_svfiprintf_r+0x176>
 80066c0:	89ab      	ldrh	r3, [r5, #12]
 80066c2:	065b      	lsls	r3, r3, #25
 80066c4:	f53f af2c 	bmi.w	8006520 <_svfiprintf_r+0x28>
 80066c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ca:	b01d      	add	sp, #116	; 0x74
 80066cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d0:	ab03      	add	r3, sp, #12
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	462a      	mov	r2, r5
 80066d6:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <_svfiprintf_r+0x1fc>)
 80066d8:	a904      	add	r1, sp, #16
 80066da:	4638      	mov	r0, r7
 80066dc:	f000 f87a 	bl	80067d4 <_printf_i>
 80066e0:	e7eb      	b.n	80066ba <_svfiprintf_r+0x1c2>
 80066e2:	bf00      	nop
 80066e4:	08006e08 	.word	0x08006e08
 80066e8:	08006e0e 	.word	0x08006e0e
 80066ec:	08006e12 	.word	0x08006e12
 80066f0:	00000000 	.word	0x00000000
 80066f4:	08006441 	.word	0x08006441

080066f8 <_printf_common>:
 80066f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066fc:	4616      	mov	r6, r2
 80066fe:	4699      	mov	r9, r3
 8006700:	688a      	ldr	r2, [r1, #8]
 8006702:	690b      	ldr	r3, [r1, #16]
 8006704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006708:	4293      	cmp	r3, r2
 800670a:	bfb8      	it	lt
 800670c:	4613      	movlt	r3, r2
 800670e:	6033      	str	r3, [r6, #0]
 8006710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006714:	4607      	mov	r7, r0
 8006716:	460c      	mov	r4, r1
 8006718:	b10a      	cbz	r2, 800671e <_printf_common+0x26>
 800671a:	3301      	adds	r3, #1
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	0699      	lsls	r1, r3, #26
 8006722:	bf42      	ittt	mi
 8006724:	6833      	ldrmi	r3, [r6, #0]
 8006726:	3302      	addmi	r3, #2
 8006728:	6033      	strmi	r3, [r6, #0]
 800672a:	6825      	ldr	r5, [r4, #0]
 800672c:	f015 0506 	ands.w	r5, r5, #6
 8006730:	d106      	bne.n	8006740 <_printf_common+0x48>
 8006732:	f104 0a19 	add.w	sl, r4, #25
 8006736:	68e3      	ldr	r3, [r4, #12]
 8006738:	6832      	ldr	r2, [r6, #0]
 800673a:	1a9b      	subs	r3, r3, r2
 800673c:	42ab      	cmp	r3, r5
 800673e:	dc26      	bgt.n	800678e <_printf_common+0x96>
 8006740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006744:	1e13      	subs	r3, r2, #0
 8006746:	6822      	ldr	r2, [r4, #0]
 8006748:	bf18      	it	ne
 800674a:	2301      	movne	r3, #1
 800674c:	0692      	lsls	r2, r2, #26
 800674e:	d42b      	bmi.n	80067a8 <_printf_common+0xb0>
 8006750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006754:	4649      	mov	r1, r9
 8006756:	4638      	mov	r0, r7
 8006758:	47c0      	blx	r8
 800675a:	3001      	adds	r0, #1
 800675c:	d01e      	beq.n	800679c <_printf_common+0xa4>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	68e5      	ldr	r5, [r4, #12]
 8006762:	6832      	ldr	r2, [r6, #0]
 8006764:	f003 0306 	and.w	r3, r3, #6
 8006768:	2b04      	cmp	r3, #4
 800676a:	bf08      	it	eq
 800676c:	1aad      	subeq	r5, r5, r2
 800676e:	68a3      	ldr	r3, [r4, #8]
 8006770:	6922      	ldr	r2, [r4, #16]
 8006772:	bf0c      	ite	eq
 8006774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006778:	2500      	movne	r5, #0
 800677a:	4293      	cmp	r3, r2
 800677c:	bfc4      	itt	gt
 800677e:	1a9b      	subgt	r3, r3, r2
 8006780:	18ed      	addgt	r5, r5, r3
 8006782:	2600      	movs	r6, #0
 8006784:	341a      	adds	r4, #26
 8006786:	42b5      	cmp	r5, r6
 8006788:	d11a      	bne.n	80067c0 <_printf_common+0xc8>
 800678a:	2000      	movs	r0, #0
 800678c:	e008      	b.n	80067a0 <_printf_common+0xa8>
 800678e:	2301      	movs	r3, #1
 8006790:	4652      	mov	r2, sl
 8006792:	4649      	mov	r1, r9
 8006794:	4638      	mov	r0, r7
 8006796:	47c0      	blx	r8
 8006798:	3001      	adds	r0, #1
 800679a:	d103      	bne.n	80067a4 <_printf_common+0xac>
 800679c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a4:	3501      	adds	r5, #1
 80067a6:	e7c6      	b.n	8006736 <_printf_common+0x3e>
 80067a8:	18e1      	adds	r1, r4, r3
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	2030      	movs	r0, #48	; 0x30
 80067ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067b2:	4422      	add	r2, r4
 80067b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067bc:	3302      	adds	r3, #2
 80067be:	e7c7      	b.n	8006750 <_printf_common+0x58>
 80067c0:	2301      	movs	r3, #1
 80067c2:	4622      	mov	r2, r4
 80067c4:	4649      	mov	r1, r9
 80067c6:	4638      	mov	r0, r7
 80067c8:	47c0      	blx	r8
 80067ca:	3001      	adds	r0, #1
 80067cc:	d0e6      	beq.n	800679c <_printf_common+0xa4>
 80067ce:	3601      	adds	r6, #1
 80067d0:	e7d9      	b.n	8006786 <_printf_common+0x8e>
	...

080067d4 <_printf_i>:
 80067d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	7e0f      	ldrb	r7, [r1, #24]
 80067da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067dc:	2f78      	cmp	r7, #120	; 0x78
 80067de:	4691      	mov	r9, r2
 80067e0:	4680      	mov	r8, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	469a      	mov	sl, r3
 80067e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067ea:	d807      	bhi.n	80067fc <_printf_i+0x28>
 80067ec:	2f62      	cmp	r7, #98	; 0x62
 80067ee:	d80a      	bhi.n	8006806 <_printf_i+0x32>
 80067f0:	2f00      	cmp	r7, #0
 80067f2:	f000 80d8 	beq.w	80069a6 <_printf_i+0x1d2>
 80067f6:	2f58      	cmp	r7, #88	; 0x58
 80067f8:	f000 80a3 	beq.w	8006942 <_printf_i+0x16e>
 80067fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006804:	e03a      	b.n	800687c <_printf_i+0xa8>
 8006806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800680a:	2b15      	cmp	r3, #21
 800680c:	d8f6      	bhi.n	80067fc <_printf_i+0x28>
 800680e:	a101      	add	r1, pc, #4	; (adr r1, 8006814 <_printf_i+0x40>)
 8006810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006814:	0800686d 	.word	0x0800686d
 8006818:	08006881 	.word	0x08006881
 800681c:	080067fd 	.word	0x080067fd
 8006820:	080067fd 	.word	0x080067fd
 8006824:	080067fd 	.word	0x080067fd
 8006828:	080067fd 	.word	0x080067fd
 800682c:	08006881 	.word	0x08006881
 8006830:	080067fd 	.word	0x080067fd
 8006834:	080067fd 	.word	0x080067fd
 8006838:	080067fd 	.word	0x080067fd
 800683c:	080067fd 	.word	0x080067fd
 8006840:	0800698d 	.word	0x0800698d
 8006844:	080068b1 	.word	0x080068b1
 8006848:	0800696f 	.word	0x0800696f
 800684c:	080067fd 	.word	0x080067fd
 8006850:	080067fd 	.word	0x080067fd
 8006854:	080069af 	.word	0x080069af
 8006858:	080067fd 	.word	0x080067fd
 800685c:	080068b1 	.word	0x080068b1
 8006860:	080067fd 	.word	0x080067fd
 8006864:	080067fd 	.word	0x080067fd
 8006868:	08006977 	.word	0x08006977
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	1d1a      	adds	r2, r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	602a      	str	r2, [r5, #0]
 8006874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800687c:	2301      	movs	r3, #1
 800687e:	e0a3      	b.n	80069c8 <_printf_i+0x1f4>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	6829      	ldr	r1, [r5, #0]
 8006884:	0606      	lsls	r6, r0, #24
 8006886:	f101 0304 	add.w	r3, r1, #4
 800688a:	d50a      	bpl.n	80068a2 <_printf_i+0xce>
 800688c:	680e      	ldr	r6, [r1, #0]
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	2e00      	cmp	r6, #0
 8006892:	da03      	bge.n	800689c <_printf_i+0xc8>
 8006894:	232d      	movs	r3, #45	; 0x2d
 8006896:	4276      	negs	r6, r6
 8006898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800689c:	485e      	ldr	r0, [pc, #376]	; (8006a18 <_printf_i+0x244>)
 800689e:	230a      	movs	r3, #10
 80068a0:	e019      	b.n	80068d6 <_printf_i+0x102>
 80068a2:	680e      	ldr	r6, [r1, #0]
 80068a4:	602b      	str	r3, [r5, #0]
 80068a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068aa:	bf18      	it	ne
 80068ac:	b236      	sxthne	r6, r6
 80068ae:	e7ef      	b.n	8006890 <_printf_i+0xbc>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	6820      	ldr	r0, [r4, #0]
 80068b4:	1d19      	adds	r1, r3, #4
 80068b6:	6029      	str	r1, [r5, #0]
 80068b8:	0601      	lsls	r1, r0, #24
 80068ba:	d501      	bpl.n	80068c0 <_printf_i+0xec>
 80068bc:	681e      	ldr	r6, [r3, #0]
 80068be:	e002      	b.n	80068c6 <_printf_i+0xf2>
 80068c0:	0646      	lsls	r6, r0, #25
 80068c2:	d5fb      	bpl.n	80068bc <_printf_i+0xe8>
 80068c4:	881e      	ldrh	r6, [r3, #0]
 80068c6:	4854      	ldr	r0, [pc, #336]	; (8006a18 <_printf_i+0x244>)
 80068c8:	2f6f      	cmp	r7, #111	; 0x6f
 80068ca:	bf0c      	ite	eq
 80068cc:	2308      	moveq	r3, #8
 80068ce:	230a      	movne	r3, #10
 80068d0:	2100      	movs	r1, #0
 80068d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068d6:	6865      	ldr	r5, [r4, #4]
 80068d8:	60a5      	str	r5, [r4, #8]
 80068da:	2d00      	cmp	r5, #0
 80068dc:	bfa2      	ittt	ge
 80068de:	6821      	ldrge	r1, [r4, #0]
 80068e0:	f021 0104 	bicge.w	r1, r1, #4
 80068e4:	6021      	strge	r1, [r4, #0]
 80068e6:	b90e      	cbnz	r6, 80068ec <_printf_i+0x118>
 80068e8:	2d00      	cmp	r5, #0
 80068ea:	d04d      	beq.n	8006988 <_printf_i+0x1b4>
 80068ec:	4615      	mov	r5, r2
 80068ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80068f2:	fb03 6711 	mls	r7, r3, r1, r6
 80068f6:	5dc7      	ldrb	r7, [r0, r7]
 80068f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068fc:	4637      	mov	r7, r6
 80068fe:	42bb      	cmp	r3, r7
 8006900:	460e      	mov	r6, r1
 8006902:	d9f4      	bls.n	80068ee <_printf_i+0x11a>
 8006904:	2b08      	cmp	r3, #8
 8006906:	d10b      	bne.n	8006920 <_printf_i+0x14c>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	07de      	lsls	r6, r3, #31
 800690c:	d508      	bpl.n	8006920 <_printf_i+0x14c>
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	6861      	ldr	r1, [r4, #4]
 8006912:	4299      	cmp	r1, r3
 8006914:	bfde      	ittt	le
 8006916:	2330      	movle	r3, #48	; 0x30
 8006918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800691c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006920:	1b52      	subs	r2, r2, r5
 8006922:	6122      	str	r2, [r4, #16]
 8006924:	f8cd a000 	str.w	sl, [sp]
 8006928:	464b      	mov	r3, r9
 800692a:	aa03      	add	r2, sp, #12
 800692c:	4621      	mov	r1, r4
 800692e:	4640      	mov	r0, r8
 8006930:	f7ff fee2 	bl	80066f8 <_printf_common>
 8006934:	3001      	adds	r0, #1
 8006936:	d14c      	bne.n	80069d2 <_printf_i+0x1fe>
 8006938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800693c:	b004      	add	sp, #16
 800693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006942:	4835      	ldr	r0, [pc, #212]	; (8006a18 <_printf_i+0x244>)
 8006944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006948:	6829      	ldr	r1, [r5, #0]
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006950:	6029      	str	r1, [r5, #0]
 8006952:	061d      	lsls	r5, r3, #24
 8006954:	d514      	bpl.n	8006980 <_printf_i+0x1ac>
 8006956:	07df      	lsls	r7, r3, #31
 8006958:	bf44      	itt	mi
 800695a:	f043 0320 	orrmi.w	r3, r3, #32
 800695e:	6023      	strmi	r3, [r4, #0]
 8006960:	b91e      	cbnz	r6, 800696a <_printf_i+0x196>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	f023 0320 	bic.w	r3, r3, #32
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	2310      	movs	r3, #16
 800696c:	e7b0      	b.n	80068d0 <_printf_i+0xfc>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	f043 0320 	orr.w	r3, r3, #32
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	2378      	movs	r3, #120	; 0x78
 8006978:	4828      	ldr	r0, [pc, #160]	; (8006a1c <_printf_i+0x248>)
 800697a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800697e:	e7e3      	b.n	8006948 <_printf_i+0x174>
 8006980:	0659      	lsls	r1, r3, #25
 8006982:	bf48      	it	mi
 8006984:	b2b6      	uxthmi	r6, r6
 8006986:	e7e6      	b.n	8006956 <_printf_i+0x182>
 8006988:	4615      	mov	r5, r2
 800698a:	e7bb      	b.n	8006904 <_printf_i+0x130>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	6826      	ldr	r6, [r4, #0]
 8006990:	6961      	ldr	r1, [r4, #20]
 8006992:	1d18      	adds	r0, r3, #4
 8006994:	6028      	str	r0, [r5, #0]
 8006996:	0635      	lsls	r5, r6, #24
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	d501      	bpl.n	80069a0 <_printf_i+0x1cc>
 800699c:	6019      	str	r1, [r3, #0]
 800699e:	e002      	b.n	80069a6 <_printf_i+0x1d2>
 80069a0:	0670      	lsls	r0, r6, #25
 80069a2:	d5fb      	bpl.n	800699c <_printf_i+0x1c8>
 80069a4:	8019      	strh	r1, [r3, #0]
 80069a6:	2300      	movs	r3, #0
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	4615      	mov	r5, r2
 80069ac:	e7ba      	b.n	8006924 <_printf_i+0x150>
 80069ae:	682b      	ldr	r3, [r5, #0]
 80069b0:	1d1a      	adds	r2, r3, #4
 80069b2:	602a      	str	r2, [r5, #0]
 80069b4:	681d      	ldr	r5, [r3, #0]
 80069b6:	6862      	ldr	r2, [r4, #4]
 80069b8:	2100      	movs	r1, #0
 80069ba:	4628      	mov	r0, r5
 80069bc:	f7f9 fbe0 	bl	8000180 <memchr>
 80069c0:	b108      	cbz	r0, 80069c6 <_printf_i+0x1f2>
 80069c2:	1b40      	subs	r0, r0, r5
 80069c4:	6060      	str	r0, [r4, #4]
 80069c6:	6863      	ldr	r3, [r4, #4]
 80069c8:	6123      	str	r3, [r4, #16]
 80069ca:	2300      	movs	r3, #0
 80069cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d0:	e7a8      	b.n	8006924 <_printf_i+0x150>
 80069d2:	6923      	ldr	r3, [r4, #16]
 80069d4:	462a      	mov	r2, r5
 80069d6:	4649      	mov	r1, r9
 80069d8:	4640      	mov	r0, r8
 80069da:	47d0      	blx	sl
 80069dc:	3001      	adds	r0, #1
 80069de:	d0ab      	beq.n	8006938 <_printf_i+0x164>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	079b      	lsls	r3, r3, #30
 80069e4:	d413      	bmi.n	8006a0e <_printf_i+0x23a>
 80069e6:	68e0      	ldr	r0, [r4, #12]
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	4298      	cmp	r0, r3
 80069ec:	bfb8      	it	lt
 80069ee:	4618      	movlt	r0, r3
 80069f0:	e7a4      	b.n	800693c <_printf_i+0x168>
 80069f2:	2301      	movs	r3, #1
 80069f4:	4632      	mov	r2, r6
 80069f6:	4649      	mov	r1, r9
 80069f8:	4640      	mov	r0, r8
 80069fa:	47d0      	blx	sl
 80069fc:	3001      	adds	r0, #1
 80069fe:	d09b      	beq.n	8006938 <_printf_i+0x164>
 8006a00:	3501      	adds	r5, #1
 8006a02:	68e3      	ldr	r3, [r4, #12]
 8006a04:	9903      	ldr	r1, [sp, #12]
 8006a06:	1a5b      	subs	r3, r3, r1
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	dcf2      	bgt.n	80069f2 <_printf_i+0x21e>
 8006a0c:	e7eb      	b.n	80069e6 <_printf_i+0x212>
 8006a0e:	2500      	movs	r5, #0
 8006a10:	f104 0619 	add.w	r6, r4, #25
 8006a14:	e7f5      	b.n	8006a02 <_printf_i+0x22e>
 8006a16:	bf00      	nop
 8006a18:	08006e19 	.word	0x08006e19
 8006a1c:	08006e2a 	.word	0x08006e2a

08006a20 <memmove>:
 8006a20:	4288      	cmp	r0, r1
 8006a22:	b510      	push	{r4, lr}
 8006a24:	eb01 0402 	add.w	r4, r1, r2
 8006a28:	d902      	bls.n	8006a30 <memmove+0x10>
 8006a2a:	4284      	cmp	r4, r0
 8006a2c:	4623      	mov	r3, r4
 8006a2e:	d807      	bhi.n	8006a40 <memmove+0x20>
 8006a30:	1e43      	subs	r3, r0, #1
 8006a32:	42a1      	cmp	r1, r4
 8006a34:	d008      	beq.n	8006a48 <memmove+0x28>
 8006a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a3e:	e7f8      	b.n	8006a32 <memmove+0x12>
 8006a40:	4402      	add	r2, r0
 8006a42:	4601      	mov	r1, r0
 8006a44:	428a      	cmp	r2, r1
 8006a46:	d100      	bne.n	8006a4a <memmove+0x2a>
 8006a48:	bd10      	pop	{r4, pc}
 8006a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a52:	e7f7      	b.n	8006a44 <memmove+0x24>

08006a54 <_free_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4605      	mov	r5, r0
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	d041      	beq.n	8006ae0 <_free_r+0x8c>
 8006a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a60:	1f0c      	subs	r4, r1, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	bfb8      	it	lt
 8006a66:	18e4      	addlt	r4, r4, r3
 8006a68:	f000 f912 	bl	8006c90 <__malloc_lock>
 8006a6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ae4 <_free_r+0x90>)
 8006a6e:	6813      	ldr	r3, [r2, #0]
 8006a70:	b933      	cbnz	r3, 8006a80 <_free_r+0x2c>
 8006a72:	6063      	str	r3, [r4, #4]
 8006a74:	6014      	str	r4, [r2, #0]
 8006a76:	4628      	mov	r0, r5
 8006a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a7c:	f000 b90e 	b.w	8006c9c <__malloc_unlock>
 8006a80:	42a3      	cmp	r3, r4
 8006a82:	d908      	bls.n	8006a96 <_free_r+0x42>
 8006a84:	6820      	ldr	r0, [r4, #0]
 8006a86:	1821      	adds	r1, r4, r0
 8006a88:	428b      	cmp	r3, r1
 8006a8a:	bf01      	itttt	eq
 8006a8c:	6819      	ldreq	r1, [r3, #0]
 8006a8e:	685b      	ldreq	r3, [r3, #4]
 8006a90:	1809      	addeq	r1, r1, r0
 8006a92:	6021      	streq	r1, [r4, #0]
 8006a94:	e7ed      	b.n	8006a72 <_free_r+0x1e>
 8006a96:	461a      	mov	r2, r3
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	b10b      	cbz	r3, 8006aa0 <_free_r+0x4c>
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	d9fa      	bls.n	8006a96 <_free_r+0x42>
 8006aa0:	6811      	ldr	r1, [r2, #0]
 8006aa2:	1850      	adds	r0, r2, r1
 8006aa4:	42a0      	cmp	r0, r4
 8006aa6:	d10b      	bne.n	8006ac0 <_free_r+0x6c>
 8006aa8:	6820      	ldr	r0, [r4, #0]
 8006aaa:	4401      	add	r1, r0
 8006aac:	1850      	adds	r0, r2, r1
 8006aae:	4283      	cmp	r3, r0
 8006ab0:	6011      	str	r1, [r2, #0]
 8006ab2:	d1e0      	bne.n	8006a76 <_free_r+0x22>
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	6053      	str	r3, [r2, #4]
 8006aba:	4401      	add	r1, r0
 8006abc:	6011      	str	r1, [r2, #0]
 8006abe:	e7da      	b.n	8006a76 <_free_r+0x22>
 8006ac0:	d902      	bls.n	8006ac8 <_free_r+0x74>
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	602b      	str	r3, [r5, #0]
 8006ac6:	e7d6      	b.n	8006a76 <_free_r+0x22>
 8006ac8:	6820      	ldr	r0, [r4, #0]
 8006aca:	1821      	adds	r1, r4, r0
 8006acc:	428b      	cmp	r3, r1
 8006ace:	bf04      	itt	eq
 8006ad0:	6819      	ldreq	r1, [r3, #0]
 8006ad2:	685b      	ldreq	r3, [r3, #4]
 8006ad4:	6063      	str	r3, [r4, #4]
 8006ad6:	bf04      	itt	eq
 8006ad8:	1809      	addeq	r1, r1, r0
 8006ada:	6021      	streq	r1, [r4, #0]
 8006adc:	6054      	str	r4, [r2, #4]
 8006ade:	e7ca      	b.n	8006a76 <_free_r+0x22>
 8006ae0:	bd38      	pop	{r3, r4, r5, pc}
 8006ae2:	bf00      	nop
 8006ae4:	200002ac 	.word	0x200002ac

08006ae8 <sbrk_aligned>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	4e0e      	ldr	r6, [pc, #56]	; (8006b24 <sbrk_aligned+0x3c>)
 8006aec:	460c      	mov	r4, r1
 8006aee:	6831      	ldr	r1, [r6, #0]
 8006af0:	4605      	mov	r5, r0
 8006af2:	b911      	cbnz	r1, 8006afa <sbrk_aligned+0x12>
 8006af4:	f000 f8bc 	bl	8006c70 <_sbrk_r>
 8006af8:	6030      	str	r0, [r6, #0]
 8006afa:	4621      	mov	r1, r4
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 f8b7 	bl	8006c70 <_sbrk_r>
 8006b02:	1c43      	adds	r3, r0, #1
 8006b04:	d00a      	beq.n	8006b1c <sbrk_aligned+0x34>
 8006b06:	1cc4      	adds	r4, r0, #3
 8006b08:	f024 0403 	bic.w	r4, r4, #3
 8006b0c:	42a0      	cmp	r0, r4
 8006b0e:	d007      	beq.n	8006b20 <sbrk_aligned+0x38>
 8006b10:	1a21      	subs	r1, r4, r0
 8006b12:	4628      	mov	r0, r5
 8006b14:	f000 f8ac 	bl	8006c70 <_sbrk_r>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d101      	bne.n	8006b20 <sbrk_aligned+0x38>
 8006b1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006b20:	4620      	mov	r0, r4
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	200002b0 	.word	0x200002b0

08006b28 <_malloc_r>:
 8006b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b2c:	1ccd      	adds	r5, r1, #3
 8006b2e:	f025 0503 	bic.w	r5, r5, #3
 8006b32:	3508      	adds	r5, #8
 8006b34:	2d0c      	cmp	r5, #12
 8006b36:	bf38      	it	cc
 8006b38:	250c      	movcc	r5, #12
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	4607      	mov	r7, r0
 8006b3e:	db01      	blt.n	8006b44 <_malloc_r+0x1c>
 8006b40:	42a9      	cmp	r1, r5
 8006b42:	d905      	bls.n	8006b50 <_malloc_r+0x28>
 8006b44:	230c      	movs	r3, #12
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	2600      	movs	r6, #0
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b50:	4e2e      	ldr	r6, [pc, #184]	; (8006c0c <_malloc_r+0xe4>)
 8006b52:	f000 f89d 	bl	8006c90 <__malloc_lock>
 8006b56:	6833      	ldr	r3, [r6, #0]
 8006b58:	461c      	mov	r4, r3
 8006b5a:	bb34      	cbnz	r4, 8006baa <_malloc_r+0x82>
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4638      	mov	r0, r7
 8006b60:	f7ff ffc2 	bl	8006ae8 <sbrk_aligned>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	4604      	mov	r4, r0
 8006b68:	d14d      	bne.n	8006c06 <_malloc_r+0xde>
 8006b6a:	6834      	ldr	r4, [r6, #0]
 8006b6c:	4626      	mov	r6, r4
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	d140      	bne.n	8006bf4 <_malloc_r+0xcc>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	4631      	mov	r1, r6
 8006b76:	4638      	mov	r0, r7
 8006b78:	eb04 0803 	add.w	r8, r4, r3
 8006b7c:	f000 f878 	bl	8006c70 <_sbrk_r>
 8006b80:	4580      	cmp	r8, r0
 8006b82:	d13a      	bne.n	8006bfa <_malloc_r+0xd2>
 8006b84:	6821      	ldr	r1, [r4, #0]
 8006b86:	3503      	adds	r5, #3
 8006b88:	1a6d      	subs	r5, r5, r1
 8006b8a:	f025 0503 	bic.w	r5, r5, #3
 8006b8e:	3508      	adds	r5, #8
 8006b90:	2d0c      	cmp	r5, #12
 8006b92:	bf38      	it	cc
 8006b94:	250c      	movcc	r5, #12
 8006b96:	4629      	mov	r1, r5
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f7ff ffa5 	bl	8006ae8 <sbrk_aligned>
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d02b      	beq.n	8006bfa <_malloc_r+0xd2>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	442b      	add	r3, r5
 8006ba6:	6023      	str	r3, [r4, #0]
 8006ba8:	e00e      	b.n	8006bc8 <_malloc_r+0xa0>
 8006baa:	6822      	ldr	r2, [r4, #0]
 8006bac:	1b52      	subs	r2, r2, r5
 8006bae:	d41e      	bmi.n	8006bee <_malloc_r+0xc6>
 8006bb0:	2a0b      	cmp	r2, #11
 8006bb2:	d916      	bls.n	8006be2 <_malloc_r+0xba>
 8006bb4:	1961      	adds	r1, r4, r5
 8006bb6:	42a3      	cmp	r3, r4
 8006bb8:	6025      	str	r5, [r4, #0]
 8006bba:	bf18      	it	ne
 8006bbc:	6059      	strne	r1, [r3, #4]
 8006bbe:	6863      	ldr	r3, [r4, #4]
 8006bc0:	bf08      	it	eq
 8006bc2:	6031      	streq	r1, [r6, #0]
 8006bc4:	5162      	str	r2, [r4, r5]
 8006bc6:	604b      	str	r3, [r1, #4]
 8006bc8:	4638      	mov	r0, r7
 8006bca:	f104 060b 	add.w	r6, r4, #11
 8006bce:	f000 f865 	bl	8006c9c <__malloc_unlock>
 8006bd2:	f026 0607 	bic.w	r6, r6, #7
 8006bd6:	1d23      	adds	r3, r4, #4
 8006bd8:	1af2      	subs	r2, r6, r3
 8006bda:	d0b6      	beq.n	8006b4a <_malloc_r+0x22>
 8006bdc:	1b9b      	subs	r3, r3, r6
 8006bde:	50a3      	str	r3, [r4, r2]
 8006be0:	e7b3      	b.n	8006b4a <_malloc_r+0x22>
 8006be2:	6862      	ldr	r2, [r4, #4]
 8006be4:	42a3      	cmp	r3, r4
 8006be6:	bf0c      	ite	eq
 8006be8:	6032      	streq	r2, [r6, #0]
 8006bea:	605a      	strne	r2, [r3, #4]
 8006bec:	e7ec      	b.n	8006bc8 <_malloc_r+0xa0>
 8006bee:	4623      	mov	r3, r4
 8006bf0:	6864      	ldr	r4, [r4, #4]
 8006bf2:	e7b2      	b.n	8006b5a <_malloc_r+0x32>
 8006bf4:	4634      	mov	r4, r6
 8006bf6:	6876      	ldr	r6, [r6, #4]
 8006bf8:	e7b9      	b.n	8006b6e <_malloc_r+0x46>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f000 f84c 	bl	8006c9c <__malloc_unlock>
 8006c04:	e7a1      	b.n	8006b4a <_malloc_r+0x22>
 8006c06:	6025      	str	r5, [r4, #0]
 8006c08:	e7de      	b.n	8006bc8 <_malloc_r+0xa0>
 8006c0a:	bf00      	nop
 8006c0c:	200002ac 	.word	0x200002ac

08006c10 <_realloc_r>:
 8006c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c14:	4680      	mov	r8, r0
 8006c16:	4614      	mov	r4, r2
 8006c18:	460e      	mov	r6, r1
 8006c1a:	b921      	cbnz	r1, 8006c26 <_realloc_r+0x16>
 8006c1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c20:	4611      	mov	r1, r2
 8006c22:	f7ff bf81 	b.w	8006b28 <_malloc_r>
 8006c26:	b92a      	cbnz	r2, 8006c34 <_realloc_r+0x24>
 8006c28:	f7ff ff14 	bl	8006a54 <_free_r>
 8006c2c:	4625      	mov	r5, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c34:	f000 f838 	bl	8006ca8 <_malloc_usable_size_r>
 8006c38:	4284      	cmp	r4, r0
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	d802      	bhi.n	8006c44 <_realloc_r+0x34>
 8006c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c42:	d812      	bhi.n	8006c6a <_realloc_r+0x5a>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff ff6e 	bl	8006b28 <_malloc_r>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d0ed      	beq.n	8006c2e <_realloc_r+0x1e>
 8006c52:	42bc      	cmp	r4, r7
 8006c54:	4622      	mov	r2, r4
 8006c56:	4631      	mov	r1, r6
 8006c58:	bf28      	it	cs
 8006c5a:	463a      	movcs	r2, r7
 8006c5c:	f7ff fba6 	bl	80063ac <memcpy>
 8006c60:	4631      	mov	r1, r6
 8006c62:	4640      	mov	r0, r8
 8006c64:	f7ff fef6 	bl	8006a54 <_free_r>
 8006c68:	e7e1      	b.n	8006c2e <_realloc_r+0x1e>
 8006c6a:	4635      	mov	r5, r6
 8006c6c:	e7df      	b.n	8006c2e <_realloc_r+0x1e>
	...

08006c70 <_sbrk_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4d06      	ldr	r5, [pc, #24]	; (8006c8c <_sbrk_r+0x1c>)
 8006c74:	2300      	movs	r3, #0
 8006c76:	4604      	mov	r4, r0
 8006c78:	4608      	mov	r0, r1
 8006c7a:	602b      	str	r3, [r5, #0]
 8006c7c:	f7fa fc94 	bl	80015a8 <_sbrk>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_sbrk_r+0x1a>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_sbrk_r+0x1a>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	200002b4 	.word	0x200002b4

08006c90 <__malloc_lock>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__malloc_lock+0x8>)
 8006c92:	f000 b811 	b.w	8006cb8 <__retarget_lock_acquire_recursive>
 8006c96:	bf00      	nop
 8006c98:	200002b8 	.word	0x200002b8

08006c9c <__malloc_unlock>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__malloc_unlock+0x8>)
 8006c9e:	f000 b80c 	b.w	8006cba <__retarget_lock_release_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	200002b8 	.word	0x200002b8

08006ca8 <_malloc_usable_size_r>:
 8006ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cac:	1f18      	subs	r0, r3, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfbc      	itt	lt
 8006cb2:	580b      	ldrlt	r3, [r1, r0]
 8006cb4:	18c0      	addlt	r0, r0, r3
 8006cb6:	4770      	bx	lr

08006cb8 <__retarget_lock_acquire_recursive>:
 8006cb8:	4770      	bx	lr

08006cba <__retarget_lock_release_recursive>:
 8006cba:	4770      	bx	lr

08006cbc <_init>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_fini>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

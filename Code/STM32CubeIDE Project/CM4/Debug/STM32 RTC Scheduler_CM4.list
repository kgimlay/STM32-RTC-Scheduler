
STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007178  08007178  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007180  08007180  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007184  08007184  00017184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000074  080071fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080071fc  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b17  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030e7  00000000  00000000  00035bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00038ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001330  00000000  00000000  0003a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e160  00000000  00000000  0003b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b01  00000000  00000000  00059598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b89d6  00000000  00000000  0006e099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00126a6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e0  00000000  00000000  00126ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08006ff8 	.word	0x08006ff8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08006ff8 	.word	0x08006ff8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 ff1e 	bl	8001380 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000188 	.word	0x20000188

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f000 ff14 	bl	800139c <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_getDateTime>:


/*
 *
 */
void calendar_getDateTime(DateTime* dateTime) {
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af02      	add	r7, sp, #8
 8000582:	6078      	str	r0, [r7, #4]
	getDateTime(&(dateTime->year), &(dateTime->month), &(dateTime->day), &(dateTime->hour), &(dateTime->minute), &(dateTime->second));
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	1c59      	adds	r1, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	1c9c      	adds	r4, r3, #2
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	1cdd      	adds	r5, r3, #3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3304      	adds	r3, #4
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	3205      	adds	r2, #5
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	462b      	mov	r3, r5
 80005a0:	4622      	mov	r2, r4
 80005a2:	f000 ffc5 	bl	8001530 <getDateTime>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005b0 <calendar_setEvents>:


/*
 *
 */
void calendar_setEvents(CalendarEvent events[MAX_NUM_EVENTS], unsigned int numEvents) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	memcpy(_calendarEvents, events, sizeof(CalendarEvent)*MAX_NUM_EVENTS);
 80005ba:	22f0      	movs	r2, #240	; 0xf0
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <calendar_setEvents+0x24>)
 80005c0:	f006 f892 	bl	80066e8 <memcpy>
	_numberEvents = numEvents;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <calendar_setEvents+0x28>)
 80005c8:	6013      	str	r3, [r2, #0]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000090 	.word	0x20000090
 80005d8:	20000180 	.word	0x20000180

080005dc <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 80005e2:	1cfa      	adds	r2, r7, #3
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f932 	bl	8000854 <getNextAlarm>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d019      	beq.n	800062a <calendar_start+0x4e>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 80005f6:	7ab8      	ldrb	r0, [r7, #10]
 80005f8:	7af9      	ldrb	r1, [r7, #11]
 80005fa:	7b3a      	ldrb	r2, [r7, #12]
 80005fc:	7b7b      	ldrb	r3, [r7, #13]
 80005fe:	f001 f82b 	bl	8001658 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00c      	beq.n	8000622 <calendar_start+0x46>
			(*_calendarEvents[currentEventIdx].start_callback)();
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	490b      	ldr	r1, [pc, #44]	; (8000638 <calendar_start+0x5c>)
 800060c:	4613      	mov	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4413      	add	r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	440b      	add	r3, r1
 8000616:	3308      	adds	r3, #8
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <calendar_start+0x60>)
 8000620:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 8000622:	4b07      	ldr	r3, [pc, #28]	; (8000640 <calendar_start+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 8000628:	e001      	b.n	800062e <calendar_start+0x52>
		diableAlarm_A();
 800062a:	f001 f8b1 	bl	8001790 <diableAlarm_A>
}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000090 	.word	0x20000090
 800063c:	20000004 	.word	0x20000004
 8000640:	20000184 	.word	0x20000184

08000644 <calendar_handleAlarm>:


/*
 *
 */
void calendar_handleAlarm(void) {
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b08c      	sub	sp, #48	; 0x30
 8000648:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 800064a:	4b4e      	ldr	r3, [pc, #312]	; (8000784 <calendar_handleAlarm+0x140>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	f000 8092 	beq.w	800077a <calendar_handleAlarm+0x136>
		// send message for debugging
		char messageBody[UART_MESSAGE_BODY_SIZE] = "\nALARM EVENT!\n\n\0";
 8000656:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <calendar_handleAlarm+0x144>)
 8000658:	1d3c      	adds	r4, r7, #4
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	682b      	ldr	r3, [r5, #0]
 8000662:	7023      	strb	r3, [r4, #0]
 8000664:	f107 0315 	add.w	r3, r7, #21
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	f8c3 2007 	str.w	r2, [r3, #7]
		uartBasic_TX_Poll("\0\0\0\0", messageBody);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4619      	mov	r1, r3
 8000676:	4845      	ldr	r0, [pc, #276]	; (800078c <calendar_handleAlarm+0x148>)
 8000678:	f001 f9f2 	bl	8001a60 <uartBasic_TX_Poll>

		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 800067c:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8000680:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000688:	4618      	mov	r0, r3
 800068a:	f000 f8e3 	bl	8000854 <getNextAlarm>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d05d      	beq.n	8000750 <calendar_handleAlarm+0x10c>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000694:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
 8000698:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800069c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80006a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80006a4:	f000 ffd8 	bl	8001658 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 80006a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d012      	beq.n	80006d6 <calendar_handleAlarm+0x92>
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <calendar_handleAlarm+0x14c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006b8:	d10d      	bne.n	80006d6 <calendar_handleAlarm+0x92>

				// call start event callback
				(*_calendarEvents[currentEventIdx].start_callback)();
 80006ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006bc:	4935      	ldr	r1, [pc, #212]	; (8000794 <calendar_handleAlarm+0x150>)
 80006be:	4613      	mov	r3, r2
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	440b      	add	r3, r1
 80006c8:	3308      	adds	r3, #8
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	4a2f      	ldr	r2, [pc, #188]	; (8000790 <calendar_handleAlarm+0x14c>)
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	e04e      	b.n	8000774 <calendar_handleAlarm+0x130>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 80006d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d01d      	beq.n	800071a <calendar_handleAlarm+0xd6>
 80006de:	4b2c      	ldr	r3, [pc, #176]	; (8000790 <calendar_handleAlarm+0x14c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006e6:	d018      	beq.n	800071a <calendar_handleAlarm+0xd6>
				// call end event callback for event just left
				(*_calendarEvents[_currentEvent].end_callback)();
 80006e8:	4b29      	ldr	r3, [pc, #164]	; (8000790 <calendar_handleAlarm+0x14c>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4929      	ldr	r1, [pc, #164]	; (8000794 <calendar_handleAlarm+0x150>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3314      	adds	r3, #20
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4798      	blx	r3

				// call start event callback for event just entered
				(*_calendarEvents[currentEventIdx].start_callback)();
 80006fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000700:	4924      	ldr	r1, [pc, #144]	; (8000794 <calendar_handleAlarm+0x150>)
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	440b      	add	r3, r1
 800070c:	3308      	adds	r3, #8
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 8000712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000714:	4a1e      	ldr	r2, [pc, #120]	; (8000790 <calendar_handleAlarm+0x14c>)
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	e02c      	b.n	8000774 <calendar_handleAlarm+0x130>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 800071a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800071e:	f083 0301 	eor.w	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d025      	beq.n	8000774 <calendar_handleAlarm+0x130>
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <calendar_handleAlarm+0x14c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000730:	d020      	beq.n	8000774 <calendar_handleAlarm+0x130>
				// call end event callback for event just left
				(*_calendarEvents[_currentEvent].end_callback)();
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <calendar_handleAlarm+0x14c>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4917      	ldr	r1, [pc, #92]	; (8000794 <calendar_handleAlarm+0x150>)
 8000738:	4613      	mov	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	4413      	add	r3, r2
 800073e:	00db      	lsls	r3, r3, #3
 8000740:	440b      	add	r3, r1
 8000742:	3314      	adds	r3, #20
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	4a11      	ldr	r2, [pc, #68]	; (8000790 <calendar_handleAlarm+0x14c>)
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	e011      	b.n	8000774 <calendar_handleAlarm+0x130>

		}

		// if there is no alarm to set, disable the alarm and exit any events
		else {
			diableAlarm_A();
 8000750:	f001 f81e 	bl	8001790 <diableAlarm_A>

			if (CURRENTLY_IN_EVENT) {
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <calendar_handleAlarm+0x14c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800075c:	d00a      	beq.n	8000774 <calendar_handleAlarm+0x130>
				// call end event callback for event just left
				(*_calendarEvents[_currentEvent].end_callback)();
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <calendar_handleAlarm+0x14c>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	490c      	ldr	r1, [pc, #48]	; (8000794 <calendar_handleAlarm+0x150>)
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	440b      	add	r3, r1
 800076e:	3314      	adds	r3, #20
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <calendar_handleAlarm+0x140>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
	}

	else {

	}
}
 800077a:	bf00      	nop
 800077c:	3730      	adds	r7, #48	; 0x30
 800077e:	46bd      	mov	sp, r7
 8000780:	bdb0      	pop	{r4, r5, r7, pc}
 8000782:	bf00      	nop
 8000784:	20000184 	.word	0x20000184
 8000788:	08007018 	.word	0x08007018
 800078c:	08007010 	.word	0x08007010
 8000790:	20000004 	.word	0x20000004
 8000794:	20000090 	.word	0x20000090

08000798 <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <calendar_AlarmA_ISR+0x14>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	20000184 	.word	0x20000184

080007b0 <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	f107 0408 	add.w	r4, r7, #8
 80007ba:	e884 0003 	stmia.w	r4, {r0, r1}
 80007be:	4639      	mov	r1, r7
 80007c0:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007cc:	f000 f80e 	bl	80007ec <dateTimeToSeconds>
 80007d0:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 80007d2:	463b      	mov	r3, r7
 80007d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007d8:	f000 f808 	bl	80007ec <dateTimeToSeconds>
 80007dc:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	1ad3      	subs	r3, r2, r3
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	371c      	adds	r7, #28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd90      	pop	{r4, r7, pc}

080007ec <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	463b      	mov	r3, r7
 80007f4:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80007fc:	793b      	ldrb	r3, [r7, #4]
 80007fe:	461a      	mov	r2, r3
 8000800:	4613      	mov	r3, r2
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	1a9b      	subs	r3, r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 800080a:	78fb      	ldrb	r3, [r7, #3]
 800080c:	4619      	mov	r1, r3
 800080e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 8000818:	78bb      	ldrb	r3, [r7, #2]
 800081a:	3b01      	subs	r3, #1
 800081c:	490a      	ldr	r1, [pc, #40]	; (8000848 <dateTimeToSeconds+0x5c>)
 800081e:	fb01 f303 	mul.w	r3, r1, r3
 8000822:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 8000824:	787b      	ldrb	r3, [r7, #1]
 8000826:	3b01      	subs	r3, #1
 8000828:	4908      	ldr	r1, [pc, #32]	; (800084c <dateTimeToSeconds+0x60>)
 800082a:	fb01 f303 	mul.w	r3, r1, r3
 800082e:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 8000830:	783b      	ldrb	r3, [r7, #0]
 8000832:	4619      	mov	r1, r3
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <dateTimeToSeconds+0x64>)
 8000836:	fb01 f303 	mul.w	r3, r1, r3
 800083a:	4413      	add	r3, r2
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	00015180 	.word	0x00015180
 800084c:	00278d00 	.word	0x00278d00
 8000850:	01da9c00 	.word	0x01da9c00

08000854 <getNextAlarm>:


/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b08d      	sub	sp, #52	; 0x34
 8000858:	af02      	add	r7, sp, #8
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
	int currentIdx = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
	bool nextAlarmFound = false;
 8000868:	2300      	movs	r3, #0
 800086a:	77fb      	strb	r3, [r7, #31]
	DateTime now = {0};
 800086c:	f107 0318 	add.w	r3, r7, #24
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	1cdc      	adds	r4, r3, #3
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	1c9a      	adds	r2, r3, #2
 800088c:	f107 0318 	add.w	r3, r7, #24
 8000890:	1c59      	adds	r1, r3, #1
 8000892:	f107 0018 	add.w	r0, r7, #24
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	3305      	adds	r3, #5
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	f107 0318 	add.w	r3, r7, #24
 80008a2:	3304      	adds	r3, #4
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	4623      	mov	r3, r4
 80008a8:	f000 fe42 	bl	8001530 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
	currentIdx = eventIdx - 1;
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	3b01      	subs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
	nextAlarmFound = false;
 80008b6:	2300      	movs	r3, #0
 80008b8:	77fb      	strb	r3, [r7, #31]
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 80008ba:	e0bc      	b.n	8000a36 <getNextAlarm+0x1e2>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 80008bc:	4973      	ldr	r1, [pc, #460]	; (8000a8c <getNextAlarm+0x238>)
 80008be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	440b      	add	r3, r1
 80008ca:	cb0c      	ldmia	r3, {r2, r3}
 80008cc:	f107 0118 	add.w	r1, r7, #24
 80008d0:	c903      	ldmia	r1, {r0, r1}
 80008d2:	f7ff ff6d 	bl	80007b0 <compareDateTime>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	da43      	bge.n	8000964 <getNextAlarm+0x110>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 80008dc:	496b      	ldr	r1, [pc, #428]	; (8000a8c <getNextAlarm+0x238>)
 80008de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	440b      	add	r3, r1
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 80008ee:	4967      	ldr	r1, [pc, #412]	; (8000a8c <getNextAlarm+0x238>)
 80008f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3301      	adds	r3, #1
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 8000902:	4962      	ldr	r1, [pc, #392]	; (8000a8c <getNextAlarm+0x238>)
 8000904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000906:	4613      	mov	r3, r2
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	4413      	add	r3, r2
 800090c:	00db      	lsls	r3, r3, #3
 800090e:	440b      	add	r3, r1
 8000910:	3302      	adds	r3, #2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 8000916:	495d      	ldr	r1, [pc, #372]	; (8000a8c <getNextAlarm+0x238>)
 8000918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800091a:	4613      	mov	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	4413      	add	r3, r2
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	440b      	add	r3, r1
 8000924:	3303      	adds	r3, #3
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 800092a:	4958      	ldr	r1, [pc, #352]	; (8000a8c <getNextAlarm+0x238>)
 800092c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	440b      	add	r3, r1
 8000938:	3304      	adds	r3, #4
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 800093e:	4953      	ldr	r1, [pc, #332]	; (8000a8c <getNextAlarm+0x238>)
 8000940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	440b      	add	r3, r1
 800094c:	3305      	adds	r3, #5
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 8000952:	2301      	movs	r3, #1
 8000954:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx - 1;
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	3b01      	subs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
			*inEvent = false;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e068      	b.n	8000a36 <getNextAlarm+0x1e2>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 8000964:	4949      	ldr	r1, [pc, #292]	; (8000a8c <getNextAlarm+0x238>)
 8000966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000968:	4613      	mov	r3, r2
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	4413      	add	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	440b      	add	r3, r1
 8000972:	cb0c      	ldmia	r3, {r2, r3}
 8000974:	f107 0118 	add.w	r1, r7, #24
 8000978:	c903      	ldmia	r1, {r0, r1}
 800097a:	f7ff ff19 	bl	80007b0 <compareDateTime>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	db55      	blt.n	8000a30 <getNextAlarm+0x1dc>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 8000984:	4941      	ldr	r1, [pc, #260]	; (8000a8c <getNextAlarm+0x238>)
 8000986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000988:	4613      	mov	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4413      	add	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	440b      	add	r3, r1
 8000992:	3308      	adds	r3, #8
 8000994:	3304      	adds	r3, #4
 8000996:	cb0c      	ldmia	r3, {r2, r3}
 8000998:	f107 0118 	add.w	r1, r7, #24
 800099c:	c903      	ldmia	r1, {r0, r1}
 800099e:	f7ff ff07 	bl	80007b0 <compareDateTime>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	da43      	bge.n	8000a30 <getNextAlarm+0x1dc>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 80009a8:	4938      	ldr	r1, [pc, #224]	; (8000a8c <getNextAlarm+0x238>)
 80009aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ac:	4613      	mov	r3, r2
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	4413      	add	r3, r2
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	440b      	add	r3, r1
 80009b6:	330c      	adds	r3, #12
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 80009bc:	4933      	ldr	r1, [pc, #204]	; (8000a8c <getNextAlarm+0x238>)
 80009be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	440b      	add	r3, r1
 80009ca:	330d      	adds	r3, #13
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 80009d0:	492e      	ldr	r1, [pc, #184]	; (8000a8c <getNextAlarm+0x238>)
 80009d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	440b      	add	r3, r1
 80009de:	330e      	adds	r3, #14
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 80009e4:	4929      	ldr	r1, [pc, #164]	; (8000a8c <getNextAlarm+0x238>)
 80009e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	440b      	add	r3, r1
 80009f2:	330f      	adds	r3, #15
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 80009f8:	4924      	ldr	r1, [pc, #144]	; (8000a8c <getNextAlarm+0x238>)
 80009fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	440b      	add	r3, r1
 8000a06:	3310      	adds	r3, #16
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 8000a0c:	491f      	ldr	r1, [pc, #124]	; (8000a8c <getNextAlarm+0x238>)
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a10:	4613      	mov	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	4413      	add	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	440b      	add	r3, r1
 8000a1a:	3311      	adds	r3, #17
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 8000a20:	2301      	movs	r3, #1
 8000a22:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx;
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	623b      	str	r3, [r7, #32]
			*inEvent = true;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	e002      	b.n	8000a36 <getNextAlarm+0x1e2>
		}

		// traverse to next event
		else {
			eventIdx++;
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	3301      	adds	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <getNextAlarm+0x23c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	da06      	bge.n	8000a4e <getNextAlarm+0x1fa>
 8000a40:	7ffb      	ldrb	r3, [r7, #31]
 8000a42:	f083 0301 	eor.w	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f47f af37 	bne.w	80008bc <getNextAlarm+0x68>
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000a4e:	7ffb      	ldrb	r3, [r7, #31]
 8000a50:	f083 0301 	eor.w	r3, r3, #1
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d007      	beq.n	8000a6a <getNextAlarm+0x216>
		dateTime = NULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a64:	601a      	str	r2, [r3, #0]
		return false;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e00b      	b.n	8000a82 <getNextAlarm+0x22e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	6010      	str	r0, [r2, #0]
 8000a76:	889b      	ldrh	r3, [r3, #4]
 8000a78:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = currentIdx;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	6a3a      	ldr	r2, [r7, #32]
 8000a7e:	601a      	str	r2, [r3, #0]
		return true;
 8000a80:	2301      	movs	r3, #1
	}
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	372c      	adds	r7, #44	; 0x2c
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000090 	.word	0x20000090
 8000a90:	20000180 	.word	0x20000180

08000a94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000aa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ab0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8000acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d101      	bne.n	8000ae0 <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8000adc:	2301      	movs	r3, #1
 8000ade:	e000      	b.n	8000ae2 <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000af8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	43db      	mvns	r3, r3
 8000afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b02:	4013      	ands	r3, r2
 8000b04:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff ffd2 	bl	8000ac4 <LL_AHB2_GRP1_IsEnabledClock>
 8000b20:	4603      	mov	r3, r0
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <activate_led+0x60>)
 8000b24:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <activate_led+0x60>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d102      	bne.n	8000b34 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f7ff ffb0 	bl	8000a94 <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	4619      	mov	r1, r3
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <activate_led+0x64>)
 8000b58:	f001 fab2 	bl	80020c0 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4804      	ldr	r0, [pc, #16]	; (8000b74 <activate_led+0x64>)
 8000b64:	f001 fcda 	bl	800251c <HAL_GPIO_WritePin>
}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2000018c 	.word	0x2000018c
 8000b74:	48000400 	.word	0x48000400

08000b78 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <deactivate_led+0x38>)
 8000b8a:	f001 fcc7 	bl	800251c <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4619      	mov	r1, r3
 8000b92:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <deactivate_led+0x38>)
 8000b94:	f001 fbf4 	bl	8002380 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <deactivate_led+0x3c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff ffa3 	bl	8000aec <LL_AHB2_GRP1_DisableClock>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	2000018c 	.word	0x2000018c

08000bb8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bc8:	f023 0218 	bic.w	r2, r3, #24
 8000bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <LL_AHB2_GRP1_EnableClock>:
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4013      	ands	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
	...

08000c14 <HAL_UART_ErrorCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <HAL_UART_ErrorCallback+0x28>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d006      	beq.n	8000c34 <HAL_UART_ErrorCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <HAL_UART_ErrorCallback+0x2c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_UART_ErrorCallback+0x20>
		uartBasic_Error_ISR();
 8000c30:	f000 ff7e 	bl	8001b30 <uartBasic_Error_ISR>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40013800 	.word	0x40013800
 8000c40:	40004400 	.word	0x40004400

08000c44 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_UART_TxCpltCallback+0x28>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d006      	beq.n	8000c64 <HAL_UART_TxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <HAL_UART_TxCpltCallback+0x2c>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d101      	bne.n	8000c64 <HAL_UART_TxCpltCallback+0x20>
		uartBasic_TX_Complete_ISR();
 8000c60:	f000 ff5a 	bl	8001b18 <uartBasic_TX_Complete_ISR>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40013800 	.word	0x40013800
 8000c70:	40004400 	.word	0x40004400

08000c74 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	if (UartHandle->Instance == USART1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_UART_RxCpltCallback+0x28>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d006      	beq.n	8000c94 <HAL_UART_RxCpltCallback+0x20>
		(void)0;  // no operation

	else if (UartHandle->Instance == USART2)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <HAL_UART_RxCpltCallback+0x2c>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d101      	bne.n	8000c94 <HAL_UART_RxCpltCallback+0x20>
		uartBasic_RX_Complete_ISR();
 8000c90:	f000 ff36 	bl	8001b00 <uartBasic_RX_Complete_ISR>
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40013800 	.word	0x40013800
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8000cac:	f7ff fd74 	bl	8000798 <calendar_AlarmA_ISR>
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <event_0_start_cb>:


void event_0_start_cb(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	activate_led(RED_LED);
 8000cbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cc0:	f7ff ff26 	bl	8000b10 <activate_led>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <event_0_end_cb>:

void event_0_end_cb(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	deactivate_led(RED_LED);
 8000ccc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cd0:	f7ff ff52 	bl	8000b78 <deactivate_led>
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <event_1_start_cb>:


void event_1_start_cb(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	activate_led(GREEN_LED);
 8000cdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ce0:	f7ff ff16 	bl	8000b10 <activate_led>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <event_1_end_cb>:

void event_1_end_cb(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	deactivate_led(GREEN_LED);
 8000cec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cf0:	f7ff ff42 	bl	8000b78 <deactivate_led>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <event_2_start_cb>:


void event_2_start_cb(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	activate_led(BLUE_LED);
 8000cfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d00:	f7ff ff06 	bl	8000b10 <activate_led>
}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <event_2_end_cb>:

void event_2_end_cb(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	deactivate_led(BLUE_LED);
 8000d0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d10:	f7ff ff32 	bl	8000b78 <deactivate_led>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	b0d1      	sub	sp, #324	; 0x144
 8000d1c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1e:	f000 ff91 	bl	8001c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d22:	f000 f9c9 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d26:	f000 fb19 	bl	800135c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d2a:	f000 fac1 	bl	80012b0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000d2e:	f000 fa21 	bl	8001174 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f001 fc32 	bl	800259c <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  uartBasic_init(&huart2);
 8000d38:	48d4      	ldr	r0, [pc, #848]	; (800108c <main+0x374>)
 8000d3a:	f000 fe6f 	bl	8001a1c <uartBasic_init>

  // initialize calendar
  calendar_init(&hrtc);
 8000d3e:	48d4      	ldr	r0, [pc, #848]	; (8001090 <main+0x378>)
 8000d40:	f7ff fbf6 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8000d62:	230b      	movs	r3, #11
 8000d64:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 11
  };
  calendar_setDateTime(now);
 8000d68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d70:	f7ff fbee 	bl	8000550 <calendar_setDateTime>

  // set some events
  CalendarEvent events[MAX_NUM_EVENTS] = {0};
 8000d74:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	23f0      	movs	r3, #240	; 0xf0
 8000d80:	461a      	mov	r2, r3
 8000d82:	2100      	movs	r1, #0
 8000d84:	f005 fcbe 	bl	8006704 <memset>

  events[0].start.year = 0;
 8000d88:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
  events[0].start.month = 0;
 8000d94:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	705a      	strb	r2, [r3, #1]
  events[0].start.day = 0;
 8000da0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000da8:	2200      	movs	r2, #0
 8000daa:	709a      	strb	r2, [r3, #2]
  events[0].start.hour = 0;
 8000dac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000db4:	2200      	movs	r2, #0
 8000db6:	70da      	strb	r2, [r3, #3]
  events[0].start.minute = 0;
 8000db8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	711a      	strb	r2, [r3, #4]
  events[0].start.second = 5;
 8000dc4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000dcc:	2205      	movs	r2, #5
 8000dce:	715a      	strb	r2, [r3, #5]
  events[0].end.year = 0;
 8000dd0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000dd8:	2200      	movs	r2, #0
 8000dda:	731a      	strb	r2, [r3, #12]
  events[0].end.month = 0;
 8000ddc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000de4:	2200      	movs	r2, #0
 8000de6:	735a      	strb	r2, [r3, #13]
  events[0].end.day = 0;
 8000de8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000df0:	2200      	movs	r2, #0
 8000df2:	739a      	strb	r2, [r3, #14]
  events[0].end.hour = 0;
 8000df4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	73da      	strb	r2, [r3, #15]
  events[0].end.minute = 0;
 8000e00:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e08:	2200      	movs	r2, #0
 8000e0a:	741a      	strb	r2, [r3, #16]
  events[0].end.second = 10;
 8000e0c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e14:	220a      	movs	r2, #10
 8000e16:	745a      	strb	r2, [r3, #17]
  events[0].start_callback = event_0_start_cb;
 8000e18:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e20:	4a9c      	ldr	r2, [pc, #624]	; (8001094 <main+0x37c>)
 8000e22:	609a      	str	r2, [r3, #8]
  events[0].end_callback = event_0_end_cb;
 8000e24:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e2c:	4a9a      	ldr	r2, [pc, #616]	; (8001098 <main+0x380>)
 8000e2e:	615a      	str	r2, [r3, #20]

  events[1].start.year = 0;
 8000e30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e38:	2200      	movs	r2, #0
 8000e3a:	761a      	strb	r2, [r3, #24]
  events[1].start.month = 0;
 8000e3c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e44:	2200      	movs	r2, #0
 8000e46:	765a      	strb	r2, [r3, #25]
  events[1].start.day = 0;
 8000e48:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e50:	2200      	movs	r2, #0
 8000e52:	769a      	strb	r2, [r3, #26]
  events[1].start.hour = 0;
 8000e54:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	76da      	strb	r2, [r3, #27]
  events[1].start.minute = 0;
 8000e60:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e68:	2200      	movs	r2, #0
 8000e6a:	771a      	strb	r2, [r3, #28]
  events[1].start.second = 15;
 8000e6c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e74:	220f      	movs	r2, #15
 8000e76:	775a      	strb	r2, [r3, #29]
  events[1].end.year = 0;
 8000e78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  events[1].end.month = 0;
 8000e86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  events[1].end.day = 0;
 8000e94:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  events[1].end.hour = 0;
 8000ea2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  events[1].end.minute = 0;
 8000eb0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  events[1].end.second = 20;
 8000ebe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ec6:	2214      	movs	r2, #20
 8000ec8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  events[1].start_callback = event_1_start_cb;
 8000ecc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ed4:	4a71      	ldr	r2, [pc, #452]	; (800109c <main+0x384>)
 8000ed6:	621a      	str	r2, [r3, #32]
  events[1].end_callback = event_1_end_cb;
 8000ed8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000ee0:	4a6f      	ldr	r2, [pc, #444]	; (80010a0 <main+0x388>)
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  events[2].start.year = 0;
 8000ee4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  events[2].start.month = 0;
 8000ef2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  events[2].start.day = 0;
 8000f00:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  events[2].start.hour = 0;
 8000f0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  events[2].start.minute = 0;
 8000f1c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  events[2].start.second = 20;
 8000f2a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f32:	2214      	movs	r2, #20
 8000f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  events[2].end.year = 0;
 8000f38:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  events[2].end.month = 0;
 8000f46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  events[2].end.day = 0;
 8000f54:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  events[2].end.hour = 0;
 8000f62:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  events[2].end.minute = 0;
 8000f70:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  events[2].end.second = 25;
 8000f7e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f86:	2219      	movs	r2, #25
 8000f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  events[2].start_callback = event_2_start_cb;
 8000f8c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f94:	4a43      	ldr	r2, [pc, #268]	; (80010a4 <main+0x38c>)
 8000f96:	639a      	str	r2, [r3, #56]	; 0x38
  events[2].end_callback = event_2_end_cb;
 8000f98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fa0:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <main+0x390>)
 8000fa2:	645a      	str	r2, [r3, #68]	; 0x44

  calendar_setEvents(events, 3);
 8000fa4:	f107 0320 	add.w	r3, r7, #32
 8000fa8:	2103      	movs	r1, #3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fb00 	bl	80005b0 <calendar_setEvents>

  // start calendar
//  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  calendar_start();
 8000fb0:	f7ff fb14 	bl	80005dc <calendar_start>

  // begin listening for messages from desktop
  uartBasic_RX_IT();
 8000fb4:	f000 fd40 	bl	8001a38 <uartBasic_RX_IT>

  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  bool messageStatus;
  int messageCount = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int timeSeconds = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  int timeMinutes = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 8000fca:	f7ff fb3b 	bl	8000644 <calendar_handleAlarm>

	  // check for message in the process queue
	  messageStatus = uartBasic_get_RX(messageHeader, messageBody);
 8000fce:	463a      	mov	r2, r7
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fd68 	bl	8001aac <uartBasic_get_RX>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	  // if message present, handle message
	  if (messageStatus == true) {
 8000fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00d      	beq.n	8001006 <main+0x2ee>
		  // echo back to computer
		  uartBasic_TX_Poll(messageHeader, messageBody);
 8000fea:	463a      	mov	r2, r7
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fd34 	bl	8001a60 <uartBasic_TX_Poll>
		  messageCount++;
 8000ff8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		  uartBasic_RX_IT();
 8001002:	f000 fd19 	bl	8001a38 <uartBasic_RX_IT>
	  }

	  calendar_getDateTime(&now);
 8001006:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fab6 	bl	800057c <calendar_getDateTime>
	  memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8001010:	463b      	mov	r3, r7
 8001012:	221c      	movs	r2, #28
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f005 fb74 	bl	8006704 <memset>
	  snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "20%02d/%02d/%02d  %02d:%02d:%02d\n", now.year, now.month, now.day, now.hour, now.minute, now.second);
 800101c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8001020:	461e      	mov	r6, r3
 8001022:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8001026:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 800102a:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
 800102e:	f897 0114 	ldrb.w	r0, [r7, #276]	; 0x114
 8001032:	4604      	mov	r4, r0
 8001034:	f897 0115 	ldrb.w	r0, [r7, #277]	; 0x115
 8001038:	4605      	mov	r5, r0
 800103a:	4638      	mov	r0, r7
 800103c:	9504      	str	r5, [sp, #16]
 800103e:	9403      	str	r4, [sp, #12]
 8001040:	9102      	str	r1, [sp, #8]
 8001042:	9201      	str	r2, [sp, #4]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	4633      	mov	r3, r6
 8001048:	4a18      	ldr	r2, [pc, #96]	; (80010ac <main+0x394>)
 800104a:	211c      	movs	r1, #28
 800104c:	f005 fb62 	bl	8006714 <sniprintf>
	  uartBasic_TX_Poll("TIME", messageBody);
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4816      	ldr	r0, [pc, #88]	; (80010b0 <main+0x398>)
 8001056:	f000 fd03 	bl	8001a60 <uartBasic_TX_Poll>
	  timeSeconds++;
 800105a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800105e:	3301      	adds	r3, #1
 8001060:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	  timeMinutes++;
 8001064:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001068:	3301      	adds	r3, #1
 800106a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	  long int i = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  while (i < 65535*2)
 8001074:	e004      	b.n	8001080 <main+0x368>
		  i++;
 8001076:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800107a:	3301      	adds	r3, #1
 800107c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	  while (i < 65535*2)
 8001080:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001084:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <main+0x39c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	ddf5      	ble.n	8001076 <main+0x35e>
  {
 800108a:	e79e      	b.n	8000fca <main+0x2b2>
 800108c:	200001c8 	.word	0x200001c8
 8001090:	20000190 	.word	0x20000190
 8001094:	08000cb9 	.word	0x08000cb9
 8001098:	08000cc9 	.word	0x08000cc9
 800109c:	08000cd9 	.word	0x08000cd9
 80010a0:	08000ce9 	.word	0x08000ce9
 80010a4:	08000cf9 	.word	0x08000cf9
 80010a8:	08000d09 	.word	0x08000d09
 80010ac:	08007034 	.word	0x08007034
 80010b0:	08007058 	.word	0x08007058
 80010b4:	0001fffd 	.word	0x0001fffd

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b09a      	sub	sp, #104	; 0x68
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2248      	movs	r2, #72	; 0x48
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f005 fb1c 	bl	8006704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010de:	f001 fa35 	bl	800254c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff fd68 	bl	8000bb8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <SystemClock_Config+0xb8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010f0:	4a1f      	ldr	r2, [pc, #124]	; (8001170 <SystemClock_Config+0xb8>)
 80010f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <SystemClock_Config+0xb8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001104:	232c      	movs	r3, #44	; 0x2c
 8001106:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001108:	2381      	movs	r3, #129	; 0x81
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800110c:	2301      	movs	r3, #1
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001110:	2300      	movs	r3, #0
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001114:	2360      	movs	r3, #96	; 0x60
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800111c:	2301      	movs	r3, #1
 800111e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001120:	2300      	movs	r3, #0
 8001122:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fcf9 	bl	8002b20 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001134:	f000 f91f 	bl	8001376 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001138:	236f      	movs	r3, #111	; 0x6f
 800113a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f002 f863 	bl	8003224 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001164:	f000 f907 	bl	8001376 <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3768      	adds	r7, #104	; 0x68
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58000400 	.word	0x58000400

08001174 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b092      	sub	sp, #72	; 0x48
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800117a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800118a:	2300      	movs	r3, #0
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	222c      	movs	r2, #44	; 0x2c
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f005 fab5 	bl	8006704 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800119a:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <MX_RTC_Init+0x134>)
 800119c:	4a43      	ldr	r2, [pc, #268]	; (80012ac <MX_RTC_Init+0x138>)
 800119e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011a0:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <MX_RTC_Init+0x134>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011a6:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <MX_RTC_Init+0x134>)
 80011a8:	227f      	movs	r2, #127	; 0x7f
 80011aa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ac:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <MX_RTC_Init+0x134>)
 80011ae:	22ff      	movs	r2, #255	; 0xff
 80011b0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <MX_RTC_Init+0x134>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011b8:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <MX_RTC_Init+0x134>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <MX_RTC_Init+0x134>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011c4:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <MX_RTC_Init+0x134>)
 80011c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ca:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <MX_RTC_Init+0x134>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80011d2:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <MX_RTC_Init+0x134>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011d8:	4833      	ldr	r0, [pc, #204]	; (80012a8 <MX_RTC_Init+0x134>)
 80011da:	f002 fcfd 	bl	8003bd8 <HAL_RTC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80011e4:	f000 f8c7 	bl	8001376 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001202:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001206:	2201      	movs	r2, #1
 8001208:	4619      	mov	r1, r3
 800120a:	4827      	ldr	r0, [pc, #156]	; (80012a8 <MX_RTC_Init+0x134>)
 800120c:	f002 fd66 	bl	8003cdc <HAL_RTC_SetTime>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001216:	f000 f8ae 	bl	8001376 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800121a:	2301      	movs	r3, #1
 800121c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001220:	2301      	movs	r3, #1
 8001222:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001226:	2301      	movs	r3, #1
 8001228:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800122c:	2300      	movs	r3, #0
 800122e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001236:	2201      	movs	r2, #1
 8001238:	4619      	mov	r1, r3
 800123a:	481b      	ldr	r0, [pc, #108]	; (80012a8 <MX_RTC_Init+0x134>)
 800123c:	f002 fe4c 	bl	8003ed8 <HAL_RTC_SetDate>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001246:	f000 f896 	bl	8001376 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800124a:	2300      	movs	r3, #0
 800124c:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800124e:	2300      	movs	r3, #0
 8001250:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001252:	2300      	movs	r3, #0
 8001254:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800126e:	2301      	movs	r3, #1
 8001270:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2201      	movs	r2, #1
 800127e:	4619      	mov	r1, r3
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <MX_RTC_Init+0x134>)
 8001282:	f002 fefd 	bl	8004080 <HAL_RTC_SetAlarm_IT>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 800128c:	f000 f873 	bl	8001376 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	202a      	movs	r0, #42	; 0x2a
 8001296:	f000 fe22 	bl	8001ede <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800129a:	202a      	movs	r0, #42	; 0x2a
 800129c:	f000 fe39 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3748      	adds	r7, #72	; 0x48
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000190 	.word	0x20000190
 80012ac:	40002800 	.word	0x40002800

080012b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b4:	4b27      	ldr	r3, [pc, #156]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012b6:	4a28      	ldr	r2, [pc, #160]	; (8001358 <MX_USART2_UART_Init+0xa8>)
 80012b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012d2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80012d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012f8:	2230      	movs	r2, #48	; 0x30
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 80012fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001302:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 8001306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130c:	4811      	ldr	r0, [pc, #68]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 800130e:	f003 f945 	bl	800459c <HAL_UART_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001318:	f000 f82d 	bl	8001376 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 8001320:	f005 f8ef 	bl	8006502 <HAL_UARTEx_SetTxFifoThreshold>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800132a:	f000 f824 	bl	8001376 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132e:	2100      	movs	r1, #0
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 8001332:	f005 f924 	bl	800657e <HAL_UARTEx_SetRxFifoThreshold>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800133c:	f000 f81b 	bl	8001376 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_USART2_UART_Init+0xa4>)
 8001342:	f005 f8a6 	bl	8006492 <HAL_UARTEx_DisableFifoMode>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 800134c:	f000 f813 	bl	8001376 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200001c8 	.word	0x200001c8
 8001358:	40004400 	.word	0x40004400

0800135c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	2001      	movs	r0, #1
 8001362:	f7ff fc3e 	bl	8000be2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	2004      	movs	r0, #4
 8001368:	f7ff fc3b 	bl	8000be2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	2002      	movs	r0, #2
 800136e:	f7ff fc38 	bl	8000be2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137a:	b672      	cpsid	i
}
 800137c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800137e:	e7fe      	b.n	800137e <Error_Handler+0x8>

08001380 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <rtcAlarmControl_init+0x18>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	2000025c 	.word	0x2000025c

0800139c <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4604      	mov	r4, r0
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4623      	mov	r3, r4
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	4603      	mov	r3, r0
 80013b0:	71bb      	strb	r3, [r7, #6]
 80013b2:	460b      	mov	r3, r1
 80013b4:	717b      	strb	r3, [r7, #5]
 80013b6:	4613      	mov	r3, r2
 80013b8:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	4a5a      	ldr	r2, [pc, #360]	; (8001528 <setDateTime+0x18c>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	b258      	sxtb	r0, r3
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	4b56      	ldr	r3, [pc, #344]	; (8001528 <setDateTime+0x18c>)
 80013ce:	fba3 1302 	umull	r1, r3, r3, r2
 80013d2:	08d9      	lsrs	r1, r3, #3
 80013d4:	460b      	mov	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	4303      	orrs	r3, r0
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	4a4e      	ldr	r2, [pc, #312]	; (8001528 <setDateTime+0x18c>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	08db      	lsrs	r3, r3, #3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	b258      	sxtb	r0, r3
 80013fa:	79ba      	ldrb	r2, [r7, #6]
 80013fc:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <setDateTime+0x18c>)
 80013fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001402:	08d9      	lsrs	r1, r3, #3
 8001404:	460b      	mov	r3, r1
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4303      	orrs	r3, r0
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	4a42      	ldr	r2, [pc, #264]	; (8001528 <setDateTime+0x18c>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	08db      	lsrs	r3, r3, #3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	b258      	sxtb	r0, r3
 800142a:	797a      	ldrb	r2, [r7, #5]
 800142c:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <setDateTime+0x18c>)
 800142e:	fba3 1302 	umull	r1, r3, r3, r2
 8001432:	08d9      	lsrs	r1, r3, #3
 8001434:	460b      	mov	r3, r1
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	b2db      	uxtb	r3, r3
 8001440:	b25b      	sxtb	r3, r3
 8001442:	4303      	orrs	r3, r0
 8001444:	b25b      	sxtb	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 800144e:	793b      	ldrb	r3, [r7, #4]
 8001450:	4a35      	ldr	r2, [pc, #212]	; (8001528 <setDateTime+0x18c>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	b258      	sxtb	r0, r3
 800145e:	793a      	ldrb	r2, [r7, #4]
 8001460:	4b31      	ldr	r3, [pc, #196]	; (8001528 <setDateTime+0x18c>)
 8001462:	fba3 1302 	umull	r1, r3, r3, r2
 8001466:	08d9      	lsrs	r1, r3, #3
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	b2db      	uxtb	r3, r3
 8001474:	b25b      	sxtb	r3, r3
 8001476:	4303      	orrs	r3, r0
 8001478:	b25b      	sxtb	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 800147e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001482:	4a29      	ldr	r2, [pc, #164]	; (8001528 <setDateTime+0x18c>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	b2db      	uxtb	r3, r3
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	b258      	sxtb	r0, r3
 8001490:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <setDateTime+0x18c>)
 8001496:	fba3 1302 	umull	r1, r3, r3, r2
 800149a:	08d9      	lsrs	r1, r3, #3
 800149c:	460b      	mov	r3, r1
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4303      	orrs	r3, r0
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 80014b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <setDateTime+0x18c>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	b258      	sxtb	r0, r3
 80014c4:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <setDateTime+0x18c>)
 80014ca:	fba3 1302 	umull	r1, r3, r3, r2
 80014ce:	08d9      	lsrs	r1, r3, #3
 80014d0:	460b      	mov	r3, r1
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	4303      	orrs	r3, r0
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <setDateTime+0x190>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f107 011c 	add.w	r1, r7, #28
 80014ee:	2201      	movs	r2, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fcf1 	bl	8003ed8 <HAL_RTC_SetDate>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d002      	beq.n	8001502 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001500:	e7fe      	b.n	8001500 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <setDateTime+0x190>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f107 0108 	add.w	r1, r7, #8
 800150a:	2201      	movs	r2, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fbe5 	bl	8003cdc <HAL_RTC_SetTime>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 800151c:	e7fe      	b.n	800151c <setDateTime+0x180>
  }
}
 800151e:	bf00      	nop
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	cccccccd 	.word	0xcccccccd
 800152c:	2000025c 	.word	0x2000025c

08001530 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
 800154c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001552:	4b40      	ldr	r3, [pc, #256]	; (8001654 <getDateTime+0x124>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f107 0114 	add.w	r1, r7, #20
 800155a:	2201      	movs	r2, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f002 fc59 	bl	8003e14 <HAL_RTC_GetTime>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 800156c:	e7fe      	b.n	800156c <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <getDateTime+0x124>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f107 0110 	add.w	r1, r7, #16
 8001576:	2201      	movs	r2, #1
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fd33 	bl	8003fe4 <HAL_RTC_GetDate>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001588:	e7fe      	b.n	8001588 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 800158a:	7cfb      	ldrb	r3, [r7, #19]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	b2db      	uxtb	r3, r3
 8001590:	461a      	mov	r2, r3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	b2da      	uxtb	r2, r3
 800159a:	7cfb      	ldrb	r3, [r7, #19]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 80015aa:	7c7b      	ldrb	r3, [r7, #17]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	7c7b      	ldrb	r3, [r7, #17]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 80015ca:	7cbb      	ldrb	r3, [r7, #18]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	461a      	mov	r2, r3
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	7cbb      	ldrb	r3, [r7, #18]
 80015dc:	f003 030f 	and.w	r3, r3, #15
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 80015ea:	7d3b      	ldrb	r3, [r7, #20]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	0092      	lsls	r2, r2, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	7d3b      	ldrb	r3, [r7, #20]
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	b2db      	uxtb	r3, r3
 8001602:	4413      	add	r3, r2
 8001604:	b2da      	uxtb	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 800160a:	7d7b      	ldrb	r3, [r7, #21]
 800160c:	091b      	lsrs	r3, r3, #4
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4413      	add	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	7d7b      	ldrb	r3, [r7, #21]
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b2da      	uxtb	r2, r3
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 800162a:	7dbb      	ldrb	r3, [r7, #22]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	b2db      	uxtb	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	0092      	lsls	r2, r2, #2
 8001634:	4413      	add	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	7dbb      	ldrb	r3, [r7, #22]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4413      	add	r3, r2
 8001644:	b2da      	uxtb	r2, r3
 8001646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000025c 	.word	0x2000025c

08001658 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b08f      	sub	sp, #60	; 0x3c
 800165c:	af00      	add	r7, sp, #0
 800165e:	4604      	mov	r4, r0
 8001660:	4608      	mov	r0, r1
 8001662:	4611      	mov	r1, r2
 8001664:	461a      	mov	r2, r3
 8001666:	4623      	mov	r3, r4
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	4603      	mov	r3, r0
 800166c:	71bb      	strb	r3, [r7, #6]
 800166e:	460b      	mov	r3, r1
 8001670:	717b      	strb	r3, [r7, #5]
 8001672:	4613      	mov	r3, r2
 8001674:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	222c      	movs	r2, #44	; 0x2c
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f005 f840 	bl	8006704 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4a40      	ldr	r2, [pc, #256]	; (8001788 <setAlarm_A+0x130>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	b258      	sxtb	r0, r3
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <setAlarm_A+0x130>)
 8001698:	fba3 1302 	umull	r1, r3, r3, r2
 800169c:	08d9      	lsrs	r1, r3, #3
 800169e:	460b      	mov	r3, r1
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	4303      	orrs	r3, r0
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 80016b6:	79bb      	ldrb	r3, [r7, #6]
 80016b8:	4a33      	ldr	r2, [pc, #204]	; (8001788 <setAlarm_A+0x130>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	08db      	lsrs	r3, r3, #3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	b258      	sxtb	r0, r3
 80016c6:	79ba      	ldrb	r2, [r7, #6]
 80016c8:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <setAlarm_A+0x130>)
 80016ca:	fba3 1302 	umull	r1, r3, r3, r2
 80016ce:	08d9      	lsrs	r1, r3, #3
 80016d0:	460b      	mov	r3, r1
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	4303      	orrs	r3, r0
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 80016e6:	797b      	ldrb	r3, [r7, #5]
 80016e8:	4a27      	ldr	r2, [pc, #156]	; (8001788 <setAlarm_A+0x130>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	08db      	lsrs	r3, r3, #3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	b258      	sxtb	r0, r3
 80016f6:	797a      	ldrb	r2, [r7, #5]
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <setAlarm_A+0x130>)
 80016fa:	fba3 1302 	umull	r1, r3, r3, r2
 80016fe:	08d9      	lsrs	r1, r3, #3
 8001700:	460b      	mov	r3, r1
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	b25b      	sxtb	r3, r3
 800170e:	4303      	orrs	r3, r0
 8001710:	b25b      	sxtb	r3, r3
 8001712:	b2db      	uxtb	r3, r3
 8001714:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8001716:	793b      	ldrb	r3, [r7, #4]
 8001718:	4a1b      	ldr	r2, [pc, #108]	; (8001788 <setAlarm_A+0x130>)
 800171a:	fba2 2303 	umull	r2, r3, r2, r3
 800171e:	08db      	lsrs	r3, r3, #3
 8001720:	b2db      	uxtb	r3, r3
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	b258      	sxtb	r0, r3
 8001726:	793a      	ldrb	r2, [r7, #4]
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <setAlarm_A+0x130>)
 800172a:	fba3 1302 	umull	r1, r3, r3, r2
 800172e:	08d9      	lsrs	r1, r3, #3
 8001730:	460b      	mov	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	b2db      	uxtb	r3, r3
 800173c:	b25b      	sxtb	r3, r3
 800173e:	4303      	orrs	r3, r0
 8001740:	b25b      	sxtb	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 800175e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001762:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <setAlarm_A+0x134>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f107 010c 	add.w	r1, r7, #12
 800176c:	2201      	movs	r2, #1
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fc86 	bl	8004080 <HAL_RTC_SetAlarm_IT>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 800177a:	b672      	cpsid	i
}
 800177c:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 800177e:	e7fe      	b.n	800177e <setAlarm_A+0x126>
  }
}
 8001780:	bf00      	nop
 8001782:	373c      	adds	r7, #60	; 0x3c
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	cccccccd 	.word	0xcccccccd
 800178c:	2000025c 	.word	0x2000025c

08001790 <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <diableAlarm_A+0x24>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	4618      	mov	r0, r3
 800179e:	f002 fd7b 	bl	8004298 <HAL_RTC_DeactivateAlarm>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 80017ac:	e7fe      	b.n	80017ac <diableAlarm_A+0x1c>
	}
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000025c 	.word	0x2000025c

080017b8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80017bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <LL_AHB2_GRP1_EnableClock>:
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017fc:	68fb      	ldr	r3, [r7, #12]
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4013      	ands	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800182c:	68fb      	ldr	r3, [r7, #12]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b090      	sub	sp, #64	; 0x40
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	2238      	movs	r2, #56	; 0x38
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f004 ff55 	bl	8006704 <memset>
  if(hrtc->Instance==RTC)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_RTC_MspInit+0x54>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d115      	bne.n	8001890 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001868:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800186a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800186e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001870:	f107 0308 	add.w	r3, r7, #8
 8001874:	4618      	mov	r0, r3
 8001876:	f002 f895 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001880:	f7ff fd79 	bl	8001376 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001884:	f7ff ff98 	bl	80017b8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001888:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800188c:	f7ff ffbc 	bl	8001808 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3740      	adds	r7, #64	; 0x40
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40002800 	.word	0x40002800

0800189c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b096      	sub	sp, #88	; 0x58
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2238      	movs	r2, #56	; 0x38
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f004 ff21 	bl	8006704 <memset>
  if(huart->Instance==USART2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_UART_MspInit+0x98>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d12e      	bne.n	800192a <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018d0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80018d4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 f862 	bl	80039a4 <HAL_RCCEx_PeriphCLKConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018e6:	f7ff fd46 	bl	8001376 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80018ee:	f7ff ff8b 	bl	8001808 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff ff70 	bl	80017d8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80018f8:	230c      	movs	r3, #12
 80018fa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001908:	2307      	movs	r3, #7
 800190a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f000 fbd3 	bl	80020c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2025      	movs	r0, #37	; 0x25
 8001920:	f000 fadd 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001924:	2025      	movs	r0, #37	; 0x25
 8001926:	f000 faf4 	bl	8001f12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3758      	adds	r7, #88	; 0x58
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40004400 	.word	0x40004400

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr

08001962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800197e:	f000 f9bb 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <USART2_IRQHandler+0x10>)
 800198e:	f002 ff27 	bl	80047e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001c8 	.word	0x200001c8

0800199c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <RTC_Alarm_IRQHandler+0x10>)
 80019a2:	f002 fcd5 	bl	8004350 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000190 	.word	0x20000190

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f004 fe58 	bl	8006694 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20008000 	.word	0x20008000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	20000260 	.word	0x20000260
 8001a18:	200002c8 	.word	0x200002c8

08001a1c <uartBasic_init>:

/*
 *
 */
void uartBasic_init(UART_HandleTypeDef* uartHandle)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	// initialize structure fields
	_uartHandle = uartHandle;
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <uartBasic_init+0x18>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	20000268 	.word	0x20000268

08001a38 <uartBasic_RX_IT>:

/*
 *
 */
bool uartBasic_RX_IT(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	// if the buffer is not full
	if (!_rxBuffer_full)
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <uartBasic_RX_IT+0x24>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f083 0301 	eor.w	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <uartBasic_RX_IT+0x1c>
	{
		// start receiving
		_rxMessage_IT();
 8001a4c:	f000 f874 	bl	8001b38 <_rxMessage_IT>

		// return success
		return true;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <uartBasic_RX_IT+0x1e>

	// rx buffer is full
	else
	{
		// return full buffer
		return false;
 8001a54:	2300      	movs	r3, #0
	}
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200002ad 	.word	0x200002ad

08001a60 <uartBasic_TX_Poll>:
/*
 * Start transmitting message over UART.
 */
bool uartBasic_TX_Poll(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
	// if the buffer is not full
	if (!_txBuffer_full)
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <uartBasic_TX_Poll+0x44>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00e      	beq.n	8001a98 <uartBasic_TX_Poll+0x38>
	{
		// Compose header and body into one message
		composeMessage(header, body, _txBuffer);
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <uartBasic_TX_Poll+0x48>)
 8001a7c:	6839      	ldr	r1, [r7, #0]
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f88a 	bl	8001b98 <composeMessage>
		_txBuffer_full = true;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <uartBasic_TX_Poll+0x44>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]

		// and send
		_txMessage_Poll();
 8001a8a:	f000 f86d 	bl	8001b68 <_txMessage_Poll>

		// clear buffer full
		_txBuffer_full = false;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <uartBasic_TX_Poll+0x44>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]

		// report successfully queued
		return true;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <uartBasic_TX_Poll+0x3a>
	}

	else
	{
		// return full buffer
		return false;
 8001a98:	2300      	movs	r3, #0
	}
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200002ac 	.word	0x200002ac
 8001aa8:	2000026c 	.word	0x2000026c

08001aac <uartBasic_get_RX>:
/*
 *
 */
bool uartBasic_get_RX(char header[UART_MESSAGE_HEADER_SIZE],
		char body[UART_MESSAGE_BODY_SIZE])
{
 8001aac:	b5b0      	push	{r4, r5, r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	// if the queue is not empty
	if (_rxBuffer_full)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <uartBasic_get_RX+0x4c>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d015      	beq.n	8001aec <uartBasic_get_RX+0x40>
	{
		// retrieve message from process queue
		memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <uartBasic_get_RX+0x50>)
 8001ac2:	f107 0408 	add.w	r4, r7, #8
 8001ac6:	461d      	mov	r5, r3
 8001ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001acc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_rxBuffer_full = false;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <uartBasic_get_RX+0x4c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]

		// decompose header and body from message
		decomposeMessage(header, body, message);
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6839      	ldr	r1, [r7, #0]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f86e 	bl	8001bc4 <decomposeMessage>

		// report successfully dequeued
		return true;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <uartBasic_get_RX+0x42>

	// report queue is empty
	else
	{
		// report empty
		return false;
 8001aec:	2300      	movs	r3, #0
	}
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200002ad 	.word	0x200002ad
 8001afc:	2000028c 	.word	0x2000028c

08001b00 <uartBasic_RX_Complete_ISR>:

/*
 *
 */
void uartBasic_RX_Complete_ISR(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	_rxBuffer_full = true;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <uartBasic_RX_Complete_ISR+0x14>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	200002ad 	.word	0x200002ad

08001b18 <uartBasic_TX_Complete_ISR>:

/*
 *
 */
void uartBasic_TX_Complete_ISR(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
	_txBuffer_full = false;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <uartBasic_TX_Complete_ISR+0x14>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	200002ac 	.word	0x200002ac

08001b30 <uartBasic_Error_ISR>:

/*
 *
 */
void uartBasic_Error_ISR(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	while (1)
		(void)0; // no operation
 8001b34:	e7fe      	b.n	8001b34 <uartBasic_Error_ISR+0x4>
	...

08001b38 <_rxMessage_IT>:

/*
 *
 */
void _rxMessage_IT(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE) == HAL_ERROR)
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <_rxMessage_IT+0x24>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2220      	movs	r2, #32
 8001b42:	4907      	ldr	r1, [pc, #28]	; (8001b60 <_rxMessage_IT+0x28>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 fdff 	bl	8004748 <HAL_UART_Receive_IT>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d102      	bne.n	8001b56 <_rxMessage_IT+0x1e>
		_rxError = true;
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <_rxMessage_IT+0x2c>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000268 	.word	0x20000268
 8001b60:	2000028c 	.word	0x2000028c
 8001b64:	20000265 	.word	0x20000265

08001b68 <_txMessage_Poll>:

/*
 *
 */
void _txMessage_Poll(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	if (HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, TX_POLL_TIMEOUT) == HAL_ERROR)
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_txMessage_Poll+0x24>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	23fa      	movs	r3, #250	; 0xfa
 8001b72:	2220      	movs	r2, #32
 8001b74:	4906      	ldr	r1, [pc, #24]	; (8001b90 <_txMessage_Poll+0x28>)
 8001b76:	f002 fd61 	bl	800463c <HAL_UART_Transmit>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d102      	bne.n	8001b86 <_txMessage_Poll+0x1e>
		_txError = true;
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <_txMessage_Poll+0x2c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	701a      	strb	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	20000268 	.word	0x20000268
 8001b90:	2000026c 	.word	0x2000026c
 8001b94:	20000264 	.word	0x20000264

08001b98 <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	221c      	movs	r2, #28
 8001bb4:	68b9      	ldr	r1, [r7, #8]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 fd96 	bl	80066e8 <memcpy>
}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	221c      	movs	r2, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	68b8      	ldr	r0, [r7, #8]
 8001be4:	f004 fd80 	bl	80066e8 <memcpy>
}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf0:	480d      	ldr	r0, [pc, #52]	; (8001c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf4:	f7fe fc96 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfa:	490d      	ldr	r1, [pc, #52]	; (8001c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <LoopForever+0xe>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c00:	e002      	b.n	8001c08 <LoopCopyDataInit>

08001c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c06:	3304      	adds	r3, #4

08001c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c0c:	d3f9      	bcc.n	8001c02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0e:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c10:	4c0a      	ldr	r4, [pc, #40]	; (8001c3c <LoopForever+0x16>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c14:	e001      	b.n	8001c1a <LoopFillZerobss>

08001c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c18:	3204      	adds	r2, #4

08001c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c1c:	d3fb      	bcc.n	8001c16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c1e:	f004 fd3f 	bl	80066a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c22:	f7ff f879 	bl	8000d18 <main>

08001c26 <LoopForever>:

LoopForever:
    b LoopForever
 8001c26:	e7fe      	b.n	8001c26 <LoopForever>
  ldr   r0, =_estack
 8001c28:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c34:	08007188 	.word	0x08007188
  ldr r2, =_sbss
 8001c38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c3c:	200002c4 	.word	0x200002c4

08001c40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c40:	e7fe      	b.n	8001c40 <ADC_IRQHandler>
	...

08001c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4e:	2003      	movs	r0, #3
 8001c50:	f000 f93a 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c54:	f001 fcc8 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_Init+0x3c>)
 8001c5c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f000 f810 	bl	8001c84 <HAL_InitTick>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	e001      	b.n	8001c74 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c70:	f7ff fde2 	bl	8001838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c74:	79fb      	ldrb	r3, [r7, #7]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d024      	beq.n	8001ce2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c98:	f001 fca6 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_InitTick+0x6c>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f93c 	bl	8001f2e <HAL_SYSTICK_Config>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10f      	bne.n	8001cdc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b0f      	cmp	r3, #15
 8001cc0:	d809      	bhi.n	8001cd6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cca:	f000 f908 	bl	8001ede <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_InitTick+0x70>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e007      	b.n	8001ce6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	73fb      	strb	r3, [r7, #15]
 8001cda:	e004      	b.n	8001ce6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	73fb      	strb	r3, [r7, #15]
 8001ce0:	e001      	b.n	8001ce6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_IncTick+0x1c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_IncTick+0x20>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a03      	ldr	r2, [pc, #12]	; (8001d18 <HAL_IncTick+0x20>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	200002b0 	.word	0x200002b0

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b02      	ldr	r3, [pc, #8]	; (8001d2c <HAL_GetTick+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	200002b0 	.word	0x200002b0

08001d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <__NVIC_SetPriorityGrouping+0x44>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <__NVIC_GetPriorityGrouping+0x18>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 0307 	and.w	r3, r3, #7
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db0b      	blt.n	8001dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	4906      	ldr	r1, [pc, #24]	; (8001dc8 <__NVIC_EnableIRQ+0x34>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2001      	movs	r0, #1
 8001db6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	; (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	; (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea8:	f7ff ff90 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff2d 	bl	8001d30 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eec:	f7ff ff44 	bl	8001d78 <__NVIC_GetPriorityGrouping>
 8001ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	6978      	ldr	r0, [r7, #20]
 8001ef8:	f7ff ff92 	bl	8001e20 <NVIC_EncodePriority>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f02:	4611      	mov	r1, r2
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff ff61 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff37 	bl	8001d94 <__NVIC_EnableIRQ>
}
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffa4 	bl	8001e84 <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e04f      	b.n	8001ff8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d008      	beq.n	8001f76 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2204      	movs	r2, #4
 8001f68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e040      	b.n	8001ff8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 020e 	bic.w	r2, r2, #14
 8001f84:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f003 021c 	and.w	r2, r3, #28
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fc2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00c      	beq.n	8001fe6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fe4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d005      	beq.n	8002026 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2204      	movs	r2, #4
 800201e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e047      	b.n	80020b6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 020e 	bic.w	r2, r2, #14
 8002034:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002054:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f003 021c 	and.w	r2, r3, #28
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	2101      	movs	r1, #1
 8002064:	fa01 f202 	lsl.w	r2, r1, r2
 8002068:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002072:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00c      	beq.n	8002096 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002094:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
    }
  }
  return status;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ce:	e140      	b.n	8002352 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	2101      	movs	r1, #1
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	4013      	ands	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8132 	beq.w	800234c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d005      	beq.n	8002100 <HAL_GPIO_Init+0x40>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d130      	bne.n	8002162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002136:	2201      	movs	r2, #1
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 0201 	and.w	r2, r3, #1
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b03      	cmp	r3, #3
 800216c:	d017      	beq.n	800219e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	2203      	movs	r2, #3
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d123      	bne.n	80021f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	08da      	lsrs	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3208      	adds	r2, #8
 80021ec:	6939      	ldr	r1, [r7, #16]
 80021ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0203 	and.w	r2, r3, #3
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 808c 	beq.w	800234c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002234:	4a4e      	ldr	r2, [pc, #312]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	2207      	movs	r2, #7
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800225e:	d00d      	beq.n	800227c <HAL_GPIO_Init+0x1bc>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a44      	ldr	r2, [pc, #272]	; (8002374 <HAL_GPIO_Init+0x2b4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d007      	beq.n	8002278 <HAL_GPIO_Init+0x1b8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a43      	ldr	r2, [pc, #268]	; (8002378 <HAL_GPIO_Init+0x2b8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_GPIO_Init+0x1b4>
 8002270:	2302      	movs	r3, #2
 8002272:	e004      	b.n	800227e <HAL_GPIO_Init+0x1be>
 8002274:	2307      	movs	r3, #7
 8002276:	e002      	b.n	800227e <HAL_GPIO_Init+0x1be>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <HAL_GPIO_Init+0x1be>
 800227c:	2300      	movs	r3, #0
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	f002 0203 	and.w	r2, r2, #3
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	4093      	lsls	r3, r2
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800228e:	4938      	ldr	r1, [pc, #224]	; (8002370 <HAL_GPIO_Init+0x2b0>)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800229c:	4b37      	ldr	r3, [pc, #220]	; (800237c <HAL_GPIO_Init+0x2bc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4013      	ands	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022c0:	4a2e      	ldr	r2, [pc, #184]	; (800237c <HAL_GPIO_Init+0x2bc>)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_GPIO_Init+0x2bc>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022ea:	4a24      	ldr	r2, [pc, #144]	; (800237c <HAL_GPIO_Init+0x2bc>)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_GPIO_Init+0x2bc>)
 80022f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022f6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002316:	4a19      	ldr	r2, [pc, #100]	; (800237c <HAL_GPIO_Init+0x2bc>)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800231e:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_GPIO_Init+0x2bc>)
 8002320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002324:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_GPIO_Init+0x2bc>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	f47f aeb7 	bne.w	80020d0 <HAL_GPIO_Init+0x10>
  }
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40010000 	.word	0x40010000
 8002374:	48000400 	.word	0x48000400
 8002378:	48000800 	.word	0x48000800
 800237c:	58000800 	.word	0x58000800

08002380 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800238e:	e0af      	b.n	80024f0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002390:	2201      	movs	r2, #1
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a2 	beq.w	80024ea <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80023a6:	4a59      	ldr	r2, [pc, #356]	; (800250c <HAL_GPIO_DeInit+0x18c>)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	2207      	movs	r2, #7
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023ce:	d00d      	beq.n	80023ec <HAL_GPIO_DeInit+0x6c>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4f      	ldr	r2, [pc, #316]	; (8002510 <HAL_GPIO_DeInit+0x190>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d007      	beq.n	80023e8 <HAL_GPIO_DeInit+0x68>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4e      	ldr	r2, [pc, #312]	; (8002514 <HAL_GPIO_DeInit+0x194>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_GPIO_DeInit+0x64>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e004      	b.n	80023ee <HAL_GPIO_DeInit+0x6e>
 80023e4:	2307      	movs	r3, #7
 80023e6:	e002      	b.n	80023ee <HAL_GPIO_DeInit+0x6e>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_GPIO_DeInit+0x6e>
 80023ec:	2300      	movs	r3, #0
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	f002 0203 	and.w	r2, r2, #3
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	4093      	lsls	r3, r2
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d136      	bne.n	800246c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80023fe:	4b46      	ldr	r3, [pc, #280]	; (8002518 <HAL_GPIO_DeInit+0x198>)
 8002400:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	4943      	ldr	r1, [pc, #268]	; (8002518 <HAL_GPIO_DeInit+0x198>)
 800240a:	4013      	ands	r3, r2
 800240c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_GPIO_DeInit+0x198>)
 8002412:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	493f      	ldr	r1, [pc, #252]	; (8002518 <HAL_GPIO_DeInit+0x198>)
 800241c:	4013      	ands	r3, r2
 800241e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002422:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_GPIO_DeInit+0x198>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	493b      	ldr	r1, [pc, #236]	; (8002518 <HAL_GPIO_DeInit+0x198>)
 800242c:	4013      	ands	r3, r2
 800242e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002430:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_GPIO_DeInit+0x198>)
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	4937      	ldr	r1, [pc, #220]	; (8002518 <HAL_GPIO_DeInit+0x198>)
 800243a:	4013      	ands	r3, r2
 800243c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	2207      	movs	r2, #7
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800244e:	4a2f      	ldr	r2, [pc, #188]	; (800250c <HAL_GPIO_DeInit+0x18c>)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43da      	mvns	r2, r3
 800245e:	482b      	ldr	r0, [pc, #172]	; (800250c <HAL_GPIO_DeInit+0x18c>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	400a      	ands	r2, r1
 8002466:	3302      	adds	r3, #2
 8002468:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2103      	movs	r1, #3
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	08d2      	lsrs	r2, r2, #3
 80024a0:	4019      	ands	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3208      	adds	r2, #8
 80024a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2103      	movs	r1, #3
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	2101      	movs	r1, #1
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2103      	movs	r1, #3
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f47f af49 	bne.w	8002390 <HAL_GPIO_DeInit+0x10>
  }
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000
 8002510:	48000400 	.word	0x48000400
 8002514:	48000800 	.word	0x48000800
 8002518:	58000800 	.word	0x58000800

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002538:	e002      	b.n	8002540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a03      	ldr	r2, [pc, #12]	; (8002564 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	6013      	str	r3, [r2, #0]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr
 8002564:	58000400 	.word	0x58000400

08002568 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <LL_PWR_EnableBootC2+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <LL_PWR_EnableBootC2+0x18>)
 8002572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	58000400 	.word	0x58000400

08002584 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_PWREx_GetVoltageRange+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	58000400 	.word	0x58000400

0800259c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 80025a4:	f7ff ffe0 	bl	8002568 <LL_PWR_EnableBootC2>
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025c0:	d101      	bne.n	80025c6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	58000400 	.word	0x58000400

080025d4 <LL_RCC_HSE_EnableTcxo>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <LL_RCC_HSE_DisableTcxo>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261e:	d101      	bne.n	8002624 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr

0800262e <LL_RCC_HSE_Enable>:
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_RCC_HSE_Disable>:
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800264e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <LL_RCC_HSE_IsReady>:
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800266a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002678:	d101      	bne.n	800267e <LL_RCC_HSE_IsReady+0x18>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_RCC_HSE_IsReady+0x1a>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <LL_RCC_HSI_Enable>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <LL_RCC_HSI_Disable>:
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <LL_RCC_HSI_IsReady>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80026c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026d2:	d101      	bne.n	80026d8 <LL_RCC_HSI_IsReady+0x18>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <LL_RCC_HSI_IsReady+0x1a>
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	061b      	lsls	r3, r3, #24
 80026f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <LL_RCC_LSE_IsReady>:
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800270e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b02      	cmp	r3, #2
 800271c:	d101      	bne.n	8002722 <LL_RCC_LSE_IsReady+0x18>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_RCC_LSE_IsReady+0x1a>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <LL_RCC_LSI_Enable>:
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002738:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <LL_RCC_LSI_Disable>:
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <LL_RCC_LSI_IsReady>:
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d101      	bne.n	8002784 <LL_RCC_LSI_IsReady+0x18>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_RCC_LSI_IsReady+0x1a>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <LL_RCC_MSI_Enable>:
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6013      	str	r3, [r2, #0]
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <LL_RCC_MSI_Disable>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6013      	str	r3, [r2, #0]
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <LL_RCC_MSI_IsReady>:
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d101      	bne.n	80027dc <LL_RCC_MSI_IsReady+0x16>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <LL_RCC_MSI_IsReady+0x18>
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80027ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d101      	bne.n	80027fc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <LL_RCC_MSI_GetRange>:
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002828:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <LL_RCC_SetSysClkSource>:
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <LL_RCC_GetSysClkSource>:
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 030c 	and.w	r3, r3, #12
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <LL_RCC_SetAHBPrescaler>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <LL_C2_RCC_SetAHBPrescaler>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <LL_RCC_SetAHB3Prescaler>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80028f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028f8:	f023 020f 	bic.w	r2, r3, #15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	091b      	lsrs	r3, r3, #4
 8002900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_RCC_SetAPB1Prescaler>:
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800291c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <LL_RCC_SetAPB2Prescaler>:
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800294c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <LL_RCC_GetAHBPrescaler>:
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <LL_RCC_GetAHB3Prescaler>:
{
 8002976:	b480      	push	{r7}
 8002978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <LL_RCC_GetAPB1Prescaler>:
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_GetAPB2Prescaler>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80029f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a06:	d101      	bne.n	8002a0c <LL_RCC_PLL_IsReady+0x18>
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e000      	b.n	8002a0e <LL_RCC_PLL_IsReady+0x1a>
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0303 	and.w	r3, r3, #3
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a82:	d101      	bne.n	8002a88 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa6:	d101      	bne.n	8002aac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aca:	d101      	bne.n	8002ad0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aec:	d101      	bne.n	8002af2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b0e:	d101      	bne.n	8002b14 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e36f      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b32:	f7ff fea6 	bl	8002882 <LL_RCC_GetSysClkSource>
 8002b36:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b38:	f7ff ff8f 	bl	8002a5a <LL_RCC_PLL_GetMainSource>
 8002b3c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80c4 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_RCC_OscConfig+0x3e>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	2b0c      	cmp	r3, #12
 8002b56:	d176      	bne.n	8002c46 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d173      	bne.n	8002c46 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e353      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x68>
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b86:	e006      	b.n	8002b96 <HAL_RCC_OscConfig+0x76>
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d222      	bcs.n	8002be0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fd5a 	bl	8003658 <RCC_SetFlashLatencyFromMSIRange>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e331      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb8:	f043 0308 	orr.w	r3, r3, #8
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fe2b 	bl	8002834 <LL_RCC_MSI_SetCalibTrimming>
 8002bde:	e021      	b.n	8002c24 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bea:	f043 0308 	orr.w	r3, r3, #8
 8002bee:	6013      	str	r3, [r2, #0]
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe12 	bl	8002834 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 fd1f 	bl	8003658 <RCC_SetFlashLatencyFromMSIRange>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e2f6      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c24:	f000 fce0 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4aa7      	ldr	r2, [pc, #668]	; (8002ec8 <HAL_RCC_OscConfig+0x3a8>)
 8002c2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002c2e:	4ba7      	ldr	r3, [pc, #668]	; (8002ecc <HAL_RCC_OscConfig+0x3ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f826 	bl	8001c84 <HAL_InitTick>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d047      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002c42:	7cfb      	ldrb	r3, [r7, #19]
 8002c44:	e2e5      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d02c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c4e:	f7ff fd9e 	bl	800278e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c52:	f7ff f863 	bl	8001d1c <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c5a:	f7ff f85f 	bl	8001d1c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e2d2      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c6c:	f7ff fdab 	bl	80027c6 <LL_RCC_MSI_IsReady>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f1      	beq.n	8002c5a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fdc7 	bl	8002834 <LL_RCC_MSI_SetCalibTrimming>
 8002ca6:	e015      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ca8:	f7ff fd7f 	bl	80027aa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cac:	f7ff f836 	bl	8001d1c <HAL_GetTick>
 8002cb0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cb4:	f7ff f832 	bl	8001d1c <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e2a5      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002cc6:	f7ff fd7e 	bl	80027c6 <LL_RCC_MSI_IsReady>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f1      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x194>
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cd2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d058      	beq.n	8002d92 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d108      	bne.n	8002cfe <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d105      	bne.n	8002cfe <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d14b      	bne.n	8002d92 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e289      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d10:	4313      	orrs	r3, r2
 8002d12:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d102      	bne.n	8002d24 <HAL_RCC_OscConfig+0x204>
 8002d1e:	f7ff fc86 	bl	800262e <LL_RCC_HSE_Enable>
 8002d22:	e00d      	b.n	8002d40 <HAL_RCC_OscConfig+0x220>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002d2c:	d104      	bne.n	8002d38 <HAL_RCC_OscConfig+0x218>
 8002d2e:	f7ff fc51 	bl	80025d4 <LL_RCC_HSE_EnableTcxo>
 8002d32:	f7ff fc7c 	bl	800262e <LL_RCC_HSE_Enable>
 8002d36:	e003      	b.n	8002d40 <HAL_RCC_OscConfig+0x220>
 8002d38:	f7ff fc87 	bl	800264a <LL_RCC_HSE_Disable>
 8002d3c:	f7ff fc58 	bl	80025f0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d012      	beq.n	8002d6e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe ffe8 	bl	8001d1c <HAL_GetTick>
 8002d4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe ffe4 	bl	8001d1c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e257      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d62:	f7ff fc80 	bl	8002666 <LL_RCC_HSE_IsReady>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f1      	beq.n	8002d50 <HAL_RCC_OscConfig+0x230>
 8002d6c:	e011      	b.n	8002d92 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fe ffd5 	bl	8001d1c <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d76:	f7fe ffd1 	bl	8001d1c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e244      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d88:	f7ff fc6d 	bl	8002666 <LL_RCC_HSE_IsReady>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f1      	bne.n	8002d76 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d046      	beq.n	8002e2c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_OscConfig+0x290>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b0c      	cmp	r3, #12
 8002da8:	d10e      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e22a      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fc8e 	bl	80026e2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002dc6:	e031      	b.n	8002e2c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d019      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	f7ff fc5a 	bl	8002688 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe ffa2 	bl	8001d1c <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ddc:	f7fe ff9e 	bl	8001d1c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e211      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002dee:	f7ff fc67 	bl	80026c0 <LL_RCC_HSI_IsReady>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f1      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fc70 	bl	80026e2 <LL_RCC_HSI_SetCalibTrimming>
 8002e02:	e013      	b.n	8002e2c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e04:	f7ff fc4e 	bl	80026a4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe ff88 	bl	8001d1c <HAL_GetTick>
 8002e0c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e10:	f7fe ff84 	bl	8001d1c <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e1f7      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e22:	f7ff fc4d 	bl	80026c0 <LL_RCC_HSI_IsReady>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f1      	bne.n	8002e10 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d06e      	beq.n	8002f16 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d056      	beq.n	8002eee <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e48:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69da      	ldr	r2, [r3, #28]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d031      	beq.n	8002ebc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d006      	beq.n	8002e70 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e1d0      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d013      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e7a:	f7ff fc67 	bl	800274c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e7e:	f7fe ff4d 	bl	8001d1c <HAL_GetTick>
 8002e82:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e86:	f7fe ff49 	bl	8001d1c <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b11      	cmp	r3, #17
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1bc      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e98:	f7ff fc68 	bl	800276c <LL_RCC_LSI_IsReady>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f1      	bne.n	8002e86 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eaa:	f023 0210 	bic.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebc:	f7ff fc36 	bl	800272c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe ff2c 	bl	8001d1c <HAL_GetTick>
 8002ec4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002ec6:	e00c      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3c2>
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe ff24 	bl	8001d1c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b11      	cmp	r3, #17
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e197      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002ee2:	f7ff fc43 	bl	800276c <LL_RCC_LSI_IsReady>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0f1      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x3b0>
 8002eec:	e013      	b.n	8002f16 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eee:	f7ff fc2d 	bl	800274c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe ff13 	bl	8001d1c <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efa:	f7fe ff0f 	bl	8001d1c <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b11      	cmp	r3, #17
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e182      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002f0c:	f7ff fc2e 	bl	800276c <LL_RCC_LSI_IsReady>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1f1      	bne.n	8002efa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80d8 	beq.w	80030d4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f24:	f7ff fb44 	bl	80025b0 <LL_PWR_IsEnabledBkUpAccess>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d113      	bne.n	8002f56 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f2e:	f7ff fb0d 	bl	800254c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f32:	f7fe fef3 	bl	8001d1c <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3a:	f7fe feef 	bl	8001d1c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e162      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f4c:	f7ff fb30 	bl	80025b0 <LL_PWR_IsEnabledBkUpAccess>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f1      	beq.n	8002f3a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d07b      	beq.n	8003056 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b85      	cmp	r3, #133	; 0x85
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b05      	cmp	r3, #5
 8002f6c:	d109      	bne.n	8002f82 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fecb 	bl	8001d1c <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe febd 	bl	8001d1c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e12e      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002fb4:	f7ff fba9 	bl	800270a <LL_RCC_LSE_IsReady>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ef      	beq.n	8002f9e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b81      	cmp	r3, #129	; 0x81
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	2b85      	cmp	r3, #133	; 0x85
 8002fcc:	d121      	bne.n	8003012 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe fea5 	bl	8001d1c <HAL_GetTick>
 8002fd2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe fe97 	bl	8001d1c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e108      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ec      	beq.n	8002fea <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003010:	e060      	b.n	80030d4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe fe83 	bl	8001d1c <HAL_GetTick>
 8003016:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe fe75 	bl	8001d1c <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0e6      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ec      	bne.n	800302e <HAL_RCC_OscConfig+0x50e>
 8003054:	e03e      	b.n	80030d4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7fe fe61 	bl	8001d1c <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800306c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003072:	f7fe fe53 	bl	8001d1c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0c4      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ec      	bne.n	8003072 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003098:	f7fe fe40 	bl	8001d1c <HAL_GetTick>
 800309c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80030b2:	e00a      	b.n	80030ca <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b4:	f7fe fe32 	bl	8001d1c <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0a3      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80030ca:	f7ff fb1e 	bl	800270a <LL_RCC_LSE_IsReady>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ef      	bne.n	80030b4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8099 	beq.w	8003210 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2b0c      	cmp	r3, #12
 80030e2:	d06c      	beq.n	80031be <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d14b      	bne.n	8003184 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ec:	f7ff fc74 	bl	80029d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe fe14 	bl	8001d1c <HAL_GetTick>
 80030f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f8:	f7fe fe10 	bl	8001d1c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e083      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800310a:	f7ff fc73 	bl	80029f4 <LL_RCC_PLL_IsReady>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f1      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	4b40      	ldr	r3, [pc, #256]	; (800321c <HAL_RCC_OscConfig+0x6fc>)
 800311c:	4013      	ands	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800312c:	0212      	lsls	r2, r2, #8
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800313a:	4311      	orrs	r1, r2
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003140:	430a      	orrs	r2, r1
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003146:	4313      	orrs	r3, r2
 8003148:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314a:	f7ff fc37 	bl	80029bc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800314e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe fddd 	bl	8001d1c <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe fdd9 	bl	8001d1c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e04c      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003178:	f7ff fc3c 	bl	80029f4 <LL_RCC_PLL_IsReady>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f1      	beq.n	8003166 <HAL_RCC_OscConfig+0x646>
 8003182:	e045      	b.n	8003210 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003184:	f7ff fc28 	bl	80029d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe fdc8 	bl	8001d1c <HAL_GetTick>
 800318c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe fdc4 	bl	8001d1c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b0a      	cmp	r3, #10
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e037      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80031a2:	f7ff fc27 	bl	80029f4 <LL_RCC_PLL_IsReady>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f1      	bne.n	8003190 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031b6:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_RCC_OscConfig+0x700>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e028      	b.n	8003210 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e023      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 0203 	and.w	r2, r3, #3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	429a      	cmp	r2, r3
 80031de:	d115      	bne.n	800320c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d10e      	bne.n	800320c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f8:	021b      	lsls	r3, r3, #8
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d106      	bne.n	800320c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	429a      	cmp	r2, r3
 800320a:	d001      	beq.n	8003210 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	11c1808c 	.word	0x11c1808c
 8003220:	eefefffc 	.word	0xeefefffc

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e12c      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b98      	ldr	r3, [pc, #608]	; (800349c <HAL_RCC_ClockConfig+0x278>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d91b      	bls.n	800327e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b95      	ldr	r3, [pc, #596]	; (800349c <HAL_RCC_ClockConfig+0x278>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	4993      	ldr	r1, [pc, #588]	; (800349c <HAL_RCC_ClockConfig+0x278>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003256:	f7fe fd61 	bl	8001d1c <HAL_GetTick>
 800325a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325c:	e008      	b.n	8003270 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800325e:	f7fe fd5d 	bl	8001d1c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e110      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003270:	4b8a      	ldr	r3, [pc, #552]	; (800349c <HAL_RCC_ClockConfig+0x278>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d1ef      	bne.n	800325e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fb02 	bl	8002898 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003294:	f7fe fd42 	bl	8001d1c <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800329c:	f7fe fd3e 	bl	8001d1c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0f1      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80032ae:	f7ff fbdf 	bl	8002a70 <LL_RCC_IsActiveFlag_HPRE>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f1      	beq.n	800329c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d016      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff faf8 	bl	80028be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032ce:	f7fe fd25 	bl	8001d1c <HAL_GetTick>
 80032d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032d6:	f7fe fd21 	bl	8001d1c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0d4      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80032e8:	f7ff fbd3 	bl	8002a92 <LL_RCC_IsActiveFlag_C2HPRE>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f1      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff faf0 	bl	80028e8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003308:	f7fe fd08 	bl	8001d1c <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003310:	f7fe fd04 	bl	8001d1c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0b7      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003322:	f7ff fbc8 	bl	8002ab6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f1      	beq.n	8003310 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fae9 	bl	8002914 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003342:	f7fe fceb 	bl	8001d1c <HAL_GetTick>
 8003346:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800334a:	f7fe fce7 	bl	8001d1c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e09a      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800335c:	f7ff fbbd 	bl	8002ada <LL_RCC_IsActiveFlag_PPRE1>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f1      	beq.n	800334a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d017      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fade 	bl	800293a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800337e:	f7fe fccd 	bl	8001d1c <HAL_GetTick>
 8003382:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003386:	f7fe fcc9 	bl	8001d1c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e07c      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003398:	f7ff fbb0 	bl	8002afc <LL_RCC_IsActiveFlag_PPRE2>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0f1      	beq.n	8003386 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d043      	beq.n	8003436 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d106      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80033b6:	f7ff f956 	bl	8002666 <LL_RCC_HSE_IsReady>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d11e      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e066      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d106      	bne.n	80033da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80033cc:	f7ff fb12 	bl	80029f4 <LL_RCC_PLL_IsReady>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d113      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e05b      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80033e2:	f7ff f9f0 	bl	80027c6 <LL_RCC_MSI_IsReady>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d108      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e050      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80033f0:	f7ff f966 	bl	80026c0 <LL_RCC_HSI_IsReady>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e049      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fa2a 	bl	800285c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003408:	f7fe fc88 	bl	8001d1c <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	e00a      	b.n	8003426 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003410:	f7fe fc84 	bl	8001d1c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e035      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	f7ff fa2c 	bl	8002882 <LL_RCC_GetSysClkSource>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	429a      	cmp	r2, r3
 8003434:	d1ec      	bne.n	8003410 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_ClockConfig+0x278>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d21b      	bcs.n	800347c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_RCC_ClockConfig+0x278>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 0207 	bic.w	r2, r3, #7
 800344c:	4913      	ldr	r1, [pc, #76]	; (800349c <HAL_RCC_ClockConfig+0x278>)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003454:	f7fe fc62 	bl	8001d1c <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	e008      	b.n	800346e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800345c:	f7fe fc5e 	bl	8001d1c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e011      	b.n	8003492 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x278>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d1ef      	bne.n	800345c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800347c:	f000 f8b4 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003480:	4603      	mov	r3, r0
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <HAL_RCC_ClockConfig+0x27c>)
 8003484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003486:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <HAL_RCC_ClockConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fbfa 	bl	8001c84 <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	58004000 	.word	0x58004000
 80034a0:	20000000 	.word	0x20000000
 80034a4:	20000008 	.word	0x20000008

080034a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034b6:	f7ff f9e4 	bl	8002882 <LL_RCC_GetSysClkSource>
 80034ba:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034bc:	f7ff facd 	bl	8002a5a <LL_RCC_PLL_GetMainSource>
 80034c0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d139      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d136      	bne.n	8003542 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80034d4:	f7ff f987 	bl	80027e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d115      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x62>
 80034de:	f7ff f982 	bl	80027e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x4e>
 80034e8:	f7ff f98d 	bl	8002806 <LL_RCC_MSI_GetRange>
 80034ec:	4603      	mov	r3, r0
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	e005      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x5a>
 80034f6:	f7ff f991 	bl	800281c <LL_RCC_MSI_GetRangeAfterStandby>
 80034fa:	4603      	mov	r3, r0
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	4a36      	ldr	r2, [pc, #216]	; (80035dc <HAL_RCC_GetSysClockFreq+0x134>)
 8003504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003508:	e014      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x8c>
 800350a:	f7ff f96c 	bl	80027e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_GetSysClockFreq+0x7a>
 8003514:	f7ff f977 	bl	8002806 <LL_RCC_MSI_GetRange>
 8003518:	4603      	mov	r3, r0
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	e005      	b.n	800352e <HAL_RCC_GetSysClockFreq+0x86>
 8003522:	f7ff f97b 	bl	800281c <LL_RCC_MSI_GetRangeAfterStandby>
 8003526:	4603      	mov	r3, r0
 8003528:	091b      	lsrs	r3, r3, #4
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	4a2b      	ldr	r2, [pc, #172]	; (80035dc <HAL_RCC_GetSysClockFreq+0x134>)
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d115      	bne.n	8003568 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003540:	e012      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d102      	bne.n	800354e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003548:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	e00c      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b08      	cmp	r3, #8
 8003552:	d109      	bne.n	8003568 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003554:	f7ff f85a 	bl	800260c <LL_RCC_HSE_IsEnabledDiv2>
 8003558:	4603      	mov	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	e001      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003564:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003566:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003568:	f7ff f98b 	bl	8002882 <LL_RCC_GetSysClkSource>
 800356c:	4603      	mov	r3, r0
 800356e:	2b0c      	cmp	r3, #12
 8003570:	d12f      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003572:	f7ff fa72 	bl	8002a5a <LL_RCC_PLL_GetMainSource>
 8003576:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d003      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0xde>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d003      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0xe4>
 8003584:	e00d      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003588:	60fb      	str	r3, [r7, #12]
        break;
 800358a:	e00d      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800358c:	f7ff f83e 	bl	800260c <LL_RCC_HSE_IsEnabledDiv2>
 8003590:	4603      	mov	r3, r0
 8003592:	2b01      	cmp	r3, #1
 8003594:	d102      	bne.n	800359c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003598:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800359a:	e005      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800359e:	60fb      	str	r3, [r7, #12]
        break;
 80035a0:	e002      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	60fb      	str	r3, [r7, #12]
        break;
 80035a6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80035a8:	f7ff fa35 	bl	8002a16 <LL_RCC_PLL_GetN>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	fb03 f402 	mul.w	r4, r3, r2
 80035b4:	f7ff fa46 	bl	8002a44 <LL_RCC_PLL_GetDivider>
 80035b8:	4603      	mov	r3, r0
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	3301      	adds	r3, #1
 80035be:	fbb4 f4f3 	udiv	r4, r4, r3
 80035c2:	f7ff fa34 	bl	8002a2e <LL_RCC_PLL_GetR>
 80035c6:	4603      	mov	r3, r0
 80035c8:	0f5b      	lsrs	r3, r3, #29
 80035ca:	3301      	adds	r3, #1
 80035cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80035d0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80035d2:	697b      	ldr	r3, [r7, #20]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd90      	pop	{r4, r7, pc}
 80035dc:	080070dc 	.word	0x080070dc
 80035e0:	00f42400 	.word	0x00f42400
 80035e4:	01e84800 	.word	0x01e84800

080035e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e8:	b598      	push	{r3, r4, r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80035ec:	f7ff ff5c 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 80035f0:	4604      	mov	r4, r0
 80035f2:	f7ff f9b5 	bl	8002960 <LL_RCC_GetAHBPrescaler>
 80035f6:	4603      	mov	r3, r0
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	4a03      	ldr	r2, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x24>)
 8003600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003604:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003608:	4618      	mov	r0, r3
 800360a:	bd98      	pop	{r3, r4, r7, pc}
 800360c:	0800707c 	.word	0x0800707c

08003610 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b598      	push	{r3, r4, r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003614:	f7ff ffe8 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003618:	4604      	mov	r4, r0
 800361a:	f7ff f9b9 	bl	8002990 <LL_RCC_GetAPB1Prescaler>
 800361e:	4603      	mov	r3, r0
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	4a03      	ldr	r2, [pc, #12]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003628:	fa24 f303 	lsr.w	r3, r4, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd98      	pop	{r3, r4, r7, pc}
 8003630:	080070bc 	.word	0x080070bc

08003634 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003634:	b598      	push	{r3, r4, r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003638:	f7ff ffd6 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 800363c:	4604      	mov	r4, r0
 800363e:	f7ff f9b2 	bl	80029a6 <LL_RCC_GetAPB2Prescaler>
 8003642:	4603      	mov	r3, r0
 8003644:	0adb      	lsrs	r3, r3, #11
 8003646:	4a03      	ldr	r2, [pc, #12]	; (8003654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800364c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd98      	pop	{r3, r4, r7, pc}
 8003654:	080070bc 	.word	0x080070bc

08003658 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003658:	b590      	push	{r4, r7, lr}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	4a10      	ldr	r2, [pc, #64]	; (80036ac <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800366a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003670:	f7ff f981 	bl	8002976 <LL_RCC_GetAHB3Prescaler>
 8003674:	4603      	mov	r3, r0
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800367e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0c9c      	lsrs	r4, r3, #18
 8003694:	f7fe ff76 	bl	8002584 <HAL_PWREx_GetVoltageRange>
 8003698:	4603      	mov	r3, r0
 800369a:	4619      	mov	r1, r3
 800369c:	4620      	mov	r0, r4
 800369e:	f000 f80b 	bl	80036b8 <RCC_SetFlashLatency>
 80036a2:	4603      	mov	r3, r0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd90      	pop	{r4, r7, pc}
 80036ac:	080070dc 	.word	0x080070dc
 80036b0:	0800707c 	.word	0x0800707c
 80036b4:	431bde83 	.word	0x431bde83

080036b8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	; 0x38
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80036c2:	4a3a      	ldr	r2, [pc, #232]	; (80037ac <RCC_SetFlashLatency+0xf4>)
 80036c4:	f107 0320 	add.w	r3, r7, #32
 80036c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036cc:	6018      	str	r0, [r3, #0]
 80036ce:	3304      	adds	r3, #4
 80036d0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80036d2:	4a37      	ldr	r2, [pc, #220]	; (80037b0 <RCC_SetFlashLatency+0xf8>)
 80036d4:	f107 0318 	add.w	r3, r7, #24
 80036d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036dc:	6018      	str	r0, [r3, #0]
 80036de:	3304      	adds	r3, #4
 80036e0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80036e2:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <RCC_SetFlashLatency+0xfc>)
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80036ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80036ee:	2300      	movs	r3, #0
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d11b      	bne.n	8003732 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30
 80036fe:	e014      	b.n	800372a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	3338      	adds	r3, #56	; 0x38
 8003706:	443b      	add	r3, r7
 8003708:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4293      	cmp	r3, r2
 8003712:	d807      	bhi.n	8003724 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3338      	adds	r3, #56	; 0x38
 800371a:	443b      	add	r3, r7
 800371c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003722:	e021      	b.n	8003768 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	3301      	adds	r3, #1
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	2b02      	cmp	r3, #2
 800372e:	d9e7      	bls.n	8003700 <RCC_SetFlashLatency+0x48>
 8003730:	e01a      	b.n	8003768 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003732:	2300      	movs	r3, #0
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003736:	e014      	b.n	8003762 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	3338      	adds	r3, #56	; 0x38
 800373e:	443b      	add	r3, r7
 8003740:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4293      	cmp	r3, r2
 800374a:	d807      	bhi.n	800375c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800374c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	3338      	adds	r3, #56	; 0x38
 8003752:	443b      	add	r3, r7
 8003754:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800375a:	e005      	b.n	8003768 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	3301      	adds	r3, #1
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	2b02      	cmp	r3, #2
 8003766:	d9e7      	bls.n	8003738 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <RCC_SetFlashLatency+0x100>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 0207 	bic.w	r2, r3, #7
 8003770:	4911      	ldr	r1, [pc, #68]	; (80037b8 <RCC_SetFlashLatency+0x100>)
 8003772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003778:	f7fe fad0 	bl	8001d1c <HAL_GetTick>
 800377c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800377e:	e008      	b.n	8003792 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003780:	f7fe facc 	bl	8001d1c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e007      	b.n	80037a2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <RCC_SetFlashLatency+0x100>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800379c:	429a      	cmp	r2, r3
 800379e:	d1ef      	bne.n	8003780 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3738      	adds	r7, #56	; 0x38
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	08007060 	.word	0x08007060
 80037b0:	08007068 	.word	0x08007068
 80037b4:	08007070 	.word	0x08007070
 80037b8:	58004000 	.word	0x58004000

080037bc <LL_RCC_LSE_IsReady>:
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d101      	bne.n	80037d4 <LL_RCC_LSE_IsReady+0x18>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <LL_RCC_LSE_IsReady+0x1a>
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <LL_RCC_SetUSARTClockSource>:
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80037e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	43db      	mvns	r3, r3
 80037f4:	401a      	ands	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr

0800380e <LL_RCC_SetI2SClockSource>:
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <LL_RCC_SetLPUARTClockSource>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800384c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4313      	orrs	r3, r2
 8003854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <LL_RCC_SetI2CClockSource>:
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800387a:	43db      	mvns	r3, r3
 800387c:	401a      	ands	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <LL_RCC_SetLPTIMClockSource>:
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80038a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	43db      	mvns	r3, r3
 80038b2:	401a      	ands	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	041b      	lsls	r3, r3, #16
 80038b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <LL_RCC_SetRNGClockSource>:
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80038d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80038e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <LL_RCC_SetADCClockSource>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003906:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800390a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <LL_RCC_SetRTCClockSource>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <LL_RCC_GetRTCClockSource>:
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <LL_RCC_ForceBackupDomainReset>:
{
 8003962:	b480      	push	{r7}
 8003964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800397a:	bf00      	nop
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800399a:	bf00      	nop
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
	...

080039a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80039b0:	2300      	movs	r3, #0
 80039b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80039b4:	2300      	movs	r3, #0
 80039b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d058      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80039c4:	f7fe fdc2 	bl	800254c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c8:	f7fe f9a8 	bl	8001d1c <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80039ce:	e009      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d0:	f7fe f9a4 	bl	8001d1c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d902      	bls.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	74fb      	strb	r3, [r7, #19]
        break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80039e4:	4b7b      	ldr	r3, [pc, #492]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039f0:	d1ee      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80039f2:	7cfb      	ldrb	r3, [r7, #19]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d13c      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80039f8:	f7ff ffa7 	bl	800394a <LL_RCC_GetRTCClockSource>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d00f      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a14:	f7ff ffa5 	bl	8003962 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a18:	f7ff ffb3 	bl	8003982 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d014      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fe f974 	bl	8001d1c <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a36:	e00b      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fe f970 	bl	8001d1c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d902      	bls.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	74fb      	strb	r3, [r7, #19]
            break;
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a50:	f7ff feb4 	bl	80037bc <LL_RCC_LSE_IsReady>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d1ee      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff5b 	bl	8003920 <LL_RCC_SetRTCClockSource>
 8003a6a:	e004      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a6c:	7cfb      	ldrb	r3, [r7, #19]
 8003a6e:	74bb      	strb	r3, [r7, #18]
 8003a70:	e001      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a72:	7cfb      	ldrb	r3, [r7, #19]
 8003a74:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d004      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fea9 	bl	80037de <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d004      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fe9e 	bl	80037de <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fec0 	bl	8003838 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d004      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fee6 	bl	800389a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff fedb 	bl	800389a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fed0 	bl	800389a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d004      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff fea9 	bl	8003862 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff fe9e 	bl	8003862 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fe93 	bl	8003862 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d011      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fe5e 	bl	800380e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d010      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fea5 	bl	80038cc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b98:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d011      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fea3 	bl	80038f6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb8:	d107      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003bca:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	58000400 	.word	0x58000400

08003bd8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d071      	beq.n	8003cce <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fe20 	bl	8001844 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003c0c:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d051      	beq.n	8003cbc <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c18:	4b2f      	ldr	r3, [pc, #188]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c1a:	22ca      	movs	r2, #202	; 0xca
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c1e:	4b2e      	ldr	r3, [pc, #184]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c20:	2253      	movs	r2, #83	; 0x53
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fbe3 	bl	80043f0 <RTC_EnterInitMode>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d13f      	bne.n	8003cb4 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003c34:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	4a27      	ldr	r2, [pc, #156]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c3a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c42:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003c44:	4b24      	ldr	r3, [pc, #144]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	4319      	orrs	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	430b      	orrs	r3, r1
 8003c58:	491f      	ldr	r1, [pc, #124]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	491b      	ldr	r1, [pc, #108]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	4915      	ldr	r1, [pc, #84]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fbe6 	bl	8004458 <RTC_ExitInitMode>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10e      	bne.n	8003cb4 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a19      	ldr	r1, [r3, #32]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4319      	orrs	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	430b      	orrs	r3, r1
 8003cae:	490a      	ldr	r1, [pc, #40]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <HAL_RTC_Init+0x100>)
 8003cb6:	22ff      	movs	r2, #255	; 0xff
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8003cba:	e001      	b.n	8003cc0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40002800 	.word	0x40002800

08003cdc <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003cdc:	b590      	push	{r4, r7, lr}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RTC_SetTime+0x1a>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e088      	b.n	8003e08 <HAL_RTC_SetTime+0x12c>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2202      	movs	r2, #2
 8003d02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d06:	4b42      	ldr	r3, [pc, #264]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003d08:	22ca      	movs	r2, #202	; 0xca
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d0c:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003d0e:	2253      	movs	r2, #83	; 0x53
 8003d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 fb6c 	bl	80043f0 <RTC_EnterInitMode>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d15e      	bne.n	8003de0 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003d22:	4b3b      	ldr	r3, [pc, #236]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d057      	beq.n	8003de0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d125      	bne.n	8003d82 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003d36:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2200      	movs	r2, #0
 8003d46:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fbc1 	bl	80044d4 <RTC_ByteToBcd2>
 8003d52:	4603      	mov	r3, r0
 8003d54:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	785b      	ldrb	r3, [r3, #1]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fbba 	bl	80044d4 <RTC_ByteToBcd2>
 8003d60:	4603      	mov	r3, r0
 8003d62:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d64:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	789b      	ldrb	r3, [r3, #2]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fbb2 	bl	80044d4 <RTC_ByteToBcd2>
 8003d70:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d72:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	78db      	ldrb	r3, [r3, #3]
 8003d7a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e017      	b.n	8003db2 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003d82:	4b23      	ldr	r3, [pc, #140]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003da0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003da6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	78db      	ldrb	r3, [r3, #3]
 8003dac:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003db2:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003dba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003dbe:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003dc0:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	4a12      	ldr	r2, [pc, #72]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dca:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	68d9      	ldr	r1, [r3, #12]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	490d      	ldr	r1, [pc, #52]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fb39 	bl	8004458 <RTC_ExitInitMode>
 8003de6:	4603      	mov	r3, r0
 8003de8:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RTC_SetTime+0x134>)
 8003dec:	22ff      	movs	r2, #255	; 0xff
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d103      	bne.n	8003dfe <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd90      	pop	{r4, r7, pc}
 8003e10:	40002800 	.word	0x40002800

08003e14 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003e20:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_RTC_GetTime+0xc0>)
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003e28:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <HAL_RTC_GetTime+0xc0>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e34:	d049      	beq.n	8003eca <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003e36:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RTC_GetTime+0xc0>)
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RTC_GetTime+0xc0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003e4a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003e4e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	0c1b      	lsrs	r3, r3, #16
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	0d9b      	lsrs	r3, r3, #22
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d11a      	bne.n	8003eca <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fb3a 	bl	8004512 <RTC_Bcd2ToByte>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fb31 	bl	8004512 <RTC_Bcd2ToByte>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	789b      	ldrb	r3, [r3, #2]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fb28 	bl	8004512 <RTC_Bcd2ToByte>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40002800 	.word	0x40002800

08003ed8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_RTC_SetDate+0x1a>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e071      	b.n	8003fd6 <HAL_RTC_SetDate+0xfe>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10e      	bne.n	8003f26 <HAL_RTC_SetDate+0x4e>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	f023 0310 	bic.w	r3, r3, #16
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	330a      	adds	r3, #10
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11c      	bne.n	8003f66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	78db      	ldrb	r3, [r3, #3]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 facf 	bl	80044d4 <RTC_ByteToBcd2>
 8003f36:	4603      	mov	r3, r0
 8003f38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fac8 	bl	80044d4 <RTC_ByteToBcd2>
 8003f44:	4603      	mov	r3, r0
 8003f46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003f48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	789b      	ldrb	r3, [r3, #2]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fac0 	bl	80044d4 <RTC_ByteToBcd2>
 8003f54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003f56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e00e      	b.n	8003f84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	78db      	ldrb	r3, [r3, #3]
 8003f6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003f72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003f78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f84:	4b16      	ldr	r3, [pc, #88]	; (8003fe0 <HAL_RTC_SetDate+0x108>)
 8003f86:	22ca      	movs	r2, #202	; 0xca
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
 8003f8a:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_RTC_SetDate+0x108>)
 8003f8c:	2253      	movs	r2, #83	; 0x53
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 fa2d 	bl	80043f0 <RTC_EnterInitMode>
 8003f96:	4603      	mov	r3, r0
 8003f98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003fa0:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <HAL_RTC_SetDate+0x108>)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 fa52 	bl	8004458 <RTC_ExitInitMode>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RTC_SetDate+0x108>)
 8003fba:	22ff      	movs	r2, #255	; 0xff
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd90      	pop	{r4, r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40002800 	.word	0x40002800

08003fe4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003ff0:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RTC_GetDate+0x98>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ff8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	0c1b      	lsrs	r3, r3, #16
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	b2da      	uxtb	r2, r3
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	0b5b      	lsrs	r3, r3, #13
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11a      	bne.n	8004072 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	78db      	ldrb	r3, [r3, #3]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fa66 	bl	8004512 <RTC_Bcd2ToByte>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fa5d 	bl	8004512 <RTC_Bcd2ToByte>
 8004058:	4603      	mov	r3, r0
 800405a:	461a      	mov	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	789b      	ldrb	r3, [r3, #2]
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fa54 	bl	8004512 <RTC_Bcd2ToByte>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40002800 	.word	0x40002800

08004080 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_RTC_SetAlarm_IT+0x1e>
 800409a:	2302      	movs	r3, #2
 800409c:	e0f3      	b.n	8004286 <HAL_RTC_SetAlarm_IT+0x206>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80040ae:	4b78      	ldr	r3, [pc, #480]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040be:	d06a      	beq.n	8004196 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d13a      	bne.n	800413c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80040c6:	4b72      	ldr	r3, [pc, #456]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d102      	bne.n	80040d8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f9f5 	bl	80044d4 <RTC_ByteToBcd2>
 80040ea:	4603      	mov	r3, r0
 80040ec:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	785b      	ldrb	r3, [r3, #1]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f9ee 	bl	80044d4 <RTC_ByteToBcd2>
 80040f8:	4603      	mov	r3, r0
 80040fa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040fc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	789b      	ldrb	r3, [r3, #2]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f9e6 	bl	80044d4 <RTC_ByteToBcd2>
 8004108:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800410a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	78db      	ldrb	r3, [r3, #3]
 8004112:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004114:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f9d8 	bl	80044d4 <RTC_ByteToBcd2>
 8004124:	4603      	mov	r3, r0
 8004126:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004128:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004130:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	e02c      	b.n	8004196 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004144:	d00d      	beq.n	8004162 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800414e:	d008      	beq.n	8004162 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004150:	4b4f      	ldr	r3, [pc, #316]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2200      	movs	r2, #0
 8004160:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	785b      	ldrb	r3, [r3, #1]
 800416c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800416e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004174:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	78db      	ldrb	r3, [r3, #3]
 800417a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800417c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004184:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004186:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800418c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004196:	4b3e      	ldr	r3, [pc, #248]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004198:	22ca      	movs	r2, #202	; 0xca
 800419a:	625a      	str	r2, [r3, #36]	; 0x24
 800419c:	4b3c      	ldr	r3, [pc, #240]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 800419e:	2253      	movs	r2, #83	; 0x53
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041aa:	d12c      	bne.n	8004206 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80041ac:	4b38      	ldr	r3, [pc, #224]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	4a37      	ldr	r2, [pc, #220]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041b6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041b8:	4b35      	ldr	r3, [pc, #212]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c4:	d107      	bne.n	80041d6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4930      	ldr	r1, [pc, #192]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	644b      	str	r3, [r1, #68]	; 0x44
 80041d4:	e006      	b.n	80041e4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80041d6:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80041dc:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80041e4:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80041f8:	4b25      	ldr	r3, [pc, #148]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	4a24      	ldr	r2, [pc, #144]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 80041fe:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8004202:	6193      	str	r3, [r2, #24]
 8004204:	e02b      	b.n	800425e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004206:	4b22      	ldr	r3, [pc, #136]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	4a21      	ldr	r2, [pc, #132]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 800420c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004210:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004212:	4b1f      	ldr	r3, [pc, #124]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004214:	2202      	movs	r2, #2
 8004216:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800421e:	d107      	bne.n	8004230 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	699a      	ldr	r2, [r3, #24]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4919      	ldr	r1, [pc, #100]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 800422a:	4313      	orrs	r3, r2
 800422c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800422e:	e006      	b.n	800423e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004230:	4a17      	ldr	r2, [pc, #92]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004236:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800423e:	4a14      	ldr	r2, [pc, #80]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004252:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	4a0e      	ldr	r2, [pc, #56]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004258:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800425c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <HAL_RTC_SetAlarm_IT+0x214>)
 8004260:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004264:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <HAL_RTC_SetAlarm_IT+0x214>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <HAL_RTC_SetAlarm_IT+0x210>)
 8004270:	22ff      	movs	r2, #255	; 0xff
 8004272:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	bd90      	pop	{r4, r7, pc}
 800428e:	bf00      	nop
 8004290:	40002800 	.word	0x40002800
 8004294:	58000800 	.word	0x58000800

08004298 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_RTC_DeactivateAlarm+0x18>
 80042ac:	2302      	movs	r3, #2
 80042ae:	e048      	b.n	8004342 <HAL_RTC_DeactivateAlarm+0xaa>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2202      	movs	r2, #2
 80042bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042c0:	4b22      	ldr	r3, [pc, #136]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 80042c2:	22ca      	movs	r2, #202	; 0xca
 80042c4:	625a      	str	r2, [r3, #36]	; 0x24
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 80042c8:	2253      	movs	r2, #83	; 0x53
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d2:	d115      	bne.n	8004300 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	4a1c      	ldr	r2, [pc, #112]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 80042da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042de:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 80042e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e4:	4a19      	ldr	r2, [pc, #100]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 80042e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042ea:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	f023 0201 	bic.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80042fe:	e014      	b.n	800432a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4a11      	ldr	r2, [pc, #68]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004306:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800430a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 800430e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004310:	4a0e      	ldr	r2, [pc, #56]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004316:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f023 0202 	bic.w	r2, r3, #2
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004326:	2202      	movs	r2, #2
 8004328:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_RTC_DeactivateAlarm+0xb4>)
 800432c:	22ff      	movs	r2, #255	; 0xff
 800432e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr
 800434c:	40002800 	.word	0x40002800

08004350 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_RTC_AlarmIRQHandler+0x50>)
 800435a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800436e:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004370:	2201      	movs	r2, #1
 8004372:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc fc95 	bl	8000ca4 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004386:	2202      	movs	r2, #2
 8004388:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8dc 	bl	8004548 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40002800 	.word	0x40002800

080043a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_RTC_WaitForSynchro+0x48>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a0e      	ldr	r2, [pc, #56]	; (80043ec <HAL_RTC_WaitForSynchro+0x48>)
 80043b2:	f023 0320 	bic.w	r3, r3, #32
 80043b6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80043b8:	f7fd fcb0 	bl	8001d1c <HAL_GetTick>
 80043bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80043be:	e009      	b.n	80043d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043c0:	f7fd fcac 	bl	8001d1c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ce:	d901      	bls.n	80043d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e006      	b.n	80043e2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RTC_WaitForSynchro+0x48>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ef      	beq.n	80043c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40002800 	.word	0x40002800

080043f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80043fc:	4b15      	ldr	r3, [pc, #84]	; (8004454 <RTC_EnterInitMode+0x64>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d120      	bne.n	800444a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <RTC_EnterInitMode+0x64>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a11      	ldr	r2, [pc, #68]	; (8004454 <RTC_EnterInitMode+0x64>)
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004414:	f7fd fc82 	bl	8001d1c <HAL_GetTick>
 8004418:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800441a:	e00d      	b.n	8004438 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800441c:	f7fd fc7e 	bl	8001d1c <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800442a:	d905      	bls.n	8004438 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <RTC_EnterInitMode+0x64>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <RTC_EnterInitMode+0x5a>
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d1e8      	bne.n	800441c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40002800 	.word	0x40002800

08004458 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004464:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <RTC_ExitInitMode+0x78>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <RTC_ExitInitMode+0x78>)
 800446a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800446e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <RTC_ExitInitMode+0x78>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10c      	bne.n	8004496 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff91 	bl	80043a4 <HAL_RTC_WaitForSynchro>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01e      	beq.n	80044c6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2203      	movs	r2, #3
 800448c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e017      	b.n	80044c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004496:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <RTC_ExitInitMode+0x78>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	4a0d      	ldr	r2, [pc, #52]	; (80044d0 <RTC_ExitInitMode+0x78>)
 800449c:	f023 0320 	bic.w	r3, r3, #32
 80044a0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff ff7e 	bl	80043a4 <HAL_RTC_WaitForSynchro>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d005      	beq.n	80044ba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2203      	movs	r2, #3
 80044b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <RTC_ExitInitMode+0x78>)
 80044bc:	699b      	ldr	r3, [r3, #24]
 80044be:	4a04      	ldr	r2, [pc, #16]	; (80044d0 <RTC_ExitInitMode+0x78>)
 80044c0:	f043 0320 	orr.w	r3, r3, #32
 80044c4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40002800 	.word	0x40002800

080044d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80044e6:	e005      	b.n	80044f4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3301      	adds	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	3b0a      	subs	r3, #10
 80044f2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80044f4:	7afb      	ldrb	r3, [r7, #11]
 80044f6:	2b09      	cmp	r3, #9
 80044f8:	d8f6      	bhi.n	80044e8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	b2da      	uxtb	r2, r3
 8004502:	7afb      	ldrb	r3, [r7, #11]
 8004504:	4313      	orrs	r3, r2
 8004506:	b2db      	uxtb	r3, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	bc80      	pop	{r7}
 8004510:	4770      	bx	lr

08004512 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	4603      	mov	r3, r0
 800451a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	b2db      	uxtb	r3, r3
 800453a:	4413      	add	r3, r2
 800453c:	b2db      	uxtb	r3, r3
}
 800453e:	4618      	mov	r0, r3
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr

08004548 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	bc80      	pop	{r7}
 8004558:	4770      	bx	lr

0800455a <LL_RCC_GetUSARTClockSource>:
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	401a      	ands	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	4313      	orrs	r3, r2
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr

0800457e <LL_RCC_GetLPUARTClockSource>:
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4013      	ands	r3, r2
}
 8004592:	4618      	mov	r0, r3
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr

0800459c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e042      	b.n	8004634 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7fd f96b 	bl	800189c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2224      	movs	r2, #36	; 0x24
 80045ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 fc2e 	bl	8004e40 <UART_SetConfig>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e022      	b.n	8004634 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fe96 	bl	8005328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800460a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800461a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 ff1c 	bl	800546a <UART_CheckIdleState>
 8004632:	4603      	mov	r3, r0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af02      	add	r7, sp, #8
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004652:	2b20      	cmp	r3, #32
 8004654:	d173      	bne.n	800473e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_Transmit+0x26>
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e06c      	b.n	8004740 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2221      	movs	r2, #33	; 0x21
 8004672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fd fb51 	bl	8001d1c <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	88fa      	ldrh	r2, [r7, #6]
 8004688:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d108      	bne.n	80046a8 <HAL_UART_Transmit+0x6c>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	e003      	b.n	80046b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046b0:	e02c      	b.n	800470c <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 ff22 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e039      	b.n	8004740 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	3302      	adds	r3, #2
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	e007      	b.n	80046fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1cc      	bne.n	80046b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2200      	movs	r2, #0
 8004720:	2140      	movs	r1, #64	; 0x40
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 feef 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e006      	b.n	8004740 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2220      	movs	r2, #32
 8004736:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3720      	adds	r7, #32
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	4613      	mov	r3, r2
 8004754:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	2b20      	cmp	r3, #32
 800475e:	d137      	bne.n	80047d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d002      	beq.n	800476c <HAL_UART_Receive_IT+0x24>
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e030      	b.n	80047d2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_UART_Receive_IT+0x94>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01f      	beq.n	80047c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d018      	beq.n	80047c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	e853 3f00 	ldrex	r3, [r3]
 800479a:	613b      	str	r3, [r7, #16]
   return(result);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	461a      	mov	r2, r3
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	69f9      	ldr	r1, [r7, #28]
 80047b2:	6a3a      	ldr	r2, [r7, #32]
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e6      	bne.n	800478e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 ff66 	bl	8005698 <UART_Start_Receive_IT>
 80047cc:	4603      	mov	r3, r0
 80047ce:	e000      	b.n	80047d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3728      	adds	r7, #40	; 0x28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40008000 	.word	0x40008000

080047e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b0ba      	sub	sp, #232	; 0xe8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004806:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800480a:	f640 030f 	movw	r3, #2063	; 0x80f
 800480e:	4013      	ands	r3, r2
 8004810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11b      	bne.n	8004854 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800481c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d009      	beq.n	8004854 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 82e3 	beq.w	8004e10 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
      }
      return;
 8004852:	e2dd      	b.n	8004e10 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8123 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800485e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004862:	4b8d      	ldr	r3, [pc, #564]	; (8004a98 <HAL_UART_IRQHandler+0x2b8>)
 8004864:	4013      	ands	r3, r2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800486a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800486e:	4b8b      	ldr	r3, [pc, #556]	; (8004a9c <HAL_UART_IRQHandler+0x2bc>)
 8004870:	4013      	ands	r3, r2
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8116 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <HAL_UART_IRQHandler+0xc8>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f043 0201 	orr.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d011      	beq.n	80048d8 <HAL_UART_IRQHandler+0xf8>
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2202      	movs	r2, #2
 80048c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f043 0204 	orr.w	r2, r3, #4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d011      	beq.n	8004908 <HAL_UART_IRQHandler+0x128>
 80048e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2204      	movs	r2, #4
 80048f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f043 0202 	orr.w	r2, r3, #2
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b00      	cmp	r3, #0
 8004912:	d017      	beq.n	8004944 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004920:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004924:	4b5c      	ldr	r3, [pc, #368]	; (8004a98 <HAL_UART_IRQHandler+0x2b8>)
 8004926:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00b      	beq.n	8004944 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2208      	movs	r2, #8
 8004932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493a:	f043 0208 	orr.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800494c:	2b00      	cmp	r3, #0
 800494e:	d012      	beq.n	8004976 <HAL_UART_IRQHandler+0x196>
 8004950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004954:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00c      	beq.n	8004976 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8249 	beq.w	8004e14 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800499a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800499e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d005      	beq.n	80049da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d054      	beq.n	8004a84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 ff7c 	bl	80058d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d146      	bne.n	8004a7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1d9      	bne.n	80049ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d017      	beq.n	8004a74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a4a:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <HAL_UART_IRQHandler+0x2c0>)
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd fad4 	bl	8002002 <HAL_DMA_Abort_IT>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d019      	beq.n	8004a94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a72:	e00f      	b.n	8004a94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fc f8cd 	bl	8000c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7a:	e00b      	b.n	8004a94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fc f8c9 	bl	8000c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a82:	e007      	b.n	8004a94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fc f8c5 	bl	8000c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004a92:	e1bf      	b.n	8004e14 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	bf00      	nop
    return;
 8004a96:	e1bd      	b.n	8004e14 <HAL_UART_IRQHandler+0x634>
 8004a98:	10000001 	.word	0x10000001
 8004a9c:	04000120 	.word	0x04000120
 8004aa0:	080059a3 	.word	0x080059a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	f040 8153 	bne.w	8004d54 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 814c 	beq.w	8004d54 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8145 	beq.w	8004d54 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2210      	movs	r2, #16
 8004ad0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	f040 80bb 	bne.w	8004c58 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004af0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 818f 	beq.w	8004e18 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b04:	429a      	cmp	r2, r3
 8004b06:	f080 8187 	bcs.w	8004e18 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 8087 	bne.w	8004c36 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b34:	e853 3f00 	ldrex	r3, [r3]
 8004b38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b56:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1da      	bne.n	8004b28 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b96:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e1      	bne.n	8004b72 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bd4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bd8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c04:	f023 0310 	bic.w	r3, r3, #16
 8004c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c16:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c18:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e4      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fd f988 	bl	8001f46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8e9 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c56:	e0df      	b.n	8004e18 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80d1 	beq.w	8004e1c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004c7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 80cc 	beq.w	8004e1c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e4      	bne.n	8004c84 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e1      	bne.n	8004cba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	69fa      	ldr	r2, [r7, #28]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e4      	bne.n	8004d0a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f86b 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d52:	e063      	b.n	8004e1c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <HAL_UART_IRQHandler+0x59e>
 8004d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f001 fb70 	bl	800645c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d7c:	e051      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d014      	beq.n	8004db4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d03a      	beq.n	8004e20 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
    }
    return;
 8004db2:	e035      	b.n	8004e20 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d009      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x5f4>
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fdfe 	bl	80059ce <UART_EndTransmit_IT>
    return;
 8004dd2:	e026      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d009      	beq.n	8004df4 <HAL_UART_IRQHandler+0x614>
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f001 fb47 	bl	8006480 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004df2:	e016      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d010      	beq.n	8004e22 <HAL_UART_IRQHandler+0x642>
 8004e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da0c      	bge.n	8004e22 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f001 fb30 	bl	800646e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e0e:	e008      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
      return;
 8004e10:	bf00      	nop
 8004e12:	e006      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
    return;
 8004e14:	bf00      	nop
 8004e16:	e004      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
      return;
 8004e18:	bf00      	nop
 8004e1a:	e002      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
      return;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_UART_IRQHandler+0x642>
    return;
 8004e20:	bf00      	nop
  }
}
 8004e22:	37e8      	adds	r7, #232	; 0xe8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
	...

08004e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e44:	b08c      	sub	sp, #48	; 0x30
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4b94      	ldr	r3, [pc, #592]	; (80050c0 <UART_SetConfig+0x280>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a89      	ldr	r2, [pc, #548]	; (80050c4 <UART_SetConfig+0x284>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004eb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ec0:	430b      	orrs	r3, r1
 8004ec2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	f023 010f 	bic.w	r1, r3, #15
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7a      	ldr	r2, [pc, #488]	; (80050c8 <UART_SetConfig+0x288>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d127      	bne.n	8004f34 <UART_SetConfig+0xf4>
 8004ee4:	2003      	movs	r0, #3
 8004ee6:	f7ff fb38 	bl	800455a <LL_RCC_GetUSARTClockSource>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d81b      	bhi.n	8004f2c <UART_SetConfig+0xec>
 8004ef4:	a201      	add	r2, pc, #4	; (adr r2, 8004efc <UART_SetConfig+0xbc>)
 8004ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efa:	bf00      	nop
 8004efc:	08004f0d 	.word	0x08004f0d
 8004f00:	08004f1d 	.word	0x08004f1d
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f12:	e080      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004f14:	2302      	movs	r3, #2
 8004f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1a:	e07c      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f22:	e078      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004f24:	2308      	movs	r3, #8
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f2a:	e074      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004f2c:	2310      	movs	r3, #16
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f32:	e070      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a64      	ldr	r2, [pc, #400]	; (80050cc <UART_SetConfig+0x28c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d138      	bne.n	8004fb0 <UART_SetConfig+0x170>
 8004f3e:	200c      	movs	r0, #12
 8004f40:	f7ff fb0b 	bl	800455a <LL_RCC_GetUSARTClockSource>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d82c      	bhi.n	8004fa8 <UART_SetConfig+0x168>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0x114>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004fa9 	.word	0x08004fa9
 8004f60:	08004fa9 	.word	0x08004fa9
 8004f64:	08004f99 	.word	0x08004f99
 8004f68:	08004fa9 	.word	0x08004fa9
 8004f6c:	08004fa9 	.word	0x08004fa9
 8004f70:	08004fa9 	.word	0x08004fa9
 8004f74:	08004f91 	.word	0x08004f91
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08004fa9 	.word	0x08004fa9
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fa1 	.word	0x08004fa1
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8e:	e042      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004f90:	2302      	movs	r3, #2
 8004f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f96:	e03e      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9e:	e03a      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa6:	e036      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fae:	e032      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a43      	ldr	r2, [pc, #268]	; (80050c4 <UART_SetConfig+0x284>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d12a      	bne.n	8005010 <UART_SetConfig+0x1d0>
 8004fba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004fbe:	f7ff fade 	bl	800457e <LL_RCC_GetLPUARTClockSource>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc8:	d01a      	beq.n	8005000 <UART_SetConfig+0x1c0>
 8004fca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fce:	d81b      	bhi.n	8005008 <UART_SetConfig+0x1c8>
 8004fd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd4:	d00c      	beq.n	8004ff0 <UART_SetConfig+0x1b0>
 8004fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fda:	d815      	bhi.n	8005008 <UART_SetConfig+0x1c8>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <UART_SetConfig+0x1a8>
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe4:	d008      	beq.n	8004ff8 <UART_SetConfig+0x1b8>
 8004fe6:	e00f      	b.n	8005008 <UART_SetConfig+0x1c8>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fee:	e012      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff6:	e00e      	b.n	8005016 <UART_SetConfig+0x1d6>
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffe:	e00a      	b.n	8005016 <UART_SetConfig+0x1d6>
 8005000:	2308      	movs	r3, #8
 8005002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005006:	e006      	b.n	8005016 <UART_SetConfig+0x1d6>
 8005008:	2310      	movs	r3, #16
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800500e:	e002      	b.n	8005016 <UART_SetConfig+0x1d6>
 8005010:	2310      	movs	r3, #16
 8005012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2a      	ldr	r2, [pc, #168]	; (80050c4 <UART_SetConfig+0x284>)
 800501c:	4293      	cmp	r3, r2
 800501e:	f040 80a4 	bne.w	800516a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005022:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005026:	2b08      	cmp	r3, #8
 8005028:	d823      	bhi.n	8005072 <UART_SetConfig+0x232>
 800502a:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <UART_SetConfig+0x1f0>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005055 	.word	0x08005055
 8005034:	08005073 	.word	0x08005073
 8005038:	0800505d 	.word	0x0800505d
 800503c:	08005073 	.word	0x08005073
 8005040:	08005063 	.word	0x08005063
 8005044:	08005073 	.word	0x08005073
 8005048:	08005073 	.word	0x08005073
 800504c:	08005073 	.word	0x08005073
 8005050:	0800506b 	.word	0x0800506b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005054:	f7fe fadc 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 8005058:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800505a:	e010      	b.n	800507e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800505c:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <UART_SetConfig+0x290>)
 800505e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005060:	e00d      	b.n	800507e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005062:	f7fe fa21 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005068:	e009      	b.n	800507e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005070:	e005      	b.n	800507e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800507c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8137 	beq.w	80052f4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <UART_SetConfig+0x294>)
 800508c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005090:	461a      	mov	r2, r3
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	fbb3 f3f2 	udiv	r3, r3, r2
 8005098:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d305      	bcc.n	80050b6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d910      	bls.n	80050d8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050bc:	e11a      	b.n	80052f4 <UART_SetConfig+0x4b4>
 80050be:	bf00      	nop
 80050c0:	cfff69f3 	.word	0xcfff69f3
 80050c4:	40008000 	.word	0x40008000
 80050c8:	40013800 	.word	0x40013800
 80050cc:	40004400 	.word	0x40004400
 80050d0:	00f42400 	.word	0x00f42400
 80050d4:	0800711c 	.word	0x0800711c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	2200      	movs	r2, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	60fa      	str	r2, [r7, #12]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	4a8e      	ldr	r2, [pc, #568]	; (8005320 <UART_SetConfig+0x4e0>)
 80050e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2200      	movs	r2, #0
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050fa:	f7fb f891 	bl	8000220 <__aeabi_uldivmod>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	4610      	mov	r0, r2
 8005104:	4619      	mov	r1, r3
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	020b      	lsls	r3, r1, #8
 8005110:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005114:	0202      	lsls	r2, r0, #8
 8005116:	6979      	ldr	r1, [r7, #20]
 8005118:	6849      	ldr	r1, [r1, #4]
 800511a:	0849      	lsrs	r1, r1, #1
 800511c:	2000      	movs	r0, #0
 800511e:	460c      	mov	r4, r1
 8005120:	4605      	mov	r5, r0
 8005122:	eb12 0804 	adds.w	r8, r2, r4
 8005126:	eb43 0905 	adc.w	r9, r3, r5
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	469a      	mov	sl, r3
 8005132:	4693      	mov	fp, r2
 8005134:	4652      	mov	r2, sl
 8005136:	465b      	mov	r3, fp
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	f7fb f870 	bl	8000220 <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4613      	mov	r3, r2
 8005146:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514e:	d308      	bcc.n	8005162 <UART_SetConfig+0x322>
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005156:	d204      	bcs.n	8005162 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6a3a      	ldr	r2, [r7, #32]
 800515e:	60da      	str	r2, [r3, #12]
 8005160:	e0c8      	b.n	80052f4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005168:	e0c4      	b.n	80052f4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005172:	d167      	bne.n	8005244 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005178:	2b08      	cmp	r3, #8
 800517a:	d828      	bhi.n	80051ce <UART_SetConfig+0x38e>
 800517c:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <UART_SetConfig+0x344>)
 800517e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005182:	bf00      	nop
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051cf 	.word	0x080051cf
 8005194:	080051bf 	.word	0x080051bf
 8005198:	080051cf 	.word	0x080051cf
 800519c:	080051cf 	.word	0x080051cf
 80051a0:	080051cf 	.word	0x080051cf
 80051a4:	080051c7 	.word	0x080051c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051a8:	f7fe fa32 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80051ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051ae:	e014      	b.n	80051da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7fe fa40 	bl	8003634 <HAL_RCC_GetPCLK2Freq>
 80051b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051b6:	e010      	b.n	80051da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051b8:	4b5a      	ldr	r3, [pc, #360]	; (8005324 <UART_SetConfig+0x4e4>)
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051bc:	e00d      	b.n	80051da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051be:	f7fe f973 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 80051c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051c4:	e009      	b.n	80051da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051cc:	e005      	b.n	80051da <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8089 	beq.w	80052f4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	4a4e      	ldr	r2, [pc, #312]	; (8005320 <UART_SetConfig+0x4e0>)
 80051e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80051f4:	005a      	lsls	r2, r3, #1
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	441a      	add	r2, r3
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	fbb2 f3f3 	udiv	r3, r2, r3
 8005206:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	2b0f      	cmp	r3, #15
 800520c:	d916      	bls.n	800523c <UART_SetConfig+0x3fc>
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005214:	d212      	bcs.n	800523c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f023 030f 	bic.w	r3, r3, #15
 800521e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	085b      	lsrs	r3, r3, #1
 8005224:	b29b      	uxth	r3, r3
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	b29a      	uxth	r2, r3
 800522c:	8bfb      	ldrh	r3, [r7, #30]
 800522e:	4313      	orrs	r3, r2
 8005230:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	8bfa      	ldrh	r2, [r7, #30]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	e05b      	b.n	80052f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005242:	e057      	b.n	80052f4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005244:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005248:	2b08      	cmp	r3, #8
 800524a:	d828      	bhi.n	800529e <UART_SetConfig+0x45e>
 800524c:	a201      	add	r2, pc, #4	; (adr r2, 8005254 <UART_SetConfig+0x414>)
 800524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005252:	bf00      	nop
 8005254:	08005279 	.word	0x08005279
 8005258:	08005281 	.word	0x08005281
 800525c:	08005289 	.word	0x08005289
 8005260:	0800529f 	.word	0x0800529f
 8005264:	0800528f 	.word	0x0800528f
 8005268:	0800529f 	.word	0x0800529f
 800526c:	0800529f 	.word	0x0800529f
 8005270:	0800529f 	.word	0x0800529f
 8005274:	08005297 	.word	0x08005297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005278:	f7fe f9ca 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 800527c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800527e:	e014      	b.n	80052aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005280:	f7fe f9d8 	bl	8003634 <HAL_RCC_GetPCLK2Freq>
 8005284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005286:	e010      	b.n	80052aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005288:	4b26      	ldr	r3, [pc, #152]	; (8005324 <UART_SetConfig+0x4e4>)
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800528c:	e00d      	b.n	80052aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528e:	f7fe f90b 	bl	80034a8 <HAL_RCC_GetSysClockFreq>
 8005292:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005294:	e009      	b.n	80052aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800529c:	e005      	b.n	80052aa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052a8:	bf00      	nop
    }

    if (pclk != 0U)
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d021      	beq.n	80052f4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <UART_SetConfig+0x4e0>)
 80052b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	fbb3 f2f2 	udiv	r2, r3, r2
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	441a      	add	r2, r3
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	d909      	bls.n	80052ee <UART_SetConfig+0x4ae>
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e0:	d205      	bcs.n	80052ee <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60da      	str	r2, [r3, #12]
 80052ec:	e002      	b.n	80052f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2201      	movs	r2, #1
 8005300:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005310:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005314:	4618      	mov	r0, r3
 8005316:	3730      	adds	r7, #48	; 0x30
 8005318:	46bd      	mov	sp, r7
 800531a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800531e:	bf00      	nop
 8005320:	0800711c 	.word	0x0800711c
 8005324:	00f42400 	.word	0x00f42400

08005328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00a      	beq.n	8005352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	430a      	orrs	r2, r1
 8005372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01a      	beq.n	800543e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005426:	d10a      	bne.n	800543e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af02      	add	r7, sp, #8
 8005470:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800547a:	f7fc fc4f 	bl	8001d1c <HAL_GetTick>
 800547e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b08      	cmp	r3, #8
 800548c:	d10e      	bne.n	80054ac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f832 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e028      	b.n	80054fe <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d10e      	bne.n	80054d8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f81c 	bl	8005506 <UART_WaitOnFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e012      	b.n	80054fe <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b09c      	sub	sp, #112	; 0x70
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005516:	e0a9      	b.n	800566c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800551e:	f000 80a5 	beq.w	800566c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005522:	f7fc fbfb 	bl	8001d1c <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <UART_WaitOnFlagUntilTimeout+0x32>
 8005532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005534:	2b00      	cmp	r3, #0
 8005536:	d140      	bne.n	80055ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005540:	e853 3f00 	ldrex	r3, [r3]
 8005544:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005548:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800554c:	667b      	str	r3, [r7, #100]	; 0x64
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005556:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005558:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800555a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800555c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1e6      	bne.n	8005538 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	663b      	str	r3, [r7, #96]	; 0x60
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800558a:	64ba      	str	r2, [r7, #72]	; 0x48
 800558c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e5      	bne.n	800556a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2220      	movs	r2, #32
 80055a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e069      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d051      	beq.n	800566c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d6:	d149      	bne.n	800566c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
 8005602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800560e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e6      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	66bb      	str	r3, [r7, #104]	; 0x68
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005634:	623a      	str	r2, [r7, #32]
 8005636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69f9      	ldr	r1, [r7, #28]
 800563a:	6a3a      	ldr	r2, [r7, #32]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	61bb      	str	r3, [r7, #24]
   return(result);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e010      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4013      	ands	r3, r2
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	461a      	mov	r2, r3
 8005684:	79fb      	ldrb	r3, [r7, #7]
 8005686:	429a      	cmp	r2, r3
 8005688:	f43f af46 	beq.w	8005518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3770      	adds	r7, #112	; 0x70
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005698:	b480      	push	{r7}
 800569a:	b0a3      	sub	sp, #140	; 0x8c
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ca:	d10e      	bne.n	80056ea <UART_Start_Receive_IT+0x52>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d105      	bne.n	80056e0 <UART_Start_Receive_IT+0x48>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056de:	e02d      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	22ff      	movs	r2, #255	; 0xff
 80056e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056e8:	e028      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10d      	bne.n	800570e <UART_Start_Receive_IT+0x76>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d104      	bne.n	8005704 <UART_Start_Receive_IT+0x6c>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	22ff      	movs	r2, #255	; 0xff
 80056fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005702:	e01b      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	227f      	movs	r2, #127	; 0x7f
 8005708:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800570c:	e016      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005716:	d10d      	bne.n	8005734 <UART_Start_Receive_IT+0x9c>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d104      	bne.n	800572a <UART_Start_Receive_IT+0x92>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	227f      	movs	r2, #127	; 0x7f
 8005724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005728:	e008      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	223f      	movs	r2, #63	; 0x3f
 800572e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005732:	e003      	b.n	800573c <UART_Start_Receive_IT+0xa4>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2222      	movs	r2, #34	; 0x22
 8005748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3308      	adds	r3, #8
 8005752:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800575c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005770:	673a      	str	r2, [r7, #112]	; 0x70
 8005772:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005774:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005776:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005778:	e841 2300 	strex	r3, r2, [r1]
 800577c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800577e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e3      	bne.n	800574c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578c:	d14f      	bne.n	800582e <UART_Start_Receive_IT+0x196>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005794:	88fa      	ldrh	r2, [r7, #6]
 8005796:	429a      	cmp	r2, r3
 8005798:	d349      	bcc.n	800582e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a2:	d107      	bne.n	80057b4 <UART_Start_Receive_IT+0x11c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d103      	bne.n	80057b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a46      	ldr	r2, [pc, #280]	; (80058c8 <UART_Start_Receive_IT+0x230>)
 80057b0:	675a      	str	r2, [r3, #116]	; 0x74
 80057b2:	e002      	b.n	80057ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a45      	ldr	r2, [pc, #276]	; (80058cc <UART_Start_Receive_IT+0x234>)
 80057b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01a      	beq.n	80057f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e4      	bne.n	80057c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3308      	adds	r3, #8
 80057fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800580e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3308      	adds	r3, #8
 8005816:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005818:	64ba      	str	r2, [r7, #72]	; 0x48
 800581a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800581e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_Start_Receive_IT+0x160>
 800582c:	e046      	b.n	80058bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005836:	d107      	bne.n	8005848 <UART_Start_Receive_IT+0x1b0>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a23      	ldr	r2, [pc, #140]	; (80058d0 <UART_Start_Receive_IT+0x238>)
 8005844:	675a      	str	r2, [r3, #116]	; 0x74
 8005846:	e002      	b.n	800584e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <UART_Start_Receive_IT+0x23c>)
 800584c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d019      	beq.n	800588a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	e853 3f00 	ldrex	r3, [r3]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800586a:	677b      	str	r3, [r7, #116]	; 0x74
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
 8005876:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800587a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800587c:	e841 2300 	strex	r3, r2, [r1]
 8005880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1e6      	bne.n	8005856 <UART_Start_Receive_IT+0x1be>
 8005888:	e018      	b.n	80058bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	613b      	str	r3, [r7, #16]
   return(result);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f043 0320 	orr.w	r3, r3, #32
 800589e:	67bb      	str	r3, [r7, #120]	; 0x78
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	69f9      	ldr	r1, [r7, #28]
 80058ae:	6a3a      	ldr	r2, [r7, #32]
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e6      	bne.n	800588a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	378c      	adds	r7, #140	; 0x8c
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr
 80058c8:	080060f5 	.word	0x080060f5
 80058cc:	08005d95 	.word	0x08005d95
 80058d0:	08005bdd 	.word	0x08005bdd
 80058d4:	08005a25 	.word	0x08005a25

080058d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058d8:	b480      	push	{r7}
 80058da:	b095      	sub	sp, #84	; 0x54
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005900:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005904:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e6      	bne.n	80058e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	3308      	adds	r3, #8
 8005918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	61fb      	str	r3, [r7, #28]
   return(result);
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	64bb      	str	r3, [r7, #72]	; 0x48
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3308      	adds	r3, #8
 8005934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005936:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800593c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e3      	bne.n	8005912 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800594e:	2b01      	cmp	r3, #1
 8005950:	d118      	bne.n	8005984 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f023 0310 	bic.w	r3, r3, #16
 8005966:	647b      	str	r3, [r7, #68]	; 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	6979      	ldr	r1, [r7, #20]
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	613b      	str	r3, [r7, #16]
   return(result);
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e6      	bne.n	8005952 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005998:	bf00      	nop
 800599a:	3754      	adds	r7, #84	; 0x54
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr

080059a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f7fb f927 	bl	8000c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b088      	sub	sp, #32
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	e853 3f00 	ldrex	r3, [r3]
 80059e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f8:	6979      	ldr	r1, [r7, #20]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	e841 2300 	strex	r3, r2, [r1]
 8005a00:	613b      	str	r3, [r7, #16]
   return(result);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e6      	bne.n	80059d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fb f914 	bl	8000c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a1c:	bf00      	nop
 8005a1e:	3720      	adds	r7, #32
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b09c      	sub	sp, #112	; 0x70
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a32:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3c:	2b22      	cmp	r3, #34	; 0x22
 8005a3e:	f040 80be 	bne.w	8005bbe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a50:	b2d9      	uxtb	r1, r3
 8005a52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5c:	400a      	ands	r2, r1
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f040 80a1 	bne.w	8005bce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005aa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ab0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e6      	bne.n	8005a8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ade:	647a      	str	r2, [r7, #68]	; 0x44
 8005ae0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e5      	bne.n	8005abe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a33      	ldr	r2, [pc, #204]	; (8005bd8 <UART_RxISR_8BIT+0x1b4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d01f      	beq.n	8005b50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d018      	beq.n	8005b50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b32:	663b      	str	r3, [r7, #96]	; 0x60
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e6      	bne.n	8005b1e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d12e      	bne.n	8005bb6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0310 	bic.w	r3, r3, #16
 8005b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b80:	69b9      	ldr	r1, [r7, #24]
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	e841 2300 	strex	r3, r2, [r1]
 8005b88:	617b      	str	r3, [r7, #20]
   return(result);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1e6      	bne.n	8005b5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f003 0310 	and.w	r3, r3, #16
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d103      	bne.n	8005ba6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2210      	movs	r2, #16
 8005ba4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff f93a 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005bb4:	e00b      	b.n	8005bce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fb f85c 	bl	8000c74 <HAL_UART_RxCpltCallback>
}
 8005bbc:	e007      	b.n	8005bce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699a      	ldr	r2, [r3, #24]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0208 	orr.w	r2, r2, #8
 8005bcc:	619a      	str	r2, [r3, #24]
}
 8005bce:	bf00      	nop
 8005bd0:	3770      	adds	r7, #112	; 0x70
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40008000 	.word	0x40008000

08005bdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b09c      	sub	sp, #112	; 0x70
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf4:	2b22      	cmp	r3, #34	; 0x22
 8005bf6:	f040 80be 	bne.w	8005d76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005c0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005c0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005c12:	4013      	ands	r3, r2
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1e:	1c9a      	adds	r2, r3, #2
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 80a1 	bne.w	8005d86 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4c:	e853 3f00 	ldrex	r3, [r3]
 8005c50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c58:	667b      	str	r3, [r7, #100]	; 0x64
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c62:	657b      	str	r3, [r7, #84]	; 0x54
 8005c64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c6a:	e841 2300 	strex	r3, r2, [r1]
 8005c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e6      	bne.n	8005c44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3308      	adds	r3, #8
 8005c7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3308      	adds	r3, #8
 8005c94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c96:	643a      	str	r2, [r7, #64]	; 0x40
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c9e:	e841 2300 	strex	r3, r2, [r1]
 8005ca2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1e5      	bne.n	8005c76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a33      	ldr	r2, [pc, #204]	; (8005d90 <UART_RxISR_16BIT+0x1b4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d01f      	beq.n	8005d08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	e853 3f00 	ldrex	r3, [r3]
 8005ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfc:	e841 2300 	strex	r3, r2, [r1]
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1e6      	bne.n	8005cd6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d12e      	bne.n	8005d6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f023 0310 	bic.w	r3, r3, #16
 8005d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6979      	ldr	r1, [r7, #20]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	613b      	str	r3, [r7, #16]
   return(result);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e6      	bne.n	8005d16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	f003 0310 	and.w	r3, r3, #16
 8005d52:	2b10      	cmp	r3, #16
 8005d54:	d103      	bne.n	8005d5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff f85e 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d6c:	e00b      	b.n	8005d86 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fa ff80 	bl	8000c74 <HAL_UART_RxCpltCallback>
}
 8005d74:	e007      	b.n	8005d86 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0208 	orr.w	r2, r2, #8
 8005d84:	619a      	str	r2, [r3, #24]
}
 8005d86:	bf00      	nop
 8005d88:	3770      	adds	r7, #112	; 0x70
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40008000 	.word	0x40008000

08005d94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b0ac      	sub	sp, #176	; 0xb0
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005da2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69db      	ldr	r3, [r3, #28]
 8005dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dca:	2b22      	cmp	r3, #34	; 0x22
 8005dcc:	f040 8182 	bne.w	80060d4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dd6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dda:	e125      	b.n	8006028 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005de6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005dea:	b2d9      	uxtb	r1, r3
 8005dec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df6:	400a      	ands	r2, r1
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d053      	beq.n	8005ed6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d011      	beq.n	8005e5e <UART_RxISR_8BIT_FIFOEN+0xca>
 8005e3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e54:	f043 0201 	orr.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d011      	beq.n	8005e8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e84:	f043 0204 	orr.w	r2, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e92:	f003 0304 	and.w	r3, r3, #4
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d011      	beq.n	8005ebe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2204      	movs	r2, #4
 8005eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f043 0202 	orr.w	r2, r3, #2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d006      	beq.n	8005ed6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7fa fea3 	bl	8000c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f040 80a2 	bne.w	8006028 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f08:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005f0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e4      	bne.n	8005ee4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f30:	f023 0301 	bic.w	r3, r3, #1
 8005f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f42:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005f48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e1      	bne.n	8005f1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5f      	ldr	r2, [pc, #380]	; (80060ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d021      	beq.n	8005fb8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01a      	beq.n	8005fb8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fa4:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005faa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e4      	bne.n	8005f82 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d130      	bne.n	8006022 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	f023 0310 	bic.w	r3, r3, #16
 8005fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8005fea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e4      	bne.n	8005fc6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b10      	cmp	r3, #16
 8006008:	d103      	bne.n	8006012 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2210      	movs	r2, #16
 8006010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fe ff04 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
 8006020:	e002      	b.n	8006028 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fa fe26 	bl	8000c74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006028:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	f47f aecf 	bne.w	8005ddc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006044:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006048:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800604c:	2b00      	cmp	r3, #0
 800604e:	d049      	beq.n	80060e4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006056:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800605a:	429a      	cmp	r2, r3
 800605c:	d242      	bcs.n	80060e4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	61fb      	str	r3, [r7, #28]
   return(result);
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006082:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006084:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608a:	e841 2300 	strex	r3, r2, [r1]
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1e3      	bne.n	800605e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800609a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f043 0320 	orr.w	r3, r3, #32
 80060b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6979      	ldr	r1, [r7, #20]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	613b      	str	r3, [r7, #16]
   return(result);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e4      	bne.n	800609c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060d2:	e007      	b.n	80060e4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0208 	orr.w	r2, r2, #8
 80060e2:	619a      	str	r2, [r3, #24]
}
 80060e4:	bf00      	nop
 80060e6:	37b0      	adds	r7, #176	; 0xb0
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40008000 	.word	0x40008000
 80060f0:	08005a25 	.word	0x08005a25

080060f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b0ae      	sub	sp, #184	; 0xb8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006102:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800612a:	2b22      	cmp	r3, #34	; 0x22
 800612c:	f040 8186 	bne.w	800643c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006136:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800613a:	e129      	b.n	8006390 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800614e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006152:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006156:	4013      	ands	r3, r2
 8006158:	b29a      	uxth	r2, r3
 800615a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800615e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006164:	1c9a      	adds	r2, r3, #2
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	2b00      	cmp	r3, #0
 8006190:	d053      	beq.n	800623a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d011      	beq.n	80061c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800619e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00b      	beq.n	80061c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2201      	movs	r2, #1
 80061b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f043 0201 	orr.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d011      	beq.n	80061f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80061ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00b      	beq.n	80061f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2202      	movs	r2, #2
 80061e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e8:	f043 0204 	orr.w	r2, r3, #4
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d011      	beq.n	8006222 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80061fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2204      	movs	r2, #4
 8006210:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006218:	f043 0202 	orr.w	r2, r3, #2
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006228:	2b00      	cmp	r3, #0
 800622a:	d006      	beq.n	800623a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fa fcf1 	bl	8000c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 80a4 	bne.w	8006390 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006250:	e853 3f00 	ldrex	r3, [r3]
 8006254:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800625c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	461a      	mov	r2, r3
 8006266:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800626a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800626e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006272:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006276:	e841 2300 	strex	r3, r2, [r1]
 800627a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800627c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1e2      	bne.n	8006248 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006298:	f023 0301 	bic.w	r3, r3, #1
 800629c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3308      	adds	r3, #8
 80062a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80062aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e1      	bne.n	8006282 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a5f      	ldr	r2, [pc, #380]	; (8006454 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d021      	beq.n	8006320 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01a      	beq.n	8006320 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800630c:	65bb      	str	r3, [r7, #88]	; 0x58
 800630e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006312:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800631a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e4      	bne.n	80062ea <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006324:	2b01      	cmp	r3, #1
 8006326:	d130      	bne.n	800638a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800633c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633e:	f023 0310 	bic.w	r3, r3, #16
 8006342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006350:	647b      	str	r3, [r7, #68]	; 0x44
 8006352:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006354:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006358:	e841 2300 	strex	r3, r2, [r1]
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e4      	bne.n	800632e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f003 0310 	and.w	r3, r3, #16
 800636e:	2b10      	cmp	r3, #16
 8006370:	d103      	bne.n	800637a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2210      	movs	r2, #16
 8006378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fe fd50 	bl	8004e28 <HAL_UARTEx_RxEventCallback>
 8006388:	e002      	b.n	8006390 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fa fc72 	bl	8000c74 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006390:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006394:	2b00      	cmp	r3, #0
 8006396:	d006      	beq.n	80063a6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006398:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f47f aecb 	bne.w	800613c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063ac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80063b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d049      	beq.n	800644c <UART_RxISR_16BIT_FIFOEN+0x358>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d242      	bcs.n	800644c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	623b      	str	r3, [r7, #32]
   return(result);
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3308      	adds	r3, #8
 80063e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80063ea:	633a      	str	r2, [r7, #48]	; 0x30
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a15      	ldr	r2, [pc, #84]	; (8006458 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006402:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	60fb      	str	r3, [r7, #12]
   return(result);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f043 0320 	orr.w	r3, r3, #32
 8006418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006426:	61fb      	str	r3, [r7, #28]
 8006428:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642a:	69b9      	ldr	r1, [r7, #24]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	e841 2300 	strex	r3, r2, [r1]
 8006432:	617b      	str	r3, [r7, #20]
   return(result);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1e4      	bne.n	8006404 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800643a:	e007      	b.n	800644c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0208 	orr.w	r2, r2, #8
 800644a:	619a      	str	r2, [r3, #24]
}
 800644c:	bf00      	nop
 800644e:	37b8      	adds	r7, #184	; 0xb8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40008000 	.word	0x40008000
 8006458:	08005bdd 	.word	0x08005bdd

0800645c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr

0800646e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr

08006480 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr

08006492 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_UARTEx_DisableFifoMode+0x16>
 80064a4:	2302      	movs	r3, #2
 80064a6:	e027      	b.n	80064f8 <HAL_UARTEx_DisableFifoMode+0x66>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2224      	movs	r2, #36	; 0x24
 80064b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0201 	bic.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064d6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr

08006502 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006516:	2302      	movs	r3, #2
 8006518:	e02d      	b.n	8006576 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2224      	movs	r2, #36	; 0x24
 8006526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f850 	bl	80065fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006592:	2302      	movs	r3, #2
 8006594:	e02d      	b.n	80065f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2224      	movs	r2, #36	; 0x24
 80065a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0201 	bic.w	r2, r2, #1
 80065bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f812 	bl	80065fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006608:	2b00      	cmp	r3, #0
 800660a:	d108      	bne.n	800661e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800661c:	e031      	b.n	8006682 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800661e:	2308      	movs	r3, #8
 8006620:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006622:	2308      	movs	r3, #8
 8006624:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	0e5b      	lsrs	r3, r3, #25
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	0f5b      	lsrs	r3, r3, #29
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	7b3a      	ldrb	r2, [r7, #12]
 800664a:	4910      	ldr	r1, [pc, #64]	; (800668c <UARTEx_SetNbDataToProcess+0x90>)
 800664c:	5c8a      	ldrb	r2, [r1, r2]
 800664e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006652:	7b3a      	ldrb	r2, [r7, #12]
 8006654:	490e      	ldr	r1, [pc, #56]	; (8006690 <UARTEx_SetNbDataToProcess+0x94>)
 8006656:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006658:	fb93 f3f2 	sdiv	r3, r3, r2
 800665c:	b29a      	uxth	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	7b7a      	ldrb	r2, [r7, #13]
 8006668:	4908      	ldr	r1, [pc, #32]	; (800668c <UARTEx_SetNbDataToProcess+0x90>)
 800666a:	5c8a      	ldrb	r2, [r1, r2]
 800666c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006670:	7b7a      	ldrb	r2, [r7, #13]
 8006672:	4907      	ldr	r1, [pc, #28]	; (8006690 <UARTEx_SetNbDataToProcess+0x94>)
 8006674:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006676:	fb93 f3f2 	sdiv	r3, r3, r2
 800667a:	b29a      	uxth	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006682:	bf00      	nop
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr
 800668c:	08007134 	.word	0x08007134
 8006690:	0800713c 	.word	0x0800713c

08006694 <__errno>:
 8006694:	4b01      	ldr	r3, [pc, #4]	; (800669c <__errno+0x8>)
 8006696:	6818      	ldr	r0, [r3, #0]
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000010 	.word	0x20000010

080066a0 <__libc_init_array>:
 80066a0:	b570      	push	{r4, r5, r6, lr}
 80066a2:	4d0d      	ldr	r5, [pc, #52]	; (80066d8 <__libc_init_array+0x38>)
 80066a4:	4c0d      	ldr	r4, [pc, #52]	; (80066dc <__libc_init_array+0x3c>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	2600      	movs	r6, #0
 80066ac:	42a6      	cmp	r6, r4
 80066ae:	d109      	bne.n	80066c4 <__libc_init_array+0x24>
 80066b0:	4d0b      	ldr	r5, [pc, #44]	; (80066e0 <__libc_init_array+0x40>)
 80066b2:	4c0c      	ldr	r4, [pc, #48]	; (80066e4 <__libc_init_array+0x44>)
 80066b4:	f000 fca0 	bl	8006ff8 <_init>
 80066b8:	1b64      	subs	r4, r4, r5
 80066ba:	10a4      	asrs	r4, r4, #2
 80066bc:	2600      	movs	r6, #0
 80066be:	42a6      	cmp	r6, r4
 80066c0:	d105      	bne.n	80066ce <__libc_init_array+0x2e>
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c8:	4798      	blx	r3
 80066ca:	3601      	adds	r6, #1
 80066cc:	e7ee      	b.n	80066ac <__libc_init_array+0xc>
 80066ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80066d2:	4798      	blx	r3
 80066d4:	3601      	adds	r6, #1
 80066d6:	e7f2      	b.n	80066be <__libc_init_array+0x1e>
 80066d8:	08007180 	.word	0x08007180
 80066dc:	08007180 	.word	0x08007180
 80066e0:	08007180 	.word	0x08007180
 80066e4:	08007184 	.word	0x08007184

080066e8 <memcpy>:
 80066e8:	440a      	add	r2, r1
 80066ea:	4291      	cmp	r1, r2
 80066ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80066f0:	d100      	bne.n	80066f4 <memcpy+0xc>
 80066f2:	4770      	bx	lr
 80066f4:	b510      	push	{r4, lr}
 80066f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066fe:	4291      	cmp	r1, r2
 8006700:	d1f9      	bne.n	80066f6 <memcpy+0xe>
 8006702:	bd10      	pop	{r4, pc}

08006704 <memset>:
 8006704:	4402      	add	r2, r0
 8006706:	4603      	mov	r3, r0
 8006708:	4293      	cmp	r3, r2
 800670a:	d100      	bne.n	800670e <memset+0xa>
 800670c:	4770      	bx	lr
 800670e:	f803 1b01 	strb.w	r1, [r3], #1
 8006712:	e7f9      	b.n	8006708 <memset+0x4>

08006714 <sniprintf>:
 8006714:	b40c      	push	{r2, r3}
 8006716:	b530      	push	{r4, r5, lr}
 8006718:	4b17      	ldr	r3, [pc, #92]	; (8006778 <sniprintf+0x64>)
 800671a:	1e0c      	subs	r4, r1, #0
 800671c:	681d      	ldr	r5, [r3, #0]
 800671e:	b09d      	sub	sp, #116	; 0x74
 8006720:	da08      	bge.n	8006734 <sniprintf+0x20>
 8006722:	238b      	movs	r3, #139	; 0x8b
 8006724:	602b      	str	r3, [r5, #0]
 8006726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800672a:	b01d      	add	sp, #116	; 0x74
 800672c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006730:	b002      	add	sp, #8
 8006732:	4770      	bx	lr
 8006734:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006738:	f8ad 3014 	strh.w	r3, [sp, #20]
 800673c:	bf14      	ite	ne
 800673e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006742:	4623      	moveq	r3, r4
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	9307      	str	r3, [sp, #28]
 8006748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800674c:	9002      	str	r0, [sp, #8]
 800674e:	9006      	str	r0, [sp, #24]
 8006750:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006754:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006756:	ab21      	add	r3, sp, #132	; 0x84
 8006758:	a902      	add	r1, sp, #8
 800675a:	4628      	mov	r0, r5
 800675c:	9301      	str	r3, [sp, #4]
 800675e:	f000 f869 	bl	8006834 <_svfiprintf_r>
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	bfbc      	itt	lt
 8006766:	238b      	movlt	r3, #139	; 0x8b
 8006768:	602b      	strlt	r3, [r5, #0]
 800676a:	2c00      	cmp	r4, #0
 800676c:	d0dd      	beq.n	800672a <sniprintf+0x16>
 800676e:	9b02      	ldr	r3, [sp, #8]
 8006770:	2200      	movs	r2, #0
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	e7d9      	b.n	800672a <sniprintf+0x16>
 8006776:	bf00      	nop
 8006778:	20000010 	.word	0x20000010

0800677c <__ssputs_r>:
 800677c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	688e      	ldr	r6, [r1, #8]
 8006782:	429e      	cmp	r6, r3
 8006784:	4682      	mov	sl, r0
 8006786:	460c      	mov	r4, r1
 8006788:	4690      	mov	r8, r2
 800678a:	461f      	mov	r7, r3
 800678c:	d838      	bhi.n	8006800 <__ssputs_r+0x84>
 800678e:	898a      	ldrh	r2, [r1, #12]
 8006790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006794:	d032      	beq.n	80067fc <__ssputs_r+0x80>
 8006796:	6825      	ldr	r5, [r4, #0]
 8006798:	6909      	ldr	r1, [r1, #16]
 800679a:	eba5 0901 	sub.w	r9, r5, r1
 800679e:	6965      	ldr	r5, [r4, #20]
 80067a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067a8:	3301      	adds	r3, #1
 80067aa:	444b      	add	r3, r9
 80067ac:	106d      	asrs	r5, r5, #1
 80067ae:	429d      	cmp	r5, r3
 80067b0:	bf38      	it	cc
 80067b2:	461d      	movcc	r5, r3
 80067b4:	0553      	lsls	r3, r2, #21
 80067b6:	d531      	bpl.n	800681c <__ssputs_r+0xa0>
 80067b8:	4629      	mov	r1, r5
 80067ba:	f000 fb53 	bl	8006e64 <_malloc_r>
 80067be:	4606      	mov	r6, r0
 80067c0:	b950      	cbnz	r0, 80067d8 <__ssputs_r+0x5c>
 80067c2:	230c      	movs	r3, #12
 80067c4:	f8ca 3000 	str.w	r3, [sl]
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d8:	6921      	ldr	r1, [r4, #16]
 80067da:	464a      	mov	r2, r9
 80067dc:	f7ff ff84 	bl	80066e8 <memcpy>
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	6126      	str	r6, [r4, #16]
 80067ee:	6165      	str	r5, [r4, #20]
 80067f0:	444e      	add	r6, r9
 80067f2:	eba5 0509 	sub.w	r5, r5, r9
 80067f6:	6026      	str	r6, [r4, #0]
 80067f8:	60a5      	str	r5, [r4, #8]
 80067fa:	463e      	mov	r6, r7
 80067fc:	42be      	cmp	r6, r7
 80067fe:	d900      	bls.n	8006802 <__ssputs_r+0x86>
 8006800:	463e      	mov	r6, r7
 8006802:	6820      	ldr	r0, [r4, #0]
 8006804:	4632      	mov	r2, r6
 8006806:	4641      	mov	r1, r8
 8006808:	f000 faa8 	bl	8006d5c <memmove>
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	1b9b      	subs	r3, r3, r6
 8006810:	60a3      	str	r3, [r4, #8]
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	4433      	add	r3, r6
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	2000      	movs	r0, #0
 800681a:	e7db      	b.n	80067d4 <__ssputs_r+0x58>
 800681c:	462a      	mov	r2, r5
 800681e:	f000 fb95 	bl	8006f4c <_realloc_r>
 8006822:	4606      	mov	r6, r0
 8006824:	2800      	cmp	r0, #0
 8006826:	d1e1      	bne.n	80067ec <__ssputs_r+0x70>
 8006828:	6921      	ldr	r1, [r4, #16]
 800682a:	4650      	mov	r0, sl
 800682c:	f000 fab0 	bl	8006d90 <_free_r>
 8006830:	e7c7      	b.n	80067c2 <__ssputs_r+0x46>
	...

08006834 <_svfiprintf_r>:
 8006834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	4698      	mov	r8, r3
 800683a:	898b      	ldrh	r3, [r1, #12]
 800683c:	061b      	lsls	r3, r3, #24
 800683e:	b09d      	sub	sp, #116	; 0x74
 8006840:	4607      	mov	r7, r0
 8006842:	460d      	mov	r5, r1
 8006844:	4614      	mov	r4, r2
 8006846:	d50e      	bpl.n	8006866 <_svfiprintf_r+0x32>
 8006848:	690b      	ldr	r3, [r1, #16]
 800684a:	b963      	cbnz	r3, 8006866 <_svfiprintf_r+0x32>
 800684c:	2140      	movs	r1, #64	; 0x40
 800684e:	f000 fb09 	bl	8006e64 <_malloc_r>
 8006852:	6028      	str	r0, [r5, #0]
 8006854:	6128      	str	r0, [r5, #16]
 8006856:	b920      	cbnz	r0, 8006862 <_svfiprintf_r+0x2e>
 8006858:	230c      	movs	r3, #12
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006860:	e0d1      	b.n	8006a06 <_svfiprintf_r+0x1d2>
 8006862:	2340      	movs	r3, #64	; 0x40
 8006864:	616b      	str	r3, [r5, #20]
 8006866:	2300      	movs	r3, #0
 8006868:	9309      	str	r3, [sp, #36]	; 0x24
 800686a:	2320      	movs	r3, #32
 800686c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006870:	f8cd 800c 	str.w	r8, [sp, #12]
 8006874:	2330      	movs	r3, #48	; 0x30
 8006876:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a20 <_svfiprintf_r+0x1ec>
 800687a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800687e:	f04f 0901 	mov.w	r9, #1
 8006882:	4623      	mov	r3, r4
 8006884:	469a      	mov	sl, r3
 8006886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800688a:	b10a      	cbz	r2, 8006890 <_svfiprintf_r+0x5c>
 800688c:	2a25      	cmp	r2, #37	; 0x25
 800688e:	d1f9      	bne.n	8006884 <_svfiprintf_r+0x50>
 8006890:	ebba 0b04 	subs.w	fp, sl, r4
 8006894:	d00b      	beq.n	80068ae <_svfiprintf_r+0x7a>
 8006896:	465b      	mov	r3, fp
 8006898:	4622      	mov	r2, r4
 800689a:	4629      	mov	r1, r5
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff ff6d 	bl	800677c <__ssputs_r>
 80068a2:	3001      	adds	r0, #1
 80068a4:	f000 80aa 	beq.w	80069fc <_svfiprintf_r+0x1c8>
 80068a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068aa:	445a      	add	r2, fp
 80068ac:	9209      	str	r2, [sp, #36]	; 0x24
 80068ae:	f89a 3000 	ldrb.w	r3, [sl]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80a2 	beq.w	80069fc <_svfiprintf_r+0x1c8>
 80068b8:	2300      	movs	r3, #0
 80068ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c2:	f10a 0a01 	add.w	sl, sl, #1
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	9307      	str	r3, [sp, #28]
 80068ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ce:	931a      	str	r3, [sp, #104]	; 0x68
 80068d0:	4654      	mov	r4, sl
 80068d2:	2205      	movs	r2, #5
 80068d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d8:	4851      	ldr	r0, [pc, #324]	; (8006a20 <_svfiprintf_r+0x1ec>)
 80068da:	f7f9 fc51 	bl	8000180 <memchr>
 80068de:	9a04      	ldr	r2, [sp, #16]
 80068e0:	b9d8      	cbnz	r0, 800691a <_svfiprintf_r+0xe6>
 80068e2:	06d0      	lsls	r0, r2, #27
 80068e4:	bf44      	itt	mi
 80068e6:	2320      	movmi	r3, #32
 80068e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068ec:	0711      	lsls	r1, r2, #28
 80068ee:	bf44      	itt	mi
 80068f0:	232b      	movmi	r3, #43	; 0x2b
 80068f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f6:	f89a 3000 	ldrb.w	r3, [sl]
 80068fa:	2b2a      	cmp	r3, #42	; 0x2a
 80068fc:	d015      	beq.n	800692a <_svfiprintf_r+0xf6>
 80068fe:	9a07      	ldr	r2, [sp, #28]
 8006900:	4654      	mov	r4, sl
 8006902:	2000      	movs	r0, #0
 8006904:	f04f 0c0a 	mov.w	ip, #10
 8006908:	4621      	mov	r1, r4
 800690a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800690e:	3b30      	subs	r3, #48	; 0x30
 8006910:	2b09      	cmp	r3, #9
 8006912:	d94e      	bls.n	80069b2 <_svfiprintf_r+0x17e>
 8006914:	b1b0      	cbz	r0, 8006944 <_svfiprintf_r+0x110>
 8006916:	9207      	str	r2, [sp, #28]
 8006918:	e014      	b.n	8006944 <_svfiprintf_r+0x110>
 800691a:	eba0 0308 	sub.w	r3, r0, r8
 800691e:	fa09 f303 	lsl.w	r3, r9, r3
 8006922:	4313      	orrs	r3, r2
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	46a2      	mov	sl, r4
 8006928:	e7d2      	b.n	80068d0 <_svfiprintf_r+0x9c>
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	1d19      	adds	r1, r3, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	9103      	str	r1, [sp, #12]
 8006932:	2b00      	cmp	r3, #0
 8006934:	bfbb      	ittet	lt
 8006936:	425b      	neglt	r3, r3
 8006938:	f042 0202 	orrlt.w	r2, r2, #2
 800693c:	9307      	strge	r3, [sp, #28]
 800693e:	9307      	strlt	r3, [sp, #28]
 8006940:	bfb8      	it	lt
 8006942:	9204      	strlt	r2, [sp, #16]
 8006944:	7823      	ldrb	r3, [r4, #0]
 8006946:	2b2e      	cmp	r3, #46	; 0x2e
 8006948:	d10c      	bne.n	8006964 <_svfiprintf_r+0x130>
 800694a:	7863      	ldrb	r3, [r4, #1]
 800694c:	2b2a      	cmp	r3, #42	; 0x2a
 800694e:	d135      	bne.n	80069bc <_svfiprintf_r+0x188>
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	1d1a      	adds	r2, r3, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	9203      	str	r2, [sp, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	bfb8      	it	lt
 800695c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006960:	3402      	adds	r4, #2
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006a24 <_svfiprintf_r+0x1f0>
 8006968:	7821      	ldrb	r1, [r4, #0]
 800696a:	2203      	movs	r2, #3
 800696c:	4650      	mov	r0, sl
 800696e:	f7f9 fc07 	bl	8000180 <memchr>
 8006972:	b140      	cbz	r0, 8006986 <_svfiprintf_r+0x152>
 8006974:	2340      	movs	r3, #64	; 0x40
 8006976:	eba0 000a 	sub.w	r0, r0, sl
 800697a:	fa03 f000 	lsl.w	r0, r3, r0
 800697e:	9b04      	ldr	r3, [sp, #16]
 8006980:	4303      	orrs	r3, r0
 8006982:	3401      	adds	r4, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698a:	4827      	ldr	r0, [pc, #156]	; (8006a28 <_svfiprintf_r+0x1f4>)
 800698c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006990:	2206      	movs	r2, #6
 8006992:	f7f9 fbf5 	bl	8000180 <memchr>
 8006996:	2800      	cmp	r0, #0
 8006998:	d038      	beq.n	8006a0c <_svfiprintf_r+0x1d8>
 800699a:	4b24      	ldr	r3, [pc, #144]	; (8006a2c <_svfiprintf_r+0x1f8>)
 800699c:	bb1b      	cbnz	r3, 80069e6 <_svfiprintf_r+0x1b2>
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	3307      	adds	r3, #7
 80069a2:	f023 0307 	bic.w	r3, r3, #7
 80069a6:	3308      	adds	r3, #8
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ac:	4433      	add	r3, r6
 80069ae:	9309      	str	r3, [sp, #36]	; 0x24
 80069b0:	e767      	b.n	8006882 <_svfiprintf_r+0x4e>
 80069b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b6:	460c      	mov	r4, r1
 80069b8:	2001      	movs	r0, #1
 80069ba:	e7a5      	b.n	8006908 <_svfiprintf_r+0xd4>
 80069bc:	2300      	movs	r3, #0
 80069be:	3401      	adds	r4, #1
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	4619      	mov	r1, r3
 80069c4:	f04f 0c0a 	mov.w	ip, #10
 80069c8:	4620      	mov	r0, r4
 80069ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ce:	3a30      	subs	r2, #48	; 0x30
 80069d0:	2a09      	cmp	r2, #9
 80069d2:	d903      	bls.n	80069dc <_svfiprintf_r+0x1a8>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0c5      	beq.n	8006964 <_svfiprintf_r+0x130>
 80069d8:	9105      	str	r1, [sp, #20]
 80069da:	e7c3      	b.n	8006964 <_svfiprintf_r+0x130>
 80069dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e0:	4604      	mov	r4, r0
 80069e2:	2301      	movs	r3, #1
 80069e4:	e7f0      	b.n	80069c8 <_svfiprintf_r+0x194>
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	462a      	mov	r2, r5
 80069ec:	4b10      	ldr	r3, [pc, #64]	; (8006a30 <_svfiprintf_r+0x1fc>)
 80069ee:	a904      	add	r1, sp, #16
 80069f0:	4638      	mov	r0, r7
 80069f2:	f3af 8000 	nop.w
 80069f6:	1c42      	adds	r2, r0, #1
 80069f8:	4606      	mov	r6, r0
 80069fa:	d1d6      	bne.n	80069aa <_svfiprintf_r+0x176>
 80069fc:	89ab      	ldrh	r3, [r5, #12]
 80069fe:	065b      	lsls	r3, r3, #25
 8006a00:	f53f af2c 	bmi.w	800685c <_svfiprintf_r+0x28>
 8006a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a06:	b01d      	add	sp, #116	; 0x74
 8006a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0c:	ab03      	add	r3, sp, #12
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	462a      	mov	r2, r5
 8006a12:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <_svfiprintf_r+0x1fc>)
 8006a14:	a904      	add	r1, sp, #16
 8006a16:	4638      	mov	r0, r7
 8006a18:	f000 f87a 	bl	8006b10 <_printf_i>
 8006a1c:	e7eb      	b.n	80069f6 <_svfiprintf_r+0x1c2>
 8006a1e:	bf00      	nop
 8006a20:	08007144 	.word	0x08007144
 8006a24:	0800714a 	.word	0x0800714a
 8006a28:	0800714e 	.word	0x0800714e
 8006a2c:	00000000 	.word	0x00000000
 8006a30:	0800677d 	.word	0x0800677d

08006a34 <_printf_common>:
 8006a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	4616      	mov	r6, r2
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	688a      	ldr	r2, [r1, #8]
 8006a3e:	690b      	ldr	r3, [r1, #16]
 8006a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	bfb8      	it	lt
 8006a48:	4613      	movlt	r3, r2
 8006a4a:	6033      	str	r3, [r6, #0]
 8006a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a50:	4607      	mov	r7, r0
 8006a52:	460c      	mov	r4, r1
 8006a54:	b10a      	cbz	r2, 8006a5a <_printf_common+0x26>
 8006a56:	3301      	adds	r3, #1
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	0699      	lsls	r1, r3, #26
 8006a5e:	bf42      	ittt	mi
 8006a60:	6833      	ldrmi	r3, [r6, #0]
 8006a62:	3302      	addmi	r3, #2
 8006a64:	6033      	strmi	r3, [r6, #0]
 8006a66:	6825      	ldr	r5, [r4, #0]
 8006a68:	f015 0506 	ands.w	r5, r5, #6
 8006a6c:	d106      	bne.n	8006a7c <_printf_common+0x48>
 8006a6e:	f104 0a19 	add.w	sl, r4, #25
 8006a72:	68e3      	ldr	r3, [r4, #12]
 8006a74:	6832      	ldr	r2, [r6, #0]
 8006a76:	1a9b      	subs	r3, r3, r2
 8006a78:	42ab      	cmp	r3, r5
 8006a7a:	dc26      	bgt.n	8006aca <_printf_common+0x96>
 8006a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a80:	1e13      	subs	r3, r2, #0
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	bf18      	it	ne
 8006a86:	2301      	movne	r3, #1
 8006a88:	0692      	lsls	r2, r2, #26
 8006a8a:	d42b      	bmi.n	8006ae4 <_printf_common+0xb0>
 8006a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a90:	4649      	mov	r1, r9
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	3001      	adds	r0, #1
 8006a98:	d01e      	beq.n	8006ad8 <_printf_common+0xa4>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	68e5      	ldr	r5, [r4, #12]
 8006a9e:	6832      	ldr	r2, [r6, #0]
 8006aa0:	f003 0306 	and.w	r3, r3, #6
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	bf08      	it	eq
 8006aa8:	1aad      	subeq	r5, r5, r2
 8006aaa:	68a3      	ldr	r3, [r4, #8]
 8006aac:	6922      	ldr	r2, [r4, #16]
 8006aae:	bf0c      	ite	eq
 8006ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ab4:	2500      	movne	r5, #0
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	bfc4      	itt	gt
 8006aba:	1a9b      	subgt	r3, r3, r2
 8006abc:	18ed      	addgt	r5, r5, r3
 8006abe:	2600      	movs	r6, #0
 8006ac0:	341a      	adds	r4, #26
 8006ac2:	42b5      	cmp	r5, r6
 8006ac4:	d11a      	bne.n	8006afc <_printf_common+0xc8>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e008      	b.n	8006adc <_printf_common+0xa8>
 8006aca:	2301      	movs	r3, #1
 8006acc:	4652      	mov	r2, sl
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	47c0      	blx	r8
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d103      	bne.n	8006ae0 <_printf_common+0xac>
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	e7c6      	b.n	8006a72 <_printf_common+0x3e>
 8006ae4:	18e1      	adds	r1, r4, r3
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	2030      	movs	r0, #48	; 0x30
 8006aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aee:	4422      	add	r2, r4
 8006af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006af8:	3302      	adds	r3, #2
 8006afa:	e7c7      	b.n	8006a8c <_printf_common+0x58>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4622      	mov	r2, r4
 8006b00:	4649      	mov	r1, r9
 8006b02:	4638      	mov	r0, r7
 8006b04:	47c0      	blx	r8
 8006b06:	3001      	adds	r0, #1
 8006b08:	d0e6      	beq.n	8006ad8 <_printf_common+0xa4>
 8006b0a:	3601      	adds	r6, #1
 8006b0c:	e7d9      	b.n	8006ac2 <_printf_common+0x8e>
	...

08006b10 <_printf_i>:
 8006b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b14:	7e0f      	ldrb	r7, [r1, #24]
 8006b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b18:	2f78      	cmp	r7, #120	; 0x78
 8006b1a:	4691      	mov	r9, r2
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	469a      	mov	sl, r3
 8006b22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b26:	d807      	bhi.n	8006b38 <_printf_i+0x28>
 8006b28:	2f62      	cmp	r7, #98	; 0x62
 8006b2a:	d80a      	bhi.n	8006b42 <_printf_i+0x32>
 8006b2c:	2f00      	cmp	r7, #0
 8006b2e:	f000 80d8 	beq.w	8006ce2 <_printf_i+0x1d2>
 8006b32:	2f58      	cmp	r7, #88	; 0x58
 8006b34:	f000 80a3 	beq.w	8006c7e <_printf_i+0x16e>
 8006b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b40:	e03a      	b.n	8006bb8 <_printf_i+0xa8>
 8006b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b46:	2b15      	cmp	r3, #21
 8006b48:	d8f6      	bhi.n	8006b38 <_printf_i+0x28>
 8006b4a:	a101      	add	r1, pc, #4	; (adr r1, 8006b50 <_printf_i+0x40>)
 8006b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b50:	08006ba9 	.word	0x08006ba9
 8006b54:	08006bbd 	.word	0x08006bbd
 8006b58:	08006b39 	.word	0x08006b39
 8006b5c:	08006b39 	.word	0x08006b39
 8006b60:	08006b39 	.word	0x08006b39
 8006b64:	08006b39 	.word	0x08006b39
 8006b68:	08006bbd 	.word	0x08006bbd
 8006b6c:	08006b39 	.word	0x08006b39
 8006b70:	08006b39 	.word	0x08006b39
 8006b74:	08006b39 	.word	0x08006b39
 8006b78:	08006b39 	.word	0x08006b39
 8006b7c:	08006cc9 	.word	0x08006cc9
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006cab 	.word	0x08006cab
 8006b88:	08006b39 	.word	0x08006b39
 8006b8c:	08006b39 	.word	0x08006b39
 8006b90:	08006ceb 	.word	0x08006ceb
 8006b94:	08006b39 	.word	0x08006b39
 8006b98:	08006bed 	.word	0x08006bed
 8006b9c:	08006b39 	.word	0x08006b39
 8006ba0:	08006b39 	.word	0x08006b39
 8006ba4:	08006cb3 	.word	0x08006cb3
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	1d1a      	adds	r2, r3, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	602a      	str	r2, [r5, #0]
 8006bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0a3      	b.n	8006d04 <_printf_i+0x1f4>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	6829      	ldr	r1, [r5, #0]
 8006bc0:	0606      	lsls	r6, r0, #24
 8006bc2:	f101 0304 	add.w	r3, r1, #4
 8006bc6:	d50a      	bpl.n	8006bde <_printf_i+0xce>
 8006bc8:	680e      	ldr	r6, [r1, #0]
 8006bca:	602b      	str	r3, [r5, #0]
 8006bcc:	2e00      	cmp	r6, #0
 8006bce:	da03      	bge.n	8006bd8 <_printf_i+0xc8>
 8006bd0:	232d      	movs	r3, #45	; 0x2d
 8006bd2:	4276      	negs	r6, r6
 8006bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bd8:	485e      	ldr	r0, [pc, #376]	; (8006d54 <_printf_i+0x244>)
 8006bda:	230a      	movs	r3, #10
 8006bdc:	e019      	b.n	8006c12 <_printf_i+0x102>
 8006bde:	680e      	ldr	r6, [r1, #0]
 8006be0:	602b      	str	r3, [r5, #0]
 8006be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006be6:	bf18      	it	ne
 8006be8:	b236      	sxthne	r6, r6
 8006bea:	e7ef      	b.n	8006bcc <_printf_i+0xbc>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	6820      	ldr	r0, [r4, #0]
 8006bf0:	1d19      	adds	r1, r3, #4
 8006bf2:	6029      	str	r1, [r5, #0]
 8006bf4:	0601      	lsls	r1, r0, #24
 8006bf6:	d501      	bpl.n	8006bfc <_printf_i+0xec>
 8006bf8:	681e      	ldr	r6, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <_printf_i+0xf2>
 8006bfc:	0646      	lsls	r6, r0, #25
 8006bfe:	d5fb      	bpl.n	8006bf8 <_printf_i+0xe8>
 8006c00:	881e      	ldrh	r6, [r3, #0]
 8006c02:	4854      	ldr	r0, [pc, #336]	; (8006d54 <_printf_i+0x244>)
 8006c04:	2f6f      	cmp	r7, #111	; 0x6f
 8006c06:	bf0c      	ite	eq
 8006c08:	2308      	moveq	r3, #8
 8006c0a:	230a      	movne	r3, #10
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c12:	6865      	ldr	r5, [r4, #4]
 8006c14:	60a5      	str	r5, [r4, #8]
 8006c16:	2d00      	cmp	r5, #0
 8006c18:	bfa2      	ittt	ge
 8006c1a:	6821      	ldrge	r1, [r4, #0]
 8006c1c:	f021 0104 	bicge.w	r1, r1, #4
 8006c20:	6021      	strge	r1, [r4, #0]
 8006c22:	b90e      	cbnz	r6, 8006c28 <_printf_i+0x118>
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	d04d      	beq.n	8006cc4 <_printf_i+0x1b4>
 8006c28:	4615      	mov	r5, r2
 8006c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8006c32:	5dc7      	ldrb	r7, [r0, r7]
 8006c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c38:	4637      	mov	r7, r6
 8006c3a:	42bb      	cmp	r3, r7
 8006c3c:	460e      	mov	r6, r1
 8006c3e:	d9f4      	bls.n	8006c2a <_printf_i+0x11a>
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d10b      	bne.n	8006c5c <_printf_i+0x14c>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	07de      	lsls	r6, r3, #31
 8006c48:	d508      	bpl.n	8006c5c <_printf_i+0x14c>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	6861      	ldr	r1, [r4, #4]
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	bfde      	ittt	le
 8006c52:	2330      	movle	r3, #48	; 0x30
 8006c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c5c:	1b52      	subs	r2, r2, r5
 8006c5e:	6122      	str	r2, [r4, #16]
 8006c60:	f8cd a000 	str.w	sl, [sp]
 8006c64:	464b      	mov	r3, r9
 8006c66:	aa03      	add	r2, sp, #12
 8006c68:	4621      	mov	r1, r4
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	f7ff fee2 	bl	8006a34 <_printf_common>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d14c      	bne.n	8006d0e <_printf_i+0x1fe>
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c78:	b004      	add	sp, #16
 8006c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c7e:	4835      	ldr	r0, [pc, #212]	; (8006d54 <_printf_i+0x244>)
 8006c80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006c84:	6829      	ldr	r1, [r5, #0]
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8006c8c:	6029      	str	r1, [r5, #0]
 8006c8e:	061d      	lsls	r5, r3, #24
 8006c90:	d514      	bpl.n	8006cbc <_printf_i+0x1ac>
 8006c92:	07df      	lsls	r7, r3, #31
 8006c94:	bf44      	itt	mi
 8006c96:	f043 0320 	orrmi.w	r3, r3, #32
 8006c9a:	6023      	strmi	r3, [r4, #0]
 8006c9c:	b91e      	cbnz	r6, 8006ca6 <_printf_i+0x196>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f023 0320 	bic.w	r3, r3, #32
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	2310      	movs	r3, #16
 8006ca8:	e7b0      	b.n	8006c0c <_printf_i+0xfc>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f043 0320 	orr.w	r3, r3, #32
 8006cb0:	6023      	str	r3, [r4, #0]
 8006cb2:	2378      	movs	r3, #120	; 0x78
 8006cb4:	4828      	ldr	r0, [pc, #160]	; (8006d58 <_printf_i+0x248>)
 8006cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cba:	e7e3      	b.n	8006c84 <_printf_i+0x174>
 8006cbc:	0659      	lsls	r1, r3, #25
 8006cbe:	bf48      	it	mi
 8006cc0:	b2b6      	uxthmi	r6, r6
 8006cc2:	e7e6      	b.n	8006c92 <_printf_i+0x182>
 8006cc4:	4615      	mov	r5, r2
 8006cc6:	e7bb      	b.n	8006c40 <_printf_i+0x130>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	6826      	ldr	r6, [r4, #0]
 8006ccc:	6961      	ldr	r1, [r4, #20]
 8006cce:	1d18      	adds	r0, r3, #4
 8006cd0:	6028      	str	r0, [r5, #0]
 8006cd2:	0635      	lsls	r5, r6, #24
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	d501      	bpl.n	8006cdc <_printf_i+0x1cc>
 8006cd8:	6019      	str	r1, [r3, #0]
 8006cda:	e002      	b.n	8006ce2 <_printf_i+0x1d2>
 8006cdc:	0670      	lsls	r0, r6, #25
 8006cde:	d5fb      	bpl.n	8006cd8 <_printf_i+0x1c8>
 8006ce0:	8019      	strh	r1, [r3, #0]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	6123      	str	r3, [r4, #16]
 8006ce6:	4615      	mov	r5, r2
 8006ce8:	e7ba      	b.n	8006c60 <_printf_i+0x150>
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	1d1a      	adds	r2, r3, #4
 8006cee:	602a      	str	r2, [r5, #0]
 8006cf0:	681d      	ldr	r5, [r3, #0]
 8006cf2:	6862      	ldr	r2, [r4, #4]
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f7f9 fa42 	bl	8000180 <memchr>
 8006cfc:	b108      	cbz	r0, 8006d02 <_printf_i+0x1f2>
 8006cfe:	1b40      	subs	r0, r0, r5
 8006d00:	6060      	str	r0, [r4, #4]
 8006d02:	6863      	ldr	r3, [r4, #4]
 8006d04:	6123      	str	r3, [r4, #16]
 8006d06:	2300      	movs	r3, #0
 8006d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0c:	e7a8      	b.n	8006c60 <_printf_i+0x150>
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	462a      	mov	r2, r5
 8006d12:	4649      	mov	r1, r9
 8006d14:	4640      	mov	r0, r8
 8006d16:	47d0      	blx	sl
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d0ab      	beq.n	8006c74 <_printf_i+0x164>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	079b      	lsls	r3, r3, #30
 8006d20:	d413      	bmi.n	8006d4a <_printf_i+0x23a>
 8006d22:	68e0      	ldr	r0, [r4, #12]
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	4298      	cmp	r0, r3
 8006d28:	bfb8      	it	lt
 8006d2a:	4618      	movlt	r0, r3
 8006d2c:	e7a4      	b.n	8006c78 <_printf_i+0x168>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	4632      	mov	r2, r6
 8006d32:	4649      	mov	r1, r9
 8006d34:	4640      	mov	r0, r8
 8006d36:	47d0      	blx	sl
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d09b      	beq.n	8006c74 <_printf_i+0x164>
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	68e3      	ldr	r3, [r4, #12]
 8006d40:	9903      	ldr	r1, [sp, #12]
 8006d42:	1a5b      	subs	r3, r3, r1
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	dcf2      	bgt.n	8006d2e <_printf_i+0x21e>
 8006d48:	e7eb      	b.n	8006d22 <_printf_i+0x212>
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	f104 0619 	add.w	r6, r4, #25
 8006d50:	e7f5      	b.n	8006d3e <_printf_i+0x22e>
 8006d52:	bf00      	nop
 8006d54:	08007155 	.word	0x08007155
 8006d58:	08007166 	.word	0x08007166

08006d5c <memmove>:
 8006d5c:	4288      	cmp	r0, r1
 8006d5e:	b510      	push	{r4, lr}
 8006d60:	eb01 0402 	add.w	r4, r1, r2
 8006d64:	d902      	bls.n	8006d6c <memmove+0x10>
 8006d66:	4284      	cmp	r4, r0
 8006d68:	4623      	mov	r3, r4
 8006d6a:	d807      	bhi.n	8006d7c <memmove+0x20>
 8006d6c:	1e43      	subs	r3, r0, #1
 8006d6e:	42a1      	cmp	r1, r4
 8006d70:	d008      	beq.n	8006d84 <memmove+0x28>
 8006d72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d7a:	e7f8      	b.n	8006d6e <memmove+0x12>
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4601      	mov	r1, r0
 8006d80:	428a      	cmp	r2, r1
 8006d82:	d100      	bne.n	8006d86 <memmove+0x2a>
 8006d84:	bd10      	pop	{r4, pc}
 8006d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d8e:	e7f7      	b.n	8006d80 <memmove+0x24>

08006d90 <_free_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4605      	mov	r5, r0
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d041      	beq.n	8006e1c <_free_r+0x8c>
 8006d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d9c:	1f0c      	subs	r4, r1, #4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	bfb8      	it	lt
 8006da2:	18e4      	addlt	r4, r4, r3
 8006da4:	f000 f912 	bl	8006fcc <__malloc_lock>
 8006da8:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <_free_r+0x90>)
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	b933      	cbnz	r3, 8006dbc <_free_r+0x2c>
 8006dae:	6063      	str	r3, [r4, #4]
 8006db0:	6014      	str	r4, [r2, #0]
 8006db2:	4628      	mov	r0, r5
 8006db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006db8:	f000 b90e 	b.w	8006fd8 <__malloc_unlock>
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d908      	bls.n	8006dd2 <_free_r+0x42>
 8006dc0:	6820      	ldr	r0, [r4, #0]
 8006dc2:	1821      	adds	r1, r4, r0
 8006dc4:	428b      	cmp	r3, r1
 8006dc6:	bf01      	itttt	eq
 8006dc8:	6819      	ldreq	r1, [r3, #0]
 8006dca:	685b      	ldreq	r3, [r3, #4]
 8006dcc:	1809      	addeq	r1, r1, r0
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	e7ed      	b.n	8006dae <_free_r+0x1e>
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	b10b      	cbz	r3, 8006ddc <_free_r+0x4c>
 8006dd8:	42a3      	cmp	r3, r4
 8006dda:	d9fa      	bls.n	8006dd2 <_free_r+0x42>
 8006ddc:	6811      	ldr	r1, [r2, #0]
 8006dde:	1850      	adds	r0, r2, r1
 8006de0:	42a0      	cmp	r0, r4
 8006de2:	d10b      	bne.n	8006dfc <_free_r+0x6c>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	4401      	add	r1, r0
 8006de8:	1850      	adds	r0, r2, r1
 8006dea:	4283      	cmp	r3, r0
 8006dec:	6011      	str	r1, [r2, #0]
 8006dee:	d1e0      	bne.n	8006db2 <_free_r+0x22>
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	6053      	str	r3, [r2, #4]
 8006df6:	4401      	add	r1, r0
 8006df8:	6011      	str	r1, [r2, #0]
 8006dfa:	e7da      	b.n	8006db2 <_free_r+0x22>
 8006dfc:	d902      	bls.n	8006e04 <_free_r+0x74>
 8006dfe:	230c      	movs	r3, #12
 8006e00:	602b      	str	r3, [r5, #0]
 8006e02:	e7d6      	b.n	8006db2 <_free_r+0x22>
 8006e04:	6820      	ldr	r0, [r4, #0]
 8006e06:	1821      	adds	r1, r4, r0
 8006e08:	428b      	cmp	r3, r1
 8006e0a:	bf04      	itt	eq
 8006e0c:	6819      	ldreq	r1, [r3, #0]
 8006e0e:	685b      	ldreq	r3, [r3, #4]
 8006e10:	6063      	str	r3, [r4, #4]
 8006e12:	bf04      	itt	eq
 8006e14:	1809      	addeq	r1, r1, r0
 8006e16:	6021      	streq	r1, [r4, #0]
 8006e18:	6054      	str	r4, [r2, #4]
 8006e1a:	e7ca      	b.n	8006db2 <_free_r+0x22>
 8006e1c:	bd38      	pop	{r3, r4, r5, pc}
 8006e1e:	bf00      	nop
 8006e20:	200002b4 	.word	0x200002b4

08006e24 <sbrk_aligned>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4e0e      	ldr	r6, [pc, #56]	; (8006e60 <sbrk_aligned+0x3c>)
 8006e28:	460c      	mov	r4, r1
 8006e2a:	6831      	ldr	r1, [r6, #0]
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	b911      	cbnz	r1, 8006e36 <sbrk_aligned+0x12>
 8006e30:	f000 f8bc 	bl	8006fac <_sbrk_r>
 8006e34:	6030      	str	r0, [r6, #0]
 8006e36:	4621      	mov	r1, r4
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 f8b7 	bl	8006fac <_sbrk_r>
 8006e3e:	1c43      	adds	r3, r0, #1
 8006e40:	d00a      	beq.n	8006e58 <sbrk_aligned+0x34>
 8006e42:	1cc4      	adds	r4, r0, #3
 8006e44:	f024 0403 	bic.w	r4, r4, #3
 8006e48:	42a0      	cmp	r0, r4
 8006e4a:	d007      	beq.n	8006e5c <sbrk_aligned+0x38>
 8006e4c:	1a21      	subs	r1, r4, r0
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 f8ac 	bl	8006fac <_sbrk_r>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d101      	bne.n	8006e5c <sbrk_aligned+0x38>
 8006e58:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	200002b8 	.word	0x200002b8

08006e64 <_malloc_r>:
 8006e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e68:	1ccd      	adds	r5, r1, #3
 8006e6a:	f025 0503 	bic.w	r5, r5, #3
 8006e6e:	3508      	adds	r5, #8
 8006e70:	2d0c      	cmp	r5, #12
 8006e72:	bf38      	it	cc
 8006e74:	250c      	movcc	r5, #12
 8006e76:	2d00      	cmp	r5, #0
 8006e78:	4607      	mov	r7, r0
 8006e7a:	db01      	blt.n	8006e80 <_malloc_r+0x1c>
 8006e7c:	42a9      	cmp	r1, r5
 8006e7e:	d905      	bls.n	8006e8c <_malloc_r+0x28>
 8006e80:	230c      	movs	r3, #12
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	2600      	movs	r6, #0
 8006e86:	4630      	mov	r0, r6
 8006e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e8c:	4e2e      	ldr	r6, [pc, #184]	; (8006f48 <_malloc_r+0xe4>)
 8006e8e:	f000 f89d 	bl	8006fcc <__malloc_lock>
 8006e92:	6833      	ldr	r3, [r6, #0]
 8006e94:	461c      	mov	r4, r3
 8006e96:	bb34      	cbnz	r4, 8006ee6 <_malloc_r+0x82>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f7ff ffc2 	bl	8006e24 <sbrk_aligned>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	d14d      	bne.n	8006f42 <_malloc_r+0xde>
 8006ea6:	6834      	ldr	r4, [r6, #0]
 8006ea8:	4626      	mov	r6, r4
 8006eaa:	2e00      	cmp	r6, #0
 8006eac:	d140      	bne.n	8006f30 <_malloc_r+0xcc>
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	eb04 0803 	add.w	r8, r4, r3
 8006eb8:	f000 f878 	bl	8006fac <_sbrk_r>
 8006ebc:	4580      	cmp	r8, r0
 8006ebe:	d13a      	bne.n	8006f36 <_malloc_r+0xd2>
 8006ec0:	6821      	ldr	r1, [r4, #0]
 8006ec2:	3503      	adds	r5, #3
 8006ec4:	1a6d      	subs	r5, r5, r1
 8006ec6:	f025 0503 	bic.w	r5, r5, #3
 8006eca:	3508      	adds	r5, #8
 8006ecc:	2d0c      	cmp	r5, #12
 8006ece:	bf38      	it	cc
 8006ed0:	250c      	movcc	r5, #12
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f7ff ffa5 	bl	8006e24 <sbrk_aligned>
 8006eda:	3001      	adds	r0, #1
 8006edc:	d02b      	beq.n	8006f36 <_malloc_r+0xd2>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	442b      	add	r3, r5
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	e00e      	b.n	8006f04 <_malloc_r+0xa0>
 8006ee6:	6822      	ldr	r2, [r4, #0]
 8006ee8:	1b52      	subs	r2, r2, r5
 8006eea:	d41e      	bmi.n	8006f2a <_malloc_r+0xc6>
 8006eec:	2a0b      	cmp	r2, #11
 8006eee:	d916      	bls.n	8006f1e <_malloc_r+0xba>
 8006ef0:	1961      	adds	r1, r4, r5
 8006ef2:	42a3      	cmp	r3, r4
 8006ef4:	6025      	str	r5, [r4, #0]
 8006ef6:	bf18      	it	ne
 8006ef8:	6059      	strne	r1, [r3, #4]
 8006efa:	6863      	ldr	r3, [r4, #4]
 8006efc:	bf08      	it	eq
 8006efe:	6031      	streq	r1, [r6, #0]
 8006f00:	5162      	str	r2, [r4, r5]
 8006f02:	604b      	str	r3, [r1, #4]
 8006f04:	4638      	mov	r0, r7
 8006f06:	f104 060b 	add.w	r6, r4, #11
 8006f0a:	f000 f865 	bl	8006fd8 <__malloc_unlock>
 8006f0e:	f026 0607 	bic.w	r6, r6, #7
 8006f12:	1d23      	adds	r3, r4, #4
 8006f14:	1af2      	subs	r2, r6, r3
 8006f16:	d0b6      	beq.n	8006e86 <_malloc_r+0x22>
 8006f18:	1b9b      	subs	r3, r3, r6
 8006f1a:	50a3      	str	r3, [r4, r2]
 8006f1c:	e7b3      	b.n	8006e86 <_malloc_r+0x22>
 8006f1e:	6862      	ldr	r2, [r4, #4]
 8006f20:	42a3      	cmp	r3, r4
 8006f22:	bf0c      	ite	eq
 8006f24:	6032      	streq	r2, [r6, #0]
 8006f26:	605a      	strne	r2, [r3, #4]
 8006f28:	e7ec      	b.n	8006f04 <_malloc_r+0xa0>
 8006f2a:	4623      	mov	r3, r4
 8006f2c:	6864      	ldr	r4, [r4, #4]
 8006f2e:	e7b2      	b.n	8006e96 <_malloc_r+0x32>
 8006f30:	4634      	mov	r4, r6
 8006f32:	6876      	ldr	r6, [r6, #4]
 8006f34:	e7b9      	b.n	8006eaa <_malloc_r+0x46>
 8006f36:	230c      	movs	r3, #12
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	f000 f84c 	bl	8006fd8 <__malloc_unlock>
 8006f40:	e7a1      	b.n	8006e86 <_malloc_r+0x22>
 8006f42:	6025      	str	r5, [r4, #0]
 8006f44:	e7de      	b.n	8006f04 <_malloc_r+0xa0>
 8006f46:	bf00      	nop
 8006f48:	200002b4 	.word	0x200002b4

08006f4c <_realloc_r>:
 8006f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f50:	4680      	mov	r8, r0
 8006f52:	4614      	mov	r4, r2
 8006f54:	460e      	mov	r6, r1
 8006f56:	b921      	cbnz	r1, 8006f62 <_realloc_r+0x16>
 8006f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	f7ff bf81 	b.w	8006e64 <_malloc_r>
 8006f62:	b92a      	cbnz	r2, 8006f70 <_realloc_r+0x24>
 8006f64:	f7ff ff14 	bl	8006d90 <_free_r>
 8006f68:	4625      	mov	r5, r4
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f70:	f000 f838 	bl	8006fe4 <_malloc_usable_size_r>
 8006f74:	4284      	cmp	r4, r0
 8006f76:	4607      	mov	r7, r0
 8006f78:	d802      	bhi.n	8006f80 <_realloc_r+0x34>
 8006f7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f7e:	d812      	bhi.n	8006fa6 <_realloc_r+0x5a>
 8006f80:	4621      	mov	r1, r4
 8006f82:	4640      	mov	r0, r8
 8006f84:	f7ff ff6e 	bl	8006e64 <_malloc_r>
 8006f88:	4605      	mov	r5, r0
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d0ed      	beq.n	8006f6a <_realloc_r+0x1e>
 8006f8e:	42bc      	cmp	r4, r7
 8006f90:	4622      	mov	r2, r4
 8006f92:	4631      	mov	r1, r6
 8006f94:	bf28      	it	cs
 8006f96:	463a      	movcs	r2, r7
 8006f98:	f7ff fba6 	bl	80066e8 <memcpy>
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f7ff fef6 	bl	8006d90 <_free_r>
 8006fa4:	e7e1      	b.n	8006f6a <_realloc_r+0x1e>
 8006fa6:	4635      	mov	r5, r6
 8006fa8:	e7df      	b.n	8006f6a <_realloc_r+0x1e>
	...

08006fac <_sbrk_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4d06      	ldr	r5, [pc, #24]	; (8006fc8 <_sbrk_r+0x1c>)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	602b      	str	r3, [r5, #0]
 8006fb8:	f7fa fcfa 	bl	80019b0 <_sbrk>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_sbrk_r+0x1a>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_sbrk_r+0x1a>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	200002bc 	.word	0x200002bc

08006fcc <__malloc_lock>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	; (8006fd4 <__malloc_lock+0x8>)
 8006fce:	f000 b811 	b.w	8006ff4 <__retarget_lock_acquire_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	200002c0 	.word	0x200002c0

08006fd8 <__malloc_unlock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_unlock+0x8>)
 8006fda:	f000 b80c 	b.w	8006ff6 <__retarget_lock_release_recursive>
 8006fde:	bf00      	nop
 8006fe0:	200002c0 	.word	0x200002c0

08006fe4 <_malloc_usable_size_r>:
 8006fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fe8:	1f18      	subs	r0, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bfbc      	itt	lt
 8006fee:	580b      	ldrlt	r3, [r1, r0]
 8006ff0:	18c0      	addlt	r0, r0, r3
 8006ff2:	4770      	bx	lr

08006ff4 <__retarget_lock_acquire_recursive>:
 8006ff4:	4770      	bx	lr

08006ff6 <__retarget_lock_release_recursive>:
 8006ff6:	4770      	bx	lr

08006ff8 <_init>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr

08007004 <_fini>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr


STM32 RTC Scheduler_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a6c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d0c  08005d0c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d0c  08005d0c  00015d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000074  08005d88  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005d88  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152cd  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003015  00000000  00000000  0003536b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00038380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00039710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e3b7  00000000  00000000  0003a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014553  00000000  00000000  00058d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b88a8  00000000  00000000  0006d272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125b1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000547c  00000000  00000000  00125b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	08005b94 	.word	0x08005b94

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	08005b94 	.word	0x08005b94

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14d      	bne.n	80002fc <__udivmoddi4+0xac>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d968      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	b152      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026c:	fa01 f302 	lsl.w	r3, r1, r2
 8000270:	f1c2 0120 	rsb	r1, r2, #32
 8000274:	fa20 f101 	lsr.w	r1, r0, r1
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	ea41 0803 	orr.w	r8, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000286:	0c21      	lsrs	r1, r4, #16
 8000288:	fbb8 fef5 	udiv	lr, r8, r5
 800028c:	fa1f f78c 	uxth.w	r7, ip
 8000290:	fb05 831e 	mls	r3, r5, lr, r8
 8000294:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000298:	fb0e f107 	mul.w	r1, lr, r7
 800029c:	4299      	cmp	r1, r3
 800029e:	d90b      	bls.n	80002b8 <__udivmoddi4+0x68>
 80002a0:	eb1c 0303 	adds.w	r3, ip, r3
 80002a4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80002a8:	f080 811e 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002ac:	4299      	cmp	r1, r3
 80002ae:	f240 811b 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a5b      	subs	r3, r3, r1
 80002ba:	b2a4      	uxth	r4, r4
 80002bc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002c0:	fb05 3310 	mls	r3, r5, r0, r3
 80002c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c8:	fb00 f707 	mul.w	r7, r0, r7
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	d90a      	bls.n	80002e6 <__udivmoddi4+0x96>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d8:	f080 8108 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002dc:	42a7      	cmp	r7, r4
 80002de:	f240 8105 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002e2:	4464      	add	r4, ip
 80002e4:	3802      	subs	r0, #2
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa8>
 80002f0:	40d4      	lsrs	r4, r2
 80002f2:	2300      	movs	r3, #0
 80002f4:	e9c6 4300 	strd	r4, r3, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d908      	bls.n	8000312 <__udivmoddi4+0xc2>
 8000300:	2e00      	cmp	r6, #0
 8000302:	f000 80ee 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000306:	2100      	movs	r1, #0
 8000308:	e9c6 0500 	strd	r0, r5, [r6]
 800030c:	4608      	mov	r0, r1
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f183 	clz	r1, r3
 8000316:	2900      	cmp	r1, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	42ab      	cmp	r3, r5
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb65 0303 	sbc.w	r3, r5, r3
 800032a:	2001      	movs	r0, #1
 800032c:	4698      	mov	r8, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e2      	beq.n	80002f8 <__udivmoddi4+0xa8>
 8000332:	e9c6 4800 	strd	r4, r8, [r6]
 8000336:	e7df      	b.n	80002f8 <__udivmoddi4+0xa8>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8091 	bne.w	8000468 <__udivmoddi4+0x218>
 8000346:	eba1 050c 	sub.w	r5, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb5 f3f7 	udiv	r3, r5, r7
 8000358:	fb07 5013 	mls	r0, r7, r3, r5
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	42a8      	cmp	r0, r5
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0505 	adds.w	r5, ip, r5
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	42a8      	cmp	r0, r5
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a2d      	subs	r5, r5, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0f7 	udiv	r0, r5, r7
 8000384:	fb07 5510 	mls	r5, r7, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4628      	mov	r0, r5
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79e      	b.n	80002ee <__udivmoddi4+0x9e>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa05 f301 	lsl.w	r3, r5, r1
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40fd      	lsrs	r5, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f301 	lsl.w	r3, r0, r1
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 5518 	mls	r5, r9, r8, r5
 80003e0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	42a8      	cmp	r0, r5
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0505 	adds.w	r5, ip, r5
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	42a8      	cmp	r0, r5
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4465      	add	r5, ip
 8000408:	1a2d      	subs	r5, r5, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000410:	fb09 5510 	mls	r5, r9, r0, r5
 8000414:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	45ae      	cmp	lr, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	45ae      	cmp	lr, r5
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba5 050e 	sub.w	r5, r5, lr
 800043e:	42a5      	cmp	r5, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15e      	cbz	r6, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb65 050e 	sbc.w	r5, r5, lr
 8000452:	fa05 f707 	lsl.w	r7, r5, r7
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	40cd      	lsrs	r5, r1
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c6 7500 	strd	r7, r5, [r6]
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa25 f303 	lsr.w	r3, r5, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	430d      	orrs	r5, r1
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f1f7 	udiv	r1, r3, r7
 8000488:	fb07 3011 	mls	r0, r7, r1, r3
 800048c:	0c2b      	lsrs	r3, r5, #16
 800048e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000492:	fb01 f00e 	mul.w	r0, r1, lr
 8000496:	4298      	cmp	r0, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	4298      	cmp	r0, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3902      	subs	r1, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a1b      	subs	r3, r3, r0
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b8:	fb07 3310 	mls	r3, r7, r0, r3
 80004bc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004c0:	fb00 f30e 	mul.w	r3, r0, lr
 80004c4:	42ab      	cmp	r3, r5
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0505 	adds.w	r5, ip, r5
 80004cc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4465      	add	r5, ip
 80004da:	1aed      	subs	r5, r5, r3
 80004dc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e707      	b.n	80002f8 <__udivmoddi4+0xa8>
 80004e8:	4686      	mov	lr, r0
 80004ea:	e6e5      	b.n	80002b8 <__udivmoddi4+0x68>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fa      	b.n	80002e6 <__udivmoddi4+0x96>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4640      	mov	r0, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4641      	mov	r1, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4465      	add	r5, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4608      	mov	r0, r1
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <calendar_init>:


/*
 *
 */
void calendar_init(RTC_HandleTypeDef* hrtc) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	// store pointer to rtc structure
	_hrtc = hrtc;
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <calendar_init+0x1c>)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6013      	str	r3, [r2, #0]

	// pass pointer to alarm control
	rtcAlarmControl_init(hrtc);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f001 f846 	bl	80015d0 <rtcAlarmControl_init>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000188 	.word	0x20000188

08000550 <calendar_setDateTime>:


/*
 *
 */
void calendar_setDateTime(DateTime dateTime) {
 8000550:	b5b0      	push	{r4, r5, r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
 8000556:	463b      	mov	r3, r7
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
	setDateTime(dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800055c:	7838      	ldrb	r0, [r7, #0]
 800055e:	7879      	ldrb	r1, [r7, #1]
 8000560:	78bc      	ldrb	r4, [r7, #2]
 8000562:	78fd      	ldrb	r5, [r7, #3]
 8000564:	793b      	ldrb	r3, [r7, #4]
 8000566:	797a      	ldrb	r2, [r7, #5]
 8000568:	9201      	str	r2, [sp, #4]
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	462b      	mov	r3, r5
 800056e:	4622      	mov	r2, r4
 8000570:	f001 f83c 	bl	80015ec <setDateTime>
}
 8000574:	bf00      	nop
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bdb0      	pop	{r4, r5, r7, pc}

0800057c <calendar_start>:


/*
 *
 */
void calendar_start(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	// get calendar alarm for next alarm in event list relative to now
	if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 8000582:	1cfa      	adds	r2, r7, #3
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	f107 0308 	add.w	r3, r7, #8
 800058a:	4618      	mov	r0, r3
 800058c:	f000 f956 	bl	800083c <getNextAlarm>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d024      	beq.n	80005e0 <calendar_start+0x64>
		// set alarm for next event transition (start or end of event)
		setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000596:	7ab8      	ldrb	r0, [r7, #10]
 8000598:	7af9      	ldrb	r1, [r7, #11]
 800059a:	7b3a      	ldrb	r2, [r7, #12]
 800059c:	7b7b      	ldrb	r3, [r7, #13]
 800059e:	f001 f983 	bl	80018a8 <setAlarm_A>

		// if starting within an event, run the start callback
		if (withinEvent) {
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d017      	beq.n	80005d8 <calendar_start+0x5c>
			if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	4910      	ldr	r1, [pc, #64]	; (80005ec <calendar_start+0x70>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4413      	add	r3, r2
 80005b2:	00db      	lsls	r3, r3, #3
 80005b4:	440b      	add	r3, r1
 80005b6:	3308      	adds	r3, #8
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d009      	beq.n	80005d2 <calendar_start+0x56>
				(*_calendarEvents[currentEventIdx].start_callback)();
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	490a      	ldr	r1, [pc, #40]	; (80005ec <calendar_start+0x70>)
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	440b      	add	r3, r1
 80005cc:	3308      	adds	r3, #8
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4798      	blx	r3
			_currentEvent = currentEventIdx;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <calendar_start+0x74>)
 80005d6:	6013      	str	r3, [r2, #0]
		}

		// make sure that alarm fired is cleared/reset
		_alarmAFired = false;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <calendar_start+0x78>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]

	// if there is no alarm to set, disable the alarm
	else {
		diableAlarm_A();
	}
}
 80005de:	e001      	b.n	80005e4 <calendar_start+0x68>
		diableAlarm_A();
 80005e0:	f001 f9fe 	bl	80019e0 <diableAlarm_A>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000090 	.word	0x20000090
 80005f0:	20000004 	.word	0x20000004
 80005f4:	20000184 	.word	0x20000184

080005f8 <calendar_handleAlarm>:


/*
 *
 */
void calendar_handleAlarm(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
	DateTime nextAlarm;
	int currentEventIdx;
	bool withinEvent;

	if (_alarmAFired) {
 80005fe:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <calendar_handleAlarm+0x17c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 80b1 	beq.w	800076c <calendar_handleAlarm+0x174>
		// get calendar alarm for next alarm in event list relative to now
		if (getNextAlarm(&nextAlarm, &currentEventIdx, &withinEvent)) {
 800060a:	1cfa      	adds	r2, r7, #3
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f912 	bl	800083c <getNextAlarm>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 8085 	beq.w	800072a <calendar_handleAlarm+0x132>
			// set alarm for next event transition (start or end of event)
			setAlarm_A(nextAlarm.day, nextAlarm.hour, nextAlarm.minute, nextAlarm.second);
 8000620:	7ab8      	ldrb	r0, [r7, #10]
 8000622:	7af9      	ldrb	r1, [r7, #11]
 8000624:	7b3a      	ldrb	r2, [r7, #12]
 8000626:	7b7b      	ldrb	r3, [r7, #13]
 8000628:	f001 f93e 	bl	80018a8 <setAlarm_A>

			// if the current event has changed (event ended or began), then run appropriate
			// callback functions

			// if entering an event from no event
			if (withinEvent && !CURRENTLY_IN_EVENT) {
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d01d      	beq.n	800066e <calendar_handleAlarm+0x76>
 8000632:	4b51      	ldr	r3, [pc, #324]	; (8000778 <calendar_handleAlarm+0x180>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800063a:	d118      	bne.n	800066e <calendar_handleAlarm+0x76>

				// call start event callback
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	494f      	ldr	r1, [pc, #316]	; (800077c <calendar_handleAlarm+0x184>)
 8000640:	4613      	mov	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	440b      	add	r3, r1
 800064a:	3308      	adds	r3, #8
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d009      	beq.n	8000666 <calendar_handleAlarm+0x6e>
					(*_calendarEvents[currentEventIdx].start_callback)();
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4949      	ldr	r1, [pc, #292]	; (800077c <calendar_handleAlarm+0x184>)
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	440b      	add	r3, r1
 8000660:	3308      	adds	r3, #8
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a43      	ldr	r2, [pc, #268]	; (8000778 <calendar_handleAlarm+0x180>)
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	e07b      	b.n	8000766 <calendar_handleAlarm+0x16e>
			}

			// if entering an event from another event
			else if (withinEvent && CURRENTLY_IN_EVENT) {
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d034      	beq.n	80006de <calendar_handleAlarm+0xe6>
 8000674:	4b40      	ldr	r3, [pc, #256]	; (8000778 <calendar_handleAlarm+0x180>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800067c:	d02f      	beq.n	80006de <calendar_handleAlarm+0xe6>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 800067e:	4b3e      	ldr	r3, [pc, #248]	; (8000778 <calendar_handleAlarm+0x180>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	493e      	ldr	r1, [pc, #248]	; (800077c <calendar_handleAlarm+0x184>)
 8000684:	4613      	mov	r3, r2
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	4413      	add	r3, r2
 800068a:	00db      	lsls	r3, r3, #3
 800068c:	440b      	add	r3, r1
 800068e:	3314      	adds	r3, #20
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00a      	beq.n	80006ac <calendar_handleAlarm+0xb4>
					(*_calendarEvents[_currentEvent].end_callback)();
 8000696:	4b38      	ldr	r3, [pc, #224]	; (8000778 <calendar_handleAlarm+0x180>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	4938      	ldr	r1, [pc, #224]	; (800077c <calendar_handleAlarm+0x184>)
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	440b      	add	r3, r1
 80006a6:	3314      	adds	r3, #20
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4798      	blx	r3

				// call start event callback for event just entered
				if (_calendarEvents[currentEventIdx].start_callback != NULL)
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	4933      	ldr	r1, [pc, #204]	; (800077c <calendar_handleAlarm+0x184>)
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	440b      	add	r3, r1
 80006ba:	3308      	adds	r3, #8
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d009      	beq.n	80006d6 <calendar_handleAlarm+0xde>
					(*_calendarEvents[currentEventIdx].start_callback)();
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	492d      	ldr	r1, [pc, #180]	; (800077c <calendar_handleAlarm+0x184>)
 80006c6:	4613      	mov	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	440b      	add	r3, r1
 80006d0:	3308      	adds	r3, #8
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a27      	ldr	r2, [pc, #156]	; (8000778 <calendar_handleAlarm+0x180>)
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	e043      	b.n	8000766 <calendar_handleAlarm+0x16e>

			}

			// if exiting an event into no event
			else if (!withinEvent && CURRENTLY_IN_EVENT) {
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	f083 0301 	eor.w	r3, r3, #1
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d03d      	beq.n	8000766 <calendar_handleAlarm+0x16e>
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <calendar_handleAlarm+0x180>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f2:	d038      	beq.n	8000766 <calendar_handleAlarm+0x16e>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <calendar_handleAlarm+0x180>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4920      	ldr	r1, [pc, #128]	; (800077c <calendar_handleAlarm+0x184>)
 80006fa:	4613      	mov	r3, r2
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	440b      	add	r3, r1
 8000704:	3314      	adds	r3, #20
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d00a      	beq.n	8000722 <calendar_handleAlarm+0x12a>
					(*_calendarEvents[_currentEvent].end_callback)();
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <calendar_handleAlarm+0x180>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	491a      	ldr	r1, [pc, #104]	; (800077c <calendar_handleAlarm+0x184>)
 8000712:	4613      	mov	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	4413      	add	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	440b      	add	r3, r1
 800071c:	3314      	adds	r3, #20
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4798      	blx	r3

				// update current event
				_currentEvent = currentEventIdx;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a14      	ldr	r2, [pc, #80]	; (8000778 <calendar_handleAlarm+0x180>)
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	e01d      	b.n	8000766 <calendar_handleAlarm+0x16e>

		}

		// if there is no alarm to set, disable the alarm and exit any events
		else {
			diableAlarm_A();
 800072a:	f001 f959 	bl	80019e0 <diableAlarm_A>

			if (CURRENTLY_IN_EVENT) {
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <calendar_handleAlarm+0x180>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000736:	d016      	beq.n	8000766 <calendar_handleAlarm+0x16e>
				// call end event callback for event just left
				if (_calendarEvents[_currentEvent].end_callback != NULL)
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <calendar_handleAlarm+0x180>)
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	490f      	ldr	r1, [pc, #60]	; (800077c <calendar_handleAlarm+0x184>)
 800073e:	4613      	mov	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	440b      	add	r3, r1
 8000748:	3314      	adds	r3, #20
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00a      	beq.n	8000766 <calendar_handleAlarm+0x16e>
					(*_calendarEvents[_currentEvent].end_callback)();
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <calendar_handleAlarm+0x180>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4909      	ldr	r1, [pc, #36]	; (800077c <calendar_handleAlarm+0x184>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3314      	adds	r3, #20
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4798      	blx	r3
			}
		}

		// reset alarm fired flag
		_alarmAFired = false;
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <calendar_handleAlarm+0x17c>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
	}

	else {

	}
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000184 	.word	0x20000184
 8000778:	20000004 	.word	0x20000004
 800077c:	20000090 	.word	0x20000090

08000780 <calendar_AlarmA_ISR>:


/*
 *
 */
void calendar_AlarmA_ISR(void) {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	// set flag that an alarm fired
	_alarmAFired = true;
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <calendar_AlarmA_ISR+0x14>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000184 	.word	0x20000184

08000798 <compareDateTime>:

/* Find the time difference in seconds of dateTime1 and dateTime2.
 *
 * Note: Does not account for leap years.
 */
int32_t compareDateTime(DateTime dateTime_1, DateTime dateTime_2) {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b087      	sub	sp, #28
 800079c:	af00      	add	r7, sp, #0
 800079e:	f107 0408 	add.w	r4, r7, #8
 80007a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80007a6:	4639      	mov	r1, r7
 80007a8:	e881 000c 	stmia.w	r1, {r2, r3}
	uint32_t dateTimeSeconds_1, dateTimeSeconds_2;

	dateTimeSeconds_1 = dateTimeToSeconds(dateTime_1);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007b4:	f000 f80e 	bl	80007d4 <dateTimeToSeconds>
 80007b8:	6178      	str	r0, [r7, #20]
	dateTimeSeconds_2 = dateTimeToSeconds(dateTime_2);
 80007ba:	463b      	mov	r3, r7
 80007bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80007c0:	f000 f808 	bl	80007d4 <dateTimeToSeconds>
 80007c4:	6138      	str	r0, [r7, #16]

	// return net comparison (date time 1 - date time 2)
	return dateTimeSeconds_1 - dateTimeSeconds_2;
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	693b      	ldr	r3, [r7, #16]
 80007ca:	1ad3      	subs	r3, r2, r3
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <dateTimeToSeconds>:


/*
 *
 */
uint32_t dateTimeToSeconds(DateTime dateTime) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	463b      	mov	r3, r7
 80007dc:	e883 0003 	stmia.w	r3, {r0, r1}
	// Convert to seconds. Note: assumes 30 days in a month and
	// no leap years, it is not needed for the calculation because
	// they are used for relative comparisons, not absolute values.
	return (dateTime.second
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	4619      	mov	r1, r3
			+ (dateTime.minute * 60)
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4613      	mov	r3, r2
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	18ca      	adds	r2, r1, r3
			+ (dateTime.hour * 3600)
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80007fa:	fb01 f303 	mul.w	r3, r1, r3
 80007fe:	441a      	add	r2, r3
			+ ((dateTime.day - 1) * 86400)
 8000800:	78bb      	ldrb	r3, [r7, #2]
 8000802:	3b01      	subs	r3, #1
 8000804:	490a      	ldr	r1, [pc, #40]	; (8000830 <dateTimeToSeconds+0x5c>)
 8000806:	fb01 f303 	mul.w	r3, r1, r3
 800080a:	441a      	add	r2, r3
			+ ((dateTime.month - 1) * 2592000)
 800080c:	787b      	ldrb	r3, [r7, #1]
 800080e:	3b01      	subs	r3, #1
 8000810:	4908      	ldr	r1, [pc, #32]	; (8000834 <dateTimeToSeconds+0x60>)
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	441a      	add	r2, r3
			+ (dateTime.year * 31104000));
 8000818:	783b      	ldrb	r3, [r7, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <dateTimeToSeconds+0x64>)
 800081e:	fb01 f303 	mul.w	r3, r1, r3
 8000822:	4413      	add	r3, r2
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	00015180 	.word	0x00015180
 8000834:	00278d00 	.word	0x00278d00
 8000838:	01da9c00 	.word	0x01da9c00

0800083c <getNextAlarm>:


/*
 *
 */
bool getNextAlarm(DateTime* dateTime, int* nowEventIdx, bool* inEvent) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b08d      	sub	sp, #52	; 0x34
 8000840:	af02      	add	r7, sp, #8
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	607a      	str	r2, [r7, #4]
	int eventIdx = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
	int currentIdx = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
	bool nextAlarmFound = false;
 8000850:	2300      	movs	r3, #0
 8000852:	77fb      	strb	r3, [r7, #31]
	DateTime now = {0};
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	809a      	strh	r2, [r3, #4]
	DateTime nextAlarmDateTime = {0};
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	809a      	strh	r2, [r3, #4]

	// get the current date and time
	getDateTime(&now.year, &now.month, &now.day, &now.hour, &now.minute, &now.second);
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	1cdc      	adds	r4, r3, #3
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	1c9a      	adds	r2, r3, #2
 8000874:	f107 0318 	add.w	r3, r7, #24
 8000878:	1c59      	adds	r1, r3, #1
 800087a:	f107 0018 	add.w	r0, r7, #24
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	3305      	adds	r3, #5
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	3304      	adds	r3, #4
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	4623      	mov	r3, r4
 8000890:	f000 ff76 	bl	8001780 <getDateTime>

	// Traverse over the events list and find where 'now' falls.  This can be before
	// any all the events, within an event, between events, or after all the events.
	eventIdx = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
	currentIdx = eventIdx - 1;
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	3b01      	subs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
	nextAlarmFound = false;
 800089e:	2300      	movs	r3, #0
 80008a0:	77fb      	strb	r3, [r7, #31]
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 80008a2:	e0bc      	b.n	8000a1e <getNextAlarm+0x1e2>
		// test if before event
		if (compareDateTime(now, _calendarEvents[eventIdx].start) < 0)
 80008a4:	4973      	ldr	r1, [pc, #460]	; (8000a74 <getNextAlarm+0x238>)
 80008a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	440b      	add	r3, r1
 80008b2:	cb0c      	ldmia	r3, {r2, r3}
 80008b4:	f107 0118 	add.w	r1, r7, #24
 80008b8:	c903      	ldmia	r1, {r0, r1}
 80008ba:	f7ff ff6d 	bl	8000798 <compareDateTime>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	da43      	bge.n	800094c <getNextAlarm+0x110>
		{
			// then the next alarm is the beginning of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].start.year;
 80008c4:	496b      	ldr	r1, [pc, #428]	; (8000a74 <getNextAlarm+0x238>)
 80008c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008c8:	4613      	mov	r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	440b      	add	r3, r1
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].start.month;
 80008d6:	4967      	ldr	r1, [pc, #412]	; (8000a74 <getNextAlarm+0x238>)
 80008d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	440b      	add	r3, r1
 80008e4:	3301      	adds	r3, #1
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].start.day;
 80008ea:	4962      	ldr	r1, [pc, #392]	; (8000a74 <getNextAlarm+0x238>)
 80008ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	440b      	add	r3, r1
 80008f8:	3302      	adds	r3, #2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].start.hour;
 80008fe:	495d      	ldr	r1, [pc, #372]	; (8000a74 <getNextAlarm+0x238>)
 8000900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	440b      	add	r3, r1
 800090c:	3303      	adds	r3, #3
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].start.minute;
 8000912:	4958      	ldr	r1, [pc, #352]	; (8000a74 <getNextAlarm+0x238>)
 8000914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	440b      	add	r3, r1
 8000920:	3304      	adds	r3, #4
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].start.second;
 8000926:	4953      	ldr	r1, [pc, #332]	; (8000a74 <getNextAlarm+0x238>)
 8000928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	440b      	add	r3, r1
 8000934:	3305      	adds	r3, #5
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 800093a:	2301      	movs	r3, #1
 800093c:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx - 1;
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	3b01      	subs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
			*inEvent = false;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	e068      	b.n	8000a1e <getNextAlarm+0x1e2>
		}

		// test if within event
		else if(compareDateTime(now, _calendarEvents[eventIdx].start) >= 0
 800094c:	4949      	ldr	r1, [pc, #292]	; (8000a74 <getNextAlarm+0x238>)
 800094e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000950:	4613      	mov	r3, r2
 8000952:	005b      	lsls	r3, r3, #1
 8000954:	4413      	add	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	440b      	add	r3, r1
 800095a:	cb0c      	ldmia	r3, {r2, r3}
 800095c:	f107 0118 	add.w	r1, r7, #24
 8000960:	c903      	ldmia	r1, {r0, r1}
 8000962:	f7ff ff19 	bl	8000798 <compareDateTime>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	db55      	blt.n	8000a18 <getNextAlarm+0x1dc>
				&& compareDateTime(now, _calendarEvents[eventIdx].end) < 0) {
 800096c:	4941      	ldr	r1, [pc, #260]	; (8000a74 <getNextAlarm+0x238>)
 800096e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	3308      	adds	r3, #8
 800097c:	3304      	adds	r3, #4
 800097e:	cb0c      	ldmia	r3, {r2, r3}
 8000980:	f107 0118 	add.w	r1, r7, #24
 8000984:	c903      	ldmia	r1, {r0, r1}
 8000986:	f7ff ff07 	bl	8000798 <compareDateTime>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	da43      	bge.n	8000a18 <getNextAlarm+0x1dc>
			// then the next alarm is the end of this event
			nextAlarmDateTime.year = _calendarEvents[eventIdx].end.year;
 8000990:	4938      	ldr	r1, [pc, #224]	; (8000a74 <getNextAlarm+0x238>)
 8000992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000994:	4613      	mov	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4413      	add	r3, r2
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	440b      	add	r3, r1
 800099e:	330c      	adds	r3, #12
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	743b      	strb	r3, [r7, #16]
			nextAlarmDateTime.month = _calendarEvents[eventIdx].end.month;
 80009a4:	4933      	ldr	r1, [pc, #204]	; (8000a74 <getNextAlarm+0x238>)
 80009a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	330d      	adds	r3, #13
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	747b      	strb	r3, [r7, #17]
			nextAlarmDateTime.day = _calendarEvents[eventIdx].end.day;
 80009b8:	492e      	ldr	r1, [pc, #184]	; (8000a74 <getNextAlarm+0x238>)
 80009ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	440b      	add	r3, r1
 80009c6:	330e      	adds	r3, #14
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	74bb      	strb	r3, [r7, #18]
			nextAlarmDateTime.hour = _calendarEvents[eventIdx].end.hour;
 80009cc:	4929      	ldr	r1, [pc, #164]	; (8000a74 <getNextAlarm+0x238>)
 80009ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	440b      	add	r3, r1
 80009da:	330f      	adds	r3, #15
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	74fb      	strb	r3, [r7, #19]
			nextAlarmDateTime.minute = _calendarEvents[eventIdx].end.minute;
 80009e0:	4924      	ldr	r1, [pc, #144]	; (8000a74 <getNextAlarm+0x238>)
 80009e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	440b      	add	r3, r1
 80009ee:	3310      	adds	r3, #16
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	753b      	strb	r3, [r7, #20]
			nextAlarmDateTime.second = _calendarEvents[eventIdx].end.second;
 80009f4:	491f      	ldr	r1, [pc, #124]	; (8000a74 <getNextAlarm+0x238>)
 80009f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	440b      	add	r3, r1
 8000a02:	3311      	adds	r3, #17
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	757b      	strb	r3, [r7, #21]

			// set found
			nextAlarmFound = true;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	77fb      	strb	r3, [r7, #31]
			currentIdx = eventIdx;
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	623b      	str	r3, [r7, #32]
			*inEvent = true;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e002      	b.n	8000a1e <getNextAlarm+0x1e2>
		}

		// traverse to next event
		else {
			eventIdx++;
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
	while (eventIdx < _numberEvents && !nextAlarmFound) {
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <getNextAlarm+0x23c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a24:	429a      	cmp	r2, r3
 8000a26:	da06      	bge.n	8000a36 <getNextAlarm+0x1fa>
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	f083 0301 	eor.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f47f af37 	bne.w	80008a4 <getNextAlarm+0x68>
		}
	}

	// If there is no next alarm, then return no alarm
	if (!nextAlarmFound) {
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	f083 0301 	eor.w	r3, r3, #1
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d007      	beq.n	8000a52 <getNextAlarm+0x216>
		dateTime = NULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
		*nowEventIdx = -1;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a4c:	601a      	str	r2, [r3, #0]
		return false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	e00b      	b.n	8000a6a <getNextAlarm+0x22e>
	}

	// Return the next alarm found.
	else {
		*dateTime = nextAlarmDateTime;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	461a      	mov	r2, r3
 8000a56:	f107 0310 	add.w	r3, r7, #16
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	6010      	str	r0, [r2, #0]
 8000a5e:	889b      	ldrh	r3, [r3, #4]
 8000a60:	8093      	strh	r3, [r2, #4]
		*nowEventIdx = currentIdx;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	6a3a      	ldr	r2, [r7, #32]
 8000a66:	601a      	str	r2, [r3, #0]
		return true;
 8000a68:	2301      	movs	r3, #1
	}
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	372c      	adds	r7, #44	; 0x2c
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd90      	pop	{r4, r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000090 	.word	0x20000090
 8000a78:	20000180 	.word	0x20000180

08000a7c <composeMessage>:
/*
 *
 */
void composeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
	memcpy(message, header, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	601a      	str	r2, [r3, #0]
	memcpy(message+UART_MESSAGE_HEADER_SIZE, body, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3304      	adds	r3, #4
 8000a96:	221c      	movs	r2, #28
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 fbde 	bl	800525c <memcpy>
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <decomposeMessage>:
/*
 *
 */
void decomposeMessage(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE],
		char message[UART_MESSAGE_SIZE])
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
	memcpy(header, message, UART_MESSAGE_HEADER_SIZE*sizeof(char));
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	601a      	str	r2, [r3, #0]
	memcpy(body, message+UART_MESSAGE_HEADER_SIZE, UART_MESSAGE_BODY_SIZE*sizeof(char));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	221c      	movs	r2, #28
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	68b8      	ldr	r0, [r7, #8]
 8000ac8:	f004 fbc8 	bl	800525c <memcpy>
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <com_session_init>:

/*
 *
 */
bool com_session_init(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	// initialize transport layer
	if (com_transport_init(huart))
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 fa0d 	bl	8000efc <com_transport_init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d007      	beq.n	8000af8 <com_session_init+0x24>
	{
		_sessionOpen = false;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <com_session_init+0x30>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
		_sessionInit = true;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <com_session_init+0x34>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	701a      	strb	r2, [r3, #0]
		return true;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <com_session_init+0x26>
	}

	else
	{
		return false;
 8000af8:	2300      	movs	r3, #0
	}
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000018c 	.word	0x2000018c
 8000b08:	2000018d 	.word	0x2000018d

08000b0c <start_session>:

/*
 *
 */
SESSION_STATUS start_session(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	SESSION_STATUS handshakeStatus;

	if (_sessionInit)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <start_session+0x48>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d016      	beq.n	8000b48 <start_session+0x3c>
	{
		if (!_sessionOpen)
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <start_session+0x4c>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f083 0301 	eor.w	r3, r3, #1
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00d      	beq.n	8000b44 <start_session+0x38>
		{
			handshakeStatus = _handshake(SESSION_START_TIMEOUT_MS);
 8000b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2c:	f000 f860 	bl	8000bf0 <_handshake>
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
			if (handshakeStatus == SESSION_OKAY)
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d102      	bne.n	8000b40 <start_session+0x34>
				_sessionOpen = true;
 8000b3a:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <start_session+0x4c>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
			return handshakeStatus;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	e002      	b.n	8000b4a <start_session+0x3e>
		}

		else
		{
			return SESSION_OKAY;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e000      	b.n	8000b4a <start_session+0x3e>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000b48:	2303      	movs	r3, #3
	}
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	2000018d 	.word	0x2000018d
 8000b58:	2000018c 	.word	0x2000018c

08000b5c <session_cycle>:

/*
 *
 */
SESSION_STATUS session_cycle(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	if (_sessionInit)
 8000b60:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <session_cycle+0x28>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d009      	beq.n	8000b7c <session_cycle+0x20>
	{
		if (_sessionOpen)
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <session_cycle+0x2c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d003      	beq.n	8000b78 <session_cycle+0x1c>
		{
			return _session_cycle();
 8000b70:	f000 f928 	bl	8000dc4 <_session_cycle>
 8000b74:	4603      	mov	r3, r0
 8000b76:	e002      	b.n	8000b7e <session_cycle+0x22>
		}

		else
		{
			return SESSION_NOT_OPEN;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	e000      	b.n	8000b7e <session_cycle+0x22>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000b7c:	2303      	movs	r3, #3
	}
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000018d 	.word	0x2000018d
 8000b88:	2000018c 	.word	0x2000018c

08000b8c <tell>:

/*
 *
 */
SESSION_STATUS tell(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
	TRANSPORT_STATUS transportStatus;

	if (_sessionInit)
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <tell+0x5c>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d01f      	beq.n	8000bde <tell+0x52>
	{
		if (_sessionOpen)
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <tell+0x60>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d019      	beq.n	8000bda <tell+0x4e>
		{
			// enqueue message
			if (queue_tx(header, body) != TRANSPORT_OKAY)
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f9c5 	bl	8000f38 <queue_tx>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <tell+0x2c>
			{
				return SESSION_BUSY;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e013      	b.n	8000be0 <tell+0x54>
			}

			// send message
			transportStatus = tx(TX_TIMEOUT_MS);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f000 fa17 	bl	8000fec <tx>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	73fb      	strb	r3, [r7, #15]

			if (transportStatus == TRANSPORT_OKAY)
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d101      	bne.n	8000bcc <tell+0x40>
			{
				return SESSION_OKAY;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e009      	b.n	8000be0 <tell+0x54>
			}
			else if (transportStatus == TRANSPORT_TIMEOUT)
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d101      	bne.n	8000bd6 <tell+0x4a>
			{
				return SESSION_TIMEOUT;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e004      	b.n	8000be0 <tell+0x54>
			}
			else // if (transportStatus == TRANSPORT_ERROR || transportStatus == TRANSPORT_BUSY)
			{
				return SESSION_ERROR;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e002      	b.n	8000be0 <tell+0x54>
			}
		}

		else
		{
			return SESSION_NOT_OPEN;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	e000      	b.n	8000be0 <tell+0x54>
		}
	}

	else
	{
		return SESSION_NOT_INIT;
 8000bde:	2303      	movs	r3, #3
	}
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	2000018d 	.word	0x2000018d
 8000bec:	2000018c 	.word	0x2000018c

08000bf0 <_handshake>:

/*
 *
 */
SESSION_STATUS _handshake(unsigned int timeout_ms)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08c      	sub	sp, #48	; 0x30
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	unsigned int state = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool error = false;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	bool success = false;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	TRANSPORT_STATUS transportStatus;
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
 8000c20:	615a      	str	r2, [r3, #20]

	while (!success && !error)
 8000c22:	e0a2      	b.n	8000d6a <_handshake+0x17a>
	{
		// state 0:  receive message
		if (state == 0)
 8000c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d106      	bne.n	8000c38 <_handshake+0x48>
		{
			transportStatus = rx(timeout_ms); // handshake timeout until start of handshake
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fa18 	bl	8001060 <rx>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c36:	e063      	b.n	8000d00 <_handshake+0x110>
		}
		// state 1: message received, dequeue
		else if (state == 1)
 8000c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10b      	bne.n	8000c56 <_handshake+0x66>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8000c3e:	f107 0208 	add.w	r2, r7, #8
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f99b 	bl	8000f84 <dequeue_rx>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c54:	e054      	b.n	8000d00 <_handshake+0x110>
		}
		// state 2: check if sync
		else if (state == 2)
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d10d      	bne.n	8000c78 <_handshake+0x88>
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNC, UART_MESSAGE_HEADER_SIZE))
 8000c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c60:	2204      	movs	r2, #4
 8000c62:	4955      	ldr	r1, [pc, #340]	; (8000db8 <_handshake+0x1c8>)
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 fb43 	bl	80052f0 <strncmp>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d047      	beq.n	8000d00 <_handshake+0x110>
			{
				error = true;
 8000c70:	2301      	movs	r3, #1
 8000c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000c76:	e043      	b.n	8000d00 <_handshake+0x110>
			}
		}
		// state 3: sync received, queue ack
		else if (state == 3)
 8000c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	d110      	bne.n	8000ca0 <_handshake+0xb0>
		{
			memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	221c      	movs	r2, #28
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 faf6 	bl	8005278 <memset>
			transportStatus = queue_tx(HANDSHAKE_HEADER_ACKN, messageBody);
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	4619      	mov	r1, r3
 8000c92:	484a      	ldr	r0, [pc, #296]	; (8000dbc <_handshake+0x1cc>)
 8000c94:	f000 f950 	bl	8000f38 <queue_tx>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000c9e:	e02f      	b.n	8000d00 <_handshake+0x110>
		}
		// state 4: send ack
		else if (state == 4)
 8000ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d106      	bne.n	8000cb4 <_handshake+0xc4>
		{
			transportStatus = tx(TX_TIMEOUT_MS);
 8000ca6:	2064      	movs	r0, #100	; 0x64
 8000ca8:	f000 f9a0 	bl	8000fec <tx>
 8000cac:	4603      	mov	r3, r0
 8000cae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000cb2:	e025      	b.n	8000d00 <_handshake+0x110>
		}
		// state 5: ack sent, receive message
		else if (state == 5)
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb6:	2b05      	cmp	r3, #5
 8000cb8:	d106      	bne.n	8000cc8 <_handshake+0xd8>
		{
			transportStatus = rx(RX_TIMEOUT_MS);
 8000cba:	20fa      	movs	r0, #250	; 0xfa
 8000cbc:	f000 f9d0 	bl	8001060 <rx>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000cc6:	e01b      	b.n	8000d00 <_handshake+0x110>
		}
		// state 6: dequeue message
		else if (state == 6)
 8000cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d10b      	bne.n	8000ce6 <_handshake+0xf6>
		{
			transportStatus = dequeue_rx(messageHeader, messageBody);
 8000cce:	f107 0208 	add.w	r2, r7, #8
 8000cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f953 	bl	8000f84 <dequeue_rx>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000ce4:	e00c      	b.n	8000d00 <_handshake+0x110>
		}
		// state 7: message received, check if syn ack
		else // if (state == 7)
		{
			if (strncmp(messageHeader, HANDSHAKE_HEADER_SYNACK, UART_MESSAGE_HEADER_SIZE))
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	2204      	movs	r2, #4
 8000cec:	4934      	ldr	r1, [pc, #208]	; (8000dc0 <_handshake+0x1d0>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f004 fafe 	bl	80052f0 <strncmp>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <_handshake+0x110>
			{
				error = true;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			}
		}


		// catch status codes and move through state machine
		if (transportStatus == TRANSPORT_OKAY)
 8000d00:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d12d      	bne.n	8000d64 <_handshake+0x174>
		{
			if (state == 0)
 8000d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d102      	bne.n	8000d14 <_handshake+0x124>
				state = 1;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d12:	e02a      	b.n	8000d6a <_handshake+0x17a>
			else if (state == 1)
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d102      	bne.n	8000d20 <_handshake+0x130>
				state = 2;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d1e:	e024      	b.n	8000d6a <_handshake+0x17a>
			else if (state == 2)
 8000d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d102      	bne.n	8000d2c <_handshake+0x13c>
				state = 3;
 8000d26:	2303      	movs	r3, #3
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d2a:	e01e      	b.n	8000d6a <_handshake+0x17a>
			else if (state == 3)
 8000d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d102      	bne.n	8000d38 <_handshake+0x148>
				state = 4;
 8000d32:	2304      	movs	r3, #4
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d36:	e018      	b.n	8000d6a <_handshake+0x17a>
			else if (state == 4)
 8000d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d102      	bne.n	8000d44 <_handshake+0x154>
				state = 5;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d42:	e012      	b.n	8000d6a <_handshake+0x17a>
			else if (state == 5)
 8000d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d46:	2b05      	cmp	r3, #5
 8000d48:	d102      	bne.n	8000d50 <_handshake+0x160>
				state = 6;
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d4e:	e00c      	b.n	8000d6a <_handshake+0x17a>
			else if (state == 6)
 8000d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d102      	bne.n	8000d5c <_handshake+0x16c>
				state = 7;
 8000d56:	2307      	movs	r3, #7
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d5a:	e006      	b.n	8000d6a <_handshake+0x17a>
			else // if (state == 7)
				success = true;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000d62:	e002      	b.n	8000d6a <_handshake+0x17a>
		}
		else
		{
			error = true;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (!success && !error)
 8000d6a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d6e:	f083 0301 	eor.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d007      	beq.n	8000d88 <_handshake+0x198>
 8000d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f47f af4e 	bne.w	8000c24 <_handshake+0x34>
		}
	}


	// report status of handshake
	if (success && !error)
 8000d88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d008      	beq.n	8000da2 <_handshake+0x1b2>
 8000d90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d94:	f083 0301 	eor.w	r3, r3, #1
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <_handshake+0x1b2>
	{
		return SESSION_OKAY;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e006      	b.n	8000db0 <_handshake+0x1c0>
	}
	else
	{
		if (transportStatus == TRANSPORT_TIMEOUT)
 8000da2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d101      	bne.n	8000dae <_handshake+0x1be>
		{
			return SESSION_TIMEOUT;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <_handshake+0x1c0>
		}
		else
		{
			return SESSION_ERROR;
 8000dae:	2302      	movs	r3, #2
		}
	}
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3730      	adds	r7, #48	; 0x30
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	08005bac 	.word	0x08005bac
 8000dbc:	08005bb4 	.word	0x08005bb4
 8000dc0:	08005bbc 	.word	0x08005bbc

08000dc4 <_session_cycle>:

/*
 *
 */
SESSION_STATUS _session_cycle(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
	char messageHeader[UART_MESSAGE_HEADER_SIZE] = {0};
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	615a      	str	r2, [r3, #20]
	SESSION_STATUS status;

	// Perform Rx message phase of session cycle.
	status = _listen();
 8000de4:	f000 f83e 	bl	8000e64 <_listen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status == SESSION_ERROR)
 8000dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d101      	bne.n	8000dfa <_session_cycle+0x36>
	{
		return SESSION_ERROR;
 8000df6:	2302      	movs	r3, #2
 8000df8:	e02a      	b.n	8000e50 <_session_cycle+0x8c>
	}

	// If a message was received while listening.
	else if (status == SESSION_OKAY)
 8000dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d125      	bne.n	8000e4e <_session_cycle+0x8a>
	{
		// dequeue received message
		dequeue_rx(messageHeader, messageBody);
 8000e02:	1d3a      	adds	r2, r7, #4
 8000e04:	f107 0320 	add.w	r3, r7, #32
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f8ba 	bl	8000f84 <dequeue_rx>

		// Check if disconnection handshake message was received.
		// If so, set session open flag to false.
		if (!strncmp(messageHeader, HANDSHAKE_HEADER_DISC, UART_MESSAGE_HEADER_SIZE))
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	2204      	movs	r2, #4
 8000e16:	4910      	ldr	r1, [pc, #64]	; (8000e58 <_session_cycle+0x94>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f004 fa69 	bl	80052f0 <strncmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d103      	bne.n	8000e2c <_session_cycle+0x68>
		{
			_sessionOpen = false;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <_session_cycle+0x98>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e010      	b.n	8000e4e <_session_cycle+0x8a>
		}

		// Check if echo command.
		else if (!strncmp(messageHeader, ECHO_HEADER, UART_MESSAGE_HEADER_SIZE))
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	2204      	movs	r2, #4
 8000e32:	490b      	ldr	r1, [pc, #44]	; (8000e60 <_session_cycle+0x9c>)
 8000e34:	4618      	mov	r0, r3
 8000e36:	f004 fa5b 	bl	80052f0 <strncmp>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d106      	bne.n	8000e4e <_session_cycle+0x8a>
		{
			tell(messageHeader, messageBody);
 8000e40:	1d3a      	adds	r2, r7, #4
 8000e42:	f107 0320 	add.w	r3, r7, #32
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe9f 	bl	8000b8c <tell>
		}
	}

	return SESSION_OKAY;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	08005bc4 	.word	0x08005bc4
 8000e5c:	2000018c 	.word	0x2000018c
 8000e60:	08005bcc 	.word	0x08005bcc

08000e64 <_listen>:

/*
 *
 */
SESSION_STATUS _listen(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
	TRANSPORT_STATUS transportStatus;
	char messageBody[UART_MESSAGE_BODY_SIZE] = {0};
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
 8000e7c:	615a      	str	r2, [r3, #20]

	// CTS Window
	// Tx the CTS message to signal to desktop that the MCU is about to be ready to
	// receive a message.
	memset(messageBody,0,UART_MESSAGE_BODY_SIZE);
 8000e7e:	463b      	mov	r3, r7
 8000e80:	221c      	movs	r2, #28
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 f9f7 	bl	8005278 <memset>
	snprintf(messageBody, UART_MESSAGE_BODY_SIZE, "Clear to send!\n");
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <_listen+0x90>)
 8000e8e:	211c      	movs	r1, #28
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 f9f9 	bl	8005288 <sniprintf>
	transportStatus = queue_tx(CTS_HEADER, messageBody);
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <_listen+0x94>)
 8000e9c:	f000 f84c 	bl	8000f38 <queue_tx>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	77fb      	strb	r3, [r7, #31]

	if (transportStatus != TRANSPORT_OKAY)
 8000ea4:	7ffb      	ldrb	r3, [r7, #31]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <_listen+0x4a>
	{
		return SESSION_ERROR;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e01e      	b.n	8000eec <_listen+0x88>
	}

	transportStatus = tx(TX_TIMEOUT_MS);
 8000eae:	2064      	movs	r0, #100	; 0x64
 8000eb0:	f000 f89c 	bl	8000fec <tx>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	77fb      	strb	r3, [r7, #31]

	if (transportStatus == TRANSPORT_TIMEOUT)
 8000eb8:	7ffb      	ldrb	r3, [r7, #31]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <_listen+0x5e>
	{
		return SESSION_TIMEOUT;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e014      	b.n	8000eec <_listen+0x88>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8000ec2:	7ffb      	ldrb	r3, [r7, #31]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <_listen+0x68>
	{
		return SESSION_ERROR;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	e00f      	b.n	8000eec <_listen+0x88>
	}

	// Message Window
	// Rx to receive a packet from the desktop.
	transportStatus = rx(RX_TIMEOUT_MS);
 8000ecc:	20fa      	movs	r0, #250	; 0xfa
 8000ece:	f000 f8c7 	bl	8001060 <rx>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	77fb      	strb	r3, [r7, #31]

	if (transportStatus == TRANSPORT_TIMEOUT)
 8000ed6:	7ffb      	ldrb	r3, [r7, #31]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <_listen+0x7c>
	{
		return SESSION_TIMEOUT;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e005      	b.n	8000eec <_listen+0x88>
	}
	else if (transportStatus != TRANSPORT_OKAY)
 8000ee0:	7ffb      	ldrb	r3, [r7, #31]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <_listen+0x86>
	{
		return SESSION_ERROR;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e000      	b.n	8000eec <_listen+0x88>
	}

	return SESSION_OKAY;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3720      	adds	r7, #32
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	08005bd4 	.word	0x08005bd4
 8000ef8:	08005be4 	.word	0x08005be4

08000efc <com_transport_init>:

/*
 *
 */
bool com_transport_init(UART_HandleTypeDef* huart)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	// If the programmer didn't pass in a null pointer
	if (huart != NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00a      	beq.n	8000f20 <com_transport_init+0x24>
	{
		_uartHandle = huart;
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <com_transport_init+0x30>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6013      	str	r3, [r2, #0]
		_txBuffer_full = false;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <com_transport_init+0x34>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
		_rxBuffer_full = false;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <com_transport_init+0x38>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		return true;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <com_transport_init+0x26>
	}

	else
	{
		return false;
 8000f20:	2300      	movs	r3, #0
	}
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	20000190 	.word	0x20000190
 8000f30:	200001d4 	.word	0x200001d4
 8000f34:	200001d5 	.word	0x200001d5

08000f38 <queue_tx>:

/*
 *
 */
TRANSPORT_STATUS queue_tx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	if (IS_LAYER_INIT)
 8000f42:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <queue_tx+0x40>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d010      	beq.n	8000f6c <queue_tx+0x34>
	{
		if (_txBuffer_full)
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <queue_tx+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <queue_tx+0x20>
		{
			return TRANSPORT_TX_FULL;
 8000f54:	2304      	movs	r3, #4
 8000f56:	e00a      	b.n	8000f6e <queue_tx+0x36>
		}

		else
		{
			// Compose header and body into one message
			composeMessage(header, body, _txBuffer);
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <queue_tx+0x48>)
 8000f5a:	6839      	ldr	r1, [r7, #0]
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff fd8d 	bl	8000a7c <composeMessage>
			_txBuffer_full = true;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <queue_tx+0x44>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]

			return TRANSPORT_OKAY;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e000      	b.n	8000f6e <queue_tx+0x36>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000f6c:	2308      	movs	r3, #8
	}
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000190 	.word	0x20000190
 8000f7c:	200001d4 	.word	0x200001d4
 8000f80:	20000194 	.word	0x20000194

08000f84 <dequeue_rx>:

/*
 *
 */
TRANSPORT_STATUS dequeue_rx(char header[UART_MESSAGE_HEADER_SIZE], char body[UART_MESSAGE_BODY_SIZE])
{
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
	char message[UART_MESSAGE_SIZE];

	if (IS_LAYER_INIT)
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <dequeue_rx+0x5c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d01f      	beq.n	8000fd6 <dequeue_rx+0x52>
	{
		if (!_rxBuffer_full)
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <dequeue_rx+0x60>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f083 0301 	eor.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <dequeue_rx+0x26>
		{
			return TRANSPORT_RX_EMPTY;
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e016      	b.n	8000fd8 <dequeue_rx+0x54>
		}

		else
		{
			// retrieve message from buffer
			memcpy(message, _rxBuffer, UART_MESSAGE_SIZE*sizeof(char));
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <dequeue_rx+0x64>)
 8000fac:	f107 0408 	add.w	r4, r7, #8
 8000fb0:	461d      	mov	r5, r3
 8000fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			_rxBuffer_full = false;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <dequeue_rx+0x60>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]

			// decompose header and body from message
			decomposeMessage(header, body, message);
 8000fc4:	f107 0308 	add.w	r3, r7, #8
 8000fc8:	461a      	mov	r2, r3
 8000fca:	6839      	ldr	r1, [r7, #0]
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff fd6b 	bl	8000aa8 <decomposeMessage>

			return TRANSPORT_OKAY;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <dequeue_rx+0x54>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 8000fd6:	2308      	movs	r3, #8
	}
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe0:	20000190 	.word	0x20000190
 8000fe4:	200001d5 	.word	0x200001d5
 8000fe8:	200001b4 	.word	0x200001b4

08000fec <tx>:

/*
 *
 */
TRANSPORT_STATUS tx(uint32_t timeout_ms)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <tx+0x68>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d026      	beq.n	800104a <tx+0x5e>
	{
		// only transmit if a message has been queued
		if (!_txBuffer_full)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <tx+0x6c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <tx+0x24>
		{
			return TRANSPORT_TX_EMPTY;
 800100c:	2305      	movs	r3, #5
 800100e:	e01d      	b.n	800104c <tx+0x60>
		}

		// transmit the message
		hal_status = HAL_UART_Transmit(_uartHandle, (uint8_t*)_txBuffer, UART_MESSAGE_SIZE, timeout_ms);
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <tx+0x68>)
 8001012:	6818      	ldr	r0, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2220      	movs	r2, #32
 8001018:	4910      	ldr	r1, [pc, #64]	; (800105c <tx+0x70>)
 800101a:	f003 fa7f 	bl	800451c <HAL_UART_Transmit>
 800101e:	4603      	mov	r3, r0
 8001020:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <tx+0x40>
		{
			return TRANSPORT_ERROR;
 8001028:	2302      	movs	r3, #2
 800102a:	e00f      	b.n	800104c <tx+0x60>
		}
		else if (hal_status == HAL_TIMEOUT)
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	2b03      	cmp	r3, #3
 8001030:	d101      	bne.n	8001036 <tx+0x4a>
		{
			return TRANSPORT_TIMEOUT;
 8001032:	2301      	movs	r3, #1
 8001034:	e00a      	b.n	800104c <tx+0x60>
		}
		else if (hal_status == HAL_BUSY)
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d101      	bne.n	8001040 <tx+0x54>
		{
			return TRANSPORT_BUSY;
 800103c:	2303      	movs	r3, #3
 800103e:	e005      	b.n	800104c <tx+0x60>
		}
		else
		{
			_txBuffer_full = false;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <tx+0x6c>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <tx+0x60>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 800104a:	2308      	movs	r3, #8
	}
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000190 	.word	0x20000190
 8001058:	200001d4 	.word	0x200001d4
 800105c:	20000194 	.word	0x20000194

08001060 <rx>:

/*
 *
 */
TRANSPORT_STATUS rx(uint32_t timeout_ms)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef hal_status;

	if (IS_LAYER_INIT)
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <rx+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d023      	beq.n	80010b8 <rx+0x58>
	{
		// only receive if the buffer is empty
		if (_rxBuffer_full)
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <rx+0x68>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <rx+0x1e>
		{
			return TRANSPORT_RX_FULL;
 800107a:	2307      	movs	r3, #7
 800107c:	e01d      	b.n	80010ba <rx+0x5a>
		}

		// receive a message
		hal_status = HAL_UART_Receive(_uartHandle, (uint8_t*)_rxBuffer, UART_MESSAGE_SIZE, timeout_ms);
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <rx+0x64>)
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2220      	movs	r2, #32
 8001086:	4911      	ldr	r1, [pc, #68]	; (80010cc <rx+0x6c>)
 8001088:	f003 face 	bl	8004628 <HAL_UART_Receive>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]

		// alias the has status with transport layer status
		if (hal_status == HAL_ERROR)
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <rx+0x3a>
		{
			return TRANSPORT_ERROR;
 8001096:	2302      	movs	r3, #2
 8001098:	e00f      	b.n	80010ba <rx+0x5a>
		}
		else if (hal_status == HAL_TIMEOUT)
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d101      	bne.n	80010a4 <rx+0x44>
		{
			return TRANSPORT_TIMEOUT;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e00a      	b.n	80010ba <rx+0x5a>
		}
		else if (hal_status == HAL_BUSY)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d101      	bne.n	80010ae <rx+0x4e>
		{
			return TRANSPORT_BUSY;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e005      	b.n	80010ba <rx+0x5a>
		}
		else
		{
			_rxBuffer_full = true;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <rx+0x68>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	701a      	strb	r2, [r3, #0]
			return TRANSPORT_OKAY;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e000      	b.n	80010ba <rx+0x5a>
		}
	}

	else
	{
		return TRANSPORT_NOT_INIT;
 80010b8:	2308      	movs	r3, #8
	}
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000190 	.word	0x20000190
 80010c8:	200001d5 	.word	0x200001d5
 80010cc:	200001b4 	.word	0x200001b4

080010d0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <LL_AHB2_GRP1_IsEnabledClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_AHB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 8001108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4013      	ands	r3, r2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	d101      	bne.n	800111c <LL_AHB2_GRP1_IsEnabledClock+0x1c>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <LL_AHB2_GRP1_IsEnabledClock+0x1e>
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001134:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	43db      	mvns	r3, r3
 800113a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800113e:	4013      	ands	r3, r2
 8001140:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <activate_led>:

/* Activate LED
 *
 * Turns on an LED on the Nucleo board.
 */
void activate_led(LED_COLOR led) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  // Start the GPIO clock the LED is attached to.
  gpioB_isEnabled = __HAL_RCC_GPIOB_IS_CLK_ENABLED();
 8001156:	2002      	movs	r0, #2
 8001158:	f7ff ffd2 	bl	8001100 <LL_AHB2_GRP1_IsEnabledClock>
 800115c:	4603      	mov	r3, r0
 800115e:	4a13      	ldr	r2, [pc, #76]	; (80011ac <activate_led+0x60>)
 8001160:	6013      	str	r3, [r2, #0]
  if (!gpioB_isEnabled) {
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <activate_led+0x60>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <activate_led+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	2002      	movs	r0, #2
 800116c:	f7ff ffb0 	bl	80010d0 <LL_AHB2_GRP1_EnableClock>
  }

  // Initialize the LED to turn on.
  GPIO_InitTypeDef led_gpio_params = {
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	2301      	movs	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	2302      	movs	r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
      .Pin = led,
      .Mode = GPIO_MODE_OUTPUT_PP,
      .Pull = GPIO_NOPULL,
      .Speed = GPIO_SPEED_FREQ_HIGH
  };
  HAL_GPIO_Init(GPIOB, &led_gpio_params);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	4807      	ldr	r0, [pc, #28]	; (80011b0 <activate_led+0x64>)
 8001194:	f000 ff04 	bl	8001fa0 <HAL_GPIO_Init>

  // Turn LED on.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_SET);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	2201      	movs	r2, #1
 800119c:	4619      	mov	r1, r3
 800119e:	4804      	ldr	r0, [pc, #16]	; (80011b0 <activate_led+0x64>)
 80011a0:	f001 f92c 	bl	80023fc <HAL_GPIO_WritePin>
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200001d8 	.word	0x200001d8
 80011b0:	48000400 	.word	0x48000400

080011b4 <deactivate_led>:

/* Deactivare LED
 *
 * Turns off an LED on the Nucleo board.
 */
void deactivate_led(LED_COLOR led) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  // Turn LED off.
  HAL_GPIO_WritePin(GPIOB, led, GPIO_PIN_RESET);
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <deactivate_led+0x38>)
 80011c6:	f001 f919 	bl	80023fc <HAL_GPIO_WritePin>

  // Deinitialize the LED.
  HAL_GPIO_DeInit(GPIOB, led);
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <deactivate_led+0x38>)
 80011d0:	f001 f846 	bl	8002260 <HAL_GPIO_DeInit>

  // Disable the GPIO clock the LED is attached to.
  if (!gpioB_isEnabled) {
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <deactivate_led+0x3c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d102      	bne.n	80011e2 <deactivate_led+0x2e>
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80011dc:	2002      	movs	r0, #2
 80011de:	f7ff ffa3 	bl	8001128 <LL_AHB2_GRP1_DisableClock>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	48000400 	.word	0x48000400
 80011f0:	200001d8 	.word	0x200001d8

080011f4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001204:	f023 0218 	bic.w	r2, r3, #24
 8001208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4313      	orrs	r3, r2
 8001210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <LL_AHB2_GRP1_EnableClock>:
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800122c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4313      	orrs	r3, r2
 8001234:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4013      	ands	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <HAL_RTC_AlarmAEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
	// call ISR for handling calendar events
	calendar_AlarmA_ISR();
 8001256:	f7ff fa93 	bl	8000780 <calendar_AlarmA_ISR>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126a:	f000 fd17 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126e:	f000 f84b 	bl	8001308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 f99b 	bl	80015ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001276:	f000 f943 	bl	8001500 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800127a:	f000 f8a3 	bl	80013c4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Boot CPU2 */
  HAL_PWREx_ReleaseCore(PWR_CORE_CPU2);
 800127e:	2001      	movs	r0, #1
 8001280:	f001 f8fc 	bl	800247c <HAL_PWREx_ReleaseCore>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // initialize the desktop communication module (doesn't establish connection!)
  com_session_init(&huart2);
 8001284:	481e      	ldr	r0, [pc, #120]	; (8001300 <main+0x9c>)
 8001286:	f7ff fc25 	bl	8000ad4 <com_session_init>

  // initialize calendar
  calendar_init(&hrtc);
 800128a:	481e      	ldr	r0, [pc, #120]	; (8001304 <main+0xa0>)
 800128c:	f7ff f950 	bl	8000530 <calendar_init>

  // set calendar time
  DateTime now = {
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	809a      	strh	r2, [r3, #4]
		  .day = 0,
		  .hour = 0,
		  .minute = 0,
		  .second = 0
  };
  calendar_setDateTime(now);
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012a2:	f7ff f955 	bl	8000550 <calendar_setDateTime>

  // start calendar
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	202a      	movs	r0, #42	; 0x2a
 80012ac:	f000 fe43 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80012b0:	202a      	movs	r0, #42	; 0x2a
 80012b2:	f000 fe5a 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  calendar_start();
 80012b6:	f7ff f961 	bl	800057c <calendar_start>

  // begin listening for messages from desktop
  if (start_session() == SESSION_OKAY)
 80012ba:	f7ff fc27 	bl	8000b0c <start_session>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <main+0x68>
  {
	  activate_led(GREEN_LED);
 80012c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012c8:	f7ff ff40 	bl	800114c <activate_led>
  char messageHeader[UART_MESSAGE_HEADER_SIZE];
  char messageBody[UART_MESSAGE_BODY_SIZE];
  while (1)
  {
	  // handle a calendar alarm event
	  calendar_handleAlarm();
 80012cc:	f7ff f994 	bl	80005f8 <calendar_handleAlarm>

	  // try connection if not present
	  if (start_session() == SESSION_OKAY)
 80012d0:	f7ff fc1c 	bl	8000b0c <start_session>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <main+0x7e>
	  {
		  activate_led(GREEN_LED);
 80012da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012de:	f7ff ff35 	bl	800114c <activate_led>
	  }

	  // if message present, handle message
	  if (session_cycle() != SESSION_OKAY)
 80012e2:	f7ff fc3b 	bl	8000b5c <session_cycle>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <main+0x92>
	  {
		  activate_led(RED_LED);
 80012ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012f0:	f7ff ff2c 	bl	800114c <activate_led>
 80012f4:	e7ea      	b.n	80012cc <main+0x68>
	  }
	  else
	  {
		  deactivate_led(RED_LED);
 80012f6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012fa:	f7ff ff5b 	bl	80011b4 <deactivate_led>
	  calendar_handleAlarm();
 80012fe:	e7e5      	b.n	80012cc <main+0x68>
 8001300:	20000214 	.word	0x20000214
 8001304:	200001dc 	.word	0x200001dc

08001308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b09a      	sub	sp, #104	; 0x68
 800130c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	2248      	movs	r2, #72	; 0x48
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f003 ffae 	bl	8005278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800132e:	f001 f87d 	bl	800242c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001332:	2000      	movs	r0, #0
 8001334:	f7ff ff5e 	bl	80011f4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <SystemClock_Config+0xb8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001340:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <SystemClock_Config+0xb8>)
 8001342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <SystemClock_Config+0xb8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001354:	232c      	movs	r3, #44	; 0x2c
 8001356:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001358:	2381      	movs	r3, #129	; 0x81
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800135c:	2301      	movs	r3, #1
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001360:	2300      	movs	r3, #0
 8001362:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001364:	2360      	movs	r3, #96	; 0x60
 8001366:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001370:	2300      	movs	r3, #0
 8001372:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	f107 0320 	add.w	r3, r7, #32
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fb41 	bl	8002a00 <HAL_RCC_OscConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001384:	f000 f91f 	bl	80015c6 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK2
 8001388:	236f      	movs	r3, #111	; 0x6f
 800138a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 feab 	bl	8003104 <HAL_RCC_ClockConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013b4:	f000 f907 	bl	80015c6 <Error_Handler>
  }
}
 80013b8:	bf00      	nop
 80013ba:	3768      	adds	r7, #104	; 0x68
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58000400 	.word	0x58000400

080013c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b092      	sub	sp, #72	; 0x48
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80013da:	2300      	movs	r3, #0
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	222c      	movs	r2, #44	; 0x2c
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 ff47 	bl	8005278 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013ea:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <MX_RTC_Init+0x134>)
 80013ec:	4a43      	ldr	r2, [pc, #268]	; (80014fc <MX_RTC_Init+0x138>)
 80013ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013f0:	4b41      	ldr	r3, [pc, #260]	; (80014f8 <MX_RTC_Init+0x134>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013f6:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <MX_RTC_Init+0x134>)
 80013f8:	227f      	movs	r2, #127	; 0x7f
 80013fa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013fc:	4b3e      	ldr	r3, [pc, #248]	; (80014f8 <MX_RTC_Init+0x134>)
 80013fe:	22ff      	movs	r2, #255	; 0xff
 8001400:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001402:	4b3d      	ldr	r3, [pc, #244]	; (80014f8 <MX_RTC_Init+0x134>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001408:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <MX_RTC_Init+0x134>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800140e:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <MX_RTC_Init+0x134>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <MX_RTC_Init+0x134>)
 8001416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800141a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800141c:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <MX_RTC_Init+0x134>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001422:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <MX_RTC_Init+0x134>)
 8001424:	2200      	movs	r2, #0
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001428:	4833      	ldr	r0, [pc, #204]	; (80014f8 <MX_RTC_Init+0x134>)
 800142a:	f002 fb45 	bl	8003ab8 <HAL_RTC_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8001434:	f000 f8c7 	bl	80015c6 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800144a:	2300      	movs	r3, #0
 800144c:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001452:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001456:	2201      	movs	r2, #1
 8001458:	4619      	mov	r1, r3
 800145a:	4827      	ldr	r0, [pc, #156]	; (80014f8 <MX_RTC_Init+0x134>)
 800145c:	f002 fbae 	bl	8003bbc <HAL_RTC_SetTime>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8001466:	f000 f8ae 	bl	80015c6 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800146a:	2301      	movs	r3, #1
 800146c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001470:	2301      	movs	r3, #1
 8001472:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8001476:	2301      	movs	r3, #1
 8001478:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001486:	2201      	movs	r2, #1
 8001488:	4619      	mov	r1, r3
 800148a:	481b      	ldr	r0, [pc, #108]	; (80014f8 <MX_RTC_Init+0x134>)
 800148c:	f002 fc94 	bl	8003db8 <HAL_RTC_SetDate>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8001496:	f000 f896 	bl	80015c6 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800149a:	2300      	movs	r3, #0
 800149c:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800149e:	2300      	movs	r3, #0
 80014a0:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80014c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2201      	movs	r2, #1
 80014ce:	4619      	mov	r1, r3
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <MX_RTC_Init+0x134>)
 80014d2:	f002 fd45 	bl	8003f60 <HAL_RTC_SetAlarm_IT>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80014dc:	f000 f873 	bl	80015c6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2100      	movs	r1, #0
 80014e4:	202a      	movs	r0, #42	; 0x2a
 80014e6:	f000 fd26 	bl	8001f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80014ea:	202a      	movs	r0, #42	; 0x2a
 80014ec:	f000 fd3d 	bl	8001f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE END RTC_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3748      	adds	r7, #72	; 0x48
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200001dc 	.word	0x200001dc
 80014fc:	40002800 	.word	0x40002800

08001500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001506:	4a28      	ldr	r2, [pc, #160]	; (80015a8 <MX_USART2_UART_Init+0xa8>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 800150c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 800151a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 8001520:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001522:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001526:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 800152a:	220c      	movs	r2, #12
 800152c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001548:	2230      	movs	r2, #48	; 0x30
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 800154e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001552:	63da      	str	r2, [r3, #60]	; 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155c:	4811      	ldr	r0, [pc, #68]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 800155e:	f002 ff8d 	bl	800447c <HAL_UART_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001568:	f000 f82d 	bl	80015c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	480d      	ldr	r0, [pc, #52]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001570:	f003 fd81 	bl	8005076 <HAL_UARTEx_SetTxFifoThreshold>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800157a:	f000 f824 	bl	80015c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4808      	ldr	r0, [pc, #32]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001582:	f003 fdb6 	bl	80050f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800158c:	f000 f81b 	bl	80015c6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_USART2_UART_Init+0xa4>)
 8001592:	f003 fd38 	bl	8005006 <HAL_UARTEx_DisableFifoMode>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART2_UART_Init+0xa0>
  {
    Error_Handler();
 800159c:	f000 f813 	bl	80015c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000214 	.word	0x20000214
 80015a8:	40004400 	.word	0x40004400

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fe34 	bl	800121e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	2004      	movs	r0, #4
 80015b8:	f7ff fe31 	bl	800121e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	2002      	movs	r0, #2
 80015be:	f7ff fe2e 	bl	800121e <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ca:	b672      	cpsid	i
}
 80015cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ce:	e7fe      	b.n	80015ce <Error_Handler+0x8>

080015d0 <rtcAlarmControl_init>:


/*
 *
 */
void rtcAlarmControl_init(RTC_HandleTypeDef* hrtc) {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	_rtc_handle = hrtc;
 80015d8:	4a03      	ldr	r2, [pc, #12]	; (80015e8 <rtcAlarmControl_init+0x18>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	200002a8 	.word	0x200002a8

080015ec <setDateTime>:


/*
 *
 */
void setDateTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	4611      	mov	r1, r2
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	4603      	mov	r3, r0
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	460b      	mov	r3, r1
 8001604:	717b      	strb	r3, [r7, #5]
 8001606:	4613      	mov	r3, r2
 8001608:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;

  date.Year = ((year/10) << 4) | (year % 10);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4a5a      	ldr	r2, [pc, #360]	; (8001778 <setDateTime+0x18c>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	08db      	lsrs	r3, r3, #3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	b258      	sxtb	r0, r3
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	4b56      	ldr	r3, [pc, #344]	; (8001778 <setDateTime+0x18c>)
 800161e:	fba3 1302 	umull	r1, r3, r3, r2
 8001622:	08d9      	lsrs	r1, r3, #3
 8001624:	460b      	mov	r3, r1
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	b25b      	sxtb	r3, r3
 8001632:	4303      	orrs	r3, r0
 8001634:	b25b      	sxtb	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	77fb      	strb	r3, [r7, #31]
  date.Month = ((month/10) << 4) | (month % 10);
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	4a4e      	ldr	r2, [pc, #312]	; (8001778 <setDateTime+0x18c>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	08db      	lsrs	r3, r3, #3
 8001644:	b2db      	uxtb	r3, r3
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	b258      	sxtb	r0, r3
 800164a:	79ba      	ldrb	r2, [r7, #6]
 800164c:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <setDateTime+0x18c>)
 800164e:	fba3 1302 	umull	r1, r3, r3, r2
 8001652:	08d9      	lsrs	r1, r3, #3
 8001654:	460b      	mov	r3, r1
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	b25b      	sxtb	r3, r3
 8001662:	4303      	orrs	r3, r0
 8001664:	b25b      	sxtb	r3, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	777b      	strb	r3, [r7, #29]
  date.Date = ((day/10) << 4) | (day % 10);
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	4a42      	ldr	r2, [pc, #264]	; (8001778 <setDateTime+0x18c>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	08db      	lsrs	r3, r3, #3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	b258      	sxtb	r0, r3
 800167a:	797a      	ldrb	r2, [r7, #5]
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <setDateTime+0x18c>)
 800167e:	fba3 1302 	umull	r1, r3, r3, r2
 8001682:	08d9      	lsrs	r1, r3, #3
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	b25b      	sxtb	r3, r3
 8001692:	4303      	orrs	r3, r0
 8001694:	b25b      	sxtb	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	77bb      	strb	r3, [r7, #30]
  date.WeekDay = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	773b      	strb	r3, [r7, #28]
  time.Hours = ((hour/10) << 4) | (hour % 10);
 800169e:	793b      	ldrb	r3, [r7, #4]
 80016a0:	4a35      	ldr	r2, [pc, #212]	; (8001778 <setDateTime+0x18c>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	b258      	sxtb	r0, r3
 80016ae:	793a      	ldrb	r2, [r7, #4]
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <setDateTime+0x18c>)
 80016b2:	fba3 1302 	umull	r1, r3, r3, r2
 80016b6:	08d9      	lsrs	r1, r3, #3
 80016b8:	460b      	mov	r3, r1
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	4303      	orrs	r3, r0
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	723b      	strb	r3, [r7, #8]
  time.Minutes = ((minute/10) << 4) | (minute % 10);
 80016ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <setDateTime+0x18c>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	08db      	lsrs	r3, r3, #3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	011b      	lsls	r3, r3, #4
 80016de:	b258      	sxtb	r0, r3
 80016e0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80016e4:	4b24      	ldr	r3, [pc, #144]	; (8001778 <setDateTime+0x18c>)
 80016e6:	fba3 1302 	umull	r1, r3, r3, r2
 80016ea:	08d9      	lsrs	r1, r3, #3
 80016ec:	460b      	mov	r3, r1
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	4303      	orrs	r3, r0
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	727b      	strb	r3, [r7, #9]
  time.Seconds = ((second/10) << 4) | (second % 10);
 8001702:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <setDateTime+0x18c>)
 8001708:	fba2 2303 	umull	r2, r3, r2, r3
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	b258      	sxtb	r0, r3
 8001714:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001718:	4b17      	ldr	r3, [pc, #92]	; (8001778 <setDateTime+0x18c>)
 800171a:	fba3 1302 	umull	r1, r3, r3, r2
 800171e:	08d9      	lsrs	r1, r3, #3
 8001720:	460b      	mov	r3, r1
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	b25b      	sxtb	r3, r3
 800172e:	4303      	orrs	r3, r0
 8001730:	b25b      	sxtb	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	72bb      	strb	r3, [r7, #10]

  // Set the date.
  if (HAL_RTC_SetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <setDateTime+0x190>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f107 011c 	add.w	r1, r7, #28
 800173e:	2201      	movs	r2, #1
 8001740:	4618      	mov	r0, r3
 8001742:	f002 fb39 	bl	8003db8 <HAL_RTC_SetDate>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <setDateTime+0x166>
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 8001750:	e7fe      	b.n	8001750 <setDateTime+0x164>
  }

  // Set the time.
  if (HAL_RTC_SetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <setDateTime+0x190>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f107 0108 	add.w	r1, r7, #8
 800175a:	2201      	movs	r2, #1
 800175c:	4618      	mov	r0, r3
 800175e:	f002 fa2d 	bl	8003bbc <HAL_RTC_SetTime>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <setDateTime+0x182>
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 800176c:	e7fe      	b.n	800176c <setDateTime+0x180>
  }
}
 800176e:	bf00      	nop
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd90      	pop	{r4, r7, pc}
 8001776:	bf00      	nop
 8001778:	cccccccd 	.word	0xcccccccd
 800177c:	200002a8 	.word	0x200002a8

08001780 <getDateTime>:


/*
 *
 */
void getDateTime(uint8_t* year, uint8_t* month, uint8_t* day, uint8_t* hour, uint8_t* minute, uint8_t* second) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
  RTC_TimeTypeDef time = {0};
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef date = {0};
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]

  // Get the time and the date.
  if(HAL_RTC_GetTime(_rtc_handle, &time, RTC_FORMAT) != HAL_OK) {
 80017a2:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <getDateTime+0x124>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f107 0114 	add.w	r1, r7, #20
 80017aa:	2201      	movs	r2, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 faa1 	bl	8003cf4 <HAL_RTC_GetTime>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <getDateTime+0x3e>
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80017bc:	e7fe      	b.n	80017bc <getDateTime+0x3c>
  }
  if(HAL_RTC_GetDate(_rtc_handle, &date, RTC_FORMAT) != HAL_OK) {
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <getDateTime+0x124>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f107 0110 	add.w	r1, r7, #16
 80017c6:	2201      	movs	r2, #1
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fb7b 	bl	8003ec4 <HAL_RTC_GetDate>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d002      	beq.n	80017da <getDateTime+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
    __disable_irq();
    while (1)
    	(void)0;
 80017d8:	e7fe      	b.n	80017d8 <getDateTime+0x58>
  }

  // Return through parameters
  *year = ((date.Year & 0xF0) >> 4) * 10 + (date.Year & 0x0F);
 80017da:	7cfb      	ldrb	r3, [r7, #19]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	7cfb      	ldrb	r3, [r7, #19]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	701a      	strb	r2, [r3, #0]
  *month = ((date.Month & 0xF0) >> 4) * 10 + (date.Month & 0x0F);
 80017fa:	7c7b      	ldrb	r3, [r7, #17]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4413      	add	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	7c7b      	ldrb	r3, [r7, #17]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4413      	add	r3, r2
 8001814:	b2da      	uxtb	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	701a      	strb	r2, [r3, #0]
  *day = ((date.Date & 0xF0) >> 4) * 10 + (date.Date & 0x0F);
 800181a:	7cbb      	ldrb	r3, [r7, #18]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461a      	mov	r2, r3
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4413      	add	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	7cbb      	ldrb	r3, [r7, #18]
 800182c:	f003 030f 	and.w	r3, r3, #15
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	b2da      	uxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	701a      	strb	r2, [r3, #0]
  *hour = ((time.Hours & 0xF0) >> 4) * 10 + (time.Hours & 0x0F);
 800183a:	7d3b      	ldrb	r3, [r7, #20]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	0092      	lsls	r2, r2, #2
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	7d3b      	ldrb	r3, [r7, #20]
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4413      	add	r3, r2
 8001854:	b2da      	uxtb	r2, r3
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	701a      	strb	r2, [r3, #0]
  *minute = ((time.Minutes & 0xF0) >> 4) * 10 + (time.Minutes & 0x0F);
 800185a:	7d7b      	ldrb	r3, [r7, #21]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	0092      	lsls	r2, r2, #2
 8001864:	4413      	add	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	b2da      	uxtb	r2, r3
 800186a:	7d7b      	ldrb	r3, [r7, #21]
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b2da      	uxtb	r2, r3
 8001876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001878:	701a      	strb	r2, [r3, #0]
  *second = ((time.Seconds & 0xF0) >> 4) * 10 + (time.Seconds & 0x0F);
 800187a:	7dbb      	ldrb	r3, [r7, #22]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	b2db      	uxtb	r3, r3
 8001880:	461a      	mov	r2, r3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	7dbb      	ldrb	r3, [r7, #22]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b2da      	uxtb	r2, r3
 8001896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001898:	701a      	strb	r2, [r3, #0]
}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	; 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002a8 	.word	0x200002a8

080018a8 <setAlarm_A>:


/*
 *
 */
void setAlarm_A(uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b08f      	sub	sp, #60	; 0x3c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	4611      	mov	r1, r2
 80018b4:	461a      	mov	r2, r3
 80018b6:	4623      	mov	r3, r4
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	4603      	mov	r3, r0
 80018bc:	71bb      	strb	r3, [r7, #6]
 80018be:	460b      	mov	r3, r1
 80018c0:	717b      	strb	r3, [r7, #5]
 80018c2:	4613      	mov	r3, r2
 80018c4:	713b      	strb	r3, [r7, #4]
  RTC_AlarmTypeDef alarm = {0};
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	222c      	movs	r2, #44	; 0x2c
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fcd2 	bl	8005278 <memset>

  alarm.AlarmDateWeekDay = ((day/10) << 4) | (day % 10);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	4a40      	ldr	r2, [pc, #256]	; (80019d8 <setAlarm_A+0x130>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	b258      	sxtb	r0, r3
 80018e4:	79fa      	ldrb	r2, [r7, #7]
 80018e6:	4b3c      	ldr	r3, [pc, #240]	; (80019d8 <setAlarm_A+0x130>)
 80018e8:	fba3 1302 	umull	r1, r3, r3, r2
 80018ec:	08d9      	lsrs	r1, r3, #3
 80018ee:	460b      	mov	r3, r1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	b25b      	sxtb	r3, r3
 80018fc:	4303      	orrs	r3, r0
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  alarm.AlarmTime.Hours = ((hour/10) << 4) | (hour % 10);
 8001906:	79bb      	ldrb	r3, [r7, #6]
 8001908:	4a33      	ldr	r2, [pc, #204]	; (80019d8 <setAlarm_A+0x130>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	08db      	lsrs	r3, r3, #3
 8001910:	b2db      	uxtb	r3, r3
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	b258      	sxtb	r0, r3
 8001916:	79ba      	ldrb	r2, [r7, #6]
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <setAlarm_A+0x130>)
 800191a:	fba3 1302 	umull	r1, r3, r3, r2
 800191e:	08d9      	lsrs	r1, r3, #3
 8001920:	460b      	mov	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	b25b      	sxtb	r3, r3
 800192e:	4303      	orrs	r3, r0
 8001930:	b25b      	sxtb	r3, r3
 8001932:	b2db      	uxtb	r3, r3
 8001934:	733b      	strb	r3, [r7, #12]
  alarm.AlarmTime.Minutes = ((minute/10) << 4) | (minute % 10);
 8001936:	797b      	ldrb	r3, [r7, #5]
 8001938:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <setAlarm_A+0x130>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	08db      	lsrs	r3, r3, #3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	b258      	sxtb	r0, r3
 8001946:	797a      	ldrb	r2, [r7, #5]
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <setAlarm_A+0x130>)
 800194a:	fba3 1302 	umull	r1, r3, r3, r2
 800194e:	08d9      	lsrs	r1, r3, #3
 8001950:	460b      	mov	r3, r1
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	b25b      	sxtb	r3, r3
 800195e:	4303      	orrs	r3, r0
 8001960:	b25b      	sxtb	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	737b      	strb	r3, [r7, #13]
  alarm.AlarmTime.Seconds = ((second/10) << 4) | (second % 10);
 8001966:	793b      	ldrb	r3, [r7, #4]
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <setAlarm_A+0x130>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	08db      	lsrs	r3, r3, #3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	b258      	sxtb	r0, r3
 8001976:	793a      	ldrb	r2, [r7, #4]
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <setAlarm_A+0x130>)
 800197a:	fba3 1302 	umull	r1, r3, r3, r2
 800197e:	08d9      	lsrs	r1, r3, #3
 8001980:	460b      	mov	r3, r1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	b25b      	sxtb	r3, r3
 800198e:	4303      	orrs	r3, r0
 8001990:	b25b      	sxtb	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	73bb      	strb	r3, [r7, #14]
  alarm.AlarmTime.SubSeconds = 0x0;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  alarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  alarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  alarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  alarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  alarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  alarm.Alarm = RTC_ALARM_A;
 80019ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RTC_SetAlarm_IT(_rtc_handle, &alarm, RTC_FORMAT) != HAL_OK)
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <setAlarm_A+0x134>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f107 010c 	add.w	r1, r7, #12
 80019bc:	2201      	movs	r2, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 face 	bl	8003f60 <HAL_RTC_SetAlarm_IT>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <setAlarm_A+0x128>
  __ASM volatile ("cpsid i" : : : "memory");
 80019ca:	b672      	cpsid	i
}
 80019cc:	bf00      	nop
  {
    __disable_irq();
    while (1)
    	(void)0;
 80019ce:	e7fe      	b.n	80019ce <setAlarm_A+0x126>
  }
}
 80019d0:	bf00      	nop
 80019d2:	373c      	adds	r7, #60	; 0x3c
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd90      	pop	{r4, r7, pc}
 80019d8:	cccccccd 	.word	0xcccccccd
 80019dc:	200002a8 	.word	0x200002a8

080019e0 <diableAlarm_A>:


/*
 *
 */
void diableAlarm_A(void) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	if(HAL_RTC_DeactivateAlarm(_rtc_handle, RTC_ALARM_A) != HAL_OK) {
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <diableAlarm_A+0x24>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 fbc3 	bl	8004178 <HAL_RTC_DeactivateAlarm>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d002      	beq.n	80019fe <diableAlarm_A+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
		__disable_irq();
		while (1)
			(void)0;
 80019fc:	e7fe      	b.n	80019fc <diableAlarm_A+0x1c>
	}
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002a8 	.word	0x200002a8

08001a08 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <LL_AHB2_GRP1_EnableClock>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b090      	sub	sp, #64	; 0x40
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	2238      	movs	r2, #56	; 0x38
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f003 fbe7 	bl	8005278 <memset>
  if(hrtc->Instance==RTC)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_RTC_MspInit+0x54>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d115      	bne.n	8001ae0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fedd 	bl	8003884 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ad0:	f7ff fd79 	bl	80015c6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ad4:	f7ff ff98 	bl	8001a08 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ad8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001adc:	f7ff ffbc 	bl	8001a58 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3740      	adds	r7, #64	; 0x40
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40002800 	.word	0x40002800

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b096      	sub	sp, #88	; 0x58
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2238      	movs	r2, #56	; 0x38
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fbb3 	bl	8005278 <memset>
  if(huart->Instance==USART2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_UART_MspInit+0x88>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d126      	bne.n	8001b6a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b20:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001b24:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f001 feaa 	bl	8003884 <HAL_RCCEx_PeriphCLKConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b36:	f7ff fd46 	bl	80015c6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b3e:	f7ff ff8b 	bl	8001a58 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7ff ff70 	bl	8001a28 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001b48:	230c      	movs	r3, #12
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b58:	2307      	movs	r3, #7
 8001b5a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b60:	4619      	mov	r1, r3
 8001b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b66:	f000 fa1b 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3758      	adds	r7, #88	; 0x58
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40004400 	.word	0x40004400

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <NMI_Handler+0x4>

08001b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bbe:	f000 f8c7 	bl	8001d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <RTC_Alarm_IRQHandler+0x10>)
 8001bce:	f002 fb2f 	bl	8004230 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200001dc 	.word	0x200001dc

08001bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <_sbrk+0x5c>)
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <_sbrk+0x60>)
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <_sbrk+0x64>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <_sbrk+0x64>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <_sbrk+0x68>)
 8001bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d207      	bcs.n	8001c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c0c:	f003 fafc 	bl	8005208 <__errno>
 8001c10:	4603      	mov	r3, r0
 8001c12:	220c      	movs	r2, #12
 8001c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1a:	e009      	b.n	8001c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <_sbrk+0x64>)
 8001c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20008000 	.word	0x20008000
 8001c3c:	00000400 	.word	0x00000400
 8001c40:	200002ac 	.word	0x200002ac
 8001c44:	200002c8 	.word	0x200002c8

08001c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c48:	480d      	ldr	r0, [pc, #52]	; (8001c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c4c:	f7fe fc6a 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c50:	480c      	ldr	r0, [pc, #48]	; (8001c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c52:	490d      	ldr	r1, [pc, #52]	; (8001c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <LoopForever+0xe>)
  movs r3, #0
 8001c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c58:	e002      	b.n	8001c60 <LoopCopyDataInit>

08001c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c5e:	3304      	adds	r3, #4

08001c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c64:	d3f9      	bcc.n	8001c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c68:	4c0a      	ldr	r4, [pc, #40]	; (8001c94 <LoopForever+0x16>)
  movs r3, #0
 8001c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c6c:	e001      	b.n	8001c72 <LoopFillZerobss>

08001c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c70:	3204      	adds	r2, #4

08001c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c74:	d3fb      	bcc.n	8001c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c76:	f003 facd 	bl	8005214 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c7a:	f7ff faf3 	bl	8001264 <main>

08001c7e <LoopForever>:

LoopForever:
    b LoopForever
 8001c7e:	e7fe      	b.n	8001c7e <LoopForever>
  ldr   r0, =_estack
 8001c80:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001c8c:	08005d14 	.word	0x08005d14
  ldr r2, =_sbss
 8001c90:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001c94:	200002c4 	.word	0x200002c4

08001c98 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 f93a 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cac:	f001 fc0c 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_Init+0x3c>)
 8001cb4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f000 f810 	bl	8001cdc <HAL_InitTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	e001      	b.n	8001ccc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cc8:	f7ff fede 	bl	8001a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000000 	.word	0x20000000

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_InitTick+0x6c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d024      	beq.n	8001d3a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cf0:	f001 fbea 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_InitTick+0x6c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d00:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f93c 	bl	8001f86 <HAL_SYSTICK_Config>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10f      	bne.n	8001d34 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b0f      	cmp	r3, #15
 8001d18:	d809      	bhi.n	8001d2e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d22:	f000 f908 	bl	8001f36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_InitTick+0x70>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e007      	b.n	8001d3e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
 8001d32:	e004      	b.n	8001d3e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
 8001d38:	e001      	b.n	8001d3e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	20000008 	.word	0x20000008

08001d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_IncTick+0x1c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_IncTick+0x20>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <HAL_IncTick+0x20>)
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	200002b0 	.word	0x200002b0

08001d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return uwTick;
 8001d78:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <HAL_GetTick+0x10>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	200002b0 	.word	0x200002b0

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4906      	ldr	r1, [pc, #24]	; (8001e20 <__NVIC_EnableIRQ+0x34>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	; (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	; (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	; 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f00:	f7ff ff90 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff2d 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f44:	f7ff ff44 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68b9      	ldr	r1, [r7, #8]
 8001f4e:	6978      	ldr	r0, [r7, #20]
 8001f50:	f7ff ff92 	bl	8001e78 <NVIC_EncodePriority>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff61 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f62:	bf00      	nop
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff37 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff ffa4 	bl	8001edc <SysTick_Config>
 8001f94:	4603      	mov	r3, r0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	e140      	b.n	8002232 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8132 	beq.w	800222c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d005      	beq.n	8001fe0 <HAL_GPIO_Init+0x40>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d130      	bne.n	8002042 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002016:	2201      	movs	r2, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 0201 	and.w	r2, r3, #1
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b03      	cmp	r3, #3
 800204c:	d017      	beq.n	800207e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	2203      	movs	r2, #3
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d123      	bne.n	80020d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	08da      	lsrs	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3208      	adds	r2, #8
 8002092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	220f      	movs	r2, #15
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43db      	mvns	r3, r3
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	4013      	ands	r3, r2
 80020ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	6939      	ldr	r1, [r7, #16]
 80020ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0203 	and.w	r2, r3, #3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 808c 	beq.w	800222c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <HAL_GPIO_Init+0x2b0>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	089b      	lsrs	r3, r3, #2
 800211a:	3302      	adds	r3, #2
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	2207      	movs	r2, #7
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800213e:	d00d      	beq.n	800215c <HAL_GPIO_Init+0x1bc>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a44      	ldr	r2, [pc, #272]	; (8002254 <HAL_GPIO_Init+0x2b4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <HAL_GPIO_Init+0x1b8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a43      	ldr	r2, [pc, #268]	; (8002258 <HAL_GPIO_Init+0x2b8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d101      	bne.n	8002154 <HAL_GPIO_Init+0x1b4>
 8002150:	2302      	movs	r3, #2
 8002152:	e004      	b.n	800215e <HAL_GPIO_Init+0x1be>
 8002154:	2307      	movs	r3, #7
 8002156:	e002      	b.n	800215e <HAL_GPIO_Init+0x1be>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_GPIO_Init+0x1be>
 800215c:	2300      	movs	r3, #0
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	f002 0203 	and.w	r2, r2, #3
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	4093      	lsls	r3, r2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216e:	4938      	ldr	r1, [pc, #224]	; (8002250 <HAL_GPIO_Init+0x2b0>)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800217c:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_GPIO_Init+0x2bc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a0:	4a2e      	ldr	r2, [pc, #184]	; (800225c <HAL_GPIO_Init+0x2bc>)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_GPIO_Init+0x2bc>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <HAL_GPIO_Init+0x2bc>)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_GPIO_Init+0x2bc>)
 80021d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021d6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80021f6:	4a19      	ldr	r2, [pc, #100]	; (800225c <HAL_GPIO_Init+0x2bc>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <HAL_GPIO_Init+0x2bc>)
 8002200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002204:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_GPIO_Init+0x2bc>)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3301      	adds	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	f47f aeb7 	bne.w	8001fb0 <HAL_GPIO_Init+0x10>
  }
}
 8002242:	bf00      	nop
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	48000400 	.word	0x48000400
 8002258:	48000800 	.word	0x48000800
 800225c:	58000800 	.word	0x58000800

08002260 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800226e:	e0af      	b.n	80023d0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002270:	2201      	movs	r2, #1
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a2 	beq.w	80023ca <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002286:	4a59      	ldr	r2, [pc, #356]	; (80023ec <HAL_GPIO_DeInit+0x18c>)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	2207      	movs	r2, #7
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022ae:	d00d      	beq.n	80022cc <HAL_GPIO_DeInit+0x6c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a4f      	ldr	r2, [pc, #316]	; (80023f0 <HAL_GPIO_DeInit+0x190>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d007      	beq.n	80022c8 <HAL_GPIO_DeInit+0x68>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a4e      	ldr	r2, [pc, #312]	; (80023f4 <HAL_GPIO_DeInit+0x194>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_GPIO_DeInit+0x64>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e004      	b.n	80022ce <HAL_GPIO_DeInit+0x6e>
 80022c4:	2307      	movs	r3, #7
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_DeInit+0x6e>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_GPIO_DeInit+0x6e>
 80022cc:	2300      	movs	r3, #0
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	4093      	lsls	r3, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d136      	bne.n	800234c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80022de:	4b46      	ldr	r3, [pc, #280]	; (80023f8 <HAL_GPIO_DeInit+0x198>)
 80022e0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	4943      	ldr	r1, [pc, #268]	; (80023f8 <HAL_GPIO_DeInit+0x198>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_GPIO_DeInit+0x198>)
 80022f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	493f      	ldr	r1, [pc, #252]	; (80023f8 <HAL_GPIO_DeInit+0x198>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002302:	4b3d      	ldr	r3, [pc, #244]	; (80023f8 <HAL_GPIO_DeInit+0x198>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	493b      	ldr	r1, [pc, #236]	; (80023f8 <HAL_GPIO_DeInit+0x198>)
 800230c:	4013      	ands	r3, r2
 800230e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002310:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <HAL_GPIO_DeInit+0x198>)
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	4937      	ldr	r1, [pc, #220]	; (80023f8 <HAL_GPIO_DeInit+0x198>)
 800231a:	4013      	ands	r3, r2
 800231c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	2207      	movs	r2, #7
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800232e:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <HAL_GPIO_DeInit+0x18c>)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	43da      	mvns	r2, r3
 800233e:	482b      	ldr	r0, [pc, #172]	; (80023ec <HAL_GPIO_DeInit+0x18c>)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	400a      	ands	r2, r1
 8002346:	3302      	adds	r3, #2
 8002348:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2103      	movs	r1, #3
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	08da      	lsrs	r2, r3, #3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3208      	adds	r2, #8
 8002368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	220f      	movs	r2, #15
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	08d2      	lsrs	r2, r2, #3
 8002380:	4019      	ands	r1, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2103      	movs	r1, #3
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	2101      	movs	r1, #1
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2103      	movs	r1, #3
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	401a      	ands	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f47f af49 	bne.w	8002270 <HAL_GPIO_DeInit+0x10>
  }
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	58000800 	.word	0x58000800

080023fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
 8002408:	4613      	mov	r3, r2
 800240a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800240c:	787b      	ldrb	r3, [r7, #1]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002418:	e002      	b.n	8002420 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
	...

0800242c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a03      	ldr	r2, [pc, #12]	; (8002444 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	58000400 	.word	0x58000400

08002448 <LL_PWR_EnableBootC2>:
  *         refer to function @ref LL_PWR_IsActiveFlag_C2BOOTS().
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <LL_PWR_EnableBootC2+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a03      	ldr	r2, [pc, #12]	; (8002460 <LL_PWR_EnableBootC2+0x18>)
 8002452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002456:	60d3      	str	r3, [r2, #12]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	58000400 	.word	0x58000400

08002464 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_PWREx_GetVoltageRange+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	58000400 	.word	0x58000400

0800247c <HAL_PWREx_ReleaseCore>:
  *             This parameter can be one of the following values:
  *             @arg PWR_CORE_CPU2: Release the CPU2 from holding.
  * @retval None
  */
void HAL_PWREx_ReleaseCore(uint32_t CPU)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CORE_HOLD_RELEASE(CPU));

  LL_PWR_EnableBootC2();
 8002484:	f7ff ffe0 	bl	8002448 <LL_PWR_EnableBootC2>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <LL_PWR_IsEnabledBkUpAccess>:
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a0:	d101      	bne.n	80024a6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	58000400 	.word	0x58000400

080024b4 <LL_RCC_HSE_EnableTcxo>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <LL_RCC_HSE_DisableTcxo>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80024f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fe:	d101      	bne.n	8002504 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <LL_RCC_HSE_Enable>:
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	6013      	str	r3, [r2, #0]
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <LL_RCC_HSE_Disable>:
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <LL_RCC_HSE_IsReady>:
{
 8002546:	b480      	push	{r7}
 8002548:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002558:	d101      	bne.n	800255e <LL_RCC_HSE_IsReady+0x18>
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <LL_RCC_HSE_IsReady+0x1a>
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <LL_RCC_HSI_Enable>:
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <LL_RCC_HSI_Disable>:
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <LL_RCC_HSI_IsReady>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b2:	d101      	bne.n	80025b8 <LL_RCC_HSI_IsReady+0x18>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <LL_RCC_HSI_IsReady+0x1a>
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80025c2:	b480      	push	{r7}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80025ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <LL_RCC_LSE_IsReady>:
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80025ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d101      	bne.n	8002602 <LL_RCC_LSE_IsReady+0x18>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <LL_RCC_LSE_IsReady+0x1a>
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <LL_RCC_LSI_Enable>:
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <LL_RCC_LSI_Disable>:
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <LL_RCC_LSI_IsReady>:
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b02      	cmp	r3, #2
 800265e:	d101      	bne.n	8002664 <LL_RCC_LSI_IsReady+0x18>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <LL_RCC_LSI_IsReady+0x1a>
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <LL_RCC_MSI_Enable>:
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6013      	str	r3, [r2, #0]
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <LL_RCC_MSI_Disable>:
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6013      	str	r3, [r2, #0]
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <LL_RCC_MSI_IsReady>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d101      	bne.n	80026bc <LL_RCC_MSI_IsReady+0x16>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <LL_RCC_MSI_IsReady+0x18>
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80026ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d101      	bne.n	80026dc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <LL_RCC_MSI_GetRange>:
{
 80026e6:	b480      	push	{r7}
 80026e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80026ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr

080026fc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002708:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <LL_RCC_SetSysClkSource>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4313      	orrs	r3, r2
 8002756:	608b      	str	r3, [r1, #8]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <LL_RCC_GetSysClkSource>:
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <LL_RCC_SetAHBPrescaler>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <LL_C2_RCC_SetAHBPrescaler>:
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80027a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <LL_RCC_SetAHB3Prescaler>:
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027d8:	f023 020f 	bic.w	r2, r3, #15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	091b      	lsrs	r3, r3, #4
 80027e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <LL_RCC_SetAPB1Prescaler>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80027fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <LL_RCC_SetAPB2Prescaler>:
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800282c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <LL_RCC_GetAHBPrescaler>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800284e:	4618      	mov	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <LL_RCC_GetAHB3Prescaler>:
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <LL_RCC_GetAPB1Prescaler>:
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <LL_RCC_GetAPB2Prescaler>:
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028e6:	d101      	bne.n	80028ec <LL_RCC_PLL_IsReady+0x18>
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <LL_RCC_PLL_IsReady+0x1a>
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr

0800290e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0303 	and.w	r3, r3, #3
}
 8002948:	4618      	mov	r0, r3
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002962:	d101      	bne.n	8002968 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002986:	d101      	bne.n	800298c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr

08002996 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029aa:	d101      	bne.n	80029b0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029cc:	d101      	bne.n	80029d2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80029e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ee:	d101      	bne.n	80029f4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e36f      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a12:	f7ff fea6 	bl	8002762 <LL_RCC_GetSysClkSource>
 8002a16:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a18:	f7ff ff8f 	bl	800293a <LL_RCC_PLL_GetMainSource>
 8002a1c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80c4 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x3e>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	2b0c      	cmp	r3, #12
 8002a36:	d176      	bne.n	8002b26 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d173      	bne.n	8002b26 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e353      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_OscConfig+0x68>
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a66:	e006      	b.n	8002a76 <HAL_RCC_OscConfig+0x76>
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a70:	091b      	lsrs	r3, r3, #4
 8002a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d222      	bcs.n	8002ac0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fd5a 	bl	8003538 <RCC_SetFlashLatencyFromMSIRange>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e331      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fe2b 	bl	8002714 <LL_RCC_MSI_SetCalibTrimming>
 8002abe:	e021      	b.n	8002b04 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aca:	f043 0308 	orr.w	r3, r3, #8
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fe12 	bl	8002714 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fd1f 	bl	8003538 <RCC_SetFlashLatencyFromMSIRange>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e2f6      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b04:	f000 fce0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4aa7      	ldr	r2, [pc, #668]	; (8002da8 <HAL_RCC_OscConfig+0x3a8>)
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002b0e:	4ba7      	ldr	r3, [pc, #668]	; (8002dac <HAL_RCC_OscConfig+0x3ac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f8e2 	bl	8001cdc <HAL_InitTick>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d047      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	e2e5      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d02c      	beq.n	8002b88 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b2e:	f7ff fd9e 	bl	800266e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b32:	f7ff f91f 	bl	8001d74 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b3a:	f7ff f91b 	bl	8001d74 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e2d2      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002b4c:	f7ff fdab 	bl	80026a6 <LL_RCC_MSI_IsReady>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f1      	beq.n	8002b3a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b60:	f043 0308 	orr.w	r3, r3, #8
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fdc7 	bl	8002714 <LL_RCC_MSI_SetCalibTrimming>
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b88:	f7ff fd7f 	bl	800268a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f8f2 	bl	8001d74 <HAL_GetTick>
 8002b90:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b94:	f7ff f8ee 	bl	8001d74 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e2a5      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ba6:	f7ff fd7e 	bl	80026a6 <LL_RCC_MSI_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f1      	bne.n	8002b94 <HAL_RCC_OscConfig+0x194>
 8002bb0:	e000      	b.n	8002bb4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002bb2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d058      	beq.n	8002c72 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b08      	cmp	r3, #8
 8002bc4:	d005      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1d2>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d108      	bne.n	8002bde <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d14b      	bne.n	8002c72 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e289      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x204>
 8002bfe:	f7ff fc86 	bl	800250e <LL_RCC_HSE_Enable>
 8002c02:	e00d      	b.n	8002c20 <HAL_RCC_OscConfig+0x220>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002c0c:	d104      	bne.n	8002c18 <HAL_RCC_OscConfig+0x218>
 8002c0e:	f7ff fc51 	bl	80024b4 <LL_RCC_HSE_EnableTcxo>
 8002c12:	f7ff fc7c 	bl	800250e <LL_RCC_HSE_Enable>
 8002c16:	e003      	b.n	8002c20 <HAL_RCC_OscConfig+0x220>
 8002c18:	f7ff fc87 	bl	800252a <LL_RCC_HSE_Disable>
 8002c1c:	f7ff fc58 	bl	80024d0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d012      	beq.n	8002c4e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff f8a4 	bl	8001d74 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c30:	f7ff f8a0 	bl	8001d74 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e257      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002c42:	f7ff fc80 	bl	8002546 <LL_RCC_HSE_IsReady>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f1      	beq.n	8002c30 <HAL_RCC_OscConfig+0x230>
 8002c4c:	e011      	b.n	8002c72 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7ff f891 	bl	8001d74 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c56:	f7ff f88d 	bl	8001d74 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b64      	cmp	r3, #100	; 0x64
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e244      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002c68:	f7ff fc6d 	bl	8002546 <LL_RCC_HSE_IsReady>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f1      	bne.n	8002c56 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d046      	beq.n	8002d0c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_OscConfig+0x290>
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0c      	cmp	r3, #12
 8002c88:	d10e      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e22a      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fc8e 	bl	80025c2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002ca6:	e031      	b.n	8002d0c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d019      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	f7ff fc5a 	bl	8002568 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7ff f85e 	bl	8001d74 <HAL_GetTick>
 8002cb8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7ff f85a 	bl	8001d74 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e211      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002cce:	f7ff fc67 	bl	80025a0 <LL_RCC_HSI_IsReady>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f1      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fc70 	bl	80025c2 <LL_RCC_HSI_SetCalibTrimming>
 8002ce2:	e013      	b.n	8002d0c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce4:	f7ff fc4e 	bl	8002584 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7ff f844 	bl	8001d74 <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7ff f840 	bl	8001d74 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1f7      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002d02:	f7ff fc4d 	bl	80025a0 <LL_RCC_HSI_IsReady>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f1      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d06e      	beq.n	8002df6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d056      	beq.n	8002dce <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d28:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d031      	beq.n	8002d9c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e1d0      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d013      	beq.n	8002d82 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002d5a:	f7ff fc67 	bl	800262c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d5e:	f7ff f809 	bl	8001d74 <HAL_GetTick>
 8002d62:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7ff f805 	bl	8001d74 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b11      	cmp	r3, #17
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1bc      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002d78:	f7ff fc68 	bl	800264c <LL_RCC_LSI_IsReady>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f1      	bne.n	8002d66 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8a:	f023 0210 	bic.w	r2, r3, #16
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9c:	f7ff fc36 	bl	800260c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7fe ffe8 	bl	8001d74 <HAL_GetTick>
 8002da4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002da6:	e00c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x3c2>
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002db0:	f7fe ffe0 	bl	8001d74 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b11      	cmp	r3, #17
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e197      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002dc2:	f7ff fc43 	bl	800264c <LL_RCC_LSI_IsReady>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f1      	beq.n	8002db0 <HAL_RCC_OscConfig+0x3b0>
 8002dcc:	e013      	b.n	8002df6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	f7ff fc2d 	bl	800262c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe ffcf 	bl	8001d74 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fe ffcb 	bl	8001d74 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b11      	cmp	r3, #17
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e182      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002dec:	f7ff fc2e 	bl	800264c <LL_RCC_LSI_IsReady>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f1      	bne.n	8002dda <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80d8 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e04:	f7ff fb44 	bl	8002490 <LL_PWR_IsEnabledBkUpAccess>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d113      	bne.n	8002e36 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e0e:	f7ff fb0d 	bl	800242c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e12:	f7fe ffaf 	bl	8001d74 <HAL_GetTick>
 8002e16:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1a:	f7fe ffab 	bl	8001d74 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e162      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002e2c:	f7ff fb30 	bl	8002490 <LL_PWR_IsEnabledBkUpAccess>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f1      	beq.n	8002e1a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d07b      	beq.n	8002f36 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	2b85      	cmp	r3, #133	; 0x85
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b05      	cmp	r3, #5
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe ff87 	bl	8001d74 <HAL_GetTick>
 8002e66:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe ff79 	bl	8001d74 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e12e      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002e94:	f7ff fba9 	bl	80025ea <LL_RCC_LSE_IsReady>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0ef      	beq.n	8002e7e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b81      	cmp	r3, #129	; 0x81
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b85      	cmp	r3, #133	; 0x85
 8002eac:	d121      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eae:	f7fe ff61 	bl	8001d74 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eca:	f7fe ff53 	bl	8001d74 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e108      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ec      	beq.n	8002eca <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ef0:	e060      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe ff3f 	bl	8001d74 <HAL_GetTick>
 8002ef6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe ff31 	bl	8001d74 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0e6      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1ec      	bne.n	8002f0e <HAL_RCC_OscConfig+0x50e>
 8002f34:	e03e      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f36:	f7fe ff1d 	bl	8001d74 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe ff0f 	bl	8001d74 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0c4      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ec      	bne.n	8002f52 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f78:	f7fe fefc 	bl	8001d74 <HAL_GetTick>
 8002f7c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe feee 	bl	8001d74 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0a3      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002faa:	f7ff fb1e 	bl	80025ea <LL_RCC_LSE_IsReady>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ef      	bne.n	8002f94 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 8099 	beq.w	80030f0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d06c      	beq.n	800309e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d14b      	bne.n	8003064 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	f7ff fc74 	bl	80028b8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fed0 	bl	8001d74 <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fe fecc 	bl	8001d74 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b0a      	cmp	r3, #10
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e083      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002fea:	f7ff fc73 	bl	80028d4 <LL_RCC_PLL_IsReady>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f1      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	4b40      	ldr	r3, [pc, #256]	; (80030fc <HAL_RCC_OscConfig+0x6fc>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800300c:	0212      	lsls	r2, r2, #8
 800300e:	4311      	orrs	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003020:	430a      	orrs	r2, r1
 8003022:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003026:	4313      	orrs	r3, r2
 8003028:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800302a:	f7ff fc37 	bl	800289c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fe fe99 	bl	8001d74 <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe fe95 	bl	8001d74 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b0a      	cmp	r3, #10
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e04c      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003058:	f7ff fc3c 	bl	80028d4 <LL_RCC_PLL_IsReady>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f1      	beq.n	8003046 <HAL_RCC_OscConfig+0x646>
 8003062:	e045      	b.n	80030f0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	f7ff fc28 	bl	80028b8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fe84 	bl	8001d74 <HAL_GetTick>
 800306c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe fe80 	bl	8001d74 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b0a      	cmp	r3, #10
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e037      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003082:	f7ff fc27 	bl	80028d4 <LL_RCC_PLL_IsReady>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1f1      	bne.n	8003070 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800308c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_RCC_OscConfig+0x700>)
 8003098:	4013      	ands	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
 800309c:	e028      	b.n	80030f0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e023      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	429a      	cmp	r2, r3
 80030be:	d115      	bne.n	80030ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d10e      	bne.n	80030ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	429a      	cmp	r2, r3
 80030dc:	d106      	bne.n	80030ec <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	11c1808c 	.word	0x11c1808c
 8003100:	eefefffc 	.word	0xeefefffc

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e12c      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b98      	ldr	r3, [pc, #608]	; (800337c <HAL_RCC_ClockConfig+0x278>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d91b      	bls.n	800315e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b95      	ldr	r3, [pc, #596]	; (800337c <HAL_RCC_ClockConfig+0x278>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4993      	ldr	r1, [pc, #588]	; (800337c <HAL_RCC_ClockConfig+0x278>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003136:	f7fe fe1d 	bl	8001d74 <HAL_GetTick>
 800313a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313c:	e008      	b.n	8003150 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800313e:	f7fe fe19 	bl	8001d74 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e110      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003150:	4b8a      	ldr	r3, [pc, #552]	; (800337c <HAL_RCC_ClockConfig+0x278>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d1ef      	bne.n	800313e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d016      	beq.n	8003198 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fb02 	bl	8002778 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003174:	f7fe fdfe 	bl	8001d74 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800317c:	f7fe fdfa 	bl	8001d74 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0f1      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800318e:	f7ff fbdf 	bl	8002950 <LL_RCC_IsActiveFlag_HPRE>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f1      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d016      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff faf8 	bl	800279e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031ae:	f7fe fde1 	bl	8001d74 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031b6:	f7fe fddd 	bl	8001d74 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0d4      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80031c8:	f7ff fbd3 	bl	8002972 <LL_RCC_IsActiveFlag_C2HPRE>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f1      	beq.n	80031b6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff faf0 	bl	80027c8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80031e8:	f7fe fdc4 	bl	8001d74 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80031f0:	f7fe fdc0 	bl	8001d74 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0b7      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003202:	f7ff fbc8 	bl	8002996 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f1      	beq.n	80031f0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fae9 	bl	80027f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003222:	f7fe fda7 	bl	8001d74 <HAL_GetTick>
 8003226:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800322a:	f7fe fda3 	bl	8001d74 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e09a      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800323c:	f7ff fbbd 	bl	80029ba <LL_RCC_IsActiveFlag_PPRE1>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f1      	beq.n	800322a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d017      	beq.n	8003282 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fade 	bl	800281a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800325e:	f7fe fd89 	bl	8001d74 <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003264:	e008      	b.n	8003278 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003266:	f7fe fd85 	bl	8001d74 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e07c      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003278:	f7ff fbb0 	bl	80029dc <LL_RCC_IsActiveFlag_PPRE2>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f1      	beq.n	8003266 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d043      	beq.n	8003316 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d106      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003296:	f7ff f956 	bl	8002546 <LL_RCC_HSE_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11e      	bne.n	80032de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e066      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d106      	bne.n	80032ba <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80032ac:	f7ff fb12 	bl	80028d4 <LL_RCC_PLL_IsReady>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d113      	bne.n	80032de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e05b      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80032c2:	f7ff f9f0 	bl	80026a6 <LL_RCC_MSI_IsReady>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d108      	bne.n	80032de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e050      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80032d0:	f7ff f966 	bl	80025a0 <LL_RCC_HSI_IsReady>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e049      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fa2a 	bl	800273c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e8:	f7fe fd44 	bl	8001d74 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fd40 	bl	8001d74 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e035      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	f7ff fa2c 	bl	8002762 <LL_RCC_GetSysClkSource>
 800330a:	4602      	mov	r2, r0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	429a      	cmp	r2, r3
 8003314:	d1ec      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_RCC_ClockConfig+0x278>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d21b      	bcs.n	800335c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003324:	4b15      	ldr	r3, [pc, #84]	; (800337c <HAL_RCC_ClockConfig+0x278>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 0207 	bic.w	r2, r3, #7
 800332c:	4913      	ldr	r1, [pc, #76]	; (800337c <HAL_RCC_ClockConfig+0x278>)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003334:	f7fe fd1e 	bl	8001d74 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	e008      	b.n	800334e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800333c:	f7fe fd1a 	bl	8001d74 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e011      	b.n	8003372 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <HAL_RCC_ClockConfig+0x278>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d1ef      	bne.n	800333c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800335c:	f000 f8b4 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003360:	4603      	mov	r3, r0
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_RCC_ClockConfig+0x27c>)
 8003364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_RCC_ClockConfig+0x280>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe fcb6 	bl	8001cdc <HAL_InitTick>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	58004000 	.word	0x58004000
 8003380:	20000000 	.word	0x20000000
 8003384:	20000008 	.word	0x20000008

08003388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003396:	f7ff f9e4 	bl	8002762 <LL_RCC_GetSysClkSource>
 800339a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339c:	f7ff facd 	bl	800293a <LL_RCC_PLL_GetMainSource>
 80033a0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x2c>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d139      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d136      	bne.n	8003422 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80033b4:	f7ff f987 	bl	80026c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d115      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x62>
 80033be:	f7ff f982 	bl	80026c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x4e>
 80033c8:	f7ff f98d 	bl	80026e6 <LL_RCC_MSI_GetRange>
 80033cc:	4603      	mov	r3, r0
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	e005      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0x5a>
 80033d6:	f7ff f991 	bl	80026fc <LL_RCC_MSI_GetRangeAfterStandby>
 80033da:	4603      	mov	r3, r0
 80033dc:	0a1b      	lsrs	r3, r3, #8
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	4a36      	ldr	r2, [pc, #216]	; (80034bc <HAL_RCC_GetSysClockFreq+0x134>)
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	e014      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x8c>
 80033ea:	f7ff f96c 	bl	80026c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_GetSysClockFreq+0x7a>
 80033f4:	f7ff f977 	bl	80026e6 <LL_RCC_MSI_GetRange>
 80033f8:	4603      	mov	r3, r0
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	e005      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x86>
 8003402:	f7ff f97b 	bl	80026fc <LL_RCC_MSI_GetRangeAfterStandby>
 8003406:	4603      	mov	r3, r0
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	4a2b      	ldr	r2, [pc, #172]	; (80034bc <HAL_RCC_GetSysClockFreq+0x134>)
 8003410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003414:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d115      	bne.n	8003448 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003420:	e012      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d102      	bne.n	800342e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003428:	4b25      	ldr	r3, [pc, #148]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e00c      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d109      	bne.n	8003448 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003434:	f7ff f85a 	bl	80024ec <LL_RCC_HSE_IsEnabledDiv2>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d102      	bne.n	8003444 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e001      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003444:	4b1f      	ldr	r3, [pc, #124]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003446:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003448:	f7ff f98b 	bl	8002762 <LL_RCC_GetSysClkSource>
 800344c:	4603      	mov	r3, r0
 800344e:	2b0c      	cmp	r3, #12
 8003450:	d12f      	bne.n	80034b2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003452:	f7ff fa72 	bl	800293a <LL_RCC_PLL_GetMainSource>
 8003456:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0xde>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d003      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0xe4>
 8003464:	e00d      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003468:	60fb      	str	r3, [r7, #12]
        break;
 800346a:	e00d      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800346c:	f7ff f83e 	bl	80024ec <LL_RCC_HSE_IsEnabledDiv2>
 8003470:	4603      	mov	r3, r0
 8003472:	2b01      	cmp	r3, #1
 8003474:	d102      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003476:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003478:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800347a:	e005      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800347e:	60fb      	str	r3, [r7, #12]
        break;
 8003480:	e002      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	60fb      	str	r3, [r7, #12]
        break;
 8003486:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003488:	f7ff fa35 	bl	80028f6 <LL_RCC_PLL_GetN>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	fb03 f402 	mul.w	r4, r3, r2
 8003494:	f7ff fa46 	bl	8002924 <LL_RCC_PLL_GetDivider>
 8003498:	4603      	mov	r3, r0
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	3301      	adds	r3, #1
 800349e:	fbb4 f4f3 	udiv	r4, r4, r3
 80034a2:	f7ff fa34 	bl	800290e <LL_RCC_PLL_GetR>
 80034a6:	4603      	mov	r3, r0
 80034a8:	0f5b      	lsrs	r3, r3, #29
 80034aa:	3301      	adds	r3, #1
 80034ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80034b0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80034b2:	697b      	ldr	r3, [r7, #20]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd90      	pop	{r4, r7, pc}
 80034bc:	08005c68 	.word	0x08005c68
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	01e84800 	.word	0x01e84800

080034c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b598      	push	{r3, r4, r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80034cc:	f7ff ff5c 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 80034d0:	4604      	mov	r4, r0
 80034d2:	f7ff f9b5 	bl	8002840 <LL_RCC_GetAHBPrescaler>
 80034d6:	4603      	mov	r3, r0
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	4a03      	ldr	r2, [pc, #12]	; (80034ec <HAL_RCC_GetHCLKFreq+0x24>)
 80034e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd98      	pop	{r3, r4, r7, pc}
 80034ec:	08005c08 	.word	0x08005c08

080034f0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f0:	b598      	push	{r3, r4, r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80034f4:	f7ff ffe8 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034f8:	4604      	mov	r4, r0
 80034fa:	f7ff f9b9 	bl	8002870 <LL_RCC_GetAPB1Prescaler>
 80034fe:	4603      	mov	r3, r0
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	4a03      	ldr	r2, [pc, #12]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003508:	fa24 f303 	lsr.w	r3, r4, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd98      	pop	{r3, r4, r7, pc}
 8003510:	08005c48 	.word	0x08005c48

08003514 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003514:	b598      	push	{r3, r4, r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003518:	f7ff ffd6 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800351c:	4604      	mov	r4, r0
 800351e:	f7ff f9b2 	bl	8002886 <LL_RCC_GetAPB2Prescaler>
 8003522:	4603      	mov	r3, r0
 8003524:	0adb      	lsrs	r3, r3, #11
 8003526:	4a03      	ldr	r2, [pc, #12]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd98      	pop	{r3, r4, r7, pc}
 8003534:	08005c48 	.word	0x08005c48

08003538 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	4a10      	ldr	r2, [pc, #64]	; (800358c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800354a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003550:	f7ff f981 	bl	8002856 <LL_RCC_GetAHB3Prescaler>
 8003554:	4603      	mov	r3, r0
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	4a0c      	ldr	r2, [pc, #48]	; (8003590 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800355e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	4a09      	ldr	r2, [pc, #36]	; (8003594 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0c9c      	lsrs	r4, r3, #18
 8003574:	f7fe ff76 	bl	8002464 <HAL_PWREx_GetVoltageRange>
 8003578:	4603      	mov	r3, r0
 800357a:	4619      	mov	r1, r3
 800357c:	4620      	mov	r0, r4
 800357e:	f000 f80b 	bl	8003598 <RCC_SetFlashLatency>
 8003582:	4603      	mov	r3, r0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	08005c68 	.word	0x08005c68
 8003590:	08005c08 	.word	0x08005c08
 8003594:	431bde83 	.word	0x431bde83

08003598 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08e      	sub	sp, #56	; 0x38
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80035a2:	4a3a      	ldr	r2, [pc, #232]	; (800368c <RCC_SetFlashLatency+0xf4>)
 80035a4:	f107 0320 	add.w	r3, r7, #32
 80035a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ac:	6018      	str	r0, [r3, #0]
 80035ae:	3304      	adds	r3, #4
 80035b0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80035b2:	4a37      	ldr	r2, [pc, #220]	; (8003690 <RCC_SetFlashLatency+0xf8>)
 80035b4:	f107 0318 	add.w	r3, r7, #24
 80035b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035bc:	6018      	str	r0, [r3, #0]
 80035be:	3304      	adds	r3, #4
 80035c0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80035c2:	4a34      	ldr	r2, [pc, #208]	; (8003694 <RCC_SetFlashLatency+0xfc>)
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80035ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80035ce:	2300      	movs	r3, #0
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d11b      	bne.n	8003612 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80035da:	2300      	movs	r3, #0
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
 80035de:	e014      	b.n	800360a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	3338      	adds	r3, #56	; 0x38
 80035e6:	443b      	add	r3, r7
 80035e8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80035ec:	461a      	mov	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d807      	bhi.n	8003604 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	3338      	adds	r3, #56	; 0x38
 80035fa:	443b      	add	r3, r7
 80035fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003600:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003602:	e021      	b.n	8003648 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	3301      	adds	r3, #1
 8003608:	633b      	str	r3, [r7, #48]	; 0x30
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2b02      	cmp	r3, #2
 800360e:	d9e7      	bls.n	80035e0 <RCC_SetFlashLatency+0x48>
 8003610:	e01a      	b.n	8003648 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003616:	e014      	b.n	8003642 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	3338      	adds	r3, #56	; 0x38
 800361e:	443b      	add	r3, r7
 8003620:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003624:	461a      	mov	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4293      	cmp	r3, r2
 800362a:	d807      	bhi.n	800363c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	3338      	adds	r3, #56	; 0x38
 8003632:	443b      	add	r3, r7
 8003634:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800363a:	e005      	b.n	8003648 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	3301      	adds	r3, #1
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	2b02      	cmp	r3, #2
 8003646:	d9e7      	bls.n	8003618 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <RCC_SetFlashLatency+0x100>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 0207 	bic.w	r2, r3, #7
 8003650:	4911      	ldr	r1, [pc, #68]	; (8003698 <RCC_SetFlashLatency+0x100>)
 8003652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003658:	f7fe fb8c 	bl	8001d74 <HAL_GetTick>
 800365c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800365e:	e008      	b.n	8003672 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003660:	f7fe fb88 	bl	8001d74 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e007      	b.n	8003682 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <RCC_SetFlashLatency+0x100>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800367c:	429a      	cmp	r2, r3
 800367e:	d1ef      	bne.n	8003660 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3738      	adds	r7, #56	; 0x38
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	08005bec 	.word	0x08005bec
 8003690:	08005bf4 	.word	0x08005bf4
 8003694:	08005bfc 	.word	0x08005bfc
 8003698:	58004000 	.word	0x58004000

0800369c <LL_RCC_LSE_IsReady>:
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d101      	bne.n	80036b4 <LL_RCC_LSE_IsReady+0x18>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <LL_RCC_LSE_IsReady+0x1a>
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <LL_RCC_SetUSARTClockSource>:
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80036c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	43db      	mvns	r3, r3
 80036d4:	401a      	ands	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	b29b      	uxth	r3, r3
 80036da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <LL_RCC_SetI2SClockSource>:
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80036f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr

08003718 <LL_RCC_SetLPUARTClockSource>:
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800372c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <LL_RCC_SetI2CClockSource>:
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800375a:	43db      	mvns	r3, r3
 800375c:	401a      	ands	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr

0800377a <LL_RCC_SetLPTIMClockSource>:
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003786:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	041b      	lsls	r3, r3, #16
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <LL_RCC_SetRNGClockSource>:
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80037b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80037c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr

080037d6 <LL_RCC_SetADCClockSource>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <LL_RCC_SetRTCClockSource>:
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <LL_RCC_GetRTCClockSource>:
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800383a:	4618      	mov	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <LL_RCC_ForceBackupDomainReset>:
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003856:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr
	...

08003884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003890:	2300      	movs	r3, #0
 8003892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003894:	2300      	movs	r3, #0
 8003896:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d058      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80038a4:	f7fe fdc2 	bl	800242c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a8:	f7fe fa64 	bl	8001d74 <HAL_GetTick>
 80038ac:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80038ae:	e009      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b0:	f7fe fa60 	bl	8001d74 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	74fb      	strb	r3, [r7, #19]
        break;
 80038c2:	e006      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80038c4:	4b7b      	ldr	r3, [pc, #492]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d0:	d1ee      	bne.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d13c      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80038d8:	f7ff ffa7 	bl	800382a <LL_RCC_GetRTCClockSource>
 80038dc:	4602      	mov	r2, r0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d00f      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f4:	f7ff ffa5 	bl	8003842 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f8:	f7ff ffb3 	bl	8003862 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d014      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fa30 	bl	8001d74 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003916:	e00b      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003918:	f7fe fa2c 	bl	8001d74 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	f241 3288 	movw	r2, #5000	; 0x1388
 8003926:	4293      	cmp	r3, r2
 8003928:	d902      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	74fb      	strb	r3, [r7, #19]
            break;
 800392e:	e004      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003930:	f7ff feb4 	bl	800369c <LL_RCC_LSE_IsReady>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d1ee      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff5b 	bl	8003800 <LL_RCC_SetRTCClockSource>
 800394a:	e004      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
 8003950:	e001      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fea9 	bl	80036be <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fe9e 	bl	80036be <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff fec0 	bl	8003718 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fee6 	bl	800377a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff fedb 	bl	800377a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fed0 	bl	800377a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff fea9 	bl	8003742 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d004      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fe9e 	bl	8003742 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff fe93 	bl	8003742 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d011      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fe5e 	bl	80036ee <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fea5 	bl	80037ac <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d107      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a78:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d011      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fea3 	bl	80037d6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a98:	d107      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003aaa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	58000400 	.word	0x58000400

08003ab8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d071      	beq.n	8003bae <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd ffd8 	bl	8001a94 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d051      	beq.n	8003b9c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003afa:	22ca      	movs	r2, #202	; 0xca
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24
 8003afe:	4b2e      	ldr	r3, [pc, #184]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b00:	2253      	movs	r2, #83	; 0x53
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fbe3 	bl	80042d0 <RTC_EnterInitMode>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d13f      	bne.n	8003b94 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	4a27      	ldr	r2, [pc, #156]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b1a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b22:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003b24:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6859      	ldr	r1, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	4319      	orrs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	430b      	orrs	r3, r1
 8003b38:	491f      	ldr	r1, [pc, #124]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	491b      	ldr	r1, [pc, #108]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	4915      	ldr	r1, [pc, #84]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fbe6 	bl	8004338 <RTC_ExitInitMode>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10e      	bne.n	8003b94 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003b76:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a19      	ldr	r1, [r3, #32]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4319      	orrs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	490a      	ldr	r1, [pc, #40]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RTC_Init+0x100>)
 8003b96:	22ff      	movs	r2, #255	; 0xff
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
 8003b9a:	e001      	b.n	8003ba0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d103      	bne.n	8003bae <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40002800 	.word	0x40002800

08003bbc <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RTC_SetTime+0x1a>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e088      	b.n	8003ce8 <HAL_RTC_SetTime+0x12c>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2202      	movs	r2, #2
 8003be2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003be6:	4b42      	ldr	r3, [pc, #264]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003be8:	22ca      	movs	r2, #202	; 0xca
 8003bea:	625a      	str	r2, [r3, #36]	; 0x24
 8003bec:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003bee:	2253      	movs	r2, #83	; 0x53
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 fb6c 	bl	80042d0 <RTC_EnterInitMode>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d15e      	bne.n	8003cc0 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003c02:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0e:	d057      	beq.n	8003cc0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d125      	bne.n	8003c62 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003c16:	4b36      	ldr	r3, [pc, #216]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2200      	movs	r2, #0
 8003c26:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fbc1 	bl	80043b4 <RTC_ByteToBcd2>
 8003c32:	4603      	mov	r3, r0
 8003c34:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	785b      	ldrb	r3, [r3, #1]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 fbba 	bl	80043b4 <RTC_ByteToBcd2>
 8003c40:	4603      	mov	r3, r0
 8003c42:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c44:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	789b      	ldrb	r3, [r3, #2]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fbb2 	bl	80043b4 <RTC_ByteToBcd2>
 8003c50:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c52:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	78db      	ldrb	r3, [r3, #3]
 8003c5a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	e017      	b.n	8003c92 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003c62:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2200      	movs	r2, #0
 8003c72:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c80:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c86:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	78db      	ldrb	r3, [r3, #3]
 8003c8c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003c92:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c9a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c9e:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003caa:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003cae:	699a      	ldr	r2, [r3, #24]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	68d9      	ldr	r1, [r3, #12]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	490d      	ldr	r1, [pc, #52]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 fb39 	bl	8004338 <RTC_ExitInitMode>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cca:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RTC_SetTime+0x134>)
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003ce6:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}
 8003cf0:	40002800 	.word	0x40002800

08003cf4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8003d00:	4b2c      	ldr	r3, [pc, #176]	; (8003db4 <HAL_RTC_GetTime+0xc0>)
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003d08:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_RTC_GetTime+0xc0>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d14:	d049      	beq.n	8003daa <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8003d16:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RTC_GetTime+0xc0>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RTC_GetTime+0xc0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003d2a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003d2e:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	0d9b      	lsrs	r3, r3, #22
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d11a      	bne.n	8003daa <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fb3a 	bl	80043f2 <RTC_Bcd2ToByte>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	461a      	mov	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 fb31 	bl	80043f2 <RTC_Bcd2ToByte>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	789b      	ldrb	r3, [r3, #2]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fb28 	bl	80043f2 <RTC_Bcd2ToByte>
 8003da2:	4603      	mov	r3, r0
 8003da4:	461a      	mov	r2, r3
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40002800 	.word	0x40002800

08003db8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b087      	sub	sp, #28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RTC_SetDate+0x1a>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e071      	b.n	8003eb6 <HAL_RTC_SetDate+0xfe>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10e      	bne.n	8003e06 <HAL_RTC_SetDate+0x4e>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	785b      	ldrb	r3, [r3, #1]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	785b      	ldrb	r3, [r3, #1]
 8003df8:	f023 0310 	bic.w	r3, r3, #16
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	330a      	adds	r3, #10
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11c      	bne.n	8003e46 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	78db      	ldrb	r3, [r3, #3]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 facf 	bl	80043b4 <RTC_ByteToBcd2>
 8003e16:	4603      	mov	r3, r0
 8003e18:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fac8 	bl	80043b4 <RTC_ByteToBcd2>
 8003e24:	4603      	mov	r3, r0
 8003e26:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e28:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	789b      	ldrb	r3, [r3, #2]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fac0 	bl	80043b4 <RTC_ByteToBcd2>
 8003e34:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003e36:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e00e      	b.n	8003e64 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	78db      	ldrb	r3, [r3, #3]
 8003e4a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e52:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e58:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e64:	4b16      	ldr	r3, [pc, #88]	; (8003ec0 <HAL_RTC_SetDate+0x108>)
 8003e66:	22ca      	movs	r2, #202	; 0xca
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
 8003e6a:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <HAL_RTC_SetDate+0x108>)
 8003e6c:	2253      	movs	r2, #83	; 0x53
 8003e6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fa2d 	bl	80042d0 <RTC_EnterInitMode>
 8003e76:	4603      	mov	r3, r0
 8003e78:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10b      	bne.n	8003e98 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003e80:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <HAL_RTC_SetDate+0x108>)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fa52 	bl	8004338 <RTC_ExitInitMode>
 8003e94:	4603      	mov	r3, r0
 8003e96:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <HAL_RTC_SetDate+0x108>)
 8003e9a:	22ff      	movs	r2, #255	; 0xff
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40002800 	.word	0x40002800

08003ec4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8003ed0:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <HAL_RTC_GetDate+0x98>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003ed8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003edc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	0c1b      	lsrs	r3, r3, #16
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	0a1b      	lsrs	r3, r3, #8
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	0b5b      	lsrs	r3, r3, #13
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d11a      	bne.n	8003f52 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	78db      	ldrb	r3, [r3, #3]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fa66 	bl	80043f2 <RTC_Bcd2ToByte>
 8003f26:	4603      	mov	r3, r0
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fa5d 	bl	80043f2 <RTC_Bcd2ToByte>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	789b      	ldrb	r3, [r3, #2]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fa54 	bl	80043f2 <RTC_Bcd2ToByte>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40002800 	.word	0x40002800

08003f60 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_RTC_SetAlarm_IT+0x1e>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0f3      	b.n	8004166 <HAL_RTC_SetAlarm_IT+0x206>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003f8e:	4b78      	ldr	r3, [pc, #480]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9e:	d06a      	beq.n	8004076 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d13a      	bne.n	800401c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003fa6:	4b72      	ldr	r3, [pc, #456]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 f9f5 	bl	80043b4 <RTC_ByteToBcd2>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	785b      	ldrb	r3, [r3, #1]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f9ee 	bl	80043b4 <RTC_ByteToBcd2>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003fdc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	789b      	ldrb	r3, [r3, #2]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f9e6 	bl	80043b4 <RTC_ByteToBcd2>
 8003fe8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003fea:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	78db      	ldrb	r3, [r3, #3]
 8003ff2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ff4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f9d8 	bl	80043b4 <RTC_ByteToBcd2>
 8004004:	4603      	mov	r3, r0
 8004006:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004008:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004010:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e02c      	b.n	8004076 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004024:	d00d      	beq.n	8004042 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800402e:	d008      	beq.n	8004042 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004030:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	785b      	ldrb	r3, [r3, #1]
 800404c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800404e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004054:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	78db      	ldrb	r3, [r3, #3]
 800405a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800405c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004064:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004066:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800406c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004076:	4b3e      	ldr	r3, [pc, #248]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004078:	22ca      	movs	r2, #202	; 0xca
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
 800407c:	4b3c      	ldr	r3, [pc, #240]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 800407e:	2253      	movs	r2, #83	; 0x53
 8004080:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d12c      	bne.n	80040e6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800408c:	4b38      	ldr	r3, [pc, #224]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	4a37      	ldr	r2, [pc, #220]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004092:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004096:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004098:	4b35      	ldr	r3, [pc, #212]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 800409a:	2201      	movs	r2, #1
 800409c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a4:	d107      	bne.n	80040b6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4930      	ldr	r1, [pc, #192]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	644b      	str	r3, [r1, #68]	; 0x44
 80040b4:	e006      	b.n	80040c4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80040b6:	4a2e      	ldr	r2, [pc, #184]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80040bc:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80040c4:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d0:	f043 0201 	orr.w	r2, r3, #1
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	4a24      	ldr	r2, [pc, #144]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040de:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80040e2:	6193      	str	r3, [r2, #24]
 80040e4:	e02b      	b.n	800413e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	4a21      	ldr	r2, [pc, #132]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040ec:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80040f0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80040f2:	4b1f      	ldr	r3, [pc, #124]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 80040f4:	2202      	movs	r2, #2
 80040f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040fe:	d107      	bne.n	8004110 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	4919      	ldr	r1, [pc, #100]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 800410a:	4313      	orrs	r3, r2
 800410c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800410e:	e006      	b.n	800411e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004110:	4a17      	ldr	r2, [pc, #92]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004116:	4a16      	ldr	r2, [pc, #88]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800411e:	4a14      	ldr	r2, [pc, #80]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	f043 0202 	orr.w	r2, r3, #2
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004132:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	4a0e      	ldr	r2, [pc, #56]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004138:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800413c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <HAL_RTC_SetAlarm_IT+0x214>)
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004144:	4a0b      	ldr	r2, [pc, #44]	; (8004174 <HAL_RTC_SetAlarm_IT+0x214>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_RTC_SetAlarm_IT+0x210>)
 8004150:	22ff      	movs	r2, #255	; 0xff
 8004152:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}
 800416e:	bf00      	nop
 8004170:	40002800 	.word	0x40002800
 8004174:	58000800 	.word	0x58000800

08004178 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_RTC_DeactivateAlarm+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e048      	b.n	8004222 <HAL_RTC_DeactivateAlarm+0xaa>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041a2:	22ca      	movs	r2, #202	; 0xca
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24
 80041a6:	4b21      	ldr	r3, [pc, #132]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041a8:	2253      	movs	r2, #83	; 0x53
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b2:	d115      	bne.n	80041e0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80041b4:	4b1d      	ldr	r3, [pc, #116]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4a1c      	ldr	r2, [pc, #112]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041be:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c4:	4a19      	ldr	r2, [pc, #100]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	f023 0201 	bic.w	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041da:	2201      	movs	r2, #1
 80041dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80041de:	e014      	b.n	800420a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	4a11      	ldr	r2, [pc, #68]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041e6:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80041ea:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	4a0e      	ldr	r2, [pc, #56]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 80041f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041f6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	f023 0202 	bic.w	r2, r3, #2
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004204:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 8004206:	2202      	movs	r2, #2
 8004208:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800420a:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RTC_DeactivateAlarm+0xb4>)
 800420c:	22ff      	movs	r2, #255	; 0xff
 800420e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	40002800 	.word	0x40002800

08004230 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <HAL_RTC_AlarmIRQHandler+0x50>)
 800423a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	4013      	ands	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004250:	2201      	movs	r2, #1
 8004252:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fc fffa 	bl	800124e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_RTC_AlarmIRQHandler+0x50>)
 8004266:	2202      	movs	r2, #2
 8004268:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8dc 	bl	8004428 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40002800 	.word	0x40002800

08004284 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_RTC_WaitForSynchro+0x48>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <HAL_RTC_WaitForSynchro+0x48>)
 8004292:	f023 0320 	bic.w	r3, r3, #32
 8004296:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004298:	f7fd fd6c 	bl	8001d74 <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800429e:	e009      	b.n	80042b4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042a0:	f7fd fd68 	bl	8001d74 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ae:	d901      	bls.n	80042b4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e006      	b.n	80042c2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_RTC_WaitForSynchro+0x48>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0ef      	beq.n	80042a0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40002800 	.word	0x40002800

080042d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80042dc:	4b15      	ldr	r3, [pc, #84]	; (8004334 <RTC_EnterInitMode+0x64>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d120      	bne.n	800432a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <RTC_EnterInitMode+0x64>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4a11      	ldr	r2, [pc, #68]	; (8004334 <RTC_EnterInitMode+0x64>)
 80042ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80042f4:	f7fd fd3e 	bl	8001d74 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80042fa:	e00d      	b.n	8004318 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80042fc:	f7fd fd3a 	bl	8001d74 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430a:	d905      	bls.n	8004318 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2203      	movs	r2, #3
 8004314:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <RTC_EnterInitMode+0x64>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d102      	bne.n	800432a <RTC_EnterInitMode+0x5a>
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b03      	cmp	r3, #3
 8004328:	d1e8      	bne.n	80042fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800432a:	7bfb      	ldrb	r3, [r7, #15]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40002800 	.word	0x40002800

08004338 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004344:	4b1a      	ldr	r3, [pc, #104]	; (80043b0 <RTC_ExitInitMode+0x78>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <RTC_ExitInitMode+0x78>)
 800434a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004350:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <RTC_ExitInitMode+0x78>)
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10c      	bne.n	8004376 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff91 	bl	8004284 <HAL_RTC_WaitForSynchro>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01e      	beq.n	80043a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2203      	movs	r2, #3
 800436c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e017      	b.n	80043a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004376:	4b0e      	ldr	r3, [pc, #56]	; (80043b0 <RTC_ExitInitMode+0x78>)
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <RTC_ExitInitMode+0x78>)
 800437c:	f023 0320 	bic.w	r3, r3, #32
 8004380:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff7e 	bl	8004284 <HAL_RTC_WaitForSynchro>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <RTC_ExitInitMode+0x78>)
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	4a04      	ldr	r2, [pc, #16]	; (80043b0 <RTC_ExitInitMode+0x78>)
 80043a0:	f043 0320 	orr.w	r3, r3, #32
 80043a4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40002800 	.word	0x40002800

080043b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80043c6:	e005      	b.n	80043d4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3301      	adds	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80043ce:	7afb      	ldrb	r3, [r7, #11]
 80043d0:	3b0a      	subs	r3, #10
 80043d2:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	2b09      	cmp	r3, #9
 80043d8:	d8f6      	bhi.n	80043c8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	b2db      	uxtb	r3, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b085      	sub	sp, #20
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	091b      	lsrs	r3, r3, #4
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	b2da      	uxtb	r2, r3
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	b2db      	uxtb	r3, r3
 800441a:	4413      	add	r3, r2
 800441c:	b2db      	uxtb	r3, r3
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <LL_RCC_GetUSARTClockSource>:
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004446:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	401a      	ands	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	4313      	orrs	r3, r2
}
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <LL_RCC_GetLPUARTClockSource>:
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4013      	ands	r3, r2
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e042      	b.n	8004514 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fd fb23 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2224      	movs	r2, #36	; 0x24
 80044aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f976 	bl	80047b0 <UART_SetConfig>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e022      	b.n	8004514 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fbde 	bl	8004c98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fc64 	bl	8004dda <UART_CheckIdleState>
 8004512:	4603      	mov	r3, r0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	4613      	mov	r3, r2
 800452a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	2b20      	cmp	r3, #32
 8004534:	d173      	bne.n	800461e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_UART_Transmit+0x26>
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e06c      	b.n	8004620 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2221      	movs	r2, #33	; 0x21
 8004552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004556:	f7fd fc0d 	bl	8001d74 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004574:	d108      	bne.n	8004588 <HAL_UART_Transmit+0x6c>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d104      	bne.n	8004588 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	e003      	b.n	8004590 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800458c:	2300      	movs	r3, #0
 800458e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004590:	e02c      	b.n	80045ec <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2180      	movs	r1, #128	; 0x80
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fc6a 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e039      	b.n	8004620 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10b      	bne.n	80045ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	3302      	adds	r3, #2
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	e007      	b.n	80045da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	781a      	ldrb	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	3301      	adds	r3, #1
 80045d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1cc      	bne.n	8004592 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2200      	movs	r2, #0
 8004600:	2140      	movs	r1, #64	; 0x40
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fc37 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e006      	b.n	8004620 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e000      	b.n	8004620 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800461e:	2302      	movs	r3, #2
  }
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463e:	2b20      	cmp	r3, #32
 8004640:	f040 80b1 	bne.w	80047a6 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_UART_Receive+0x28>
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0a9      	b.n	80047a8 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2222      	movs	r2, #34	; 0x22
 8004660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466a:	f7fd fb83 	bl	8001d74 <HAL_GetTick>
 800466e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004688:	d10e      	bne.n	80046a8 <HAL_UART_Receive+0x80>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d105      	bne.n	800469e <HAL_UART_Receive+0x76>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004698:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800469c:	e02d      	b.n	80046fa <HAL_UART_Receive+0xd2>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	22ff      	movs	r2, #255	; 0xff
 80046a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046a6:	e028      	b.n	80046fa <HAL_UART_Receive+0xd2>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10d      	bne.n	80046cc <HAL_UART_Receive+0xa4>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d104      	bne.n	80046c2 <HAL_UART_Receive+0x9a>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	22ff      	movs	r2, #255	; 0xff
 80046bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046c0:	e01b      	b.n	80046fa <HAL_UART_Receive+0xd2>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	227f      	movs	r2, #127	; 0x7f
 80046c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046ca:	e016      	b.n	80046fa <HAL_UART_Receive+0xd2>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d4:	d10d      	bne.n	80046f2 <HAL_UART_Receive+0xca>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <HAL_UART_Receive+0xc0>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	227f      	movs	r2, #127	; 0x7f
 80046e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046e6:	e008      	b.n	80046fa <HAL_UART_Receive+0xd2>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	223f      	movs	r2, #63	; 0x3f
 80046ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046f0:	e003      	b.n	80046fa <HAL_UART_Receive+0xd2>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004700:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470a:	d108      	bne.n	800471e <HAL_UART_Receive+0xf6>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e003      	b.n	8004726 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004726:	e032      	b.n	800478e <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2200      	movs	r2, #0
 8004730:	2120      	movs	r1, #32
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fb9f 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e032      	b.n	80047a8 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10c      	bne.n	8004762 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474e:	b29a      	uxth	r2, r3
 8004750:	8a7b      	ldrh	r3, [r7, #18]
 8004752:	4013      	ands	r3, r2
 8004754:	b29a      	uxth	r2, r3
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3302      	adds	r3, #2
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e00c      	b.n	800477c <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	b2da      	uxtb	r2, r3
 800476a:	8a7b      	ldrh	r3, [r7, #18]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	4013      	ands	r3, r2
 8004770:	b2da      	uxtb	r2, r3
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1c6      	bne.n	8004728 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e000      	b.n	80047a8 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
  }
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b4:	b08c      	sub	sp, #48	; 0x30
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b94      	ldr	r3, [pc, #592]	; (8004a30 <UART_SetConfig+0x280>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a89      	ldr	r2, [pc, #548]	; (8004a34 <UART_SetConfig+0x284>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004818:	4313      	orrs	r3, r2
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004826:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004830:	430b      	orrs	r3, r1
 8004832:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483a:	f023 010f 	bic.w	r1, r3, #15
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a7a      	ldr	r2, [pc, #488]	; (8004a38 <UART_SetConfig+0x288>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d127      	bne.n	80048a4 <UART_SetConfig+0xf4>
 8004854:	2003      	movs	r0, #3
 8004856:	f7ff fdf0 	bl	800443a <LL_RCC_GetUSARTClockSource>
 800485a:	4603      	mov	r3, r0
 800485c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004860:	2b03      	cmp	r3, #3
 8004862:	d81b      	bhi.n	800489c <UART_SetConfig+0xec>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0xbc>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	0800487d 	.word	0x0800487d
 8004870:	0800488d 	.word	0x0800488d
 8004874:	08004885 	.word	0x08004885
 8004878:	08004895 	.word	0x08004895
 800487c:	2301      	movs	r3, #1
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004882:	e080      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004884:	2302      	movs	r3, #2
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488a:	e07c      	b.n	8004986 <UART_SetConfig+0x1d6>
 800488c:	2304      	movs	r3, #4
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004892:	e078      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004894:	2308      	movs	r3, #8
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489a:	e074      	b.n	8004986 <UART_SetConfig+0x1d6>
 800489c:	2310      	movs	r3, #16
 800489e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a2:	e070      	b.n	8004986 <UART_SetConfig+0x1d6>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a64      	ldr	r2, [pc, #400]	; (8004a3c <UART_SetConfig+0x28c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d138      	bne.n	8004920 <UART_SetConfig+0x170>
 80048ae:	200c      	movs	r0, #12
 80048b0:	f7ff fdc3 	bl	800443a <LL_RCC_GetUSARTClockSource>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d82c      	bhi.n	8004918 <UART_SetConfig+0x168>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <UART_SetConfig+0x114>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004919 	.word	0x08004919
 80048cc:	08004919 	.word	0x08004919
 80048d0:	08004919 	.word	0x08004919
 80048d4:	08004909 	.word	0x08004909
 80048d8:	08004919 	.word	0x08004919
 80048dc:	08004919 	.word	0x08004919
 80048e0:	08004919 	.word	0x08004919
 80048e4:	08004901 	.word	0x08004901
 80048e8:	08004919 	.word	0x08004919
 80048ec:	08004919 	.word	0x08004919
 80048f0:	08004919 	.word	0x08004919
 80048f4:	08004911 	.word	0x08004911
 80048f8:	2300      	movs	r3, #0
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fe:	e042      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004900:	2302      	movs	r3, #2
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004906:	e03e      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004908:	2304      	movs	r3, #4
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490e:	e03a      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004910:	2308      	movs	r3, #8
 8004912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004916:	e036      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004918:	2310      	movs	r3, #16
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800491e:	e032      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a43      	ldr	r2, [pc, #268]	; (8004a34 <UART_SetConfig+0x284>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d12a      	bne.n	8004980 <UART_SetConfig+0x1d0>
 800492a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800492e:	f7ff fd96 	bl	800445e <LL_RCC_GetLPUARTClockSource>
 8004932:	4603      	mov	r3, r0
 8004934:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004938:	d01a      	beq.n	8004970 <UART_SetConfig+0x1c0>
 800493a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800493e:	d81b      	bhi.n	8004978 <UART_SetConfig+0x1c8>
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d00c      	beq.n	8004960 <UART_SetConfig+0x1b0>
 8004946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494a:	d815      	bhi.n	8004978 <UART_SetConfig+0x1c8>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <UART_SetConfig+0x1a8>
 8004950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004954:	d008      	beq.n	8004968 <UART_SetConfig+0x1b8>
 8004956:	e00f      	b.n	8004978 <UART_SetConfig+0x1c8>
 8004958:	2300      	movs	r3, #0
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495e:	e012      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004960:	2302      	movs	r3, #2
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004966:	e00e      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004968:	2304      	movs	r3, #4
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496e:	e00a      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004970:	2308      	movs	r3, #8
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004976:	e006      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004978:	2310      	movs	r3, #16
 800497a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800497e:	e002      	b.n	8004986 <UART_SetConfig+0x1d6>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2a      	ldr	r2, [pc, #168]	; (8004a34 <UART_SetConfig+0x284>)
 800498c:	4293      	cmp	r3, r2
 800498e:	f040 80a4 	bne.w	8004ada <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004992:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004996:	2b08      	cmp	r3, #8
 8004998:	d823      	bhi.n	80049e2 <UART_SetConfig+0x232>
 800499a:	a201      	add	r2, pc, #4	; (adr r2, 80049a0 <UART_SetConfig+0x1f0>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049d3 	.word	0x080049d3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049e3 	.word	0x080049e3
 80049bc:	080049e3 	.word	0x080049e3
 80049c0:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c4:	f7fe fd94 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 80049c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ca:	e010      	b.n	80049ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b1c      	ldr	r3, [pc, #112]	; (8004a40 <UART_SetConfig+0x290>)
 80049ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049d0:	e00d      	b.n	80049ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7fe fcd9 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 80049d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049d8:	e009      	b.n	80049ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049e0:	e005      	b.n	80049ee <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8137 	beq.w	8004c64 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <UART_SetConfig+0x294>)
 80049fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4413      	add	r3, r2
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d305      	bcc.n	8004a26 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d910      	bls.n	8004a48 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a2c:	e11a      	b.n	8004c64 <UART_SetConfig+0x4b4>
 8004a2e:	bf00      	nop
 8004a30:	cfff69f3 	.word	0xcfff69f3
 8004a34:	40008000 	.word	0x40008000
 8004a38:	40013800 	.word	0x40013800
 8004a3c:	40004400 	.word	0x40004400
 8004a40:	00f42400 	.word	0x00f42400
 8004a44:	08005ca8 	.word	0x08005ca8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	60fa      	str	r2, [r7, #12]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	4a8e      	ldr	r2, [pc, #568]	; (8004c90 <UART_SetConfig+0x4e0>)
 8004a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a6a:	f7fb fbd9 	bl	8000220 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	020b      	lsls	r3, r1, #8
 8004a80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a84:	0202      	lsls	r2, r0, #8
 8004a86:	6979      	ldr	r1, [r7, #20]
 8004a88:	6849      	ldr	r1, [r1, #4]
 8004a8a:	0849      	lsrs	r1, r1, #1
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	460c      	mov	r4, r1
 8004a90:	4605      	mov	r5, r0
 8004a92:	eb12 0804 	adds.w	r8, r2, r4
 8004a96:	eb43 0905 	adc.w	r9, r3, r5
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	469a      	mov	sl, r3
 8004aa2:	4693      	mov	fp, r2
 8004aa4:	4652      	mov	r2, sl
 8004aa6:	465b      	mov	r3, fp
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	4649      	mov	r1, r9
 8004aac:	f7fb fbb8 	bl	8000220 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004abe:	d308      	bcc.n	8004ad2 <UART_SetConfig+0x322>
 8004ac0:	6a3b      	ldr	r3, [r7, #32]
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d204      	bcs.n	8004ad2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6a3a      	ldr	r2, [r7, #32]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	e0c8      	b.n	8004c64 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ad8:	e0c4      	b.n	8004c64 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae2:	d167      	bne.n	8004bb4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004ae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d828      	bhi.n	8004b3e <UART_SetConfig+0x38e>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <UART_SetConfig+0x344>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b21 	.word	0x08004b21
 8004afc:	08004b29 	.word	0x08004b29
 8004b00:	08004b3f 	.word	0x08004b3f
 8004b04:	08004b2f 	.word	0x08004b2f
 8004b08:	08004b3f 	.word	0x08004b3f
 8004b0c:	08004b3f 	.word	0x08004b3f
 8004b10:	08004b3f 	.word	0x08004b3f
 8004b14:	08004b37 	.word	0x08004b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b18:	f7fe fcea 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8004b1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b1e:	e014      	b.n	8004b4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b20:	f7fe fcf8 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8004b24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b26:	e010      	b.n	8004b4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b28:	4b5a      	ldr	r3, [pc, #360]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b2c:	e00d      	b.n	8004b4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b2e:	f7fe fc2b 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b34:	e009      	b.n	8004b4a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b3c:	e005      	b.n	8004b4a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 8089 	beq.w	8004c64 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	4a4e      	ldr	r2, [pc, #312]	; (8004c90 <UART_SetConfig+0x4e0>)
 8004b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b64:	005a      	lsls	r2, r3, #1
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	441a      	add	r2, r3
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	d916      	bls.n	8004bac <UART_SetConfig+0x3fc>
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b84:	d212      	bcs.n	8004bac <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f023 030f 	bic.w	r3, r3, #15
 8004b8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	085b      	lsrs	r3, r3, #1
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	8bfb      	ldrh	r3, [r7, #30]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	8bfa      	ldrh	r2, [r7, #30]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	e05b      	b.n	8004c64 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bb2:	e057      	b.n	8004c64 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d828      	bhi.n	8004c0e <UART_SetConfig+0x45e>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <UART_SetConfig+0x414>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0f 	.word	0x08004c0f
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c0f 	.word	0x08004c0f
 8004be4:	08004c07 	.word	0x08004c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe fc82 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bee:	e014      	b.n	8004c1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fe fc90 	bl	8003514 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bf6:	e010      	b.n	8004c1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bfc:	e00d      	b.n	8004c1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fe fbc3 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8004c02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c04:	e009      	b.n	8004c1a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c0c:	e005      	b.n	8004c1a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c18:	bf00      	nop
    }

    if (pclk != 0U)
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d021      	beq.n	8004c64 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	4a1a      	ldr	r2, [pc, #104]	; (8004c90 <UART_SetConfig+0x4e0>)
 8004c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	085b      	lsrs	r3, r3, #1
 8004c38:	441a      	add	r2, r3
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	2b0f      	cmp	r3, #15
 8004c48:	d909      	bls.n	8004c5e <UART_SetConfig+0x4ae>
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d205      	bcs.n	8004c5e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	e002      	b.n	8004c64 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2200      	movs	r2, #0
 8004c78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3730      	adds	r7, #48	; 0x30
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8e:	bf00      	nop
 8004c90:	08005ca8 	.word	0x08005ca8
 8004c94:	00f42400 	.word	0x00f42400

08004c98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d10a      	bne.n	8004dae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]
  }
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr

08004dda <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af02      	add	r7, sp, #8
 8004de0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dea:	f7fc ffc3 	bl	8001d74 <HAL_GetTick>
 8004dee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d10e      	bne.n	8004e1c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f832 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e028      	b.n	8004e6e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0304 	and.w	r3, r3, #4
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d10e      	bne.n	8004e48 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f81c 	bl	8004e76 <UART_WaitOnFlagUntilTimeout>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d001      	beq.n	8004e48 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e012      	b.n	8004e6e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b09c      	sub	sp, #112	; 0x70
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e86:	e0a9      	b.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e8e:	f000 80a5 	beq.w	8004fdc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fc ff6f 	bl	8001d74 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d140      	bne.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ebc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ecc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004efa:	64ba      	str	r2, [r7, #72]	; 0x48
 8004efc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e069      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0304 	and.w	r3, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d051      	beq.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f46:	d149      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f70:	637b      	str	r3, [r7, #52]	; 0x34
 8004f72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e6      	bne.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3308      	adds	r3, #8
 8004f8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	613b      	str	r3, [r7, #16]
   return(result);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004fa4:	623a      	str	r2, [r7, #32]
 8004fa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	69f9      	ldr	r1, [r7, #28]
 8004faa:	6a3a      	ldr	r2, [r7, #32]
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e010      	b.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69da      	ldr	r2, [r3, #28]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	f43f af46 	beq.w	8004e88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3770      	adds	r7, #112	; 0x70
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005006:	b480      	push	{r7}
 8005008:	b085      	sub	sp, #20
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_UARTEx_DisableFifoMode+0x16>
 8005018:	2302      	movs	r3, #2
 800501a:	e027      	b.n	800506c <HAL_UARTEx_DisableFifoMode+0x66>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	; 0x24
 8005028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800504a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800508a:	2302      	movs	r3, #2
 800508c:	e02d      	b.n	80050ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2224      	movs	r2, #36	; 0x24
 800509a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f850 	bl	8005170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005106:	2302      	movs	r3, #2
 8005108:	e02d      	b.n	8005166 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2224      	movs	r2, #36	; 0x24
 8005116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f812 	bl	8005170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517c:	2b00      	cmp	r3, #0
 800517e:	d108      	bne.n	8005192 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005190:	e031      	b.n	80051f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005192:	2308      	movs	r3, #8
 8005194:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005196:	2308      	movs	r3, #8
 8005198:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	0e5b      	lsrs	r3, r3, #25
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	0f5b      	lsrs	r3, r3, #29
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051ba:	7bbb      	ldrb	r3, [r7, #14]
 80051bc:	7b3a      	ldrb	r2, [r7, #12]
 80051be:	4910      	ldr	r1, [pc, #64]	; (8005200 <UARTEx_SetNbDataToProcess+0x90>)
 80051c0:	5c8a      	ldrb	r2, [r1, r2]
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051c6:	7b3a      	ldrb	r2, [r7, #12]
 80051c8:	490e      	ldr	r1, [pc, #56]	; (8005204 <UARTEx_SetNbDataToProcess+0x94>)
 80051ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	7b7a      	ldrb	r2, [r7, #13]
 80051dc:	4908      	ldr	r1, [pc, #32]	; (8005200 <UARTEx_SetNbDataToProcess+0x90>)
 80051de:	5c8a      	ldrb	r2, [r1, r2]
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051e4:	7b7a      	ldrb	r2, [r7, #13]
 80051e6:	4907      	ldr	r1, [pc, #28]	; (8005204 <UARTEx_SetNbDataToProcess+0x94>)
 80051e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr
 8005200:	08005cc0 	.word	0x08005cc0
 8005204:	08005cc8 	.word	0x08005cc8

08005208 <__errno>:
 8005208:	4b01      	ldr	r3, [pc, #4]	; (8005210 <__errno+0x8>)
 800520a:	6818      	ldr	r0, [r3, #0]
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000010 	.word	0x20000010

08005214 <__libc_init_array>:
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	4d0d      	ldr	r5, [pc, #52]	; (800524c <__libc_init_array+0x38>)
 8005218:	4c0d      	ldr	r4, [pc, #52]	; (8005250 <__libc_init_array+0x3c>)
 800521a:	1b64      	subs	r4, r4, r5
 800521c:	10a4      	asrs	r4, r4, #2
 800521e:	2600      	movs	r6, #0
 8005220:	42a6      	cmp	r6, r4
 8005222:	d109      	bne.n	8005238 <__libc_init_array+0x24>
 8005224:	4d0b      	ldr	r5, [pc, #44]	; (8005254 <__libc_init_array+0x40>)
 8005226:	4c0c      	ldr	r4, [pc, #48]	; (8005258 <__libc_init_array+0x44>)
 8005228:	f000 fcb4 	bl	8005b94 <_init>
 800522c:	1b64      	subs	r4, r4, r5
 800522e:	10a4      	asrs	r4, r4, #2
 8005230:	2600      	movs	r6, #0
 8005232:	42a6      	cmp	r6, r4
 8005234:	d105      	bne.n	8005242 <__libc_init_array+0x2e>
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	f855 3b04 	ldr.w	r3, [r5], #4
 800523c:	4798      	blx	r3
 800523e:	3601      	adds	r6, #1
 8005240:	e7ee      	b.n	8005220 <__libc_init_array+0xc>
 8005242:	f855 3b04 	ldr.w	r3, [r5], #4
 8005246:	4798      	blx	r3
 8005248:	3601      	adds	r6, #1
 800524a:	e7f2      	b.n	8005232 <__libc_init_array+0x1e>
 800524c:	08005d0c 	.word	0x08005d0c
 8005250:	08005d0c 	.word	0x08005d0c
 8005254:	08005d0c 	.word	0x08005d0c
 8005258:	08005d10 	.word	0x08005d10

0800525c <memcpy>:
 800525c:	440a      	add	r2, r1
 800525e:	4291      	cmp	r1, r2
 8005260:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005264:	d100      	bne.n	8005268 <memcpy+0xc>
 8005266:	4770      	bx	lr
 8005268:	b510      	push	{r4, lr}
 800526a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005272:	4291      	cmp	r1, r2
 8005274:	d1f9      	bne.n	800526a <memcpy+0xe>
 8005276:	bd10      	pop	{r4, pc}

08005278 <memset>:
 8005278:	4402      	add	r2, r0
 800527a:	4603      	mov	r3, r0
 800527c:	4293      	cmp	r3, r2
 800527e:	d100      	bne.n	8005282 <memset+0xa>
 8005280:	4770      	bx	lr
 8005282:	f803 1b01 	strb.w	r1, [r3], #1
 8005286:	e7f9      	b.n	800527c <memset+0x4>

08005288 <sniprintf>:
 8005288:	b40c      	push	{r2, r3}
 800528a:	b530      	push	{r4, r5, lr}
 800528c:	4b17      	ldr	r3, [pc, #92]	; (80052ec <sniprintf+0x64>)
 800528e:	1e0c      	subs	r4, r1, #0
 8005290:	681d      	ldr	r5, [r3, #0]
 8005292:	b09d      	sub	sp, #116	; 0x74
 8005294:	da08      	bge.n	80052a8 <sniprintf+0x20>
 8005296:	238b      	movs	r3, #139	; 0x8b
 8005298:	602b      	str	r3, [r5, #0]
 800529a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800529e:	b01d      	add	sp, #116	; 0x74
 80052a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052a4:	b002      	add	sp, #8
 80052a6:	4770      	bx	lr
 80052a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80052ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052b0:	bf14      	ite	ne
 80052b2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80052b6:	4623      	moveq	r3, r4
 80052b8:	9304      	str	r3, [sp, #16]
 80052ba:	9307      	str	r3, [sp, #28]
 80052bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	9006      	str	r0, [sp, #24]
 80052c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052ca:	ab21      	add	r3, sp, #132	; 0x84
 80052cc:	a902      	add	r1, sp, #8
 80052ce:	4628      	mov	r0, r5
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	f000 f87d 	bl	80053d0 <_svfiprintf_r>
 80052d6:	1c43      	adds	r3, r0, #1
 80052d8:	bfbc      	itt	lt
 80052da:	238b      	movlt	r3, #139	; 0x8b
 80052dc:	602b      	strlt	r3, [r5, #0]
 80052de:	2c00      	cmp	r4, #0
 80052e0:	d0dd      	beq.n	800529e <sniprintf+0x16>
 80052e2:	9b02      	ldr	r3, [sp, #8]
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e7d9      	b.n	800529e <sniprintf+0x16>
 80052ea:	bf00      	nop
 80052ec:	20000010 	.word	0x20000010

080052f0 <strncmp>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	4603      	mov	r3, r0
 80052f4:	b172      	cbz	r2, 8005314 <strncmp+0x24>
 80052f6:	3901      	subs	r1, #1
 80052f8:	1884      	adds	r4, r0, r2
 80052fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80052fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005302:	4290      	cmp	r0, r2
 8005304:	d101      	bne.n	800530a <strncmp+0x1a>
 8005306:	42a3      	cmp	r3, r4
 8005308:	d101      	bne.n	800530e <strncmp+0x1e>
 800530a:	1a80      	subs	r0, r0, r2
 800530c:	bd10      	pop	{r4, pc}
 800530e:	2800      	cmp	r0, #0
 8005310:	d1f3      	bne.n	80052fa <strncmp+0xa>
 8005312:	e7fa      	b.n	800530a <strncmp+0x1a>
 8005314:	4610      	mov	r0, r2
 8005316:	e7f9      	b.n	800530c <strncmp+0x1c>

08005318 <__ssputs_r>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	688e      	ldr	r6, [r1, #8]
 800531e:	429e      	cmp	r6, r3
 8005320:	4682      	mov	sl, r0
 8005322:	460c      	mov	r4, r1
 8005324:	4690      	mov	r8, r2
 8005326:	461f      	mov	r7, r3
 8005328:	d838      	bhi.n	800539c <__ssputs_r+0x84>
 800532a:	898a      	ldrh	r2, [r1, #12]
 800532c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005330:	d032      	beq.n	8005398 <__ssputs_r+0x80>
 8005332:	6825      	ldr	r5, [r4, #0]
 8005334:	6909      	ldr	r1, [r1, #16]
 8005336:	eba5 0901 	sub.w	r9, r5, r1
 800533a:	6965      	ldr	r5, [r4, #20]
 800533c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005340:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005344:	3301      	adds	r3, #1
 8005346:	444b      	add	r3, r9
 8005348:	106d      	asrs	r5, r5, #1
 800534a:	429d      	cmp	r5, r3
 800534c:	bf38      	it	cc
 800534e:	461d      	movcc	r5, r3
 8005350:	0553      	lsls	r3, r2, #21
 8005352:	d531      	bpl.n	80053b8 <__ssputs_r+0xa0>
 8005354:	4629      	mov	r1, r5
 8005356:	f000 fb53 	bl	8005a00 <_malloc_r>
 800535a:	4606      	mov	r6, r0
 800535c:	b950      	cbnz	r0, 8005374 <__ssputs_r+0x5c>
 800535e:	230c      	movs	r3, #12
 8005360:	f8ca 3000 	str.w	r3, [sl]
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005374:	6921      	ldr	r1, [r4, #16]
 8005376:	464a      	mov	r2, r9
 8005378:	f7ff ff70 	bl	800525c <memcpy>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	6126      	str	r6, [r4, #16]
 800538a:	6165      	str	r5, [r4, #20]
 800538c:	444e      	add	r6, r9
 800538e:	eba5 0509 	sub.w	r5, r5, r9
 8005392:	6026      	str	r6, [r4, #0]
 8005394:	60a5      	str	r5, [r4, #8]
 8005396:	463e      	mov	r6, r7
 8005398:	42be      	cmp	r6, r7
 800539a:	d900      	bls.n	800539e <__ssputs_r+0x86>
 800539c:	463e      	mov	r6, r7
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	4632      	mov	r2, r6
 80053a2:	4641      	mov	r1, r8
 80053a4:	f000 faa8 	bl	80058f8 <memmove>
 80053a8:	68a3      	ldr	r3, [r4, #8]
 80053aa:	1b9b      	subs	r3, r3, r6
 80053ac:	60a3      	str	r3, [r4, #8]
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	4433      	add	r3, r6
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	2000      	movs	r0, #0
 80053b6:	e7db      	b.n	8005370 <__ssputs_r+0x58>
 80053b8:	462a      	mov	r2, r5
 80053ba:	f000 fb95 	bl	8005ae8 <_realloc_r>
 80053be:	4606      	mov	r6, r0
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d1e1      	bne.n	8005388 <__ssputs_r+0x70>
 80053c4:	6921      	ldr	r1, [r4, #16]
 80053c6:	4650      	mov	r0, sl
 80053c8:	f000 fab0 	bl	800592c <_free_r>
 80053cc:	e7c7      	b.n	800535e <__ssputs_r+0x46>
	...

080053d0 <_svfiprintf_r>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	4698      	mov	r8, r3
 80053d6:	898b      	ldrh	r3, [r1, #12]
 80053d8:	061b      	lsls	r3, r3, #24
 80053da:	b09d      	sub	sp, #116	; 0x74
 80053dc:	4607      	mov	r7, r0
 80053de:	460d      	mov	r5, r1
 80053e0:	4614      	mov	r4, r2
 80053e2:	d50e      	bpl.n	8005402 <_svfiprintf_r+0x32>
 80053e4:	690b      	ldr	r3, [r1, #16]
 80053e6:	b963      	cbnz	r3, 8005402 <_svfiprintf_r+0x32>
 80053e8:	2140      	movs	r1, #64	; 0x40
 80053ea:	f000 fb09 	bl	8005a00 <_malloc_r>
 80053ee:	6028      	str	r0, [r5, #0]
 80053f0:	6128      	str	r0, [r5, #16]
 80053f2:	b920      	cbnz	r0, 80053fe <_svfiprintf_r+0x2e>
 80053f4:	230c      	movs	r3, #12
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053fc:	e0d1      	b.n	80055a2 <_svfiprintf_r+0x1d2>
 80053fe:	2340      	movs	r3, #64	; 0x40
 8005400:	616b      	str	r3, [r5, #20]
 8005402:	2300      	movs	r3, #0
 8005404:	9309      	str	r3, [sp, #36]	; 0x24
 8005406:	2320      	movs	r3, #32
 8005408:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800540c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005410:	2330      	movs	r3, #48	; 0x30
 8005412:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055bc <_svfiprintf_r+0x1ec>
 8005416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800541a:	f04f 0901 	mov.w	r9, #1
 800541e:	4623      	mov	r3, r4
 8005420:	469a      	mov	sl, r3
 8005422:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005426:	b10a      	cbz	r2, 800542c <_svfiprintf_r+0x5c>
 8005428:	2a25      	cmp	r2, #37	; 0x25
 800542a:	d1f9      	bne.n	8005420 <_svfiprintf_r+0x50>
 800542c:	ebba 0b04 	subs.w	fp, sl, r4
 8005430:	d00b      	beq.n	800544a <_svfiprintf_r+0x7a>
 8005432:	465b      	mov	r3, fp
 8005434:	4622      	mov	r2, r4
 8005436:	4629      	mov	r1, r5
 8005438:	4638      	mov	r0, r7
 800543a:	f7ff ff6d 	bl	8005318 <__ssputs_r>
 800543e:	3001      	adds	r0, #1
 8005440:	f000 80aa 	beq.w	8005598 <_svfiprintf_r+0x1c8>
 8005444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005446:	445a      	add	r2, fp
 8005448:	9209      	str	r2, [sp, #36]	; 0x24
 800544a:	f89a 3000 	ldrb.w	r3, [sl]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f000 80a2 	beq.w	8005598 <_svfiprintf_r+0x1c8>
 8005454:	2300      	movs	r3, #0
 8005456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800545a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800545e:	f10a 0a01 	add.w	sl, sl, #1
 8005462:	9304      	str	r3, [sp, #16]
 8005464:	9307      	str	r3, [sp, #28]
 8005466:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800546a:	931a      	str	r3, [sp, #104]	; 0x68
 800546c:	4654      	mov	r4, sl
 800546e:	2205      	movs	r2, #5
 8005470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005474:	4851      	ldr	r0, [pc, #324]	; (80055bc <_svfiprintf_r+0x1ec>)
 8005476:	f7fa fe83 	bl	8000180 <memchr>
 800547a:	9a04      	ldr	r2, [sp, #16]
 800547c:	b9d8      	cbnz	r0, 80054b6 <_svfiprintf_r+0xe6>
 800547e:	06d0      	lsls	r0, r2, #27
 8005480:	bf44      	itt	mi
 8005482:	2320      	movmi	r3, #32
 8005484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005488:	0711      	lsls	r1, r2, #28
 800548a:	bf44      	itt	mi
 800548c:	232b      	movmi	r3, #43	; 0x2b
 800548e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005492:	f89a 3000 	ldrb.w	r3, [sl]
 8005496:	2b2a      	cmp	r3, #42	; 0x2a
 8005498:	d015      	beq.n	80054c6 <_svfiprintf_r+0xf6>
 800549a:	9a07      	ldr	r2, [sp, #28]
 800549c:	4654      	mov	r4, sl
 800549e:	2000      	movs	r0, #0
 80054a0:	f04f 0c0a 	mov.w	ip, #10
 80054a4:	4621      	mov	r1, r4
 80054a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054aa:	3b30      	subs	r3, #48	; 0x30
 80054ac:	2b09      	cmp	r3, #9
 80054ae:	d94e      	bls.n	800554e <_svfiprintf_r+0x17e>
 80054b0:	b1b0      	cbz	r0, 80054e0 <_svfiprintf_r+0x110>
 80054b2:	9207      	str	r2, [sp, #28]
 80054b4:	e014      	b.n	80054e0 <_svfiprintf_r+0x110>
 80054b6:	eba0 0308 	sub.w	r3, r0, r8
 80054ba:	fa09 f303 	lsl.w	r3, r9, r3
 80054be:	4313      	orrs	r3, r2
 80054c0:	9304      	str	r3, [sp, #16]
 80054c2:	46a2      	mov	sl, r4
 80054c4:	e7d2      	b.n	800546c <_svfiprintf_r+0x9c>
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	1d19      	adds	r1, r3, #4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	9103      	str	r1, [sp, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bfbb      	ittet	lt
 80054d2:	425b      	neglt	r3, r3
 80054d4:	f042 0202 	orrlt.w	r2, r2, #2
 80054d8:	9307      	strge	r3, [sp, #28]
 80054da:	9307      	strlt	r3, [sp, #28]
 80054dc:	bfb8      	it	lt
 80054de:	9204      	strlt	r2, [sp, #16]
 80054e0:	7823      	ldrb	r3, [r4, #0]
 80054e2:	2b2e      	cmp	r3, #46	; 0x2e
 80054e4:	d10c      	bne.n	8005500 <_svfiprintf_r+0x130>
 80054e6:	7863      	ldrb	r3, [r4, #1]
 80054e8:	2b2a      	cmp	r3, #42	; 0x2a
 80054ea:	d135      	bne.n	8005558 <_svfiprintf_r+0x188>
 80054ec:	9b03      	ldr	r3, [sp, #12]
 80054ee:	1d1a      	adds	r2, r3, #4
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	9203      	str	r2, [sp, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bfb8      	it	lt
 80054f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054fc:	3402      	adds	r4, #2
 80054fe:	9305      	str	r3, [sp, #20]
 8005500:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80055c0 <_svfiprintf_r+0x1f0>
 8005504:	7821      	ldrb	r1, [r4, #0]
 8005506:	2203      	movs	r2, #3
 8005508:	4650      	mov	r0, sl
 800550a:	f7fa fe39 	bl	8000180 <memchr>
 800550e:	b140      	cbz	r0, 8005522 <_svfiprintf_r+0x152>
 8005510:	2340      	movs	r3, #64	; 0x40
 8005512:	eba0 000a 	sub.w	r0, r0, sl
 8005516:	fa03 f000 	lsl.w	r0, r3, r0
 800551a:	9b04      	ldr	r3, [sp, #16]
 800551c:	4303      	orrs	r3, r0
 800551e:	3401      	adds	r4, #1
 8005520:	9304      	str	r3, [sp, #16]
 8005522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005526:	4827      	ldr	r0, [pc, #156]	; (80055c4 <_svfiprintf_r+0x1f4>)
 8005528:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800552c:	2206      	movs	r2, #6
 800552e:	f7fa fe27 	bl	8000180 <memchr>
 8005532:	2800      	cmp	r0, #0
 8005534:	d038      	beq.n	80055a8 <_svfiprintf_r+0x1d8>
 8005536:	4b24      	ldr	r3, [pc, #144]	; (80055c8 <_svfiprintf_r+0x1f8>)
 8005538:	bb1b      	cbnz	r3, 8005582 <_svfiprintf_r+0x1b2>
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	3307      	adds	r3, #7
 800553e:	f023 0307 	bic.w	r3, r3, #7
 8005542:	3308      	adds	r3, #8
 8005544:	9303      	str	r3, [sp, #12]
 8005546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005548:	4433      	add	r3, r6
 800554a:	9309      	str	r3, [sp, #36]	; 0x24
 800554c:	e767      	b.n	800541e <_svfiprintf_r+0x4e>
 800554e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005552:	460c      	mov	r4, r1
 8005554:	2001      	movs	r0, #1
 8005556:	e7a5      	b.n	80054a4 <_svfiprintf_r+0xd4>
 8005558:	2300      	movs	r3, #0
 800555a:	3401      	adds	r4, #1
 800555c:	9305      	str	r3, [sp, #20]
 800555e:	4619      	mov	r1, r3
 8005560:	f04f 0c0a 	mov.w	ip, #10
 8005564:	4620      	mov	r0, r4
 8005566:	f810 2b01 	ldrb.w	r2, [r0], #1
 800556a:	3a30      	subs	r2, #48	; 0x30
 800556c:	2a09      	cmp	r2, #9
 800556e:	d903      	bls.n	8005578 <_svfiprintf_r+0x1a8>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0c5      	beq.n	8005500 <_svfiprintf_r+0x130>
 8005574:	9105      	str	r1, [sp, #20]
 8005576:	e7c3      	b.n	8005500 <_svfiprintf_r+0x130>
 8005578:	fb0c 2101 	mla	r1, ip, r1, r2
 800557c:	4604      	mov	r4, r0
 800557e:	2301      	movs	r3, #1
 8005580:	e7f0      	b.n	8005564 <_svfiprintf_r+0x194>
 8005582:	ab03      	add	r3, sp, #12
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	462a      	mov	r2, r5
 8005588:	4b10      	ldr	r3, [pc, #64]	; (80055cc <_svfiprintf_r+0x1fc>)
 800558a:	a904      	add	r1, sp, #16
 800558c:	4638      	mov	r0, r7
 800558e:	f3af 8000 	nop.w
 8005592:	1c42      	adds	r2, r0, #1
 8005594:	4606      	mov	r6, r0
 8005596:	d1d6      	bne.n	8005546 <_svfiprintf_r+0x176>
 8005598:	89ab      	ldrh	r3, [r5, #12]
 800559a:	065b      	lsls	r3, r3, #25
 800559c:	f53f af2c 	bmi.w	80053f8 <_svfiprintf_r+0x28>
 80055a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055a2:	b01d      	add	sp, #116	; 0x74
 80055a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a8:	ab03      	add	r3, sp, #12
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	462a      	mov	r2, r5
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <_svfiprintf_r+0x1fc>)
 80055b0:	a904      	add	r1, sp, #16
 80055b2:	4638      	mov	r0, r7
 80055b4:	f000 f87a 	bl	80056ac <_printf_i>
 80055b8:	e7eb      	b.n	8005592 <_svfiprintf_r+0x1c2>
 80055ba:	bf00      	nop
 80055bc:	08005cd0 	.word	0x08005cd0
 80055c0:	08005cd6 	.word	0x08005cd6
 80055c4:	08005cda 	.word	0x08005cda
 80055c8:	00000000 	.word	0x00000000
 80055cc:	08005319 	.word	0x08005319

080055d0 <_printf_common>:
 80055d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d4:	4616      	mov	r6, r2
 80055d6:	4699      	mov	r9, r3
 80055d8:	688a      	ldr	r2, [r1, #8]
 80055da:	690b      	ldr	r3, [r1, #16]
 80055dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055e0:	4293      	cmp	r3, r2
 80055e2:	bfb8      	it	lt
 80055e4:	4613      	movlt	r3, r2
 80055e6:	6033      	str	r3, [r6, #0]
 80055e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055ec:	4607      	mov	r7, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	b10a      	cbz	r2, 80055f6 <_printf_common+0x26>
 80055f2:	3301      	adds	r3, #1
 80055f4:	6033      	str	r3, [r6, #0]
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	0699      	lsls	r1, r3, #26
 80055fa:	bf42      	ittt	mi
 80055fc:	6833      	ldrmi	r3, [r6, #0]
 80055fe:	3302      	addmi	r3, #2
 8005600:	6033      	strmi	r3, [r6, #0]
 8005602:	6825      	ldr	r5, [r4, #0]
 8005604:	f015 0506 	ands.w	r5, r5, #6
 8005608:	d106      	bne.n	8005618 <_printf_common+0x48>
 800560a:	f104 0a19 	add.w	sl, r4, #25
 800560e:	68e3      	ldr	r3, [r4, #12]
 8005610:	6832      	ldr	r2, [r6, #0]
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	42ab      	cmp	r3, r5
 8005616:	dc26      	bgt.n	8005666 <_printf_common+0x96>
 8005618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800561c:	1e13      	subs	r3, r2, #0
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	bf18      	it	ne
 8005622:	2301      	movne	r3, #1
 8005624:	0692      	lsls	r2, r2, #26
 8005626:	d42b      	bmi.n	8005680 <_printf_common+0xb0>
 8005628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800562c:	4649      	mov	r1, r9
 800562e:	4638      	mov	r0, r7
 8005630:	47c0      	blx	r8
 8005632:	3001      	adds	r0, #1
 8005634:	d01e      	beq.n	8005674 <_printf_common+0xa4>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	68e5      	ldr	r5, [r4, #12]
 800563a:	6832      	ldr	r2, [r6, #0]
 800563c:	f003 0306 	and.w	r3, r3, #6
 8005640:	2b04      	cmp	r3, #4
 8005642:	bf08      	it	eq
 8005644:	1aad      	subeq	r5, r5, r2
 8005646:	68a3      	ldr	r3, [r4, #8]
 8005648:	6922      	ldr	r2, [r4, #16]
 800564a:	bf0c      	ite	eq
 800564c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005650:	2500      	movne	r5, #0
 8005652:	4293      	cmp	r3, r2
 8005654:	bfc4      	itt	gt
 8005656:	1a9b      	subgt	r3, r3, r2
 8005658:	18ed      	addgt	r5, r5, r3
 800565a:	2600      	movs	r6, #0
 800565c:	341a      	adds	r4, #26
 800565e:	42b5      	cmp	r5, r6
 8005660:	d11a      	bne.n	8005698 <_printf_common+0xc8>
 8005662:	2000      	movs	r0, #0
 8005664:	e008      	b.n	8005678 <_printf_common+0xa8>
 8005666:	2301      	movs	r3, #1
 8005668:	4652      	mov	r2, sl
 800566a:	4649      	mov	r1, r9
 800566c:	4638      	mov	r0, r7
 800566e:	47c0      	blx	r8
 8005670:	3001      	adds	r0, #1
 8005672:	d103      	bne.n	800567c <_printf_common+0xac>
 8005674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567c:	3501      	adds	r5, #1
 800567e:	e7c6      	b.n	800560e <_printf_common+0x3e>
 8005680:	18e1      	adds	r1, r4, r3
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	2030      	movs	r0, #48	; 0x30
 8005686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800568a:	4422      	add	r2, r4
 800568c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005694:	3302      	adds	r3, #2
 8005696:	e7c7      	b.n	8005628 <_printf_common+0x58>
 8005698:	2301      	movs	r3, #1
 800569a:	4622      	mov	r2, r4
 800569c:	4649      	mov	r1, r9
 800569e:	4638      	mov	r0, r7
 80056a0:	47c0      	blx	r8
 80056a2:	3001      	adds	r0, #1
 80056a4:	d0e6      	beq.n	8005674 <_printf_common+0xa4>
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7d9      	b.n	800565e <_printf_common+0x8e>
	...

080056ac <_printf_i>:
 80056ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	7e0f      	ldrb	r7, [r1, #24]
 80056b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056b4:	2f78      	cmp	r7, #120	; 0x78
 80056b6:	4691      	mov	r9, r2
 80056b8:	4680      	mov	r8, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	469a      	mov	sl, r3
 80056be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056c2:	d807      	bhi.n	80056d4 <_printf_i+0x28>
 80056c4:	2f62      	cmp	r7, #98	; 0x62
 80056c6:	d80a      	bhi.n	80056de <_printf_i+0x32>
 80056c8:	2f00      	cmp	r7, #0
 80056ca:	f000 80d8 	beq.w	800587e <_printf_i+0x1d2>
 80056ce:	2f58      	cmp	r7, #88	; 0x58
 80056d0:	f000 80a3 	beq.w	800581a <_printf_i+0x16e>
 80056d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056dc:	e03a      	b.n	8005754 <_printf_i+0xa8>
 80056de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056e2:	2b15      	cmp	r3, #21
 80056e4:	d8f6      	bhi.n	80056d4 <_printf_i+0x28>
 80056e6:	a101      	add	r1, pc, #4	; (adr r1, 80056ec <_printf_i+0x40>)
 80056e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005759 	.word	0x08005759
 80056f4:	080056d5 	.word	0x080056d5
 80056f8:	080056d5 	.word	0x080056d5
 80056fc:	080056d5 	.word	0x080056d5
 8005700:	080056d5 	.word	0x080056d5
 8005704:	08005759 	.word	0x08005759
 8005708:	080056d5 	.word	0x080056d5
 800570c:	080056d5 	.word	0x080056d5
 8005710:	080056d5 	.word	0x080056d5
 8005714:	080056d5 	.word	0x080056d5
 8005718:	08005865 	.word	0x08005865
 800571c:	08005789 	.word	0x08005789
 8005720:	08005847 	.word	0x08005847
 8005724:	080056d5 	.word	0x080056d5
 8005728:	080056d5 	.word	0x080056d5
 800572c:	08005887 	.word	0x08005887
 8005730:	080056d5 	.word	0x080056d5
 8005734:	08005789 	.word	0x08005789
 8005738:	080056d5 	.word	0x080056d5
 800573c:	080056d5 	.word	0x080056d5
 8005740:	0800584f 	.word	0x0800584f
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	1d1a      	adds	r2, r3, #4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	602a      	str	r2, [r5, #0]
 800574c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005754:	2301      	movs	r3, #1
 8005756:	e0a3      	b.n	80058a0 <_printf_i+0x1f4>
 8005758:	6820      	ldr	r0, [r4, #0]
 800575a:	6829      	ldr	r1, [r5, #0]
 800575c:	0606      	lsls	r6, r0, #24
 800575e:	f101 0304 	add.w	r3, r1, #4
 8005762:	d50a      	bpl.n	800577a <_printf_i+0xce>
 8005764:	680e      	ldr	r6, [r1, #0]
 8005766:	602b      	str	r3, [r5, #0]
 8005768:	2e00      	cmp	r6, #0
 800576a:	da03      	bge.n	8005774 <_printf_i+0xc8>
 800576c:	232d      	movs	r3, #45	; 0x2d
 800576e:	4276      	negs	r6, r6
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005774:	485e      	ldr	r0, [pc, #376]	; (80058f0 <_printf_i+0x244>)
 8005776:	230a      	movs	r3, #10
 8005778:	e019      	b.n	80057ae <_printf_i+0x102>
 800577a:	680e      	ldr	r6, [r1, #0]
 800577c:	602b      	str	r3, [r5, #0]
 800577e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005782:	bf18      	it	ne
 8005784:	b236      	sxthne	r6, r6
 8005786:	e7ef      	b.n	8005768 <_printf_i+0xbc>
 8005788:	682b      	ldr	r3, [r5, #0]
 800578a:	6820      	ldr	r0, [r4, #0]
 800578c:	1d19      	adds	r1, r3, #4
 800578e:	6029      	str	r1, [r5, #0]
 8005790:	0601      	lsls	r1, r0, #24
 8005792:	d501      	bpl.n	8005798 <_printf_i+0xec>
 8005794:	681e      	ldr	r6, [r3, #0]
 8005796:	e002      	b.n	800579e <_printf_i+0xf2>
 8005798:	0646      	lsls	r6, r0, #25
 800579a:	d5fb      	bpl.n	8005794 <_printf_i+0xe8>
 800579c:	881e      	ldrh	r6, [r3, #0]
 800579e:	4854      	ldr	r0, [pc, #336]	; (80058f0 <_printf_i+0x244>)
 80057a0:	2f6f      	cmp	r7, #111	; 0x6f
 80057a2:	bf0c      	ite	eq
 80057a4:	2308      	moveq	r3, #8
 80057a6:	230a      	movne	r3, #10
 80057a8:	2100      	movs	r1, #0
 80057aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ae:	6865      	ldr	r5, [r4, #4]
 80057b0:	60a5      	str	r5, [r4, #8]
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	bfa2      	ittt	ge
 80057b6:	6821      	ldrge	r1, [r4, #0]
 80057b8:	f021 0104 	bicge.w	r1, r1, #4
 80057bc:	6021      	strge	r1, [r4, #0]
 80057be:	b90e      	cbnz	r6, 80057c4 <_printf_i+0x118>
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	d04d      	beq.n	8005860 <_printf_i+0x1b4>
 80057c4:	4615      	mov	r5, r2
 80057c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80057ca:	fb03 6711 	mls	r7, r3, r1, r6
 80057ce:	5dc7      	ldrb	r7, [r0, r7]
 80057d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057d4:	4637      	mov	r7, r6
 80057d6:	42bb      	cmp	r3, r7
 80057d8:	460e      	mov	r6, r1
 80057da:	d9f4      	bls.n	80057c6 <_printf_i+0x11a>
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d10b      	bne.n	80057f8 <_printf_i+0x14c>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	07de      	lsls	r6, r3, #31
 80057e4:	d508      	bpl.n	80057f8 <_printf_i+0x14c>
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	6861      	ldr	r1, [r4, #4]
 80057ea:	4299      	cmp	r1, r3
 80057ec:	bfde      	ittt	le
 80057ee:	2330      	movle	r3, #48	; 0x30
 80057f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80057f8:	1b52      	subs	r2, r2, r5
 80057fa:	6122      	str	r2, [r4, #16]
 80057fc:	f8cd a000 	str.w	sl, [sp]
 8005800:	464b      	mov	r3, r9
 8005802:	aa03      	add	r2, sp, #12
 8005804:	4621      	mov	r1, r4
 8005806:	4640      	mov	r0, r8
 8005808:	f7ff fee2 	bl	80055d0 <_printf_common>
 800580c:	3001      	adds	r0, #1
 800580e:	d14c      	bne.n	80058aa <_printf_i+0x1fe>
 8005810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005814:	b004      	add	sp, #16
 8005816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581a:	4835      	ldr	r0, [pc, #212]	; (80058f0 <_printf_i+0x244>)
 800581c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005820:	6829      	ldr	r1, [r5, #0]
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	f851 6b04 	ldr.w	r6, [r1], #4
 8005828:	6029      	str	r1, [r5, #0]
 800582a:	061d      	lsls	r5, r3, #24
 800582c:	d514      	bpl.n	8005858 <_printf_i+0x1ac>
 800582e:	07df      	lsls	r7, r3, #31
 8005830:	bf44      	itt	mi
 8005832:	f043 0320 	orrmi.w	r3, r3, #32
 8005836:	6023      	strmi	r3, [r4, #0]
 8005838:	b91e      	cbnz	r6, 8005842 <_printf_i+0x196>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	f023 0320 	bic.w	r3, r3, #32
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	2310      	movs	r3, #16
 8005844:	e7b0      	b.n	80057a8 <_printf_i+0xfc>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	f043 0320 	orr.w	r3, r3, #32
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	2378      	movs	r3, #120	; 0x78
 8005850:	4828      	ldr	r0, [pc, #160]	; (80058f4 <_printf_i+0x248>)
 8005852:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005856:	e7e3      	b.n	8005820 <_printf_i+0x174>
 8005858:	0659      	lsls	r1, r3, #25
 800585a:	bf48      	it	mi
 800585c:	b2b6      	uxthmi	r6, r6
 800585e:	e7e6      	b.n	800582e <_printf_i+0x182>
 8005860:	4615      	mov	r5, r2
 8005862:	e7bb      	b.n	80057dc <_printf_i+0x130>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	6826      	ldr	r6, [r4, #0]
 8005868:	6961      	ldr	r1, [r4, #20]
 800586a:	1d18      	adds	r0, r3, #4
 800586c:	6028      	str	r0, [r5, #0]
 800586e:	0635      	lsls	r5, r6, #24
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	d501      	bpl.n	8005878 <_printf_i+0x1cc>
 8005874:	6019      	str	r1, [r3, #0]
 8005876:	e002      	b.n	800587e <_printf_i+0x1d2>
 8005878:	0670      	lsls	r0, r6, #25
 800587a:	d5fb      	bpl.n	8005874 <_printf_i+0x1c8>
 800587c:	8019      	strh	r1, [r3, #0]
 800587e:	2300      	movs	r3, #0
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	4615      	mov	r5, r2
 8005884:	e7ba      	b.n	80057fc <_printf_i+0x150>
 8005886:	682b      	ldr	r3, [r5, #0]
 8005888:	1d1a      	adds	r2, r3, #4
 800588a:	602a      	str	r2, [r5, #0]
 800588c:	681d      	ldr	r5, [r3, #0]
 800588e:	6862      	ldr	r2, [r4, #4]
 8005890:	2100      	movs	r1, #0
 8005892:	4628      	mov	r0, r5
 8005894:	f7fa fc74 	bl	8000180 <memchr>
 8005898:	b108      	cbz	r0, 800589e <_printf_i+0x1f2>
 800589a:	1b40      	subs	r0, r0, r5
 800589c:	6060      	str	r0, [r4, #4]
 800589e:	6863      	ldr	r3, [r4, #4]
 80058a0:	6123      	str	r3, [r4, #16]
 80058a2:	2300      	movs	r3, #0
 80058a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a8:	e7a8      	b.n	80057fc <_printf_i+0x150>
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	462a      	mov	r2, r5
 80058ae:	4649      	mov	r1, r9
 80058b0:	4640      	mov	r0, r8
 80058b2:	47d0      	blx	sl
 80058b4:	3001      	adds	r0, #1
 80058b6:	d0ab      	beq.n	8005810 <_printf_i+0x164>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	079b      	lsls	r3, r3, #30
 80058bc:	d413      	bmi.n	80058e6 <_printf_i+0x23a>
 80058be:	68e0      	ldr	r0, [r4, #12]
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	4298      	cmp	r0, r3
 80058c4:	bfb8      	it	lt
 80058c6:	4618      	movlt	r0, r3
 80058c8:	e7a4      	b.n	8005814 <_printf_i+0x168>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4632      	mov	r2, r6
 80058ce:	4649      	mov	r1, r9
 80058d0:	4640      	mov	r0, r8
 80058d2:	47d0      	blx	sl
 80058d4:	3001      	adds	r0, #1
 80058d6:	d09b      	beq.n	8005810 <_printf_i+0x164>
 80058d8:	3501      	adds	r5, #1
 80058da:	68e3      	ldr	r3, [r4, #12]
 80058dc:	9903      	ldr	r1, [sp, #12]
 80058de:	1a5b      	subs	r3, r3, r1
 80058e0:	42ab      	cmp	r3, r5
 80058e2:	dcf2      	bgt.n	80058ca <_printf_i+0x21e>
 80058e4:	e7eb      	b.n	80058be <_printf_i+0x212>
 80058e6:	2500      	movs	r5, #0
 80058e8:	f104 0619 	add.w	r6, r4, #25
 80058ec:	e7f5      	b.n	80058da <_printf_i+0x22e>
 80058ee:	bf00      	nop
 80058f0:	08005ce1 	.word	0x08005ce1
 80058f4:	08005cf2 	.word	0x08005cf2

080058f8 <memmove>:
 80058f8:	4288      	cmp	r0, r1
 80058fa:	b510      	push	{r4, lr}
 80058fc:	eb01 0402 	add.w	r4, r1, r2
 8005900:	d902      	bls.n	8005908 <memmove+0x10>
 8005902:	4284      	cmp	r4, r0
 8005904:	4623      	mov	r3, r4
 8005906:	d807      	bhi.n	8005918 <memmove+0x20>
 8005908:	1e43      	subs	r3, r0, #1
 800590a:	42a1      	cmp	r1, r4
 800590c:	d008      	beq.n	8005920 <memmove+0x28>
 800590e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005916:	e7f8      	b.n	800590a <memmove+0x12>
 8005918:	4402      	add	r2, r0
 800591a:	4601      	mov	r1, r0
 800591c:	428a      	cmp	r2, r1
 800591e:	d100      	bne.n	8005922 <memmove+0x2a>
 8005920:	bd10      	pop	{r4, pc}
 8005922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800592a:	e7f7      	b.n	800591c <memmove+0x24>

0800592c <_free_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4605      	mov	r5, r0
 8005930:	2900      	cmp	r1, #0
 8005932:	d041      	beq.n	80059b8 <_free_r+0x8c>
 8005934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005938:	1f0c      	subs	r4, r1, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	bfb8      	it	lt
 800593e:	18e4      	addlt	r4, r4, r3
 8005940:	f000 f912 	bl	8005b68 <__malloc_lock>
 8005944:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <_free_r+0x90>)
 8005946:	6813      	ldr	r3, [r2, #0]
 8005948:	b933      	cbnz	r3, 8005958 <_free_r+0x2c>
 800594a:	6063      	str	r3, [r4, #4]
 800594c:	6014      	str	r4, [r2, #0]
 800594e:	4628      	mov	r0, r5
 8005950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005954:	f000 b90e 	b.w	8005b74 <__malloc_unlock>
 8005958:	42a3      	cmp	r3, r4
 800595a:	d908      	bls.n	800596e <_free_r+0x42>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	1821      	adds	r1, r4, r0
 8005960:	428b      	cmp	r3, r1
 8005962:	bf01      	itttt	eq
 8005964:	6819      	ldreq	r1, [r3, #0]
 8005966:	685b      	ldreq	r3, [r3, #4]
 8005968:	1809      	addeq	r1, r1, r0
 800596a:	6021      	streq	r1, [r4, #0]
 800596c:	e7ed      	b.n	800594a <_free_r+0x1e>
 800596e:	461a      	mov	r2, r3
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	b10b      	cbz	r3, 8005978 <_free_r+0x4c>
 8005974:	42a3      	cmp	r3, r4
 8005976:	d9fa      	bls.n	800596e <_free_r+0x42>
 8005978:	6811      	ldr	r1, [r2, #0]
 800597a:	1850      	adds	r0, r2, r1
 800597c:	42a0      	cmp	r0, r4
 800597e:	d10b      	bne.n	8005998 <_free_r+0x6c>
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	4401      	add	r1, r0
 8005984:	1850      	adds	r0, r2, r1
 8005986:	4283      	cmp	r3, r0
 8005988:	6011      	str	r1, [r2, #0]
 800598a:	d1e0      	bne.n	800594e <_free_r+0x22>
 800598c:	6818      	ldr	r0, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	6053      	str	r3, [r2, #4]
 8005992:	4401      	add	r1, r0
 8005994:	6011      	str	r1, [r2, #0]
 8005996:	e7da      	b.n	800594e <_free_r+0x22>
 8005998:	d902      	bls.n	80059a0 <_free_r+0x74>
 800599a:	230c      	movs	r3, #12
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	e7d6      	b.n	800594e <_free_r+0x22>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	1821      	adds	r1, r4, r0
 80059a4:	428b      	cmp	r3, r1
 80059a6:	bf04      	itt	eq
 80059a8:	6819      	ldreq	r1, [r3, #0]
 80059aa:	685b      	ldreq	r3, [r3, #4]
 80059ac:	6063      	str	r3, [r4, #4]
 80059ae:	bf04      	itt	eq
 80059b0:	1809      	addeq	r1, r1, r0
 80059b2:	6021      	streq	r1, [r4, #0]
 80059b4:	6054      	str	r4, [r2, #4]
 80059b6:	e7ca      	b.n	800594e <_free_r+0x22>
 80059b8:	bd38      	pop	{r3, r4, r5, pc}
 80059ba:	bf00      	nop
 80059bc:	200002b4 	.word	0x200002b4

080059c0 <sbrk_aligned>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	4e0e      	ldr	r6, [pc, #56]	; (80059fc <sbrk_aligned+0x3c>)
 80059c4:	460c      	mov	r4, r1
 80059c6:	6831      	ldr	r1, [r6, #0]
 80059c8:	4605      	mov	r5, r0
 80059ca:	b911      	cbnz	r1, 80059d2 <sbrk_aligned+0x12>
 80059cc:	f000 f8bc 	bl	8005b48 <_sbrk_r>
 80059d0:	6030      	str	r0, [r6, #0]
 80059d2:	4621      	mov	r1, r4
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 f8b7 	bl	8005b48 <_sbrk_r>
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	d00a      	beq.n	80059f4 <sbrk_aligned+0x34>
 80059de:	1cc4      	adds	r4, r0, #3
 80059e0:	f024 0403 	bic.w	r4, r4, #3
 80059e4:	42a0      	cmp	r0, r4
 80059e6:	d007      	beq.n	80059f8 <sbrk_aligned+0x38>
 80059e8:	1a21      	subs	r1, r4, r0
 80059ea:	4628      	mov	r0, r5
 80059ec:	f000 f8ac 	bl	8005b48 <_sbrk_r>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d101      	bne.n	80059f8 <sbrk_aligned+0x38>
 80059f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80059f8:	4620      	mov	r0, r4
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	200002b8 	.word	0x200002b8

08005a00 <_malloc_r>:
 8005a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a04:	1ccd      	adds	r5, r1, #3
 8005a06:	f025 0503 	bic.w	r5, r5, #3
 8005a0a:	3508      	adds	r5, #8
 8005a0c:	2d0c      	cmp	r5, #12
 8005a0e:	bf38      	it	cc
 8005a10:	250c      	movcc	r5, #12
 8005a12:	2d00      	cmp	r5, #0
 8005a14:	4607      	mov	r7, r0
 8005a16:	db01      	blt.n	8005a1c <_malloc_r+0x1c>
 8005a18:	42a9      	cmp	r1, r5
 8005a1a:	d905      	bls.n	8005a28 <_malloc_r+0x28>
 8005a1c:	230c      	movs	r3, #12
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	2600      	movs	r6, #0
 8005a22:	4630      	mov	r0, r6
 8005a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a28:	4e2e      	ldr	r6, [pc, #184]	; (8005ae4 <_malloc_r+0xe4>)
 8005a2a:	f000 f89d 	bl	8005b68 <__malloc_lock>
 8005a2e:	6833      	ldr	r3, [r6, #0]
 8005a30:	461c      	mov	r4, r3
 8005a32:	bb34      	cbnz	r4, 8005a82 <_malloc_r+0x82>
 8005a34:	4629      	mov	r1, r5
 8005a36:	4638      	mov	r0, r7
 8005a38:	f7ff ffc2 	bl	80059c0 <sbrk_aligned>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	4604      	mov	r4, r0
 8005a40:	d14d      	bne.n	8005ade <_malloc_r+0xde>
 8005a42:	6834      	ldr	r4, [r6, #0]
 8005a44:	4626      	mov	r6, r4
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	d140      	bne.n	8005acc <_malloc_r+0xcc>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4638      	mov	r0, r7
 8005a50:	eb04 0803 	add.w	r8, r4, r3
 8005a54:	f000 f878 	bl	8005b48 <_sbrk_r>
 8005a58:	4580      	cmp	r8, r0
 8005a5a:	d13a      	bne.n	8005ad2 <_malloc_r+0xd2>
 8005a5c:	6821      	ldr	r1, [r4, #0]
 8005a5e:	3503      	adds	r5, #3
 8005a60:	1a6d      	subs	r5, r5, r1
 8005a62:	f025 0503 	bic.w	r5, r5, #3
 8005a66:	3508      	adds	r5, #8
 8005a68:	2d0c      	cmp	r5, #12
 8005a6a:	bf38      	it	cc
 8005a6c:	250c      	movcc	r5, #12
 8005a6e:	4629      	mov	r1, r5
 8005a70:	4638      	mov	r0, r7
 8005a72:	f7ff ffa5 	bl	80059c0 <sbrk_aligned>
 8005a76:	3001      	adds	r0, #1
 8005a78:	d02b      	beq.n	8005ad2 <_malloc_r+0xd2>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	442b      	add	r3, r5
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	e00e      	b.n	8005aa0 <_malloc_r+0xa0>
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	1b52      	subs	r2, r2, r5
 8005a86:	d41e      	bmi.n	8005ac6 <_malloc_r+0xc6>
 8005a88:	2a0b      	cmp	r2, #11
 8005a8a:	d916      	bls.n	8005aba <_malloc_r+0xba>
 8005a8c:	1961      	adds	r1, r4, r5
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	6025      	str	r5, [r4, #0]
 8005a92:	bf18      	it	ne
 8005a94:	6059      	strne	r1, [r3, #4]
 8005a96:	6863      	ldr	r3, [r4, #4]
 8005a98:	bf08      	it	eq
 8005a9a:	6031      	streq	r1, [r6, #0]
 8005a9c:	5162      	str	r2, [r4, r5]
 8005a9e:	604b      	str	r3, [r1, #4]
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f104 060b 	add.w	r6, r4, #11
 8005aa6:	f000 f865 	bl	8005b74 <__malloc_unlock>
 8005aaa:	f026 0607 	bic.w	r6, r6, #7
 8005aae:	1d23      	adds	r3, r4, #4
 8005ab0:	1af2      	subs	r2, r6, r3
 8005ab2:	d0b6      	beq.n	8005a22 <_malloc_r+0x22>
 8005ab4:	1b9b      	subs	r3, r3, r6
 8005ab6:	50a3      	str	r3, [r4, r2]
 8005ab8:	e7b3      	b.n	8005a22 <_malloc_r+0x22>
 8005aba:	6862      	ldr	r2, [r4, #4]
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	bf0c      	ite	eq
 8005ac0:	6032      	streq	r2, [r6, #0]
 8005ac2:	605a      	strne	r2, [r3, #4]
 8005ac4:	e7ec      	b.n	8005aa0 <_malloc_r+0xa0>
 8005ac6:	4623      	mov	r3, r4
 8005ac8:	6864      	ldr	r4, [r4, #4]
 8005aca:	e7b2      	b.n	8005a32 <_malloc_r+0x32>
 8005acc:	4634      	mov	r4, r6
 8005ace:	6876      	ldr	r6, [r6, #4]
 8005ad0:	e7b9      	b.n	8005a46 <_malloc_r+0x46>
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	f000 f84c 	bl	8005b74 <__malloc_unlock>
 8005adc:	e7a1      	b.n	8005a22 <_malloc_r+0x22>
 8005ade:	6025      	str	r5, [r4, #0]
 8005ae0:	e7de      	b.n	8005aa0 <_malloc_r+0xa0>
 8005ae2:	bf00      	nop
 8005ae4:	200002b4 	.word	0x200002b4

08005ae8 <_realloc_r>:
 8005ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	4680      	mov	r8, r0
 8005aee:	4614      	mov	r4, r2
 8005af0:	460e      	mov	r6, r1
 8005af2:	b921      	cbnz	r1, 8005afe <_realloc_r+0x16>
 8005af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af8:	4611      	mov	r1, r2
 8005afa:	f7ff bf81 	b.w	8005a00 <_malloc_r>
 8005afe:	b92a      	cbnz	r2, 8005b0c <_realloc_r+0x24>
 8005b00:	f7ff ff14 	bl	800592c <_free_r>
 8005b04:	4625      	mov	r5, r4
 8005b06:	4628      	mov	r0, r5
 8005b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b0c:	f000 f838 	bl	8005b80 <_malloc_usable_size_r>
 8005b10:	4284      	cmp	r4, r0
 8005b12:	4607      	mov	r7, r0
 8005b14:	d802      	bhi.n	8005b1c <_realloc_r+0x34>
 8005b16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b1a:	d812      	bhi.n	8005b42 <_realloc_r+0x5a>
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4640      	mov	r0, r8
 8005b20:	f7ff ff6e 	bl	8005a00 <_malloc_r>
 8005b24:	4605      	mov	r5, r0
 8005b26:	2800      	cmp	r0, #0
 8005b28:	d0ed      	beq.n	8005b06 <_realloc_r+0x1e>
 8005b2a:	42bc      	cmp	r4, r7
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	4631      	mov	r1, r6
 8005b30:	bf28      	it	cs
 8005b32:	463a      	movcs	r2, r7
 8005b34:	f7ff fb92 	bl	800525c <memcpy>
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	f7ff fef6 	bl	800592c <_free_r>
 8005b40:	e7e1      	b.n	8005b06 <_realloc_r+0x1e>
 8005b42:	4635      	mov	r5, r6
 8005b44:	e7df      	b.n	8005b06 <_realloc_r+0x1e>
	...

08005b48 <_sbrk_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	4d06      	ldr	r5, [pc, #24]	; (8005b64 <_sbrk_r+0x1c>)
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f7fc f842 	bl	8001bdc <_sbrk>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_sbrk_r+0x1a>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_sbrk_r+0x1a>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	200002bc 	.word	0x200002bc

08005b68 <__malloc_lock>:
 8005b68:	4801      	ldr	r0, [pc, #4]	; (8005b70 <__malloc_lock+0x8>)
 8005b6a:	f000 b811 	b.w	8005b90 <__retarget_lock_acquire_recursive>
 8005b6e:	bf00      	nop
 8005b70:	200002c0 	.word	0x200002c0

08005b74 <__malloc_unlock>:
 8005b74:	4801      	ldr	r0, [pc, #4]	; (8005b7c <__malloc_unlock+0x8>)
 8005b76:	f000 b80c 	b.w	8005b92 <__retarget_lock_release_recursive>
 8005b7a:	bf00      	nop
 8005b7c:	200002c0 	.word	0x200002c0

08005b80 <_malloc_usable_size_r>:
 8005b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b84:	1f18      	subs	r0, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	bfbc      	itt	lt
 8005b8a:	580b      	ldrlt	r3, [r1, r0]
 8005b8c:	18c0      	addlt	r0, r0, r3
 8005b8e:	4770      	bx	lr

08005b90 <__retarget_lock_acquire_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_release_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <_init>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	bf00      	nop
 8005b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9a:	bc08      	pop	{r3}
 8005b9c:	469e      	mov	lr, r3
 8005b9e:	4770      	bx	lr

08005ba0 <_fini>:
 8005ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba2:	bf00      	nop
 8005ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba6:	bc08      	pop	{r3}
 8005ba8:	469e      	mov	lr, r3
 8005baa:	4770      	bx	lr
